Base Path: /home/ltato/LiteScript_online_playground/playground/js
Main Module: ./online
Out Base Path: /home/ltato/LiteScript_online_playground/playground/js
addMember: 'length' to 'Object'
addMember: 'name' to 'Object'
addMember: 'arguments' to 'Object'
addMember: 'caller' to 'Object'
addMember: 'prototype' to 'Object'
addMember: 'constructor' to 'prototype'
addMember: 'toString' to 'prototype'
addMember: 'toLocaleString' to 'prototype'
addMember: 'valueOf' to 'prototype'
addMember: 'hasOwnProperty' to 'prototype'
addMember: 'isPrototypeOf' to 'prototype'
addMember: 'propertyIsEnumerable' to 'prototype'
addMember: '__defineGetter__' to 'prototype'
addMember: '__lookupGetter__' to 'prototype'
addMember: '__defineSetter__' to 'prototype'
addMember: '__lookupSetter__' to 'prototype'
addMember: 'keys' to 'Object'
addMember: 'create' to 'Object'
addMember: 'defineProperty' to 'Object'
addMember: 'defineProperties' to 'Object'
addMember: 'freeze' to 'Object'
addMember: 'getPrototypeOf' to 'Object'
addMember: 'getOwnPropertyDescriptor' to 'Object'
addMember: 'getOwnPropertyNames' to 'Object'
addMember: 'is' to 'Object'
addMember: 'isExtensible' to 'Object'
addMember: 'isFrozen' to 'Object'
addMember: 'isSealed' to 'Object'
addMember: 'preventExtensions' to 'Object'
addMember: 'seal' to 'Object'
addMember: 'name' to 'constructor'
addMember: 'length' to 'String'
addMember: 'name' to 'String'
addMember: 'arguments' to 'String'
addMember: 'caller' to 'String'
addMember: 'prototype' to 'String'
addMember: 'length' to 'prototype'
addMember: 'constructor' to 'prototype'
addMember: 'valueOf' to 'prototype'
addMember: 'toString' to 'prototype'
addMember: 'charAt' to 'prototype'
addMember: 'charCodeAt' to 'prototype'
addMember: 'concat' to 'prototype'
addMember: 'indexOf' to 'prototype'
addMember: 'lastIndexOf' to 'prototype'
addMember: 'localeCompare' to 'prototype'
addMember: 'match' to 'prototype'
addMember: 'replace' to 'prototype'
addMember: 'search' to 'prototype'
addMember: 'slice' to 'prototype'
addMember: 'split' to 'prototype'
addMember: 'substring' to 'prototype'
addMember: 'substr' to 'prototype'
addMember: 'toLowerCase' to 'prototype'
addMember: 'toLocaleLowerCase' to 'prototype'
addMember: 'toUpperCase' to 'prototype'
addMember: 'toLocaleUpperCase' to 'prototype'
addMember: 'trim' to 'prototype'
addMember: 'trimLeft' to 'prototype'
addMember: 'trimRight' to 'prototype'
addMember: 'link' to 'prototype'
addMember: 'anchor' to 'prototype'
addMember: 'fontcolor' to 'prototype'
addMember: 'fontsize' to 'prototype'
addMember: 'big' to 'prototype'
addMember: 'blink' to 'prototype'
addMember: 'bold' to 'prototype'
addMember: 'fixed' to 'prototype'
addMember: 'italics' to 'prototype'
addMember: 'small' to 'prototype'
addMember: 'strike' to 'prototype'
addMember: 'sub' to 'prototype'
addMember: 'sup' to 'prototype'
addMember: 'fromCharCode' to 'String'
addMember: 'length' to 'Function'
addMember: 'name' to 'Function'
addMember: 'arguments' to 'Function'
addMember: 'caller' to 'Function'
addMember: 'prototype' to 'Function'
addMember: 'length' to 'prototype'
addMember: 'name' to 'prototype'
addMember: 'arguments' to 'prototype'
addMember: 'caller' to 'prototype'
addMember: 'constructor' to 'prototype'
addMember: 'bind' to 'prototype'
addMember: 'toString' to 'prototype'
addMember: 'call' to 'prototype'
addMember: 'apply' to 'prototype'
addMember: 'length' to 'Boolean'
addMember: 'name' to 'Boolean'
addMember: 'arguments' to 'Boolean'
addMember: 'caller' to 'Boolean'
addMember: 'prototype' to 'Boolean'
addMember: 'constructor' to 'prototype'
addMember: 'toString' to 'prototype'
addMember: 'valueOf' to 'prototype'
addMember: 'length' to 'Array'
addMember: 'name' to 'Array'
addMember: 'arguments' to 'Array'
addMember: 'caller' to 'Array'
addMember: 'prototype' to 'Array'
addMember: 'length' to 'prototype'
addMember: 'constructor' to 'prototype'
addMember: 'toString' to 'prototype'
addMember: 'toLocaleString' to 'prototype'
addMember: 'join' to 'prototype'
addMember: 'pop' to 'prototype'
addMember: 'push' to 'prototype'
addMember: 'concat' to 'prototype'
addMember: 'reverse' to 'prototype'
addMember: 'shift' to 'prototype'
addMember: 'unshift' to 'prototype'
addMember: 'slice' to 'prototype'
addMember: 'splice' to 'prototype'
addMember: 'sort' to 'prototype'
addMember: 'filter' to 'prototype'
addMember: 'forEach' to 'prototype'
addMember: 'some' to 'prototype'
addMember: 'every' to 'prototype'
addMember: 'map' to 'prototype'
addMember: 'indexOf' to 'prototype'
addMember: 'lastIndexOf' to 'prototype'
addMember: 'reduce' to 'prototype'
addMember: 'reduceRight' to 'prototype'
addMember: 'isArray' to 'Array'
addMember: 'length' to 'Number'
addMember: 'name' to 'Number'
addMember: 'arguments' to 'Number'
addMember: 'caller' to 'Number'
addMember: 'prototype' to 'Number'
addMember: 'constructor' to 'prototype'
addMember: 'toString' to 'prototype'
addMember: 'toLocaleString' to 'prototype'
addMember: 'valueOf' to 'prototype'
addMember: 'toFixed' to 'prototype'
addMember: 'toExponential' to 'prototype'
addMember: 'toPrecision' to 'prototype'
addMember: 'MAX_VALUE' to 'Number'
addMember: 'MIN_VALUE' to 'Number'
addMember: 'NaN' to 'Number'
addMember: 'NEGATIVE_INFINITY' to 'Number'
addMember: 'POSITIVE_INFINITY' to 'Number'
addMember: 'isFinite' to 'Number'
addMember: 'isNaN' to 'Number'
addMember: 'length' to 'Date'
addMember: 'name' to 'Date'
addMember: 'arguments' to 'Date'
addMember: 'caller' to 'Date'
addMember: 'prototype' to 'Date'
addMember: 'constructor' to 'prototype'
addMember: 'toString' to 'prototype'
addMember: 'toDateString' to 'prototype'
addMember: 'toTimeString' to 'prototype'
addMember: 'toLocaleString' to 'prototype'
addMember: 'toLocaleDateString' to 'prototype'
addMember: 'toLocaleTimeString' to 'prototype'
addMember: 'valueOf' to 'prototype'
addMember: 'getTime' to 'prototype'
addMember: 'getFullYear' to 'prototype'
addMember: 'getUTCFullYear' to 'prototype'
addMember: 'getMonth' to 'prototype'
addMember: 'getUTCMonth' to 'prototype'
addMember: 'getDate' to 'prototype'
addMember: 'getUTCDate' to 'prototype'
addMember: 'getDay' to 'prototype'
addMember: 'getUTCDay' to 'prototype'
addMember: 'getHours' to 'prototype'
addMember: 'getUTCHours' to 'prototype'
addMember: 'getMinutes' to 'prototype'
addMember: 'getUTCMinutes' to 'prototype'
addMember: 'getSeconds' to 'prototype'
addMember: 'getUTCSeconds' to 'prototype'
addMember: 'getMilliseconds' to 'prototype'
addMember: 'getUTCMilliseconds' to 'prototype'
addMember: 'getTimezoneOffset' to 'prototype'
addMember: 'setTime' to 'prototype'
addMember: 'setMilliseconds' to 'prototype'
addMember: 'setUTCMilliseconds' to 'prototype'
addMember: 'setSeconds' to 'prototype'
addMember: 'setUTCSeconds' to 'prototype'
addMember: 'setMinutes' to 'prototype'
addMember: 'setUTCMinutes' to 'prototype'
addMember: 'setHours' to 'prototype'
addMember: 'setUTCHours' to 'prototype'
addMember: 'setDate' to 'prototype'
addMember: 'setUTCDate' to 'prototype'
addMember: 'setMonth' to 'prototype'
addMember: 'setUTCMonth' to 'prototype'
addMember: 'setFullYear' to 'prototype'
addMember: 'setUTCFullYear' to 'prototype'
addMember: 'toGMTString' to 'prototype'
addMember: 'toUTCString' to 'prototype'
addMember: 'getYear' to 'prototype'
addMember: 'setYear' to 'prototype'
addMember: 'toISOString' to 'prototype'
addMember: 'toJSON' to 'prototype'
addMember: 'UTC' to 'Date'
addMember: 'parse' to 'Date'
addMember: 'now' to 'Date'
addMember: 'length' to 'RegExp'
addMember: 'name' to 'RegExp'
addMember: 'arguments' to 'RegExp'
addMember: 'caller' to 'RegExp'
addMember: 'prototype' to 'RegExp'
addMember: 'source' to 'prototype'
addMember: 'global' to 'prototype'
addMember: 'ignoreCase' to 'prototype'
addMember: 'multiline' to 'prototype'
addMember: 'lastIndex' to 'prototype'
addMember: 'constructor' to 'prototype'
addMember: 'exec' to 'prototype'
addMember: 'test' to 'prototype'
addMember: 'toString' to 'prototype'
addMember: 'compile' to 'prototype'
addMember: 'input' to 'RegExp'
addMember: '$_' to 'RegExp'
addMember: '$input' to 'RegExp'
addMember: 'multiline' to 'RegExp'
addMember: '$*' to 'RegExp'
addMember: 'lastMatch' to 'RegExp'
addMember: '$&' to 'RegExp'
addMember: 'lastParen' to 'RegExp'
addMember: '$+' to 'RegExp'
addMember: 'leftContext' to 'RegExp'
addMember: '$`' to 'RegExp'
addMember: 'rightContext' to 'RegExp'
addMember: '$'' to 'RegExp'
addMember: '$1' to 'RegExp'
addMember: '$2' to 'RegExp'
addMember: '$3' to 'RegExp'
addMember: '$4' to 'RegExp'
addMember: '$5' to 'RegExp'
addMember: '$6' to 'RegExp'
addMember: '$7' to 'RegExp'
addMember: '$8' to 'RegExp'
addMember: '$9' to 'RegExp'
addMember: 'parse' to 'JSON'
addMember: 'stringify' to 'JSON'
addMember: 'length' to 'Error'
addMember: 'name' to 'Error'
addMember: 'arguments' to 'Error'
addMember: 'caller' to 'Error'
addMember: 'prototype' to 'Error'
addMember: 'constructor' to 'prototype'
addMember: 'name' to 'prototype'
addMember: 'message' to 'prototype'
addMember: 'toString' to 'prototype'
addMember: 'captureStackTrace' to 'Error'
addMember: 'length' to 'captureStackTrace'
addMember: 'name' to 'captureStackTrace'
addMember: 'arguments' to 'captureStackTrace'
addMember: 'caller' to 'captureStackTrace'
addMember: 'prototype' to 'captureStackTrace'
addMember: 'constructor' to 'prototype'
addMember: 'stackTraceLimit' to 'Error'
addMember: 'stack' to 'prototype'
addMember: 'E' to 'Math'
addMember: 'LN10' to 'Math'
addMember: 'LN2' to 'Math'
addMember: 'LOG2E' to 'Math'
addMember: 'LOG10E' to 'Math'
addMember: 'PI' to 'Math'
addMember: 'SQRT1_2' to 'Math'
addMember: 'SQRT2' to 'Math'
addMember: 'random' to 'Math'
addMember: 'abs' to 'Math'
addMember: 'acos' to 'Math'
addMember: 'asin' to 'Math'
addMember: 'atan' to 'Math'
addMember: 'ceil' to 'Math'
addMember: 'cos' to 'Math'
addMember: 'exp' to 'Math'
addMember: 'floor' to 'Math'
addMember: 'log' to 'Math'
addMember: 'round' to 'Math'
addMember: 'sin' to 'Math'
addMember: 'sqrt' to 'Math'
addMember: 'tan' to 'Math'
addMember: 'atan2' to 'Math'
addMember: 'pow' to 'Math'
addMember: 'max' to 'Math'
addMember: 'min' to 'Math'
addMember: 'imul' to 'Math'
addMember: 'true' to 'Project Root Scope'
addMember: 'false' to 'Project Root Scope'
addMember: 'on' to 'Project Root Scope'
addMember: 'off' to 'Project Root Scope'
addMember: 'undefined' to 'Project Root Scope'
addMember: 'null' to 'Project Root Scope'
addMember: 'debug' to 'Compiler Vars'
addMember: 'inNode' to 'Compiler Vars'
addMember: 'inBrowser' to 'Compiler Vars'

   'Project' imports './online'
[object Object]
addToScope: 'module' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addMember: 'exports' to 'module'
addToScope: 'exports' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addMember: 'filename' to 'module'
   compile: 'online.md'
1 0(COMMENT) Dependencies
2 0(COMMENT) -------------
3 (BLANK)
4 4(CODE) compiler import jQuery, Document
5 (BLANK)
6 4(CODE) compiler import ace
7 (BLANK)
8 4(CODE) compiler import httpGet, require
9 (BLANK)
10 0(COMMENT) Setup Environment
11 0(COMMENT) -----------------
12 (BLANK)
13 0(COMMENT) emulate node's environment, global & 'process'
14 0(COMMENT) for the LiteScript compiler
15 (BLANK)
16 4(CODE) var global = window
17 (BLANK)
18 4(CODE) append to object window
19 8(CODE) properties
20 12(CODE) process:
21 16(CODE) exit:function(code)
22 20(CODE) throw new Error('exit code '+code)
23 (BLANK)
24 0(COMMENT) set compiler log messages to memory
25 (BLANK)
26 4(CODE) import log from '../lib/log'
27 4(CODE) log.options.storeMessages = true
28 (BLANK)
29 4(CODE) declare on Error
30 8(CODE) controled, soft
31 (BLANK)
32 0(COMMENT) import compiler
33 (BLANK)
34 4(CODE) import LiteScript from '../lib/Compiler'
35 (BLANK)
36 (BLANK)
37 0(COMMENT) Page Vars
38 0(COMMENT) ---------
39 (BLANK)
40 4(CODE) var
41 8(CODE) CompareOrig_ed : ace.Editor
42 8(CODE) CompareJs_ed : ace.Editor
43 (BLANK)
44 8(CODE) loadedFname : string
45 (BLANK)
46 8(CODE) compileOptions = {extraComments:true}
47 (BLANK)
48 0(COMMENT) utility String protoype functions
49 0(COMMENT) ----------
50 (BLANK)
51 4(CODE) append to class String
52 8(CODE) shim method startsWith(s:string)
53 11(CODE) return this.substr(0,s.length) is s
54 (BLANK)
55 8(CODE) shim method endsWith(s:string)
56 11(CODE) return this.substr(-s.length) is s
57 (BLANK)
58 0(COMMENT) MAIN
59 0(COMMENT) -----------
60 (BLANK)
61 4(CODE) function OnLine_Main()
62 (BLANK)
63 8(CODE) $("#version").text "v"+LiteScript.version
64 (BLANK)
65 8(CODE) CompareOrig_ed = mkEditor("Compare-Lite")
66 8(CODE) CompareJs_ed = mkEditor("Compare-js")
67 (BLANK)
68 8(CODE) loadSample 'Literate.lite.md'
69 (BLANK)
70 4(CODE) end function
71 (BLANK)
72 (BLANK)
73 4(CODE) function loadSample(fname,callback)
74 (BLANK)
75 8(CODE) loadedFname = fname
76 8(CODE) loadExample fname, function(err,data)
77 12(CODE) if err, return
78 12(CODE) run
79 (BLANK)
80 4(CODE) function run
81 (BLANK)
82 8(CODE) var liteSource = CompareOrig_ed.getValue();
83 (BLANK)
84 8(COMMENT) //clear
85 8(COMMENT) //syncEditors([CompareOrig_ed, CompareJs_ed], false); //un-sync
86 8(COMMENT) //CompareOrig_ed.setValue("");
87 8(CODE) CompareOrig_ed.resize(true);
88 8(COMMENT) //CompareJs_ed.setValue("");
89 8(COMMENT) //CompareJs_ed.resize(true);
90 (BLANK)
91 8(CODE) log.warning.count=0; //clear
92 8(CODE) log.getMessages(); //clear
93 8(COMMENT) // compile LiteScript -> js
94 8(CODE) try
95 12(CODE) var compiled = LiteScript.compile(loadedFname, liteSource, compileOptions);
96 9(CODE) catch e
97 12(CODE) console.log(e.stack);
98 12(CODE) compiled = log.getMessages().join('\n');
99 12(CODE) compiled += '\n'+e.message;
100 12(CODE) if not e.controled, compiled += '\n'+e.stack;
101 12(CODE) log.messages = [];
102 (BLANK)
103 (BLANK)
104 8(CODE) if log.warning.count
105 12(COMMENT) //Show warnings
106 12(CODE) compiled = log.getMessages().join('\n') + compiled;
107 (BLANK)
108 (BLANK)
109 8(CODE) CompareJs_ed.setValue(compiled);
110 (BLANK)
111 8(CODE) var linesLite = CompareOrig_ed.getSession().getLength();
112 8(CODE) var linesJs = CompareJs_ed.getSession().getLength();
113 (BLANK)
114 8(CODE) while (linesLite<linesJs)
115 12(CODE) addLines(' ',CompareOrig_ed);
116 12(CODE) linesLite++;
117 (BLANK)
118 8(CODE) while (linesJs<linesLite)
119 12(CODE) addLines(' ',CompareJs_ed);
120 12(CODE) linesJs++;
121 (BLANK)
122 (BLANK)
123 8(COMMENT) //sync eds
124 8(COMMENT) //syncEditors([CompareOrig_ed, CompareJs_ed]);
125 (BLANK)
126 8(CODE) CompareOrig_ed.clearSelection();
127 8(CODE) CompareJs_ed.clearSelection();
128 (BLANK)
129 8(CODE) CompareOrig_ed.scrollToLine(0);
130 8(CODE) CompareJs_ed.scrollToLine(0);
131 (BLANK)
132 (BLANK)
133 4(CODE) function loadExample(fileName:string, callback)
134 (BLANK)
135 8(COMMENT) //syncEditors([CompareOrig_ed, CompareJs_ed],false);
136 (BLANK)
137 8(CODE) CompareJs_ed.setValue("");
138 (BLANK)
139 8(CODE) CompareOrig_ed.setValue("Loading...");
140 8(CODE) CompareOrig_ed.resize(true);
141 (BLANK)
142 8(CODE) document.getElementById('status').textContent=fileName;
143 (BLANK)
144 8(CODE) $.ajax({
145 (BLANK)
146 12(CODE) url: 'examples/html/'+fileName.replace(/\.lite\.md$/,".html") #hack: github won't serve .md from rawgithub
147 (BLANK)
148 12(CODE) success: function (data:string)
149 (BLANK)
150 20(CODE) data = data.replace('\r',''); // remove CR from windows-edited files
151 (BLANK)
152 20(CODE) CompareOrig_ed.setValue(data);
153 (BLANK)
154 20(CODE) CompareOrig_ed.clearSelection();
155 20(CODE) CompareOrig_ed.scrollToLine(0);
156 (BLANK)
157 20(CODE) if callback, callback(null,data);
158 (BLANK)
159 12(CODE) error: function (jqxhr, textStatus, errorThrown)
160 20(CODE) global declare alert
161 20(CODE) declare valid jqxhr.responseText
162 20(CODE) alert jqxhr.responseText
163 (BLANK)
164 20(CODE) if callback, callback(jqxhr);
165 9(CODE) })
**** START MULTILINE  /*
180 (BLANK)
181 4(CODE) function mkEditor(divName) returns ace.Editor
182 (BLANK)
183 8(CODE) var editor = ace.edit(divName);
184 8(CODE) editor.setTheme("ace/theme/monokai");
185 8(CODE) editor.setShowPrintMargin(false);
186 8(CODE) editor.setFontSize(16);
187 (BLANK)
188 8(CODE) var session = editor.getSession();
189 8(CODE) session.setUseWorker(false);
190 8(CODE) session.setMode("ace/mode/javascript");
191 8(CODE) return editor;
192 (BLANK)
193 (BLANK)
194 4(CODE) function addLines(lineArray, ed:ace.Editor)
195 (BLANK)
196 12(CODE) if no lineArray, return;
197 (BLANK)
198 12(CODE) if  type of lineArray is 'string'
199 16(CODE) var a=[];
200 16(CODE) a[0]=lineArray;
201 16(CODE) lineArray=a;
202 (BLANK)
203 (BLANK)
204 12(COMMENT) //console.log(lineArray);
205 12(CODE) ed.session.doc.insertLines(ed.session.doc.getLength()-1, lineArray);
206 12(CODE) ed.resize(true);
207 (BLANK)
208 (BLANK)
209 4(CODE)     function syncEditors(aceEditors: ace.Editor array, onOff)
210 (BLANK)
211 0(COMMENT) Sync side-by-side ace editors scrolling
212 0(COMMENT) from http://codepen.io/ByScripts/pen/fzucK
213 (BLANK)
214 8(CODE) for n=0 while n<aceEditors.length
215 12(CODE) var session1 = aceEditors[n].session;
216 12(CODE) if onOff is off //disconnect
217 16(CODE) session1.removeAllListeners('changeScrollTop');
218 16(CODE) session1.removeAllListeners('changeScrollLeft');
219 (BLANK)
220 12(CODE) else  //connect
221 (BLANK)
222 16(CODE) var session2 = aceEditors[n is aceEditors.length-1 ? 0 else n+1].session;
223 (BLANK)
224 16(CODE) session1.on 'changeScrollTop',
225 18(CODE) function(scroll)
226 20(CODE) session2.setScrollTop(parseInt(scroll) or 0)
227 (BLANK)
228 (BLANK)
**** START MULTILINE  /*
235 16(CODE) session2.on 'changeScrollTop',
236 18(CODE) function(scroll)
237 20(CODE) session1.setScrollTop(parseInt(scroll) or 0)
238 (BLANK)
239 (BLANK)
**** START MULTILINE  /*
246 (BLANK)
247 (BLANK)
248 (BLANK)
249 (BLANK)
---- TOKENIZE
1 0(COMMENT) Dependencies
2 0(COMMENT) -------------
3 (BLANK)
4 4(CODE) compiler import jQuery, Document
5 (BLANK)
6 4(CODE) compiler import ace
7 (BLANK)
8 4(CODE) compiler import httpGet, require
9 (BLANK)
10 0(COMMENT) Setup Environment
11 0(COMMENT) -----------------
12 (BLANK)
13 0(COMMENT) emulate node's environment, global & 'process'
14 0(COMMENT) for the LiteScript compiler
15 (BLANK)
16 4(CODE) var global = window
17 (BLANK)
18 4(CODE) append to object window
19 8(CODE) properties
20 12(CODE) process:
21 16(CODE) exit:function(code)
22 20(CODE) throw new Error('exit code '+code)
23 (BLANK)
24 0(COMMENT) set compiler log messages to memory
25 (BLANK)
26 4(CODE) import log from '../lib/log'
27 4(CODE) log.options.storeMessages = true
28 (BLANK)
29 4(CODE) declare on Error
30 8(CODE) controled, soft
31 (BLANK)
32 0(COMMENT) import compiler
33 (BLANK)
34 4(CODE) import LiteScript from '../lib/Compiler'
35 (BLANK)
36 (BLANK)
37 0(COMMENT) Page Vars
38 0(COMMENT) ---------
39 (BLANK)
40 4(CODE) var
41 8(CODE) CompareOrig_ed : ace.Editor
42 8(CODE) CompareJs_ed : ace.Editor
43 (BLANK)
44 8(CODE) loadedFname : string
45 (BLANK)
46 8(CODE) compileOptions = {extraComments:true}
47 (BLANK)
48 0(COMMENT) utility String protoype functions
49 0(COMMENT) ----------
50 (BLANK)
51 4(CODE) append to class String
52 8(CODE) shim method startsWith(s:string)
53 11(CODE) return this.substr(0,s.length) is s
54 (BLANK)
55 8(CODE) shim method endsWith(s:string)
56 11(CODE) return this.substr(-s.length) is s
57 (BLANK)
58 0(COMMENT) MAIN
59 0(COMMENT) -----------
60 (BLANK)
61 4(CODE) function OnLine_Main()
62 (BLANK)
63 8(CODE) $("#version").text "v"+LiteScript.version
64 (BLANK)
65 8(CODE) CompareOrig_ed = mkEditor("Compare-Lite")
66 8(CODE) CompareJs_ed = mkEditor("Compare-js")
67 (BLANK)
68 8(CODE) loadSample 'Literate.lite.md'
69 (BLANK)
70 4(CODE) end function
71 (BLANK)
72 (BLANK)
73 4(CODE) function loadSample(fname,callback)
74 (BLANK)
75 8(CODE) loadedFname = fname
76 8(CODE) loadExample fname, function(err,data)
77 12(CODE) if err, return
78 12(CODE) run
79 (BLANK)
80 4(CODE) function run
81 (BLANK)
82 8(CODE) var liteSource = CompareOrig_ed.getValue();
83 (BLANK)
84 8(COMMENT) //clear
85 8(COMMENT) //syncEditors([CompareOrig_ed, CompareJs_ed], false); //un-sync
86 8(COMMENT) //CompareOrig_ed.setValue("");
87 8(CODE) CompareOrig_ed.resize(true);
88 8(COMMENT) //CompareJs_ed.setValue("");
89 8(COMMENT) //CompareJs_ed.resize(true);
90 (BLANK)
91 8(CODE) log.warning.count=0; //clear
92 8(CODE) log.getMessages(); //clear
93 8(COMMENT) // compile LiteScript -> js
94 8(CODE) try
95 12(CODE) var compiled = LiteScript.compile(loadedFname, liteSource, compileOptions);
96 9(CODE) catch e
97 12(CODE) console.log(e.stack);
98 12(CODE) compiled = log.getMessages().join('\n');
99 12(CODE) compiled += '\n'+e.message;
100 12(CODE) if not e.controled, compiled += '\n'+e.stack;
101 12(CODE) log.messages = [];
102 (BLANK)
103 (BLANK)
104 8(CODE) if log.warning.count
105 12(COMMENT) //Show warnings
106 12(CODE) compiled = log.getMessages().join('\n') + compiled;
107 (BLANK)
108 (BLANK)
109 8(CODE) CompareJs_ed.setValue(compiled);
110 (BLANK)
111 8(CODE) var linesLite = CompareOrig_ed.getSession().getLength();
112 8(CODE) var linesJs = CompareJs_ed.getSession().getLength();
113 (BLANK)
114 8(CODE) while (linesLite<linesJs)
115 12(CODE) addLines(' ',CompareOrig_ed);
116 12(CODE) linesLite++;
117 (BLANK)
118 8(CODE) while (linesJs<linesLite)
119 12(CODE) addLines(' ',CompareJs_ed);
120 12(CODE) linesJs++;
121 (BLANK)
122 (BLANK)
123 8(COMMENT) //sync eds
124 8(COMMENT) //syncEditors([CompareOrig_ed, CompareJs_ed]);
125 (BLANK)
126 8(CODE) CompareOrig_ed.clearSelection();
127 8(CODE) CompareJs_ed.clearSelection();
128 (BLANK)
129 8(CODE) CompareOrig_ed.scrollToLine(0);
130 8(CODE) CompareJs_ed.scrollToLine(0);
131 (BLANK)
132 (BLANK)
133 4(CODE) function loadExample(fileName:string, callback)
134 (BLANK)
135 8(COMMENT) //syncEditors([CompareOrig_ed, CompareJs_ed],false);
136 (BLANK)
137 8(CODE) CompareJs_ed.setValue("");
138 (BLANK)
139 8(CODE) CompareOrig_ed.setValue("Loading...");
140 8(CODE) CompareOrig_ed.resize(true);
141 (BLANK)
142 8(CODE) document.getElementById('status').textContent=fileName;
143 (BLANK)
144 8(CODE) $.ajax({
145 (BLANK)
146 12(CODE) url: 'examples/html/'+fileName.replace(/\.lite\.md$/,".html") #hack: github won't serve .md from rawgithub
147 (BLANK)
148 12(CODE) success: function (data:string)
149 (BLANK)
150 20(CODE) data = data.replace('\r',''); // remove CR from windows-edited files
151 (BLANK)
152 20(CODE) CompareOrig_ed.setValue(data);
153 (BLANK)
154 20(CODE) CompareOrig_ed.clearSelection();
155 20(CODE) CompareOrig_ed.scrollToLine(0);
156 (BLANK)
157 20(CODE) if callback, callback(null,data);
158 (BLANK)
159 12(CODE) error: function (jqxhr, textStatus, errorThrown)
160 20(CODE) global declare alert
161 20(CODE) declare valid jqxhr.responseText
162 20(CODE) alert jqxhr.responseText
163 (BLANK)
164 20(CODE) if callback, callback(jqxhr);
165 9(CODE) })
166 0(COMMENT) 
167 0(COMMENT) 
168 0(COMMENT)         httpGet fileName, function(err,data:string)
169 0(COMMENT) 
170 0(COMMENT)                 if err and no data, data=err.toString();
171 0(COMMENT)                 data = data.replace('\r',''); // remove CR from windows-edited files
172 0(COMMENT) 
173 0(COMMENT)                 CompareOrig_ed.setValue(data);
174 0(COMMENT) 
175 0(COMMENT)                 CompareOrig_ed.clearSelection();
176 0(COMMENT)                 CompareOrig_ed.scrollToLine(0);
177 0(COMMENT) 
178 0(COMMENT)                 if callback, callback(err,data);
180 (BLANK)
181 4(CODE) function mkEditor(divName) returns ace.Editor
182 (BLANK)
183 8(CODE) var editor = ace.edit(divName);
184 8(CODE) editor.setTheme("ace/theme/monokai");
185 8(CODE) editor.setShowPrintMargin(false);
186 8(CODE) editor.setFontSize(16);
187 (BLANK)
188 8(CODE) var session = editor.getSession();
189 8(CODE) session.setUseWorker(false);
190 8(CODE) session.setMode("ace/mode/javascript");
191 8(CODE) return editor;
192 (BLANK)
193 (BLANK)
194 4(CODE) function addLines(lineArray, ed:ace.Editor)
195 (BLANK)
196 12(CODE) if no lineArray, return;
197 (BLANK)
198 12(CODE) if  type of lineArray is 'string'
199 16(CODE) var a=[];
200 16(CODE) a[0]=lineArray;
201 16(CODE) lineArray=a;
202 (BLANK)
203 (BLANK)
204 12(COMMENT) //console.log(lineArray);
205 12(CODE) ed.session.doc.insertLines(ed.session.doc.getLength()-1, lineArray);
206 12(CODE) ed.resize(true);
207 (BLANK)
208 (BLANK)
209 4(CODE)     function syncEditors(aceEditors: ace.Editor array, onOff)
210 (BLANK)
211 0(COMMENT) Sync side-by-side ace editors scrolling
212 0(COMMENT) from http://codepen.io/ByScripts/pen/fzucK
213 (BLANK)
214 8(CODE) for n=0 while n<aceEditors.length
215 12(CODE) var session1 = aceEditors[n].session;
216 12(CODE) if onOff is off //disconnect
217 16(CODE) session1.removeAllListeners('changeScrollTop');
218 16(CODE) session1.removeAllListeners('changeScrollLeft');
219 (BLANK)
220 12(CODE) else  //connect
221 (BLANK)
222 16(CODE) var session2 = aceEditors[n is aceEditors.length-1 ? 0 else n+1].session;
223 (BLANK)
224 16(CODE) session1.on 'changeScrollTop',
225 18(CODE) function(scroll)
226 20(CODE) session2.setScrollTop(parseInt(scroll) or 0)
227 (BLANK)
228 (BLANK)
229 0(COMMENT) session1.on('changeScrollLeft',
230 0(COMMENT)                   function(scroll) {
231 0(COMMENT)                     session2.setScrollLeft(parseInt(scroll) || 0)
232 0(COMMENT)                   }
233 0(COMMENT)                 );
234 0(COMMENT)     
235 16(CODE) session2.on 'changeScrollTop',
236 18(CODE) function(scroll)
237 20(CODE) session1.setScrollTop(parseInt(scroll) or 0)
238 (BLANK)
239 (BLANK)
240 0(COMMENT) session2.on('changeScrollLeft',
241 0(COMMENT)                   function(scroll) {
242 0(COMMENT)                     session1.setScrollLeft(parseInt(scroll) || 0)
243 0(COMMENT)                   }
244 0(COMMENT)                 );
245 0(COMMENT)     
246 (BLANK)
247 (BLANK)
248 (BLANK)
249 (BLANK)
>>>ADVANCE 4:0 [-1] ' '(NEWLINE)
      Module matched OK: NEWLINE  
>>>ADVANCE 4:5 [0] 'compiler'(IDENTIFIER)
optFreeFormList [Module] parentname:Project Root parentIndent:undefined, blockIndent:4, get SeparatedList of [Statement] by ';' closer: EOF
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'compiler'(IDENTIFIER)

4 4(CODE) compiler import jQuery, Document
    'compiler'(IDENTIFIER) 'import'(IDENTIFIER) 'jQuery'(IDENTIFIER) ','(LITERAL) 'Document'(IDENTIFIER)

        Statement TRY CompilerStatement on 'compiler'(IDENTIFIER)
          CompilerStatement matched OK: compiler compiler
>>>ADVANCE 4:14 [1] 'import'(IDENTIFIER)
          CompilerStatement TRY ImportStatement on 'import'(IDENTIFIER)
            ImportStatement matched OK: import import
>>>ADVANCE 4:21 [2] 'jQuery'(IDENTIFIER)
optSeparatedList [ImportStatement] indent:4, get SeparatedList of [ImportStatementItem] by ',' closer: -no closer-
            ImportStatement TRY ImportStatementItem on 'jQuery'(IDENTIFIER)
              ImportStatementItem matched OK: IDENTIFIER jQuery
>>>ADVANCE 4:27 [3] ','(LITERAL)
            Parsed OK!-> ImportStatementItem
            ImportStatement matched OK: , ,
>>>ADVANCE 4:29 [4] 'Document'(IDENTIFIER)
            ImportStatement TRY ImportStatementItem on 'Document'(IDENTIFIER)
              ImportStatementItem matched OK: IDENTIFIER Document
>>>ADVANCE 6:0 [-1] ' '(NEWLINE)
            Parsed OK!-> ImportStatementItem
            ImportStatement matched OK: NEWLINE  
>>>ADVANCE 6:5 [0] 'compiler'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 6
          Parsed OK!-> ImportStatement
        Parsed OK!-> CompilerStatement
      Parsed OK!-> Statement
      Module matched OK: NEWLINE  
>>>ADVANCE 6:5 [0] 'compiler'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'compiler'(IDENTIFIER)

6 4(CODE) compiler import ace
    'compiler'(IDENTIFIER) 'import'(IDENTIFIER) 'ace'(IDENTIFIER)

        Statement TRY CompilerStatement on 'compiler'(IDENTIFIER)
          CompilerStatement matched OK: compiler compiler
>>>ADVANCE 6:14 [1] 'import'(IDENTIFIER)
          CompilerStatement TRY ImportStatement on 'import'(IDENTIFIER)
            ImportStatement matched OK: import import
>>>ADVANCE 6:21 [2] 'ace'(IDENTIFIER)
optSeparatedList [ImportStatement] indent:4, get SeparatedList of [ImportStatementItem] by ',' closer: -no closer-
            ImportStatement TRY ImportStatementItem on 'ace'(IDENTIFIER)
              ImportStatementItem matched OK: IDENTIFIER ace
>>>ADVANCE 8:0 [-1] ' '(NEWLINE)
            Parsed OK!-> ImportStatementItem
            ImportStatement matched OK: NEWLINE  
>>>ADVANCE 8:5 [0] 'compiler'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 8
          Parsed OK!-> ImportStatement
        Parsed OK!-> CompilerStatement
      Parsed OK!-> Statement
      Module matched OK: NEWLINE  
>>>ADVANCE 8:5 [0] 'compiler'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'compiler'(IDENTIFIER)

8 4(CODE) compiler import httpGet, require
    'compiler'(IDENTIFIER) 'import'(IDENTIFIER) 'httpGet'(IDENTIFIER) ','(LITERAL) 'require'(IDENTIFIER)

        Statement TRY CompilerStatement on 'compiler'(IDENTIFIER)
          CompilerStatement matched OK: compiler compiler
>>>ADVANCE 8:14 [1] 'import'(IDENTIFIER)
          CompilerStatement TRY ImportStatement on 'import'(IDENTIFIER)
            ImportStatement matched OK: import import
>>>ADVANCE 8:21 [2] 'httpGet'(IDENTIFIER)
optSeparatedList [ImportStatement] indent:4, get SeparatedList of [ImportStatementItem] by ',' closer: -no closer-
            ImportStatement TRY ImportStatementItem on 'httpGet'(IDENTIFIER)
              ImportStatementItem matched OK: IDENTIFIER httpGet
>>>ADVANCE 8:28 [3] ','(LITERAL)
            Parsed OK!-> ImportStatementItem
            ImportStatement matched OK: , ,
>>>ADVANCE 8:30 [4] 'require'(IDENTIFIER)
            ImportStatement TRY ImportStatementItem on 'require'(IDENTIFIER)
              ImportStatementItem matched OK: IDENTIFIER require
>>>ADVANCE 16:0 [-1] ' '(NEWLINE)
            Parsed OK!-> ImportStatementItem
            ImportStatement matched OK: NEWLINE  
>>>ADVANCE 16:5 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 16
          Parsed OK!-> ImportStatement
        Parsed OK!-> CompilerStatement
      Parsed OK!-> Statement
      Module matched OK: NEWLINE  
>>>ADVANCE 16:5 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'var'(IDENTIFIER)

16 4(CODE) var global = window
    'var'(IDENTIFIER) 'global'(IDENTIFIER) '='(ASSIGN) 'window'(IDENTIFIER)

        Statement TRY VarStatement on 'var'(IDENTIFIER)
          VarStatement matched OK: var var
>>>ADVANCE 16:9 [1] 'global'(IDENTIFIER)
optSeparatedList [VarStatement] indent:4, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
          VarStatement TRY VariableDecl on 'global'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER global
>>>ADVANCE 16:16 [2] '='(ASSIGN)
            VariableDecl matched OK: = =
>>>ADVANCE 16:18 [3] 'window'(IDENTIFIER)
            VariableDecl TRY Expression on 'window'(IDENTIFIER)
              Expression TRY Operand on 'window'(IDENTIFIER)
                Operand TRY VariableRef on 'window'(IDENTIFIER)
                  VariableRef matched OK: IDENTIFIER window
>>>ADVANCE 18:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableRef
              Parsed OK!-> Operand
              Expression matched OK: NEWLINE  
>>>ADVANCE 18:5 [0] 'append'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 18
            Parsed OK!-> Expression
          Parsed OK!-> VariableDecl
          VarStatement matched OK: NEWLINE  
>>>ADVANCE 18:5 [0] 'append'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 18
        Parsed OK!-> VarStatement
      Parsed OK!-> Statement
      Module matched OK: NEWLINE  
>>>ADVANCE 18:5 [0] 'append'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'append'(IDENTIFIER)

18 4(CODE) append to object window
    'append'(IDENTIFIER) 'to'(IDENTIFIER) 'object'(IDENTIFIER) 'window'(IDENTIFIER)

        Statement TRY AppendToDeclaration on 'append'(IDENTIFIER)
          AppendToDeclaration matched OK: append append
>>>ADVANCE 18:12 [1] 'to'(IDENTIFIER)
          AppendToDeclaration matched OK: to to
>>>ADVANCE 18:15 [2] 'object'(IDENTIFIER)
          AppendToDeclaration matched OK: object object
>>>ADVANCE 18:22 [3] 'window'(IDENTIFIER)
          AppendToDeclaration TRY VariableRef on 'window'(IDENTIFIER)
            VariableRef matched OK: IDENTIFIER window
>>>ADVANCE 19:0 [-1] ' '(NEWLINE)
          Parsed OK!-> VariableRef
          AppendToDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 19:9 [0] 'properties'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

19 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 20:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 20:13 [0] 'process'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'process'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER process
>>>ADVANCE 20:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 21:0 [-1] ' '(NEWLINE)
                  VariableDecl TRY FreeObjectLiteral on ' '(NEWLINE)
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 21:17 [0] 'exit'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:process parentIndent:12, blockIndent:16, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'exit'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER exit
>>>ADVANCE 21:21 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 21:22 [2] 'function'(IDENTIFIER)
                      NameValuePair TRY Expression on 'function'(IDENTIFIER)
                        Expression TRY Operand on 'function'(IDENTIFIER)
                          Operand TRY FunctionDeclaration on 'function'(IDENTIFIER)
                            FunctionDeclaration matched OK: function function
>>>ADVANCE 21:30 [3] '('(LITERAL)
                            FunctionDeclaration matched OK: ( (
>>>ADVANCE 21:31 [4] 'code'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                            FunctionDeclaration TRY VariableDecl on 'code'(IDENTIFIER)
                              VariableDecl matched OK: IDENTIFIER code
>>>ADVANCE 21:35 [5] ')'(LITERAL)
                            Parsed OK!-> VariableDecl
                            FunctionDeclaration matched OK: ) )
>>>ADVANCE 22:0 [-1] ' '(NEWLINE)
                            FunctionDeclaration TRY Body on ' '(NEWLINE)
                              Body matched OK: NEWLINE  
>>>ADVANCE 22:21 [0] 'throw'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:16, blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                              Body TRY Statement on 'throw'(IDENTIFIER)

22 20(CODE) throw new Error('exit code '+code)
    'throw'(IDENTIFIER) 'new'(IDENTIFIER) 'Error'(IDENTIFIER) '('(LITERAL) ''exit code ''(STRING) '+'(OPER) 'code'(IDENTIFIER) ')'(LITERAL)

                                Statement TRY ThrowStatement on 'throw'(IDENTIFIER)
                                  ThrowStatement matched OK: throw throw
>>>ADVANCE 22:27 [1] 'new'(IDENTIFIER)
                                  ThrowStatement TRY Expression on 'new'(IDENTIFIER)
                                    Expression TRY UnaryOper on 'new'(IDENTIFIER)
                                      UnaryOper matched OK: new new
>>>ADVANCE 22:31 [2] 'Error'(IDENTIFIER)
                                    Parsed OK!-> UnaryOper
                                    Expression TRY Operand on 'Error'(IDENTIFIER)
                                      Operand TRY VariableRef on 'Error'(IDENTIFIER)
                                        VariableRef matched OK: IDENTIFIER Error
>>>ADVANCE 22:36 [3] '('(LITERAL)
                                        VariableRef TRY FunctionAccess on '('(LITERAL)
                                          FunctionAccess matched OK: ( (
>>>ADVANCE 22:37 [4] ''exit code ''(STRING)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                          FunctionAccess TRY Expression on ''exit code ''(STRING)
                                            Expression TRY Operand on ''exit code ''(STRING)
                                              Operand TRY StringLiteral on ''exit code ''(STRING)
                                                StringLiteral matched OK: STRING 'exit code '
>>>ADVANCE 22:49 [5] '+'(OPER)
                                              Parsed OK!-> StringLiteral
                                            Parsed OK!-> Operand
                                            Expression TRY Oper on '+'(OPER)
                                              Oper matched OK: OPER +
>>>ADVANCE 22:50 [6] 'code'(IDENTIFIER)
                                            Parsed OK!-> Oper
                                            Expression TRY Operand on 'code'(IDENTIFIER)
                                              Operand TRY VariableRef on 'code'(IDENTIFIER)
                                                VariableRef matched OK: IDENTIFIER code
>>>ADVANCE 22:54 [7] ')'(LITERAL)
                                              Parsed OK!-> VariableRef
                                            Parsed OK!-> Operand
                                          Parsed OK!-> Expression
                                          FunctionAccess matched OK: ) )
>>>ADVANCE 26:0 [-1] ' '(NEWLINE)
                                        Parsed OK!-> FunctionAccess
                                      Parsed OK!-> VariableRef
                                    Parsed OK!-> Operand
                                    Expression matched OK: NEWLINE  
>>>ADVANCE 26:5 [0] 'import'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 26
                                  Parsed OK!-> Expression
                                Parsed OK!-> ThrowStatement
                              Parsed OK!-> Statement
                              Body matched OK: NEWLINE  
>>>ADVANCE 26:5 [0] 'import'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:20 parentIndent:16
END freeFormMode [Body] blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no closer-
                            Parsed OK!-> Body
                          Parsed OK!-> FunctionDeclaration
                        Parsed OK!-> Operand
                        Expression TRY Oper on 'import'(IDENTIFIER)
                        Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:26:1. Oper: found 'import'(IDENTIFIER) but 'OPER' required
<<REW to 26:5 [0] 'import'(IDENTIFIER)
                      Parsed OK!-> Expression
                    Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:4 block indent:16 parentIndent:12
END freeFormMode [FreeObjectLiteral] blockIndent:16, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                  Parsed OK!-> FreeObjectLiteral
                Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:4 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> AppendToDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'import'(IDENTIFIER)

26 4(CODE) import log from '../lib/log'
    'import'(IDENTIFIER) 'log'(IDENTIFIER) 'from'(IDENTIFIER) ''../lib/log''(STRING)

        Statement TRY ImportStatement on 'import'(IDENTIFIER)
          ImportStatement matched OK: import import
>>>ADVANCE 26:12 [1] 'log'(IDENTIFIER)
optSeparatedList [ImportStatement] indent:4, get SeparatedList of [ImportStatementItem] by ',' closer: -no closer-
          ImportStatement TRY ImportStatementItem on 'log'(IDENTIFIER)
            ImportStatementItem matched OK: IDENTIFIER log
>>>ADVANCE 26:16 [2] 'from'(IDENTIFIER)
            ImportStatementItem matched OK: from from
>>>ADVANCE 26:21 [3] ''../lib/log''(STRING)
            ImportStatementItem TRY StringLiteral on ''../lib/log''(STRING)
              StringLiteral matched OK: STRING '../lib/log'
>>>ADVANCE 27:0 [-1] ' '(NEWLINE)
            Parsed OK!-> StringLiteral
          Parsed OK!-> ImportStatementItem
          ImportStatement matched OK: NEWLINE  
>>>ADVANCE 27:5 [0] 'log'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 27
        Parsed OK!-> ImportStatement
      Parsed OK!-> Statement
      Module matched OK: NEWLINE  
>>>ADVANCE 27:5 [0] 'log'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'log'(IDENTIFIER)

27 4(CODE) log.options.storeMessages = true
    'log'(IDENTIFIER) '.'(LITERAL) 'options'(IDENTIFIER) '.'(LITERAL) 'storeMessages'(IDENTIFIER) '='(ASSIGN) 'true'(IDENTIFIER)

        Statement TRY Adjective on 'log'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:27:1. Adjective: found 'log'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 27:5 [0] 'log'(IDENTIFIER)
        Statement TRY VariableRef on 'log'(IDENTIFIER)
          VariableRef matched OK: IDENTIFIER log
>>>ADVANCE 27:8 [1] '.'(LITERAL)
          VariableRef TRY PropertyAccess on '.'(LITERAL)
            PropertyAccess matched OK: . .
>>>ADVANCE 27:9 [2] 'options'(IDENTIFIER)
            PropertyAccess matched OK: IDENTIFIER options
>>>ADVANCE 27:16 [3] '.'(LITERAL)
          Parsed OK!-> PropertyAccess
          VariableRef TRY PropertyAccess on '.'(LITERAL)
            PropertyAccess matched OK: . .
>>>ADVANCE 27:17 [4] 'storeMessages'(IDENTIFIER)
            PropertyAccess matched OK: IDENTIFIER storeMessages
>>>ADVANCE 27:31 [5] '='(ASSIGN)
          Parsed OK!-> PropertyAccess
        Parsed OK!-> VariableRef
        Statement TRY AssignmentStatement on '='(ASSIGN)
          AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 27:33 [6] 'true'(IDENTIFIER)
          AssignmentStatement TRY Expression on 'true'(IDENTIFIER)
            Expression TRY Operand on 'true'(IDENTIFIER)
              Operand TRY VariableRef on 'true'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER true
>>>ADVANCE 29:0 [-1] ' '(NEWLINE)
              Parsed OK!-> VariableRef
            Parsed OK!-> Operand
            Expression matched OK: NEWLINE  
>>>ADVANCE 29:5 [0] 'declare'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 29
          Parsed OK!-> Expression
        Parsed OK!-> AssignmentStatement
      Parsed OK!-> Statement
      Module matched OK: NEWLINE  
>>>ADVANCE 29:5 [0] 'declare'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'declare'(IDENTIFIER)

29 4(CODE) declare on Error
    'declare'(IDENTIFIER) 'on'(IDENTIFIER) 'Error'(IDENTIFIER)

        Statement TRY DeclareStatement on 'declare'(IDENTIFIER)
          DeclareStatement matched OK: declare declare
>>>ADVANCE 29:13 [1] 'on'(IDENTIFIER)
          DeclareStatement matched OK: on on
>>>ADVANCE 29:16 [2] 'Error'(IDENTIFIER)
          DeclareStatement matched OK: IDENTIFIER Error
>>>ADVANCE 30:0 [-1] ' '(NEWLINE)
          DeclareStatement matched OK: NEWLINE  
>>>ADVANCE 30:9 [0] 'controled'(IDENTIFIER)
optFreeFormList [DeclareStatement] parentname:undefined parentIndent:4, blockIndent:8, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
          DeclareStatement TRY VariableDecl on 'controled'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER controled
>>>ADVANCE 30:18 [1] ','(LITERAL)
          Parsed OK!-> VariableDecl
          DeclareStatement matched OK: , ,
>>>ADVANCE 30:20 [2] 'soft'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
          DeclareStatement TRY VariableDecl on 'soft'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER soft
>>>ADVANCE 34:0 [-1] ' '(NEWLINE)
          Parsed OK!-> VariableDecl
          DeclareStatement matched OK: NEWLINE  
>>>ADVANCE 34:5 [0] 'import'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [DeclareStatement] blockIndent:8, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
        Parsed OK!-> DeclareStatement
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'import'(IDENTIFIER)

34 4(CODE) import LiteScript from '../lib/Compiler'
    'import'(IDENTIFIER) 'LiteScript'(IDENTIFIER) 'from'(IDENTIFIER) ''../lib/Compiler''(STRING)

        Statement TRY ImportStatement on 'import'(IDENTIFIER)
          ImportStatement matched OK: import import
>>>ADVANCE 34:12 [1] 'LiteScript'(IDENTIFIER)
optSeparatedList [ImportStatement] indent:4, get SeparatedList of [ImportStatementItem] by ',' closer: -no closer-
          ImportStatement TRY ImportStatementItem on 'LiteScript'(IDENTIFIER)
            ImportStatementItem matched OK: IDENTIFIER LiteScript
>>>ADVANCE 34:23 [2] 'from'(IDENTIFIER)
            ImportStatementItem matched OK: from from
>>>ADVANCE 34:28 [3] ''../lib/Compiler''(STRING)
            ImportStatementItem TRY StringLiteral on ''../lib/Compiler''(STRING)
              StringLiteral matched OK: STRING '../lib/Compiler'
>>>ADVANCE 40:0 [-1] ' '(NEWLINE)
            Parsed OK!-> StringLiteral
          Parsed OK!-> ImportStatementItem
          ImportStatement matched OK: NEWLINE  
>>>ADVANCE 40:5 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 40
        Parsed OK!-> ImportStatement
      Parsed OK!-> Statement
      Module matched OK: NEWLINE  
>>>ADVANCE 40:5 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'var'(IDENTIFIER)

40 4(CODE) var
    'var'(IDENTIFIER)

        Statement TRY VarStatement on 'var'(IDENTIFIER)
          VarStatement matched OK: var var
>>>ADVANCE 41:0 [-1] ' '(NEWLINE)
          VarStatement matched OK: NEWLINE  
>>>ADVANCE 41:9 [0] 'CompareOrig_ed'(IDENTIFIER)
optFreeFormList [VarStatement] parentname:undefined parentIndent:4, blockIndent:8, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
          VarStatement TRY VariableDecl on 'CompareOrig_ed'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER CompareOrig_ed
>>>ADVANCE 41:24 [1] ':'(OPER)
            VariableDecl matched OK: : :
>>>ADVANCE 41:26 [2] 'ace'(IDENTIFIER)
            VariableDecl TRY VariableRef on 'ace'(IDENTIFIER)
              VariableRef matched OK: IDENTIFIER ace
>>>ADVANCE 41:29 [3] '.'(LITERAL)
              VariableRef TRY PropertyAccess on '.'(LITERAL)
                PropertyAccess matched OK: . .
>>>ADVANCE 41:30 [4] 'Editor'(IDENTIFIER)
                PropertyAccess matched OK: IDENTIFIER Editor
>>>ADVANCE 42:0 [-1] ' '(NEWLINE)
              Parsed OK!-> PropertyAccess
            Parsed OK!-> VariableRef
          Parsed OK!-> VariableDecl
          VarStatement matched OK: NEWLINE  
>>>ADVANCE 42:9 [0] 'CompareJs_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
          VarStatement TRY VariableDecl on 'CompareJs_ed'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER CompareJs_ed
>>>ADVANCE 42:22 [1] ':'(OPER)
            VariableDecl matched OK: : :
>>>ADVANCE 42:24 [2] 'ace'(IDENTIFIER)
            VariableDecl TRY VariableRef on 'ace'(IDENTIFIER)
              VariableRef matched OK: IDENTIFIER ace
>>>ADVANCE 42:27 [3] '.'(LITERAL)
              VariableRef TRY PropertyAccess on '.'(LITERAL)
                PropertyAccess matched OK: . .
>>>ADVANCE 42:28 [4] 'Editor'(IDENTIFIER)
                PropertyAccess matched OK: IDENTIFIER Editor
>>>ADVANCE 44:0 [-1] ' '(NEWLINE)
              Parsed OK!-> PropertyAccess
            Parsed OK!-> VariableRef
          Parsed OK!-> VariableDecl
          VarStatement matched OK: NEWLINE  
>>>ADVANCE 44:9 [0] 'loadedFname'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
          VarStatement TRY VariableDecl on 'loadedFname'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER loadedFname
>>>ADVANCE 44:21 [1] ':'(OPER)
            VariableDecl matched OK: : :
>>>ADVANCE 44:23 [2] 'string'(IDENTIFIER)
            VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
              VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 46:0 [-1] ' '(NEWLINE)
            Parsed OK!-> VariableRef
          Parsed OK!-> VariableDecl
          VarStatement matched OK: NEWLINE  
>>>ADVANCE 46:9 [0] 'compileOptions'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
          VarStatement TRY VariableDecl on 'compileOptions'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER compileOptions
>>>ADVANCE 46:24 [1] '='(ASSIGN)
            VariableDecl matched OK: = =
>>>ADVANCE 46:26 [2] '{'(LITERAL)
            VariableDecl TRY Expression on '{'(LITERAL)
              Expression TRY Operand on '{'(LITERAL)
                Operand TRY ObjectLiteral on '{'(LITERAL)
                  ObjectLiteral matched OK: { {
>>>ADVANCE 46:27 [3] 'extraComments'(IDENTIFIER)
optSeparatedList [ObjectLiteral] indent:8, get SeparatedList of [NameValuePair] by ',' closer: }
                  ObjectLiteral TRY NameValuePair on 'extraComments'(IDENTIFIER)
                    NameValuePair matched OK: IDENTIFIER extraComments
>>>ADVANCE 46:40 [4] ':'(OPER)
                    NameValuePair matched OK: : :
>>>ADVANCE 46:41 [5] 'true'(IDENTIFIER)
                    NameValuePair TRY Expression on 'true'(IDENTIFIER)
                      Expression TRY Operand on 'true'(IDENTIFIER)
                        Operand TRY VariableRef on 'true'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER true
>>>ADVANCE 46:45 [6] '}'(LITERAL)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> Operand
                      Expression TRY Oper on '}'(LITERAL)
                      Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:46:42. Oper: found '}'(LITERAL) but 'OPER' required
<<REW to 46:45 [6] '}'(LITERAL)
                    Parsed OK!-> Expression
                  Parsed OK!-> NameValuePair
                  ObjectLiteral matched OK: } }
>>>ADVANCE 51:0 [-1] ' '(NEWLINE)
                Parsed OK!-> ObjectLiteral
              Parsed OK!-> Operand
              Expression matched OK: NEWLINE  
>>>ADVANCE 51:5 [0] 'append'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 51
            Parsed OK!-> Expression
          Parsed OK!-> VariableDecl
          VarStatement matched OK: NEWLINE  
>>>ADVANCE 51:5 [0] 'append'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [VarStatement] blockIndent:8, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
        Parsed OK!-> VarStatement
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'append'(IDENTIFIER)

51 4(CODE) append to class String
    'append'(IDENTIFIER) 'to'(IDENTIFIER) 'class'(IDENTIFIER) 'String'(IDENTIFIER)

        Statement TRY AppendToDeclaration on 'append'(IDENTIFIER)
          AppendToDeclaration matched OK: append append
>>>ADVANCE 51:12 [1] 'to'(IDENTIFIER)
          AppendToDeclaration matched OK: to to
>>>ADVANCE 51:15 [2] 'class'(IDENTIFIER)
          AppendToDeclaration matched OK: class class
>>>ADVANCE 51:21 [3] 'String'(IDENTIFIER)
          AppendToDeclaration TRY VariableRef on 'String'(IDENTIFIER)
            VariableRef matched OK: IDENTIFIER String
>>>ADVANCE 52:0 [-1] ' '(NEWLINE)
          Parsed OK!-> VariableRef
          AppendToDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 52:9 [0] 'shim'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'shim'(IDENTIFIER)

52 8(CODE) shim method startsWith(s:string)
    'shim'(IDENTIFIER) 'method'(IDENTIFIER) 'startsWith'(IDENTIFIER) '('(LITERAL) 's'(IDENTIFIER) ':'(OPER) 'string'(IDENTIFIER) ')'(LITERAL)

              Statement TRY Adjective on 'shim'(IDENTIFIER)
                Adjective matched OK: shim shim
>>>ADVANCE 52:14 [1] 'method'(IDENTIFIER)
              Parsed OK!-> Adjective
              Statement TRY Adjective on 'method'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:52:10. Adjective: found 'method'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 52:14 [1] 'method'(IDENTIFIER)
              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 52:21 [2] 'startsWith'(IDENTIFIER)
>>>ADVANCE 52:31 [3] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 52:32 [4] 's'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 's'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER s
>>>ADVANCE 52:33 [5] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 52:34 [6] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 52:40 [7] ')'(LITERAL)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 53:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 53:12 [0] 'return'(IDENTIFIER)
optFreeFormList [Body] parentname:startsWith parentIndent:8, blockIndent:11, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:11 block indent:11 parentIndent:8
                  Body TRY Statement on 'return'(IDENTIFIER)

53 11(CODE) return this.substr(0,s.length) is s
    'return'(IDENTIFIER) 'this'(IDENTIFIER) '.'(LITERAL) 'substr'(IDENTIFIER) '('(LITERAL) '0'(NUMBER) ','(LITERAL) 's'(IDENTIFIER) '.'(LITERAL) 'length'(IDENTIFIER) ')'(LITERAL) 'is'(OPER) 's'(IDENTIFIER)

                    Statement TRY ReturnStatement on 'return'(IDENTIFIER)
                      ReturnStatement matched OK: return return
>>>ADVANCE 53:19 [1] 'this'(IDENTIFIER)
                      ReturnStatement TRY Expression on 'this'(IDENTIFIER)
                        Expression TRY Operand on 'this'(IDENTIFIER)
                          Operand TRY VariableRef on 'this'(IDENTIFIER)
                            VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 53:23 [2] '.'(LITERAL)
                            VariableRef TRY PropertyAccess on '.'(LITERAL)
                              PropertyAccess matched OK: . .
>>>ADVANCE 53:24 [3] 'substr'(IDENTIFIER)
                              PropertyAccess matched OK: IDENTIFIER substr
>>>ADVANCE 53:30 [4] '('(LITERAL)
                            Parsed OK!-> PropertyAccess
                            VariableRef TRY FunctionAccess on '('(LITERAL)
                              FunctionAccess matched OK: ( (
>>>ADVANCE 53:31 [5] '0'(NUMBER)
optSeparatedList [FunctionAccess] indent:11, get SeparatedList of [Expression] by ',' closer: )
                              FunctionAccess TRY Expression on '0'(NUMBER)
                                Expression TRY Operand on '0'(NUMBER)
                                  Operand TRY NumberLiteral on '0'(NUMBER)
                                    NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 53:32 [6] ','(LITERAL)
                                  Parsed OK!-> NumberLiteral
                                Parsed OK!-> Operand
                              Parsed OK!-> Expression
                              FunctionAccess matched OK: , ,
>>>ADVANCE 53:33 [7] 's'(IDENTIFIER)
                              FunctionAccess TRY Expression on 's'(IDENTIFIER)
                                Expression TRY Operand on 's'(IDENTIFIER)
                                  Operand TRY VariableRef on 's'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER s
>>>ADVANCE 53:34 [8] '.'(LITERAL)
                                    VariableRef TRY PropertyAccess on '.'(LITERAL)
                                      PropertyAccess matched OK: . .
>>>ADVANCE 53:35 [9] 'length'(IDENTIFIER)
                                      PropertyAccess matched OK: IDENTIFIER length
>>>ADVANCE 53:41 [10] ')'(LITERAL)
                                    Parsed OK!-> PropertyAccess
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                              Parsed OK!-> Expression
                              FunctionAccess matched OK: ) )
>>>ADVANCE 53:43 [11] 'is'(OPER)
                            Parsed OK!-> FunctionAccess
                          Parsed OK!-> VariableRef
                        Parsed OK!-> Operand
                        Expression TRY Oper on 'is'(OPER)
                          Oper matched OK: OPER is
>>>ADVANCE 53:46 [12] 's'(IDENTIFIER)
                        Parsed OK!-> Oper
                        Expression TRY Operand on 's'(IDENTIFIER)
                          Operand TRY VariableRef on 's'(IDENTIFIER)
                            VariableRef matched OK: IDENTIFIER s
>>>ADVANCE 55:0 [-1] ' '(NEWLINE)
                          Parsed OK!-> VariableRef
                        Parsed OK!-> Operand
                        Expression matched OK: NEWLINE  
>>>ADVANCE 55:9 [0] 'shim'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 55
                      Parsed OK!-> Expression
                    Parsed OK!-> ReturnStatement
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 55:9 [0] 'shim'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:11 parentIndent:8
END freeFormMode [Body] blockIndent:11, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'shim'(IDENTIFIER)

55 8(CODE) shim method endsWith(s:string)
    'shim'(IDENTIFIER) 'method'(IDENTIFIER) 'endsWith'(IDENTIFIER) '('(LITERAL) 's'(IDENTIFIER) ':'(OPER) 'string'(IDENTIFIER) ')'(LITERAL)

              Statement TRY Adjective on 'shim'(IDENTIFIER)
                Adjective matched OK: shim shim
>>>ADVANCE 55:14 [1] 'method'(IDENTIFIER)
              Parsed OK!-> Adjective
              Statement TRY Adjective on 'method'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:55:10. Adjective: found 'method'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 55:14 [1] 'method'(IDENTIFIER)
              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 55:21 [2] 'endsWith'(IDENTIFIER)
>>>ADVANCE 55:29 [3] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 55:30 [4] 's'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 's'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER s
>>>ADVANCE 55:31 [5] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 55:32 [6] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 55:38 [7] ')'(LITERAL)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 56:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 56:12 [0] 'return'(IDENTIFIER)
optFreeFormList [Body] parentname:endsWith parentIndent:8, blockIndent:11, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:11 block indent:11 parentIndent:8
                  Body TRY Statement on 'return'(IDENTIFIER)

56 11(CODE) return this.substr(-s.length) is s
    'return'(IDENTIFIER) 'this'(IDENTIFIER) '.'(LITERAL) 'substr'(IDENTIFIER) '('(LITERAL) '-'(OPER) 's'(IDENTIFIER) '.'(LITERAL) 'length'(IDENTIFIER) ')'(LITERAL) 'is'(OPER) 's'(IDENTIFIER)

                    Statement TRY ReturnStatement on 'return'(IDENTIFIER)
                      ReturnStatement matched OK: return return
>>>ADVANCE 56:19 [1] 'this'(IDENTIFIER)
                      ReturnStatement TRY Expression on 'this'(IDENTIFIER)
                        Expression TRY Operand on 'this'(IDENTIFIER)
                          Operand TRY VariableRef on 'this'(IDENTIFIER)
                            VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 56:23 [2] '.'(LITERAL)
                            VariableRef TRY PropertyAccess on '.'(LITERAL)
                              PropertyAccess matched OK: . .
>>>ADVANCE 56:24 [3] 'substr'(IDENTIFIER)
                              PropertyAccess matched OK: IDENTIFIER substr
>>>ADVANCE 56:30 [4] '('(LITERAL)
                            Parsed OK!-> PropertyAccess
                            VariableRef TRY FunctionAccess on '('(LITERAL)
                              FunctionAccess matched OK: ( (
>>>ADVANCE 56:31 [5] '-'(OPER)
optSeparatedList [FunctionAccess] indent:11, get SeparatedList of [Expression] by ',' closer: )
                              FunctionAccess TRY Expression on '-'(OPER)
                                Expression TRY UnaryOper on '-'(OPER)
                                  UnaryOper matched OK: - -
>>>ADVANCE 56:32 [6] 's'(IDENTIFIER)
                                Parsed OK!-> UnaryOper
                                Expression TRY Operand on 's'(IDENTIFIER)
                                  Operand TRY VariableRef on 's'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER s
>>>ADVANCE 56:33 [7] '.'(LITERAL)
                                    VariableRef TRY PropertyAccess on '.'(LITERAL)
                                      PropertyAccess matched OK: . .
>>>ADVANCE 56:34 [8] 'length'(IDENTIFIER)
                                      PropertyAccess matched OK: IDENTIFIER length
>>>ADVANCE 56:40 [9] ')'(LITERAL)
                                    Parsed OK!-> PropertyAccess
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                              Parsed OK!-> Expression
                              FunctionAccess matched OK: ) )
>>>ADVANCE 56:42 [10] 'is'(OPER)
                            Parsed OK!-> FunctionAccess
                          Parsed OK!-> VariableRef
                        Parsed OK!-> Operand
                        Expression TRY Oper on 'is'(OPER)
                          Oper matched OK: OPER is
>>>ADVANCE 56:45 [11] 's'(IDENTIFIER)
                        Parsed OK!-> Oper
                        Expression TRY Operand on 's'(IDENTIFIER)
                          Operand TRY VariableRef on 's'(IDENTIFIER)
                            VariableRef matched OK: IDENTIFIER s
>>>ADVANCE 61:0 [-1] ' '(NEWLINE)
                          Parsed OK!-> VariableRef
                        Parsed OK!-> Operand
                        Expression matched OK: NEWLINE  
>>>ADVANCE 61:5 [0] 'function'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 61
                      Parsed OK!-> Expression
                    Parsed OK!-> ReturnStatement
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 61:5 [0] 'function'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:11 parentIndent:8
END freeFormMode [Body] blockIndent:11, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> AppendToDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'function'(IDENTIFIER)

61 4(CODE) function OnLine_Main()
    'function'(IDENTIFIER) 'OnLine_Main'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

        Statement TRY FunctionDeclaration on 'function'(IDENTIFIER)
          FunctionDeclaration matched OK: function function
>>>ADVANCE 61:14 [1] 'OnLine_Main'(IDENTIFIER)
          FunctionDeclaration matched OK: IDENTIFIER OnLine_Main
>>>ADVANCE 61:25 [2] '('(LITERAL)
          FunctionDeclaration matched OK: ( (
>>>ADVANCE 61:26 [3] ')'(LITERAL)
optSeparatedList [FunctionDeclaration] indent:4, get SeparatedList of [VariableDecl] by ',' closer: )
          FunctionDeclaration matched OK: ) )
>>>ADVANCE 63:0 [-1] ' '(NEWLINE)
          FunctionDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 63:9 [0] '$'(IDENTIFIER)
optFreeFormList [Body] parentname:OnLine_Main parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on '$'(IDENTIFIER)

63 8(CODE) $("#version").text "v"+LiteScript.version
    '$'(IDENTIFIER) '('(LITERAL) '"#version"'(STRING) ')'(LITERAL) '.'(LITERAL) 'text'(IDENTIFIER) '"v"'(STRING) '+'(OPER) 'LiteScript'(IDENTIFIER) '.'(LITERAL) 'version'(IDENTIFIER)

              Statement TRY Adjective on '$'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:63:1. Adjective: found '$'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 63:9 [0] '$'(IDENTIFIER)
              Statement TRY VariableRef on '$'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER $
>>>ADVANCE 63:10 [1] '('(LITERAL)
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 63:11 [2] '"#version"'(STRING)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on '"#version"'(STRING)
                    Expression TRY Operand on '"#version"'(STRING)
                      Operand TRY StringLiteral on '"#version"'(STRING)
                        StringLiteral matched OK: STRING "#version"
>>>ADVANCE 63:21 [3] ')'(LITERAL)
                      Parsed OK!-> StringLiteral
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 63:22 [4] '.'(LITERAL)
                Parsed OK!-> FunctionAccess
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 63:23 [5] 'text'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER text
>>>ADVANCE 63:28 [6] '"v"'(STRING)
                Parsed OK!-> PropertyAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on '"v"'(STRING)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:63:24. AssignmentStatement: found '"v"'(STRING) but 'ASSIGN' required
<<REW to 63:28 [6] '"v"'(STRING)
              Statement TRY FunctionCall on '"v"'(STRING)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: -no closer-
                  FunctionAccess TRY Expression on '"v"'(STRING)
                    Expression TRY Operand on '"v"'(STRING)
                      Operand TRY StringLiteral on '"v"'(STRING)
                        StringLiteral matched OK: STRING "v"
>>>ADVANCE 63:31 [7] '+'(OPER)
                      Parsed OK!-> StringLiteral
                    Parsed OK!-> Operand
                    Expression TRY Oper on '+'(OPER)
                      Oper matched OK: OPER +
>>>ADVANCE 63:32 [8] 'LiteScript'(IDENTIFIER)
                    Parsed OK!-> Oper
                    Expression TRY Operand on 'LiteScript'(IDENTIFIER)
                      Operand TRY VariableRef on 'LiteScript'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER LiteScript
>>>ADVANCE 63:42 [9] '.'(LITERAL)
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 63:43 [10] 'version'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER version
>>>ADVANCE 65:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> PropertyAccess
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression matched OK: NEWLINE  
>>>ADVANCE 65:9 [0] 'CompareOrig_ed'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 65
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: NEWLINE  
>>>ADVANCE 65:9 [0] 'CompareOrig_ed'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 65
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 65:9 [0] 'CompareOrig_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'CompareOrig_ed'(IDENTIFIER)

65 8(CODE) CompareOrig_ed = mkEditor("Compare-Lite")
    'CompareOrig_ed'(IDENTIFIER) '='(ASSIGN) 'mkEditor'(IDENTIFIER) '('(LITERAL) '"Compare-Lite"'(STRING) ')'(LITERAL)

              Statement TRY Adjective on 'CompareOrig_ed'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:65:1. Adjective: found 'CompareOrig_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 65:9 [0] 'CompareOrig_ed'(IDENTIFIER)
              Statement TRY VariableRef on 'CompareOrig_ed'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER CompareOrig_ed
>>>ADVANCE 65:24 [1] '='(ASSIGN)
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on '='(ASSIGN)
                AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 65:26 [2] 'mkEditor'(IDENTIFIER)
                AssignmentStatement TRY Expression on 'mkEditor'(IDENTIFIER)
                  Expression TRY Operand on 'mkEditor'(IDENTIFIER)
                    Operand TRY VariableRef on 'mkEditor'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER mkEditor
>>>ADVANCE 65:34 [3] '('(LITERAL)
                      VariableRef TRY FunctionAccess on '('(LITERAL)
                        FunctionAccess matched OK: ( (
>>>ADVANCE 65:35 [4] '"Compare-Lite"'(STRING)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                        FunctionAccess TRY Expression on '"Compare-Lite"'(STRING)
                          Expression TRY Operand on '"Compare-Lite"'(STRING)
                            Operand TRY StringLiteral on '"Compare-Lite"'(STRING)
                              StringLiteral matched OK: STRING "Compare-Lite"
>>>ADVANCE 65:49 [5] ')'(LITERAL)
                            Parsed OK!-> StringLiteral
                          Parsed OK!-> Operand
                        Parsed OK!-> Expression
                        FunctionAccess matched OK: ) )
>>>ADVANCE 66:0 [-1] ' '(NEWLINE)
                      Parsed OK!-> FunctionAccess
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression matched OK: NEWLINE  
>>>ADVANCE 66:9 [0] 'CompareJs_ed'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 66
                Parsed OK!-> Expression
              Parsed OK!-> AssignmentStatement
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 66:9 [0] 'CompareJs_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'CompareJs_ed'(IDENTIFIER)

66 8(CODE) CompareJs_ed = mkEditor("Compare-js")
    'CompareJs_ed'(IDENTIFIER) '='(ASSIGN) 'mkEditor'(IDENTIFIER) '('(LITERAL) '"Compare-js"'(STRING) ')'(LITERAL)

              Statement TRY Adjective on 'CompareJs_ed'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:66:1. Adjective: found 'CompareJs_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 66:9 [0] 'CompareJs_ed'(IDENTIFIER)
              Statement TRY VariableRef on 'CompareJs_ed'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER CompareJs_ed
>>>ADVANCE 66:22 [1] '='(ASSIGN)
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on '='(ASSIGN)
                AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 66:24 [2] 'mkEditor'(IDENTIFIER)
                AssignmentStatement TRY Expression on 'mkEditor'(IDENTIFIER)
                  Expression TRY Operand on 'mkEditor'(IDENTIFIER)
                    Operand TRY VariableRef on 'mkEditor'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER mkEditor
>>>ADVANCE 66:32 [3] '('(LITERAL)
                      VariableRef TRY FunctionAccess on '('(LITERAL)
                        FunctionAccess matched OK: ( (
>>>ADVANCE 66:33 [4] '"Compare-js"'(STRING)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                        FunctionAccess TRY Expression on '"Compare-js"'(STRING)
                          Expression TRY Operand on '"Compare-js"'(STRING)
                            Operand TRY StringLiteral on '"Compare-js"'(STRING)
                              StringLiteral matched OK: STRING "Compare-js"
>>>ADVANCE 66:45 [5] ')'(LITERAL)
                            Parsed OK!-> StringLiteral
                          Parsed OK!-> Operand
                        Parsed OK!-> Expression
                        FunctionAccess matched OK: ) )
>>>ADVANCE 68:0 [-1] ' '(NEWLINE)
                      Parsed OK!-> FunctionAccess
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression matched OK: NEWLINE  
>>>ADVANCE 68:9 [0] 'loadSample'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 68
                Parsed OK!-> Expression
              Parsed OK!-> AssignmentStatement
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 68:9 [0] 'loadSample'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'loadSample'(IDENTIFIER)

68 8(CODE) loadSample 'Literate.lite.md'
    'loadSample'(IDENTIFIER) ''Literate.lite.md''(STRING)

              Statement TRY Adjective on 'loadSample'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:68:1. Adjective: found 'loadSample'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 68:9 [0] 'loadSample'(IDENTIFIER)
              Statement TRY VariableRef on 'loadSample'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER loadSample
>>>ADVANCE 68:20 [1] ''Literate.lite.md''(STRING)
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ''Literate.lite.md''(STRING)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:68:10. AssignmentStatement: found ''Literate.lite.md''(STRING) but 'ASSIGN' required
<<REW to 68:20 [1] ''Literate.lite.md''(STRING)
              Statement TRY FunctionCall on ''Literate.lite.md''(STRING)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: -no closer-
                  FunctionAccess TRY Expression on ''Literate.lite.md''(STRING)
                    Expression TRY Operand on ''Literate.lite.md''(STRING)
                      Operand TRY StringLiteral on ''Literate.lite.md''(STRING)
                        StringLiteral matched OK: STRING 'Literate.lite.md'
>>>ADVANCE 70:0 [-1] ' '(NEWLINE)
                      Parsed OK!-> StringLiteral
                    Parsed OK!-> Operand
                    Expression matched OK: NEWLINE  
>>>ADVANCE 70:5 [0] 'end'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 70
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: NEWLINE  
>>>ADVANCE 70:5 [0] 'end'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 70
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 70:5 [0] 'end'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> FunctionDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'end'(IDENTIFIER)

70 4(CODE) end function
    'end'(IDENTIFIER) 'function'(IDENTIFIER)

        Statement TRY EndStatement on 'end'(IDENTIFIER)
          EndStatement matched OK: end end
>>>ADVANCE 70:9 [1] 'function'(IDENTIFIER)
>>>ADVANCE 73:0 [-1] ' '(NEWLINE)
          EndStatement matched OK: NEWLINE  
>>>ADVANCE 73:5 [0] 'function'(IDENTIFIER)
        Parsed OK!-> EndStatement
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'function'(IDENTIFIER)

73 4(CODE) function loadSample(fname,callback)
    'function'(IDENTIFIER) 'loadSample'(IDENTIFIER) '('(LITERAL) 'fname'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

        Statement TRY FunctionDeclaration on 'function'(IDENTIFIER)
          FunctionDeclaration matched OK: function function
>>>ADVANCE 73:14 [1] 'loadSample'(IDENTIFIER)
          FunctionDeclaration matched OK: IDENTIFIER loadSample
>>>ADVANCE 73:24 [2] '('(LITERAL)
          FunctionDeclaration matched OK: ( (
>>>ADVANCE 73:25 [3] 'fname'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:4, get SeparatedList of [VariableDecl] by ',' closer: )
          FunctionDeclaration TRY VariableDecl on 'fname'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER fname
>>>ADVANCE 73:30 [4] ','(LITERAL)
          Parsed OK!-> VariableDecl
          FunctionDeclaration matched OK: , ,
>>>ADVANCE 73:31 [5] 'callback'(IDENTIFIER)
          FunctionDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 73:39 [6] ')'(LITERAL)
          Parsed OK!-> VariableDecl
          FunctionDeclaration matched OK: ) )
>>>ADVANCE 75:0 [-1] ' '(NEWLINE)
          FunctionDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 75:9 [0] 'loadedFname'(IDENTIFIER)
optFreeFormList [Body] parentname:loadSample parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'loadedFname'(IDENTIFIER)

75 8(CODE) loadedFname = fname
    'loadedFname'(IDENTIFIER) '='(ASSIGN) 'fname'(IDENTIFIER)

              Statement TRY Adjective on 'loadedFname'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:75:1. Adjective: found 'loadedFname'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 75:9 [0] 'loadedFname'(IDENTIFIER)
              Statement TRY VariableRef on 'loadedFname'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER loadedFname
>>>ADVANCE 75:21 [1] '='(ASSIGN)
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on '='(ASSIGN)
                AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 75:23 [2] 'fname'(IDENTIFIER)
                AssignmentStatement TRY Expression on 'fname'(IDENTIFIER)
                  Expression TRY Operand on 'fname'(IDENTIFIER)
                    Operand TRY VariableRef on 'fname'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER fname
>>>ADVANCE 76:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression matched OK: NEWLINE  
>>>ADVANCE 76:9 [0] 'loadExample'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 76
                Parsed OK!-> Expression
              Parsed OK!-> AssignmentStatement
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 76:9 [0] 'loadExample'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'loadExample'(IDENTIFIER)

76 8(CODE) loadExample fname, function(err,data)
    'loadExample'(IDENTIFIER) 'fname'(IDENTIFIER) ','(LITERAL) 'function'(IDENTIFIER) '('(LITERAL) 'err'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ')'(LITERAL)

              Statement TRY Adjective on 'loadExample'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:76:1. Adjective: found 'loadExample'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 76:9 [0] 'loadExample'(IDENTIFIER)
              Statement TRY VariableRef on 'loadExample'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER loadExample
>>>ADVANCE 76:21 [1] 'fname'(IDENTIFIER)
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on 'fname'(IDENTIFIER)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:76:10. AssignmentStatement: found 'fname'(IDENTIFIER) but 'ASSIGN' required
<<REW to 76:21 [1] 'fname'(IDENTIFIER)
              Statement TRY FunctionCall on 'fname'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: -no closer-
                  FunctionAccess TRY Expression on 'fname'(IDENTIFIER)
                    Expression TRY Operand on 'fname'(IDENTIFIER)
                      Operand TRY VariableRef on 'fname'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER fname
>>>ADVANCE 76:26 [2] ','(LITERAL)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: , ,
>>>ADVANCE 76:28 [3] 'function'(IDENTIFIER)
                  FunctionAccess TRY Expression on 'function'(IDENTIFIER)
                    Expression TRY Operand on 'function'(IDENTIFIER)
                      Operand TRY FunctionDeclaration on 'function'(IDENTIFIER)
                        FunctionDeclaration matched OK: function function
>>>ADVANCE 76:36 [4] '('(LITERAL)
                        FunctionDeclaration matched OK: ( (
>>>ADVANCE 76:37 [5] 'err'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                        FunctionDeclaration TRY VariableDecl on 'err'(IDENTIFIER)
                          VariableDecl matched OK: IDENTIFIER err
>>>ADVANCE 76:40 [6] ','(LITERAL)
                        Parsed OK!-> VariableDecl
                        FunctionDeclaration matched OK: , ,
>>>ADVANCE 76:41 [7] 'data'(IDENTIFIER)
                        FunctionDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                          VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 76:45 [8] ')'(LITERAL)
                        Parsed OK!-> VariableDecl
                        FunctionDeclaration matched OK: ) )
>>>ADVANCE 77:0 [-1] ' '(NEWLINE)
                        FunctionDeclaration TRY Body on ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 77:13 [0] 'if'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                          Body TRY Statement on 'if'(IDENTIFIER)

77 12(CODE) if err, return
    'if'(IDENTIFIER) 'err'(IDENTIFIER) ','(LITERAL) 'return'(IDENTIFIER)

                            Statement TRY IfStatement on 'if'(IDENTIFIER)
                              IfStatement matched OK: if if
>>>ADVANCE 77:16 [1] 'err'(IDENTIFIER)
                              IfStatement TRY Expression on 'err'(IDENTIFIER)
                                Expression TRY Operand on 'err'(IDENTIFIER)
                                  Operand TRY VariableRef on 'err'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER err
>>>ADVANCE 77:19 [2] ','(LITERAL)
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                              Parsed OK!-> Expression
                              IfStatement matched OK: , ,
>>>ADVANCE 77:21 [3] 'return'(IDENTIFIER)
                              IfStatement TRY SingleLineStatement on 'return'(IDENTIFIER)
optSeparatedList [SingleLineStatement] indent:12, get SeparatedList of [Statement] by ';' closer: NEWLINE
                                SingleLineStatement TRY Statement on 'return'(IDENTIFIER)

77 12(CODE) if err, return
    'if'(IDENTIFIER) 'err'(IDENTIFIER) ','(LITERAL) 'return'(IDENTIFIER)

                                  Statement TRY ReturnStatement on 'return'(IDENTIFIER)
                                    ReturnStatement matched OK: return return
>>>ADVANCE 78:0 [-1] ' '(NEWLINE)
                                    ReturnStatement TRY Expression on ' '(NEWLINE)
                                      Expression TRY Operand on ' '(NEWLINE)
                                        Operand TRY VariableRef on ' '(NEWLINE)
                                        VariableRef parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:77:22. VariableRef: found ' '(NEWLINE) but 'IDENTIFIER' required
<<REW to 78:0 [-1] ' '(NEWLINE)
                                      Operand parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:77:22. Operand: found ' '(NEWLINE) but [VariableRef] required
<<REW to 78:0 [-1] ' '(NEWLINE)
                                    Expression parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:77:22. Expression: found ' '(NEWLINE) but [Operand] required
<<REW to 78:0 [-1] ' '(NEWLINE)
                                  Parsed OK!-> ReturnStatement
                                Parsed OK!-> Statement
                                SingleLineStatement matched OK: NEWLINE  
>>>ADVANCE 78:13 [0] 'run'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 78
                              Parsed OK!-> SingleLineStatement
                              IfStatement matched OK: NEWLINE  
>>>ADVANCE 78:13 [0] 'run'(IDENTIFIER)
                              IfStatement TRY ElseIfStatement on 'run'(IDENTIFIER)
                              ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:78:1. ElseIfStatement: found 'run'(IDENTIFIER) but 'else' required
<<REW to 78:13 [0] 'run'(IDENTIFIER)
                              IfStatement TRY ElseStatement on 'run'(IDENTIFIER)
                              ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:78:1. ElseStatement: found 'run'(IDENTIFIER) but 'else' required
<<REW to 78:13 [0] 'run'(IDENTIFIER)
                            Parsed OK!-> IfStatement
                          Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                          Body TRY Statement on 'run'(IDENTIFIER)

78 12(CODE) run
    'run'(IDENTIFIER)

                            Statement TRY Adjective on 'run'(IDENTIFIER)
                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:78:1. Adjective: found 'run'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 78:13 [0] 'run'(IDENTIFIER)
                            Statement TRY VariableRef on 'run'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER run
>>>ADVANCE 80:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                            Statement TRY AssignmentStatement on ' '(NEWLINE)
                            AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:78:14. AssignmentStatement: found ' '(NEWLINE) but 'ASSIGN' required
<<REW to 80:0 [-1] ' '(NEWLINE)
                            Statement TRY FunctionCall on ' '(NEWLINE)
                            Parsed OK!-> FunctionCall
                          Parsed OK!-> Statement
                          Body matched OK: NEWLINE  
>>>ADVANCE 80:5 [0] 'function'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                        Parsed OK!-> Body
                      Parsed OK!-> FunctionDeclaration
                    Parsed OK!-> Operand
                    Expression TRY Oper on 'function'(IDENTIFIER)
                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:80:1. Oper: found 'function'(IDENTIFIER) but 'OPER' required
<<REW to 80:5 [0] 'function'(IDENTIFIER)
                  Parsed OK!-> Expression
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> FunctionDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'function'(IDENTIFIER)

80 4(CODE) function run
    'function'(IDENTIFIER) 'run'(IDENTIFIER)

        Statement TRY FunctionDeclaration on 'function'(IDENTIFIER)
          FunctionDeclaration matched OK: function function
>>>ADVANCE 80:14 [1] 'run'(IDENTIFIER)
          FunctionDeclaration matched OK: IDENTIFIER run
>>>ADVANCE 82:0 [-1] ' '(NEWLINE)
          FunctionDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 82:9 [0] 'var'(IDENTIFIER)
optFreeFormList [Body] parentname:run parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'var'(IDENTIFIER)

82 8(CODE) var liteSource = CompareOrig_ed.getValue();
    'var'(IDENTIFIER) 'liteSource'(IDENTIFIER) '='(ASSIGN) 'CompareOrig_ed'(IDENTIFIER) '.'(LITERAL) 'getValue'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) ';'(LITERAL)

              Statement TRY VarStatement on 'var'(IDENTIFIER)
                VarStatement matched OK: var var
>>>ADVANCE 82:13 [1] 'liteSource'(IDENTIFIER)
optSeparatedList [VarStatement] indent:8, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                VarStatement TRY VariableDecl on 'liteSource'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER liteSource
>>>ADVANCE 82:24 [2] '='(ASSIGN)
                  VariableDecl matched OK: = =
>>>ADVANCE 82:26 [3] 'CompareOrig_ed'(IDENTIFIER)
                  VariableDecl TRY Expression on 'CompareOrig_ed'(IDENTIFIER)
                    Expression TRY Operand on 'CompareOrig_ed'(IDENTIFIER)
                      Operand TRY VariableRef on 'CompareOrig_ed'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER CompareOrig_ed
>>>ADVANCE 82:40 [4] '.'(LITERAL)
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 82:41 [5] 'getValue'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER getValue
>>>ADVANCE 82:49 [6] '('(LITERAL)
                        Parsed OK!-> PropertyAccess
                        VariableRef TRY FunctionAccess on '('(LITERAL)
                          FunctionAccess matched OK: ( (
>>>ADVANCE 82:50 [7] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                          FunctionAccess matched OK: ) )
>>>ADVANCE 82:51 [8] ';'(LITERAL)
                        Parsed OK!-> FunctionAccess
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression TRY Oper on ';'(LITERAL)
                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:82:51. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 82:51 [8] ';'(LITERAL)
                  Parsed OK!-> Expression
                Parsed OK!-> VariableDecl
              Parsed OK!-> VarStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 87:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 87:9 [0] 'CompareOrig_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'CompareOrig_ed'(IDENTIFIER)

87 8(CODE) CompareOrig_ed.resize(true);
    'CompareOrig_ed'(IDENTIFIER) '.'(LITERAL) 'resize'(IDENTIFIER) '('(LITERAL) 'true'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'CompareOrig_ed'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:87:1. Adjective: found 'CompareOrig_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 87:9 [0] 'CompareOrig_ed'(IDENTIFIER)
              Statement TRY VariableRef on 'CompareOrig_ed'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER CompareOrig_ed
>>>ADVANCE 87:23 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 87:24 [2] 'resize'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER resize
>>>ADVANCE 87:30 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 87:31 [4] 'true'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on 'true'(IDENTIFIER)
                    Expression TRY Operand on 'true'(IDENTIFIER)
                      Operand TRY VariableRef on 'true'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER true
>>>ADVANCE 87:35 [5] ')'(LITERAL)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 87:36 [6] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:87:36. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 87:36 [6] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 91:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 91:9 [0] 'log'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'log'(IDENTIFIER)

91 8(CODE) log.warning.count=0; //clear
    'log'(IDENTIFIER) '.'(LITERAL) 'warning'(IDENTIFIER) '.'(LITERAL) 'count'(IDENTIFIER) '='(ASSIGN) '0'(NUMBER) ';'(LITERAL) '//clear'(COMMENT)

              Statement TRY Adjective on 'log'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:91:1. Adjective: found 'log'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 91:9 [0] 'log'(IDENTIFIER)
              Statement TRY VariableRef on 'log'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER log
>>>ADVANCE 91:12 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 91:13 [2] 'warning'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER warning
>>>ADVANCE 91:20 [3] '.'(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 91:21 [4] 'count'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER count
>>>ADVANCE 91:26 [5] '='(ASSIGN)
                Parsed OK!-> PropertyAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on '='(ASSIGN)
                AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 91:27 [6] '0'(NUMBER)
                AssignmentStatement TRY Expression on '0'(NUMBER)
                  Expression TRY Operand on '0'(NUMBER)
                    Operand TRY NumberLiteral on '0'(NUMBER)
                      NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 91:28 [7] ';'(LITERAL)
                    Parsed OK!-> NumberLiteral
                  Parsed OK!-> Operand
                  Expression TRY Oper on ';'(LITERAL)
                  Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:91:28. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 91:28 [7] ';'(LITERAL)
                Parsed OK!-> Expression
              Parsed OK!-> AssignmentStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 92:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 92:9 [0] 'log'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'log'(IDENTIFIER)

92 8(CODE) log.getMessages(); //clear
    'log'(IDENTIFIER) '.'(LITERAL) 'getMessages'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) ';'(LITERAL) '//clear'(COMMENT)

              Statement TRY Adjective on 'log'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:92:1. Adjective: found 'log'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 92:9 [0] 'log'(IDENTIFIER)
              Statement TRY VariableRef on 'log'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER log
>>>ADVANCE 92:12 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 92:13 [2] 'getMessages'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER getMessages
>>>ADVANCE 92:24 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 92:25 [4] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess matched OK: ) )
>>>ADVANCE 92:26 [5] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:92:26. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 92:26 [5] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 94:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 94:9 [0] 'try'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'try'(IDENTIFIER)

94 8(CODE) try
    'try'(IDENTIFIER)

              Statement TRY TryCatch on 'try'(IDENTIFIER)
                TryCatch matched OK: try try
>>>ADVANCE 95:0 [-1] ' '(NEWLINE)
                TryCatch TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 95:13 [0] 'var'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'var'(IDENTIFIER)

95 12(CODE) var compiled = LiteScript.compile(loadedFname, liteSource, compileOptions);
    'var'(IDENTIFIER) 'compiled'(IDENTIFIER) '='(ASSIGN) 'LiteScript'(IDENTIFIER) '.'(LITERAL) 'compile'(IDENTIFIER) '('(LITERAL) 'loadedFname'(IDENTIFIER) ','(LITERAL) 'liteSource'(IDENTIFIER) ','(LITERAL) 'compileOptions'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                    Statement TRY VarStatement on 'var'(IDENTIFIER)
                      VarStatement matched OK: var var
>>>ADVANCE 95:17 [1] 'compiled'(IDENTIFIER)
optSeparatedList [VarStatement] indent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                      VarStatement TRY VariableDecl on 'compiled'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER compiled
>>>ADVANCE 95:26 [2] '='(ASSIGN)
                        VariableDecl matched OK: = =
>>>ADVANCE 95:28 [3] 'LiteScript'(IDENTIFIER)
                        VariableDecl TRY Expression on 'LiteScript'(IDENTIFIER)
                          Expression TRY Operand on 'LiteScript'(IDENTIFIER)
                            Operand TRY VariableRef on 'LiteScript'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER LiteScript
>>>ADVANCE 95:38 [4] '.'(LITERAL)
                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                PropertyAccess matched OK: . .
>>>ADVANCE 95:39 [5] 'compile'(IDENTIFIER)
                                PropertyAccess matched OK: IDENTIFIER compile
>>>ADVANCE 95:46 [6] '('(LITERAL)
                              Parsed OK!-> PropertyAccess
                              VariableRef TRY FunctionAccess on '('(LITERAL)
                                FunctionAccess matched OK: ( (
>>>ADVANCE 95:47 [7] 'loadedFname'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                                FunctionAccess TRY Expression on 'loadedFname'(IDENTIFIER)
                                  Expression TRY Operand on 'loadedFname'(IDENTIFIER)
                                    Operand TRY VariableRef on 'loadedFname'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER loadedFname
>>>ADVANCE 95:58 [8] ','(LITERAL)
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: , ,
>>>ADVANCE 95:60 [9] 'liteSource'(IDENTIFIER)
                                FunctionAccess TRY Expression on 'liteSource'(IDENTIFIER)
                                  Expression TRY Operand on 'liteSource'(IDENTIFIER)
                                    Operand TRY VariableRef on 'liteSource'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER liteSource
>>>ADVANCE 95:70 [10] ','(LITERAL)
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: , ,
>>>ADVANCE 95:72 [11] 'compileOptions'(IDENTIFIER)
                                FunctionAccess TRY Expression on 'compileOptions'(IDENTIFIER)
                                  Expression TRY Operand on 'compileOptions'(IDENTIFIER)
                                    Operand TRY VariableRef on 'compileOptions'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER compileOptions
>>>ADVANCE 95:86 [12] ')'(LITERAL)
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: ) )
>>>ADVANCE 95:87 [13] ';'(LITERAL)
                              Parsed OK!-> FunctionAccess
                            Parsed OK!-> VariableRef
                          Parsed OK!-> Operand
                          Expression TRY Oper on ';'(LITERAL)
                          Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:95:87. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 95:87 [13] ';'(LITERAL)
                        Parsed OK!-> Expression
                      Parsed OK!-> VariableDecl
                    Parsed OK!-> VarStatement
                  Parsed OK!-> Statement
                  Body matched OK: ; ;
>>>ADVANCE 96:0 [-1] ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 96:10 [0] 'catch'(IDENTIFIER)
freeForm Mode .lexer.indent:9 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
                TryCatch TRY ExceptionBlock on 'catch'(IDENTIFIER)
                  ExceptionBlock matched OK: catch catch
>>>ADVANCE 96:16 [1] 'e'(IDENTIFIER)
                  ExceptionBlock matched OK: IDENTIFIER e
>>>ADVANCE 97:0 [-1] ' '(NEWLINE)
                  ExceptionBlock TRY Body on ' '(NEWLINE)
                    Body matched OK: NEWLINE  
>>>ADVANCE 97:13 [0] 'console'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:9, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:9
                    Body TRY Statement on 'console'(IDENTIFIER)

97 12(CODE) console.log(e.stack);
    'console'(IDENTIFIER) '.'(LITERAL) 'log'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) '.'(LITERAL) 'stack'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                      Statement TRY Adjective on 'console'(IDENTIFIER)
                      Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:97:1. Adjective: found 'console'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 97:13 [0] 'console'(IDENTIFIER)
                      Statement TRY VariableRef on 'console'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER console
>>>ADVANCE 97:20 [1] '.'(LITERAL)
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 97:21 [2] 'log'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER log
>>>ADVANCE 97:24 [3] '('(LITERAL)
                        Parsed OK!-> PropertyAccess
                        VariableRef TRY FunctionAccess on '('(LITERAL)
                          FunctionAccess matched OK: ( (
>>>ADVANCE 97:25 [4] 'e'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                          FunctionAccess TRY Expression on 'e'(IDENTIFIER)
                            Expression TRY Operand on 'e'(IDENTIFIER)
                              Operand TRY VariableRef on 'e'(IDENTIFIER)
                                VariableRef matched OK: IDENTIFIER e
>>>ADVANCE 97:26 [5] '.'(LITERAL)
                                VariableRef TRY PropertyAccess on '.'(LITERAL)
                                  PropertyAccess matched OK: . .
>>>ADVANCE 97:27 [6] 'stack'(IDENTIFIER)
                                  PropertyAccess matched OK: IDENTIFIER stack
>>>ADVANCE 97:32 [7] ')'(LITERAL)
                                Parsed OK!-> PropertyAccess
                              Parsed OK!-> VariableRef
                            Parsed OK!-> Operand
                          Parsed OK!-> Expression
                          FunctionAccess matched OK: ) )
>>>ADVANCE 97:33 [8] ';'(LITERAL)
                        Parsed OK!-> FunctionAccess
                      Parsed OK!-> VariableRef
                      Statement TRY AssignmentStatement on ';'(LITERAL)
                      AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:97:33. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 97:33 [8] ';'(LITERAL)
                      Statement TRY FunctionCall on ';'(LITERAL)
                      Parsed OK!-> FunctionCall
                    Parsed OK!-> Statement
                    Body matched OK: ; ;
>>>ADVANCE 98:0 [-1] ' '(NEWLINE)
                    Body matched OK: NEWLINE  
>>>ADVANCE 98:13 [0] 'compiled'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:9
                    Body TRY Statement on 'compiled'(IDENTIFIER)

98 12(CODE) compiled = log.getMessages().join('\n');
    'compiled'(IDENTIFIER) '='(ASSIGN) 'log'(IDENTIFIER) '.'(LITERAL) 'getMessages'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) '.'(LITERAL) 'join'(IDENTIFIER) '('(LITERAL) ''\n''(STRING) ')'(LITERAL) ';'(LITERAL)

                      Statement TRY Adjective on 'compiled'(IDENTIFIER)
                      Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:98:1. Adjective: found 'compiled'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 98:13 [0] 'compiled'(IDENTIFIER)
                      Statement TRY VariableRef on 'compiled'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER compiled
>>>ADVANCE 98:22 [1] '='(ASSIGN)
                      Parsed OK!-> VariableRef
                      Statement TRY AssignmentStatement on '='(ASSIGN)
                        AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 98:24 [2] 'log'(IDENTIFIER)
                        AssignmentStatement TRY Expression on 'log'(IDENTIFIER)
                          Expression TRY Operand on 'log'(IDENTIFIER)
                            Operand TRY VariableRef on 'log'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER log
>>>ADVANCE 98:27 [3] '.'(LITERAL)
                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                PropertyAccess matched OK: . .
>>>ADVANCE 98:28 [4] 'getMessages'(IDENTIFIER)
                                PropertyAccess matched OK: IDENTIFIER getMessages
>>>ADVANCE 98:39 [5] '('(LITERAL)
                              Parsed OK!-> PropertyAccess
                              VariableRef TRY FunctionAccess on '('(LITERAL)
                                FunctionAccess matched OK: ( (
>>>ADVANCE 98:40 [6] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                                FunctionAccess matched OK: ) )
>>>ADVANCE 98:41 [7] '.'(LITERAL)
                              Parsed OK!-> FunctionAccess
                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                PropertyAccess matched OK: . .
>>>ADVANCE 98:42 [8] 'join'(IDENTIFIER)
                                PropertyAccess matched OK: IDENTIFIER join
>>>ADVANCE 98:46 [9] '('(LITERAL)
                              Parsed OK!-> PropertyAccess
                              VariableRef TRY FunctionAccess on '('(LITERAL)
                                FunctionAccess matched OK: ( (
>>>ADVANCE 98:47 [10] ''\n''(STRING)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                                FunctionAccess TRY Expression on ''\n''(STRING)
                                  Expression TRY Operand on ''\n''(STRING)
                                    Operand TRY StringLiteral on ''\n''(STRING)
                                      StringLiteral matched OK: STRING '\n'
>>>ADVANCE 98:51 [11] ')'(LITERAL)
                                    Parsed OK!-> StringLiteral
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: ) )
>>>ADVANCE 98:52 [12] ';'(LITERAL)
                              Parsed OK!-> FunctionAccess
                            Parsed OK!-> VariableRef
                          Parsed OK!-> Operand
                          Expression TRY Oper on ';'(LITERAL)
                          Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:98:52. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 98:52 [12] ';'(LITERAL)
                        Parsed OK!-> Expression
                      Parsed OK!-> AssignmentStatement
                    Parsed OK!-> Statement
                    Body matched OK: ; ;
>>>ADVANCE 99:0 [-1] ' '(NEWLINE)
                    Body matched OK: NEWLINE  
>>>ADVANCE 99:13 [0] 'compiled'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:9
                    Body TRY Statement on 'compiled'(IDENTIFIER)

99 12(CODE) compiled += '\n'+e.message;
    'compiled'(IDENTIFIER) '+='(ASSIGN) ''\n''(STRING) '+'(OPER) 'e'(IDENTIFIER) '.'(LITERAL) 'message'(IDENTIFIER) ';'(LITERAL)

                      Statement TRY Adjective on 'compiled'(IDENTIFIER)
                      Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:99:1. Adjective: found 'compiled'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 99:13 [0] 'compiled'(IDENTIFIER)
                      Statement TRY VariableRef on 'compiled'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER compiled
>>>ADVANCE 99:22 [1] '+='(ASSIGN)
                      Parsed OK!-> VariableRef
                      Statement TRY AssignmentStatement on '+='(ASSIGN)
                        AssignmentStatement matched OK: ASSIGN +=
>>>ADVANCE 99:25 [2] ''\n''(STRING)
                        AssignmentStatement TRY Expression on ''\n''(STRING)
                          Expression TRY Operand on ''\n''(STRING)
                            Operand TRY StringLiteral on ''\n''(STRING)
                              StringLiteral matched OK: STRING '\n'
>>>ADVANCE 99:29 [3] '+'(OPER)
                            Parsed OK!-> StringLiteral
                          Parsed OK!-> Operand
                          Expression TRY Oper on '+'(OPER)
                            Oper matched OK: OPER +
>>>ADVANCE 99:30 [4] 'e'(IDENTIFIER)
                          Parsed OK!-> Oper
                          Expression TRY Operand on 'e'(IDENTIFIER)
                            Operand TRY VariableRef on 'e'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER e
>>>ADVANCE 99:31 [5] '.'(LITERAL)
                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                PropertyAccess matched OK: . .
>>>ADVANCE 99:32 [6] 'message'(IDENTIFIER)
                                PropertyAccess matched OK: IDENTIFIER message
>>>ADVANCE 99:39 [7] ';'(LITERAL)
                              Parsed OK!-> PropertyAccess
                            Parsed OK!-> VariableRef
                          Parsed OK!-> Operand
                          Expression TRY Oper on ';'(LITERAL)
                          Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:99:33. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 99:39 [7] ';'(LITERAL)
                        Parsed OK!-> Expression
                      Parsed OK!-> AssignmentStatement
                    Parsed OK!-> Statement
                    Body matched OK: ; ;
>>>ADVANCE 100:0 [-1] ' '(NEWLINE)
                    Body matched OK: NEWLINE  
>>>ADVANCE 100:13 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:9
                    Body TRY Statement on 'if'(IDENTIFIER)

100 12(CODE) if not e.controled, compiled += '\n'+e.stack;
    'if'(IDENTIFIER) 'not'(OPER) 'e'(IDENTIFIER) '.'(LITERAL) 'controled'(IDENTIFIER) ','(LITERAL) 'compiled'(IDENTIFIER) '+='(ASSIGN) ''\n''(STRING) '+'(OPER) 'e'(IDENTIFIER) '.'(LITERAL) 'stack'(IDENTIFIER) ';'(LITERAL)

                      Statement TRY IfStatement on 'if'(IDENTIFIER)
                        IfStatement matched OK: if if
>>>ADVANCE 100:16 [1] 'not'(OPER)
                        IfStatement TRY Expression on 'not'(OPER)
                          Expression TRY UnaryOper on 'not'(OPER)
                            UnaryOper matched OK: not not
>>>ADVANCE 100:20 [2] 'e'(IDENTIFIER)
                          Parsed OK!-> UnaryOper
                          Expression TRY Operand on 'e'(IDENTIFIER)
                            Operand TRY VariableRef on 'e'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER e
>>>ADVANCE 100:21 [3] '.'(LITERAL)
                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                PropertyAccess matched OK: . .
>>>ADVANCE 100:22 [4] 'controled'(IDENTIFIER)
                                PropertyAccess matched OK: IDENTIFIER controled
>>>ADVANCE 100:31 [5] ','(LITERAL)
                              Parsed OK!-> PropertyAccess
                            Parsed OK!-> VariableRef
                          Parsed OK!-> Operand
                        Parsed OK!-> Expression
                        IfStatement matched OK: , ,
>>>ADVANCE 100:33 [6] 'compiled'(IDENTIFIER)
                        IfStatement TRY SingleLineStatement on 'compiled'(IDENTIFIER)
optSeparatedList [SingleLineStatement] indent:12, get SeparatedList of [Statement] by ';' closer: NEWLINE
                          SingleLineStatement TRY Statement on 'compiled'(IDENTIFIER)

100 12(CODE) if not e.controled, compiled += '\n'+e.stack;
    'if'(IDENTIFIER) 'not'(OPER) 'e'(IDENTIFIER) '.'(LITERAL) 'controled'(IDENTIFIER) ','(LITERAL) 'compiled'(IDENTIFIER) '+='(ASSIGN) ''\n''(STRING) '+'(OPER) 'e'(IDENTIFIER) '.'(LITERAL) 'stack'(IDENTIFIER) ';'(LITERAL)

                            Statement TRY Adjective on 'compiled'(IDENTIFIER)
                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:100:32. Adjective: found 'compiled'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 100:33 [6] 'compiled'(IDENTIFIER)
                            Statement TRY VariableRef on 'compiled'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER compiled
>>>ADVANCE 100:42 [7] '+='(ASSIGN)
                            Parsed OK!-> VariableRef
                            Statement TRY AssignmentStatement on '+='(ASSIGN)
                              AssignmentStatement matched OK: ASSIGN +=
>>>ADVANCE 100:45 [8] ''\n''(STRING)
                              AssignmentStatement TRY Expression on ''\n''(STRING)
                                Expression TRY Operand on ''\n''(STRING)
                                  Operand TRY StringLiteral on ''\n''(STRING)
                                    StringLiteral matched OK: STRING '\n'
>>>ADVANCE 100:49 [9] '+'(OPER)
                                  Parsed OK!-> StringLiteral
                                Parsed OK!-> Operand
                                Expression TRY Oper on '+'(OPER)
                                  Oper matched OK: OPER +
>>>ADVANCE 100:50 [10] 'e'(IDENTIFIER)
                                Parsed OK!-> Oper
                                Expression TRY Operand on 'e'(IDENTIFIER)
                                  Operand TRY VariableRef on 'e'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER e
>>>ADVANCE 100:51 [11] '.'(LITERAL)
                                    VariableRef TRY PropertyAccess on '.'(LITERAL)
                                      PropertyAccess matched OK: . .
>>>ADVANCE 100:52 [12] 'stack'(IDENTIFIER)
                                      PropertyAccess matched OK: IDENTIFIER stack
>>>ADVANCE 100:57 [13] ';'(LITERAL)
                                    Parsed OK!-> PropertyAccess
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                                Expression TRY Oper on ';'(LITERAL)
                                Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:100:53. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 100:57 [13] ';'(LITERAL)
                              Parsed OK!-> Expression
                            Parsed OK!-> AssignmentStatement
                          Parsed OK!-> Statement
                          SingleLineStatement matched OK: ; ;
>>>ADVANCE 101:0 [-1] ' '(NEWLINE)
                          SingleLineStatement matched OK: NEWLINE  
>>>ADVANCE 101:13 [0] 'log'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 101
                        Parsed OK!-> SingleLineStatement
                        IfStatement matched OK: NEWLINE  
>>>ADVANCE 101:13 [0] 'log'(IDENTIFIER)
                        IfStatement TRY ElseIfStatement on 'log'(IDENTIFIER)
                        ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:101:1. ElseIfStatement: found 'log'(IDENTIFIER) but 'else' required
<<REW to 101:13 [0] 'log'(IDENTIFIER)
                        IfStatement TRY ElseStatement on 'log'(IDENTIFIER)
                        ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:101:1. ElseStatement: found 'log'(IDENTIFIER) but 'else' required
<<REW to 101:13 [0] 'log'(IDENTIFIER)
                      Parsed OK!-> IfStatement
                    Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:9
                    Body TRY Statement on 'log'(IDENTIFIER)

101 12(CODE) log.messages = [];
    'log'(IDENTIFIER) '.'(LITERAL) 'messages'(IDENTIFIER) '='(ASSIGN) ' ['(SPACE_BRACKET) ']'(LITERAL) ';'(LITERAL)

                      Statement TRY Adjective on 'log'(IDENTIFIER)
                      Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:101:1. Adjective: found 'log'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 101:13 [0] 'log'(IDENTIFIER)
                      Statement TRY VariableRef on 'log'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER log
>>>ADVANCE 101:16 [1] '.'(LITERAL)
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 101:17 [2] 'messages'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER messages
>>>ADVANCE 101:26 [3] '='(ASSIGN)
                        Parsed OK!-> PropertyAccess
                      Parsed OK!-> VariableRef
                      Statement TRY AssignmentStatement on '='(ASSIGN)
                        AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 101:27 [4] ' ['(SPACE_BRACKET)
                        AssignmentStatement TRY Expression on ' ['(SPACE_BRACKET)
                          Expression TRY Operand on ' ['(SPACE_BRACKET)
                            Operand TRY ArrayLiteral on ' ['(SPACE_BRACKET)
                              ArrayLiteral matched OK: SPACE_BRACKET  [
>>>ADVANCE 101:29 [5] ']'(LITERAL)
optSeparatedList [ArrayLiteral] indent:12, get SeparatedList of [Expression] by ',' closer: ]
                              ArrayLiteral matched OK: ] ]
>>>ADVANCE 101:30 [6] ';'(LITERAL)
                            Parsed OK!-> ArrayLiteral
                          Parsed OK!-> Operand
                          Expression TRY Oper on ';'(LITERAL)
                          Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:101:30. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 101:30 [6] ';'(LITERAL)
                        Parsed OK!-> Expression
                      Parsed OK!-> AssignmentStatement
                    Parsed OK!-> Statement
                    Body matched OK: ; ;
>>>ADVANCE 104:0 [-1] ' '(NEWLINE)
                    Body matched OK: NEWLINE  
>>>ADVANCE 104:9 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:9
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                  Parsed OK!-> Body
                Parsed OK!-> ExceptionBlock
              Parsed OK!-> TryCatch
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'if'(IDENTIFIER)

104 8(CODE) if log.warning.count
    'if'(IDENTIFIER) 'log'(IDENTIFIER) '.'(LITERAL) 'warning'(IDENTIFIER) '.'(LITERAL) 'count'(IDENTIFIER)

              Statement TRY IfStatement on 'if'(IDENTIFIER)
                IfStatement matched OK: if if
>>>ADVANCE 104:12 [1] 'log'(IDENTIFIER)
                IfStatement TRY Expression on 'log'(IDENTIFIER)
                  Expression TRY Operand on 'log'(IDENTIFIER)
                    Operand TRY VariableRef on 'log'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER log
>>>ADVANCE 104:15 [2] '.'(LITERAL)
                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                        PropertyAccess matched OK: . .
>>>ADVANCE 104:16 [3] 'warning'(IDENTIFIER)
                        PropertyAccess matched OK: IDENTIFIER warning
>>>ADVANCE 104:23 [4] '.'(LITERAL)
                      Parsed OK!-> PropertyAccess
                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                        PropertyAccess matched OK: . .
>>>ADVANCE 104:24 [5] 'count'(IDENTIFIER)
                        PropertyAccess matched OK: IDENTIFIER count
>>>ADVANCE 106:0 [-1] ' '(NEWLINE)
                      Parsed OK!-> PropertyAccess
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression matched OK: NEWLINE  
>>>ADVANCE 106:13 [0] 'compiled'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 106
                Parsed OK!-> Expression
                IfStatement TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 106:13 [0] 'compiled'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'compiled'(IDENTIFIER)

106 12(CODE) compiled = log.getMessages().join('\n') + compiled;
    'compiled'(IDENTIFIER) '='(ASSIGN) 'log'(IDENTIFIER) '.'(LITERAL) 'getMessages'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) '.'(LITERAL) 'join'(IDENTIFIER) '('(LITERAL) ''\n''(STRING) ')'(LITERAL) '+'(OPER) 'compiled'(IDENTIFIER) ';'(LITERAL)

                    Statement TRY Adjective on 'compiled'(IDENTIFIER)
                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:106:1. Adjective: found 'compiled'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 106:13 [0] 'compiled'(IDENTIFIER)
                    Statement TRY VariableRef on 'compiled'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER compiled
>>>ADVANCE 106:22 [1] '='(ASSIGN)
                    Parsed OK!-> VariableRef
                    Statement TRY AssignmentStatement on '='(ASSIGN)
                      AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 106:24 [2] 'log'(IDENTIFIER)
                      AssignmentStatement TRY Expression on 'log'(IDENTIFIER)
                        Expression TRY Operand on 'log'(IDENTIFIER)
                          Operand TRY VariableRef on 'log'(IDENTIFIER)
                            VariableRef matched OK: IDENTIFIER log
>>>ADVANCE 106:27 [3] '.'(LITERAL)
                            VariableRef TRY PropertyAccess on '.'(LITERAL)
                              PropertyAccess matched OK: . .
>>>ADVANCE 106:28 [4] 'getMessages'(IDENTIFIER)
                              PropertyAccess matched OK: IDENTIFIER getMessages
>>>ADVANCE 106:39 [5] '('(LITERAL)
                            Parsed OK!-> PropertyAccess
                            VariableRef TRY FunctionAccess on '('(LITERAL)
                              FunctionAccess matched OK: ( (
>>>ADVANCE 106:40 [6] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                              FunctionAccess matched OK: ) )
>>>ADVANCE 106:41 [7] '.'(LITERAL)
                            Parsed OK!-> FunctionAccess
                            VariableRef TRY PropertyAccess on '.'(LITERAL)
                              PropertyAccess matched OK: . .
>>>ADVANCE 106:42 [8] 'join'(IDENTIFIER)
                              PropertyAccess matched OK: IDENTIFIER join
>>>ADVANCE 106:46 [9] '('(LITERAL)
                            Parsed OK!-> PropertyAccess
                            VariableRef TRY FunctionAccess on '('(LITERAL)
                              FunctionAccess matched OK: ( (
>>>ADVANCE 106:47 [10] ''\n''(STRING)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                              FunctionAccess TRY Expression on ''\n''(STRING)
                                Expression TRY Operand on ''\n''(STRING)
                                  Operand TRY StringLiteral on ''\n''(STRING)
                                    StringLiteral matched OK: STRING '\n'
>>>ADVANCE 106:51 [11] ')'(LITERAL)
                                  Parsed OK!-> StringLiteral
                                Parsed OK!-> Operand
                              Parsed OK!-> Expression
                              FunctionAccess matched OK: ) )
>>>ADVANCE 106:53 [12] '+'(OPER)
                            Parsed OK!-> FunctionAccess
                          Parsed OK!-> VariableRef
                        Parsed OK!-> Operand
                        Expression TRY Oper on '+'(OPER)
                          Oper matched OK: OPER +
>>>ADVANCE 106:55 [13] 'compiled'(IDENTIFIER)
                        Parsed OK!-> Oper
                        Expression TRY Operand on 'compiled'(IDENTIFIER)
                          Operand TRY VariableRef on 'compiled'(IDENTIFIER)
                            VariableRef matched OK: IDENTIFIER compiled
>>>ADVANCE 106:63 [14] ';'(LITERAL)
                          Parsed OK!-> VariableRef
                        Parsed OK!-> Operand
                        Expression TRY Oper on ';'(LITERAL)
                        Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:106:56. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 106:63 [14] ';'(LITERAL)
                      Parsed OK!-> Expression
                    Parsed OK!-> AssignmentStatement
                  Parsed OK!-> Statement
                  Body matched OK: ; ;
>>>ADVANCE 109:0 [-1] ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 109:9 [0] 'CompareJs_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
                IfStatement TRY ElseIfStatement on 'CompareJs_ed'(IDENTIFIER)
                ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:109:1. ElseIfStatement: found 'CompareJs_ed'(IDENTIFIER) but 'else' required
<<REW to 109:9 [0] 'CompareJs_ed'(IDENTIFIER)
                IfStatement TRY ElseStatement on 'CompareJs_ed'(IDENTIFIER)
                ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:109:1. ElseStatement: found 'CompareJs_ed'(IDENTIFIER) but 'else' required
<<REW to 109:9 [0] 'CompareJs_ed'(IDENTIFIER)
              Parsed OK!-> IfStatement
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'CompareJs_ed'(IDENTIFIER)

109 8(CODE) CompareJs_ed.setValue(compiled);
    'CompareJs_ed'(IDENTIFIER) '.'(LITERAL) 'setValue'(IDENTIFIER) '('(LITERAL) 'compiled'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'CompareJs_ed'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:109:1. Adjective: found 'CompareJs_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 109:9 [0] 'CompareJs_ed'(IDENTIFIER)
              Statement TRY VariableRef on 'CompareJs_ed'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER CompareJs_ed
>>>ADVANCE 109:21 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 109:22 [2] 'setValue'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER setValue
>>>ADVANCE 109:30 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 109:31 [4] 'compiled'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on 'compiled'(IDENTIFIER)
                    Expression TRY Operand on 'compiled'(IDENTIFIER)
                      Operand TRY VariableRef on 'compiled'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER compiled
>>>ADVANCE 109:39 [5] ')'(LITERAL)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 109:40 [6] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:109:40. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 109:40 [6] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 111:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 111:9 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'var'(IDENTIFIER)

111 8(CODE) var linesLite = CompareOrig_ed.getSession().getLength();
    'var'(IDENTIFIER) 'linesLite'(IDENTIFIER) '='(ASSIGN) 'CompareOrig_ed'(IDENTIFIER) '.'(LITERAL) 'getSession'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) '.'(LITERAL) 'getLength'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) ';'(LITERAL)

              Statement TRY VarStatement on 'var'(IDENTIFIER)
                VarStatement matched OK: var var
>>>ADVANCE 111:13 [1] 'linesLite'(IDENTIFIER)
optSeparatedList [VarStatement] indent:8, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                VarStatement TRY VariableDecl on 'linesLite'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER linesLite
>>>ADVANCE 111:23 [2] '='(ASSIGN)
                  VariableDecl matched OK: = =
>>>ADVANCE 111:25 [3] 'CompareOrig_ed'(IDENTIFIER)
                  VariableDecl TRY Expression on 'CompareOrig_ed'(IDENTIFIER)
                    Expression TRY Operand on 'CompareOrig_ed'(IDENTIFIER)
                      Operand TRY VariableRef on 'CompareOrig_ed'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER CompareOrig_ed
>>>ADVANCE 111:39 [4] '.'(LITERAL)
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 111:40 [5] 'getSession'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER getSession
>>>ADVANCE 111:50 [6] '('(LITERAL)
                        Parsed OK!-> PropertyAccess
                        VariableRef TRY FunctionAccess on '('(LITERAL)
                          FunctionAccess matched OK: ( (
>>>ADVANCE 111:51 [7] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                          FunctionAccess matched OK: ) )
>>>ADVANCE 111:52 [8] '.'(LITERAL)
                        Parsed OK!-> FunctionAccess
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 111:53 [9] 'getLength'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER getLength
>>>ADVANCE 111:62 [10] '('(LITERAL)
                        Parsed OK!-> PropertyAccess
                        VariableRef TRY FunctionAccess on '('(LITERAL)
                          FunctionAccess matched OK: ( (
>>>ADVANCE 111:63 [11] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                          FunctionAccess matched OK: ) )
>>>ADVANCE 111:64 [12] ';'(LITERAL)
                        Parsed OK!-> FunctionAccess
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression TRY Oper on ';'(LITERAL)
                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:111:64. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 111:64 [12] ';'(LITERAL)
                  Parsed OK!-> Expression
                Parsed OK!-> VariableDecl
              Parsed OK!-> VarStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 112:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 112:9 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'var'(IDENTIFIER)

112 8(CODE) var linesJs = CompareJs_ed.getSession().getLength();
    'var'(IDENTIFIER) 'linesJs'(IDENTIFIER) '='(ASSIGN) 'CompareJs_ed'(IDENTIFIER) '.'(LITERAL) 'getSession'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) '.'(LITERAL) 'getLength'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) ';'(LITERAL)

              Statement TRY VarStatement on 'var'(IDENTIFIER)
                VarStatement matched OK: var var
>>>ADVANCE 112:13 [1] 'linesJs'(IDENTIFIER)
optSeparatedList [VarStatement] indent:8, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                VarStatement TRY VariableDecl on 'linesJs'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER linesJs
>>>ADVANCE 112:21 [2] '='(ASSIGN)
                  VariableDecl matched OK: = =
>>>ADVANCE 112:23 [3] 'CompareJs_ed'(IDENTIFIER)
                  VariableDecl TRY Expression on 'CompareJs_ed'(IDENTIFIER)
                    Expression TRY Operand on 'CompareJs_ed'(IDENTIFIER)
                      Operand TRY VariableRef on 'CompareJs_ed'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER CompareJs_ed
>>>ADVANCE 112:35 [4] '.'(LITERAL)
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 112:36 [5] 'getSession'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER getSession
>>>ADVANCE 112:46 [6] '('(LITERAL)
                        Parsed OK!-> PropertyAccess
                        VariableRef TRY FunctionAccess on '('(LITERAL)
                          FunctionAccess matched OK: ( (
>>>ADVANCE 112:47 [7] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                          FunctionAccess matched OK: ) )
>>>ADVANCE 112:48 [8] '.'(LITERAL)
                        Parsed OK!-> FunctionAccess
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 112:49 [9] 'getLength'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER getLength
>>>ADVANCE 112:58 [10] '('(LITERAL)
                        Parsed OK!-> PropertyAccess
                        VariableRef TRY FunctionAccess on '('(LITERAL)
                          FunctionAccess matched OK: ( (
>>>ADVANCE 112:59 [11] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                          FunctionAccess matched OK: ) )
>>>ADVANCE 112:60 [12] ';'(LITERAL)
                        Parsed OK!-> FunctionAccess
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression TRY Oper on ';'(LITERAL)
                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:112:60. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 112:60 [12] ';'(LITERAL)
                  Parsed OK!-> Expression
                Parsed OK!-> VariableDecl
              Parsed OK!-> VarStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 114:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 114:9 [0] 'while'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'while'(IDENTIFIER)

114 8(CODE) while (linesLite<linesJs)
    'while'(IDENTIFIER) '('(LITERAL) 'linesLite'(IDENTIFIER) '<'(OPER) 'linesJs'(IDENTIFIER) ')'(LITERAL)

              Statement TRY WhileUntilLoop on 'while'(IDENTIFIER)
                WhileUntilLoop TRY WhileUntilExpression on 'while'(IDENTIFIER)
                  WhileUntilExpression matched OK: while while
>>>ADVANCE 114:15 [1] '('(LITERAL)
                  WhileUntilExpression TRY Expression on '('(LITERAL)
                    Expression TRY Operand on '('(LITERAL)
                      Operand TRY ParenExpression on '('(LITERAL)
                        ParenExpression matched OK: ( (
>>>ADVANCE 114:16 [2] 'linesLite'(IDENTIFIER)
                        ParenExpression TRY Expression on 'linesLite'(IDENTIFIER)
                          Expression TRY Operand on 'linesLite'(IDENTIFIER)
                            Operand TRY VariableRef on 'linesLite'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER linesLite
>>>ADVANCE 114:25 [3] '<'(OPER)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> Operand
                          Expression TRY Oper on '<'(OPER)
                            Oper matched OK: OPER <
>>>ADVANCE 114:26 [4] 'linesJs'(IDENTIFIER)
                          Parsed OK!-> Oper
                          Expression TRY Operand on 'linesJs'(IDENTIFIER)
                            Operand TRY VariableRef on 'linesJs'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER linesJs
>>>ADVANCE 114:33 [5] ')'(LITERAL)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> Operand
                        Parsed OK!-> Expression
                        ParenExpression matched OK: ) )
>>>ADVANCE 115:0 [-1] ' '(NEWLINE)
                      Parsed OK!-> ParenExpression
                    Parsed OK!-> Operand
                    Expression matched OK: NEWLINE  
>>>ADVANCE 115:13 [0] 'addLines'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 115
                  Parsed OK!-> Expression
                Parsed OK!-> WhileUntilExpression
                WhileUntilLoop TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 115:13 [0] 'addLines'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'addLines'(IDENTIFIER)

115 12(CODE) addLines(' ',CompareOrig_ed);
    'addLines'(IDENTIFIER) '('(LITERAL) '' ''(STRING) ','(LITERAL) 'CompareOrig_ed'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                    Statement TRY Adjective on 'addLines'(IDENTIFIER)
                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:115:1. Adjective: found 'addLines'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 115:13 [0] 'addLines'(IDENTIFIER)
                    Statement TRY VariableRef on 'addLines'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER addLines
>>>ADVANCE 115:21 [1] '('(LITERAL)
                      VariableRef TRY FunctionAccess on '('(LITERAL)
                        FunctionAccess matched OK: ( (
>>>ADVANCE 115:22 [2] '' ''(STRING)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                        FunctionAccess TRY Expression on '' ''(STRING)
                          Expression TRY Operand on '' ''(STRING)
                            Operand TRY StringLiteral on '' ''(STRING)
                              StringLiteral matched OK: STRING ' '
>>>ADVANCE 115:25 [3] ','(LITERAL)
                            Parsed OK!-> StringLiteral
                          Parsed OK!-> Operand
                        Parsed OK!-> Expression
                        FunctionAccess matched OK: , ,
>>>ADVANCE 115:26 [4] 'CompareOrig_ed'(IDENTIFIER)
                        FunctionAccess TRY Expression on 'CompareOrig_ed'(IDENTIFIER)
                          Expression TRY Operand on 'CompareOrig_ed'(IDENTIFIER)
                            Operand TRY VariableRef on 'CompareOrig_ed'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER CompareOrig_ed
>>>ADVANCE 115:40 [5] ')'(LITERAL)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> Operand
                        Parsed OK!-> Expression
                        FunctionAccess matched OK: ) )
>>>ADVANCE 115:41 [6] ';'(LITERAL)
                      Parsed OK!-> FunctionAccess
                    Parsed OK!-> VariableRef
                    Statement TRY AssignmentStatement on ';'(LITERAL)
                    AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:115:41. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 115:41 [6] ';'(LITERAL)
                    Statement TRY FunctionCall on ';'(LITERAL)
                    Parsed OK!-> FunctionCall
                  Parsed OK!-> Statement
                  Body matched OK: ; ;
>>>ADVANCE 116:0 [-1] ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 116:13 [0] 'linesLite'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'linesLite'(IDENTIFIER)

116 12(CODE) linesLite++;
    'linesLite'(IDENTIFIER) '++'(LITERAL) ';'(LITERAL)

                    Statement TRY Adjective on 'linesLite'(IDENTIFIER)
                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:116:1. Adjective: found 'linesLite'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 116:13 [0] 'linesLite'(IDENTIFIER)
                    Statement TRY VariableRef on 'linesLite'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER linesLite
>>>ADVANCE 116:22 [1] '++'(LITERAL)
                      VariableRef matched OK: ++ ++
>>>ADVANCE 116:24 [2] ';'(LITERAL)
                    Parsed OK!-> VariableRef
                    Statement TRY AssignmentStatement on ';'(LITERAL)
                    AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:116:23. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 116:24 [2] ';'(LITERAL)
                    Statement TRY FunctionCall on ';'(LITERAL)
                    Parsed OK!-> FunctionCall
                  Parsed OK!-> Statement
                  Body matched OK: ; ;
>>>ADVANCE 118:0 [-1] ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 118:9 [0] 'while'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> WhileUntilLoop
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'while'(IDENTIFIER)

118 8(CODE) while (linesJs<linesLite)
    'while'(IDENTIFIER) '('(LITERAL) 'linesJs'(IDENTIFIER) '<'(OPER) 'linesLite'(IDENTIFIER) ')'(LITERAL)

              Statement TRY WhileUntilLoop on 'while'(IDENTIFIER)
                WhileUntilLoop TRY WhileUntilExpression on 'while'(IDENTIFIER)
                  WhileUntilExpression matched OK: while while
>>>ADVANCE 118:15 [1] '('(LITERAL)
                  WhileUntilExpression TRY Expression on '('(LITERAL)
                    Expression TRY Operand on '('(LITERAL)
                      Operand TRY ParenExpression on '('(LITERAL)
                        ParenExpression matched OK: ( (
>>>ADVANCE 118:16 [2] 'linesJs'(IDENTIFIER)
                        ParenExpression TRY Expression on 'linesJs'(IDENTIFIER)
                          Expression TRY Operand on 'linesJs'(IDENTIFIER)
                            Operand TRY VariableRef on 'linesJs'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER linesJs
>>>ADVANCE 118:23 [3] '<'(OPER)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> Operand
                          Expression TRY Oper on '<'(OPER)
                            Oper matched OK: OPER <
>>>ADVANCE 118:24 [4] 'linesLite'(IDENTIFIER)
                          Parsed OK!-> Oper
                          Expression TRY Operand on 'linesLite'(IDENTIFIER)
                            Operand TRY VariableRef on 'linesLite'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER linesLite
>>>ADVANCE 118:33 [5] ')'(LITERAL)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> Operand
                        Parsed OK!-> Expression
                        ParenExpression matched OK: ) )
>>>ADVANCE 119:0 [-1] ' '(NEWLINE)
                      Parsed OK!-> ParenExpression
                    Parsed OK!-> Operand
                    Expression matched OK: NEWLINE  
>>>ADVANCE 119:13 [0] 'addLines'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 119
                  Parsed OK!-> Expression
                Parsed OK!-> WhileUntilExpression
                WhileUntilLoop TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 119:13 [0] 'addLines'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'addLines'(IDENTIFIER)

119 12(CODE) addLines(' ',CompareJs_ed);
    'addLines'(IDENTIFIER) '('(LITERAL) '' ''(STRING) ','(LITERAL) 'CompareJs_ed'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                    Statement TRY Adjective on 'addLines'(IDENTIFIER)
                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:119:1. Adjective: found 'addLines'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 119:13 [0] 'addLines'(IDENTIFIER)
                    Statement TRY VariableRef on 'addLines'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER addLines
>>>ADVANCE 119:21 [1] '('(LITERAL)
                      VariableRef TRY FunctionAccess on '('(LITERAL)
                        FunctionAccess matched OK: ( (
>>>ADVANCE 119:22 [2] '' ''(STRING)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                        FunctionAccess TRY Expression on '' ''(STRING)
                          Expression TRY Operand on '' ''(STRING)
                            Operand TRY StringLiteral on '' ''(STRING)
                              StringLiteral matched OK: STRING ' '
>>>ADVANCE 119:25 [3] ','(LITERAL)
                            Parsed OK!-> StringLiteral
                          Parsed OK!-> Operand
                        Parsed OK!-> Expression
                        FunctionAccess matched OK: , ,
>>>ADVANCE 119:26 [4] 'CompareJs_ed'(IDENTIFIER)
                        FunctionAccess TRY Expression on 'CompareJs_ed'(IDENTIFIER)
                          Expression TRY Operand on 'CompareJs_ed'(IDENTIFIER)
                            Operand TRY VariableRef on 'CompareJs_ed'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER CompareJs_ed
>>>ADVANCE 119:38 [5] ')'(LITERAL)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> Operand
                        Parsed OK!-> Expression
                        FunctionAccess matched OK: ) )
>>>ADVANCE 119:39 [6] ';'(LITERAL)
                      Parsed OK!-> FunctionAccess
                    Parsed OK!-> VariableRef
                    Statement TRY AssignmentStatement on ';'(LITERAL)
                    AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:119:39. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 119:39 [6] ';'(LITERAL)
                    Statement TRY FunctionCall on ';'(LITERAL)
                    Parsed OK!-> FunctionCall
                  Parsed OK!-> Statement
                  Body matched OK: ; ;
>>>ADVANCE 120:0 [-1] ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 120:13 [0] 'linesJs'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'linesJs'(IDENTIFIER)

120 12(CODE) linesJs++;
    'linesJs'(IDENTIFIER) '++'(LITERAL) ';'(LITERAL)

                    Statement TRY Adjective on 'linesJs'(IDENTIFIER)
                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:120:1. Adjective: found 'linesJs'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 120:13 [0] 'linesJs'(IDENTIFIER)
                    Statement TRY VariableRef on 'linesJs'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER linesJs
>>>ADVANCE 120:20 [1] '++'(LITERAL)
                      VariableRef matched OK: ++ ++
>>>ADVANCE 120:22 [2] ';'(LITERAL)
                    Parsed OK!-> VariableRef
                    Statement TRY AssignmentStatement on ';'(LITERAL)
                    AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:120:21. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 120:22 [2] ';'(LITERAL)
                    Statement TRY FunctionCall on ';'(LITERAL)
                    Parsed OK!-> FunctionCall
                  Parsed OK!-> Statement
                  Body matched OK: ; ;
>>>ADVANCE 126:0 [-1] ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 126:9 [0] 'CompareOrig_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> WhileUntilLoop
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'CompareOrig_ed'(IDENTIFIER)

126 8(CODE) CompareOrig_ed.clearSelection();
    'CompareOrig_ed'(IDENTIFIER) '.'(LITERAL) 'clearSelection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'CompareOrig_ed'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:126:1. Adjective: found 'CompareOrig_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 126:9 [0] 'CompareOrig_ed'(IDENTIFIER)
              Statement TRY VariableRef on 'CompareOrig_ed'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER CompareOrig_ed
>>>ADVANCE 126:23 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 126:24 [2] 'clearSelection'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER clearSelection
>>>ADVANCE 126:38 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 126:39 [4] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess matched OK: ) )
>>>ADVANCE 126:40 [5] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:126:40. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 126:40 [5] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 127:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 127:9 [0] 'CompareJs_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'CompareJs_ed'(IDENTIFIER)

127 8(CODE) CompareJs_ed.clearSelection();
    'CompareJs_ed'(IDENTIFIER) '.'(LITERAL) 'clearSelection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'CompareJs_ed'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:127:1. Adjective: found 'CompareJs_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 127:9 [0] 'CompareJs_ed'(IDENTIFIER)
              Statement TRY VariableRef on 'CompareJs_ed'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER CompareJs_ed
>>>ADVANCE 127:21 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 127:22 [2] 'clearSelection'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER clearSelection
>>>ADVANCE 127:36 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 127:37 [4] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess matched OK: ) )
>>>ADVANCE 127:38 [5] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:127:38. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 127:38 [5] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 129:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 129:9 [0] 'CompareOrig_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'CompareOrig_ed'(IDENTIFIER)

129 8(CODE) CompareOrig_ed.scrollToLine(0);
    'CompareOrig_ed'(IDENTIFIER) '.'(LITERAL) 'scrollToLine'(IDENTIFIER) '('(LITERAL) '0'(NUMBER) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'CompareOrig_ed'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:129:1. Adjective: found 'CompareOrig_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 129:9 [0] 'CompareOrig_ed'(IDENTIFIER)
              Statement TRY VariableRef on 'CompareOrig_ed'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER CompareOrig_ed
>>>ADVANCE 129:23 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 129:24 [2] 'scrollToLine'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER scrollToLine
>>>ADVANCE 129:36 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 129:37 [4] '0'(NUMBER)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on '0'(NUMBER)
                    Expression TRY Operand on '0'(NUMBER)
                      Operand TRY NumberLiteral on '0'(NUMBER)
                        NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 129:38 [5] ')'(LITERAL)
                      Parsed OK!-> NumberLiteral
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 129:39 [6] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:129:39. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 129:39 [6] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 130:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 130:9 [0] 'CompareJs_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'CompareJs_ed'(IDENTIFIER)

130 8(CODE) CompareJs_ed.scrollToLine(0);
    'CompareJs_ed'(IDENTIFIER) '.'(LITERAL) 'scrollToLine'(IDENTIFIER) '('(LITERAL) '0'(NUMBER) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'CompareJs_ed'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:130:1. Adjective: found 'CompareJs_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 130:9 [0] 'CompareJs_ed'(IDENTIFIER)
              Statement TRY VariableRef on 'CompareJs_ed'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER CompareJs_ed
>>>ADVANCE 130:21 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 130:22 [2] 'scrollToLine'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER scrollToLine
>>>ADVANCE 130:34 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 130:35 [4] '0'(NUMBER)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on '0'(NUMBER)
                    Expression TRY Operand on '0'(NUMBER)
                      Operand TRY NumberLiteral on '0'(NUMBER)
                        NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 130:36 [5] ')'(LITERAL)
                      Parsed OK!-> NumberLiteral
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 130:37 [6] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:130:37. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 130:37 [6] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 133:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 133:5 [0] 'function'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> FunctionDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'function'(IDENTIFIER)

133 4(CODE) function loadExample(fileName:string, callback)
    'function'(IDENTIFIER) 'loadExample'(IDENTIFIER) '('(LITERAL) 'fileName'(IDENTIFIER) ':'(OPER) 'string'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

        Statement TRY FunctionDeclaration on 'function'(IDENTIFIER)
          FunctionDeclaration matched OK: function function
>>>ADVANCE 133:14 [1] 'loadExample'(IDENTIFIER)
          FunctionDeclaration matched OK: IDENTIFIER loadExample
>>>ADVANCE 133:25 [2] '('(LITERAL)
          FunctionDeclaration matched OK: ( (
>>>ADVANCE 133:26 [3] 'fileName'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:4, get SeparatedList of [VariableDecl] by ',' closer: )
          FunctionDeclaration TRY VariableDecl on 'fileName'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER fileName
>>>ADVANCE 133:34 [4] ':'(OPER)
            VariableDecl matched OK: : :
>>>ADVANCE 133:35 [5] 'string'(IDENTIFIER)
            VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
              VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 133:41 [6] ','(LITERAL)
            Parsed OK!-> VariableRef
          Parsed OK!-> VariableDecl
          FunctionDeclaration matched OK: , ,
>>>ADVANCE 133:43 [7] 'callback'(IDENTIFIER)
          FunctionDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 133:51 [8] ')'(LITERAL)
          Parsed OK!-> VariableDecl
          FunctionDeclaration matched OK: ) )
>>>ADVANCE 137:0 [-1] ' '(NEWLINE)
          FunctionDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 137:9 [0] 'CompareJs_ed'(IDENTIFIER)
optFreeFormList [Body] parentname:loadExample parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'CompareJs_ed'(IDENTIFIER)

137 8(CODE) CompareJs_ed.setValue("");
    'CompareJs_ed'(IDENTIFIER) '.'(LITERAL) 'setValue'(IDENTIFIER) '('(LITERAL) '""'(STRING) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'CompareJs_ed'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:137:1. Adjective: found 'CompareJs_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 137:9 [0] 'CompareJs_ed'(IDENTIFIER)
              Statement TRY VariableRef on 'CompareJs_ed'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER CompareJs_ed
>>>ADVANCE 137:21 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 137:22 [2] 'setValue'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER setValue
>>>ADVANCE 137:30 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 137:31 [4] '""'(STRING)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on '""'(STRING)
                    Expression TRY Operand on '""'(STRING)
                      Operand TRY StringLiteral on '""'(STRING)
                        StringLiteral matched OK: STRING ""
>>>ADVANCE 137:33 [5] ')'(LITERAL)
                      Parsed OK!-> StringLiteral
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 137:34 [6] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:137:34. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 137:34 [6] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 139:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 139:9 [0] 'CompareOrig_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'CompareOrig_ed'(IDENTIFIER)

139 8(CODE) CompareOrig_ed.setValue("Loading...");
    'CompareOrig_ed'(IDENTIFIER) '.'(LITERAL) 'setValue'(IDENTIFIER) '('(LITERAL) '"Loading..."'(STRING) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'CompareOrig_ed'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:139:1. Adjective: found 'CompareOrig_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 139:9 [0] 'CompareOrig_ed'(IDENTIFIER)
              Statement TRY VariableRef on 'CompareOrig_ed'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER CompareOrig_ed
>>>ADVANCE 139:23 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 139:24 [2] 'setValue'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER setValue
>>>ADVANCE 139:32 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 139:33 [4] '"Loading..."'(STRING)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on '"Loading..."'(STRING)
                    Expression TRY Operand on '"Loading..."'(STRING)
                      Operand TRY StringLiteral on '"Loading..."'(STRING)
                        StringLiteral matched OK: STRING "Loading..."
>>>ADVANCE 139:45 [5] ')'(LITERAL)
                      Parsed OK!-> StringLiteral
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 139:46 [6] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:139:46. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 139:46 [6] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 140:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 140:9 [0] 'CompareOrig_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'CompareOrig_ed'(IDENTIFIER)

140 8(CODE) CompareOrig_ed.resize(true);
    'CompareOrig_ed'(IDENTIFIER) '.'(LITERAL) 'resize'(IDENTIFIER) '('(LITERAL) 'true'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'CompareOrig_ed'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:140:1. Adjective: found 'CompareOrig_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 140:9 [0] 'CompareOrig_ed'(IDENTIFIER)
              Statement TRY VariableRef on 'CompareOrig_ed'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER CompareOrig_ed
>>>ADVANCE 140:23 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 140:24 [2] 'resize'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER resize
>>>ADVANCE 140:30 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 140:31 [4] 'true'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on 'true'(IDENTIFIER)
                    Expression TRY Operand on 'true'(IDENTIFIER)
                      Operand TRY VariableRef on 'true'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER true
>>>ADVANCE 140:35 [5] ')'(LITERAL)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 140:36 [6] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:140:36. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 140:36 [6] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 142:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 142:9 [0] 'document'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'document'(IDENTIFIER)

142 8(CODE) document.getElementById('status').textContent=fileName;
    'document'(IDENTIFIER) '.'(LITERAL) 'getElementById'(IDENTIFIER) '('(LITERAL) ''status''(STRING) ')'(LITERAL) '.'(LITERAL) 'textContent'(IDENTIFIER) '='(ASSIGN) 'fileName'(IDENTIFIER) ';'(LITERAL)

              Statement TRY Adjective on 'document'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:142:1. Adjective: found 'document'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 142:9 [0] 'document'(IDENTIFIER)
              Statement TRY VariableRef on 'document'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER document
>>>ADVANCE 142:17 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 142:18 [2] 'getElementById'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER getElementById
>>>ADVANCE 142:32 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 142:33 [4] ''status''(STRING)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on ''status''(STRING)
                    Expression TRY Operand on ''status''(STRING)
                      Operand TRY StringLiteral on ''status''(STRING)
                        StringLiteral matched OK: STRING 'status'
>>>ADVANCE 142:41 [5] ')'(LITERAL)
                      Parsed OK!-> StringLiteral
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 142:42 [6] '.'(LITERAL)
                Parsed OK!-> FunctionAccess
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 142:43 [7] 'textContent'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER textContent
>>>ADVANCE 142:54 [8] '='(ASSIGN)
                Parsed OK!-> PropertyAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on '='(ASSIGN)
                AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 142:55 [9] 'fileName'(IDENTIFIER)
                AssignmentStatement TRY Expression on 'fileName'(IDENTIFIER)
                  Expression TRY Operand on 'fileName'(IDENTIFIER)
                    Operand TRY VariableRef on 'fileName'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER fileName
>>>ADVANCE 142:63 [10] ';'(LITERAL)
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression TRY Oper on ';'(LITERAL)
                  Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:142:56. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 142:63 [10] ';'(LITERAL)
                Parsed OK!-> Expression
              Parsed OK!-> AssignmentStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 144:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 144:9 [0] '$'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on '$'(IDENTIFIER)

144 8(CODE) $.ajax({
    '$'(IDENTIFIER) '.'(LITERAL) 'ajax'(IDENTIFIER) '('(LITERAL) '{'(LITERAL)

              Statement TRY Adjective on '$'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:144:1. Adjective: found '$'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 144:9 [0] '$'(IDENTIFIER)
              Statement TRY VariableRef on '$'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER $
>>>ADVANCE 144:10 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 144:11 [2] 'ajax'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER ajax
>>>ADVANCE 144:15 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 144:16 [4] '{'(LITERAL)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on '{'(LITERAL)
                    Expression TRY Operand on '{'(LITERAL)
                      Operand TRY ObjectLiteral on '{'(LITERAL)
                        ObjectLiteral matched OK: { {
>>>ADVANCE 146:0 [-1] ' '(NEWLINE)
                        ObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 146:13 [0] 'url'(IDENTIFIER)
optFreeFormList [ObjectLiteral] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [NameValuePair] by ',' closer: }
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                        ObjectLiteral TRY NameValuePair on 'url'(IDENTIFIER)
                          NameValuePair matched OK: IDENTIFIER url
>>>ADVANCE 146:16 [1] ':'(OPER)
                          NameValuePair matched OK: : :
>>>ADVANCE 146:18 [2] ''examples/html/''(STRING)
                          NameValuePair TRY Expression on ''examples/html/''(STRING)
                            Expression TRY Operand on ''examples/html/''(STRING)
                              Operand TRY StringLiteral on ''examples/html/''(STRING)
                                StringLiteral matched OK: STRING 'examples/html/'
>>>ADVANCE 146:34 [3] '+'(OPER)
                              Parsed OK!-> StringLiteral
                            Parsed OK!-> Operand
                            Expression TRY Oper on '+'(OPER)
                              Oper matched OK: OPER +
>>>ADVANCE 146:35 [4] 'fileName'(IDENTIFIER)
                            Parsed OK!-> Oper
                            Expression TRY Operand on 'fileName'(IDENTIFIER)
                              Operand TRY VariableRef on 'fileName'(IDENTIFIER)
                                VariableRef matched OK: IDENTIFIER fileName
>>>ADVANCE 146:43 [5] '.'(LITERAL)
                                VariableRef TRY PropertyAccess on '.'(LITERAL)
                                  PropertyAccess matched OK: . .
>>>ADVANCE 146:44 [6] 'replace'(IDENTIFIER)
                                  PropertyAccess matched OK: IDENTIFIER replace
>>>ADVANCE 146:51 [7] '('(LITERAL)
                                Parsed OK!-> PropertyAccess
                                VariableRef TRY FunctionAccess on '('(LITERAL)
                                  FunctionAccess matched OK: ( (
>>>ADVANCE 146:52 [8] '/\.lite\.md$/'(REGEX)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                                  FunctionAccess TRY Expression on '/\.lite\.md$/'(REGEX)
                                    Expression TRY Operand on '/\.lite\.md$/'(REGEX)
                                      Operand TRY RegExpLiteral on '/\.lite\.md$/'(REGEX)
                                        RegExpLiteral matched OK: REGEX /\.lite\.md$/
>>>ADVANCE 146:65 [9] ','(LITERAL)
                                      Parsed OK!-> RegExpLiteral
                                    Parsed OK!-> Operand
                                  Parsed OK!-> Expression
                                  FunctionAccess matched OK: , ,
>>>ADVANCE 146:66 [10] '".html"'(STRING)
                                  FunctionAccess TRY Expression on '".html"'(STRING)
                                    Expression TRY Operand on '".html"'(STRING)
                                      Operand TRY StringLiteral on '".html"'(STRING)
                                        StringLiteral matched OK: STRING ".html"
>>>ADVANCE 146:73 [11] ')'(LITERAL)
                                      Parsed OK!-> StringLiteral
                                    Parsed OK!-> Operand
                                  Parsed OK!-> Expression
                                  FunctionAccess matched OK: ) )
>>>ADVANCE 148:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> FunctionAccess
                              Parsed OK!-> VariableRef
                            Parsed OK!-> Operand
                            Expression matched OK: NEWLINE  
>>>ADVANCE 148:13 [0] 'success'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 148
                          Parsed OK!-> Expression
                        Parsed OK!-> NameValuePair
                        ObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 148:13 [0] 'success'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                        ObjectLiteral TRY NameValuePair on 'success'(IDENTIFIER)
                          NameValuePair matched OK: IDENTIFIER success
>>>ADVANCE 148:20 [1] ':'(OPER)
                          NameValuePair matched OK: : :
>>>ADVANCE 148:22 [2] 'function'(IDENTIFIER)
                          NameValuePair TRY Expression on 'function'(IDENTIFIER)
                            Expression TRY Operand on 'function'(IDENTIFIER)
                              Operand TRY FunctionDeclaration on 'function'(IDENTIFIER)
                                FunctionDeclaration matched OK: function function
>>>ADVANCE 148:31 [3] '('(LITERAL)
                                FunctionDeclaration matched OK: ( (
>>>ADVANCE 148:32 [4] 'data'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                                FunctionDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 148:36 [5] ':'(OPER)
                                  VariableDecl matched OK: : :
>>>ADVANCE 148:37 [6] 'string'(IDENTIFIER)
                                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 148:43 [7] ')'(LITERAL)
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> VariableDecl
                                FunctionDeclaration matched OK: ) )
>>>ADVANCE 150:0 [-1] ' '(NEWLINE)
                                FunctionDeclaration TRY Body on ' '(NEWLINE)
                                  Body matched OK: NEWLINE  
>>>ADVANCE 150:21 [0] 'data'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:12, blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:12
                                  Body TRY Statement on 'data'(IDENTIFIER)

150 20(CODE) data = data.replace('\r',''); // remove CR from windows-edited files
    'data'(IDENTIFIER) '='(ASSIGN) 'data'(IDENTIFIER) '.'(LITERAL) 'replace'(IDENTIFIER) '('(LITERAL) ''\r''(STRING) ','(LITERAL) ''''(STRING) ')'(LITERAL) ';'(LITERAL) '// remove CR from windows-edited files'(COMMENT)

                                    Statement TRY Adjective on 'data'(IDENTIFIER)
                                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:150:1. Adjective: found 'data'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 150:21 [0] 'data'(IDENTIFIER)
                                    Statement TRY VariableRef on 'data'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER data
>>>ADVANCE 150:26 [1] '='(ASSIGN)
                                    Parsed OK!-> VariableRef
                                    Statement TRY AssignmentStatement on '='(ASSIGN)
                                      AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 150:28 [2] 'data'(IDENTIFIER)
                                      AssignmentStatement TRY Expression on 'data'(IDENTIFIER)
                                        Expression TRY Operand on 'data'(IDENTIFIER)
                                          Operand TRY VariableRef on 'data'(IDENTIFIER)
                                            VariableRef matched OK: IDENTIFIER data
>>>ADVANCE 150:32 [3] '.'(LITERAL)
                                            VariableRef TRY PropertyAccess on '.'(LITERAL)
                                              PropertyAccess matched OK: . .
>>>ADVANCE 150:33 [4] 'replace'(IDENTIFIER)
                                              PropertyAccess matched OK: IDENTIFIER replace
>>>ADVANCE 150:40 [5] '('(LITERAL)
                                            Parsed OK!-> PropertyAccess
                                            VariableRef TRY FunctionAccess on '('(LITERAL)
                                              FunctionAccess matched OK: ( (
>>>ADVANCE 150:41 [6] ''\r''(STRING)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                              FunctionAccess TRY Expression on ''\r''(STRING)
                                                Expression TRY Operand on ''\r''(STRING)
                                                  Operand TRY StringLiteral on ''\r''(STRING)
                                                    StringLiteral matched OK: STRING '\r'
>>>ADVANCE 150:45 [7] ','(LITERAL)
                                                  Parsed OK!-> StringLiteral
                                                Parsed OK!-> Operand
                                              Parsed OK!-> Expression
                                              FunctionAccess matched OK: , ,
>>>ADVANCE 150:46 [8] ''''(STRING)
                                              FunctionAccess TRY Expression on ''''(STRING)
                                                Expression TRY Operand on ''''(STRING)
                                                  Operand TRY StringLiteral on ''''(STRING)
                                                    StringLiteral matched OK: STRING ''
>>>ADVANCE 150:48 [9] ')'(LITERAL)
                                                  Parsed OK!-> StringLiteral
                                                Parsed OK!-> Operand
                                              Parsed OK!-> Expression
                                              FunctionAccess matched OK: ) )
>>>ADVANCE 150:49 [10] ';'(LITERAL)
                                            Parsed OK!-> FunctionAccess
                                          Parsed OK!-> VariableRef
                                        Parsed OK!-> Operand
                                        Expression TRY Oper on ';'(LITERAL)
                                        Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:150:49. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 150:49 [10] ';'(LITERAL)
                                      Parsed OK!-> Expression
                                    Parsed OK!-> AssignmentStatement
                                  Parsed OK!-> Statement
                                  Body matched OK: ; ;
>>>ADVANCE 152:0 [-1] ' '(NEWLINE)
                                  Body matched OK: NEWLINE  
>>>ADVANCE 152:21 [0] 'CompareOrig_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:12
                                  Body TRY Statement on 'CompareOrig_ed'(IDENTIFIER)

152 20(CODE) CompareOrig_ed.setValue(data);
    'CompareOrig_ed'(IDENTIFIER) '.'(LITERAL) 'setValue'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                                    Statement TRY Adjective on 'CompareOrig_ed'(IDENTIFIER)
                                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:152:1. Adjective: found 'CompareOrig_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 152:21 [0] 'CompareOrig_ed'(IDENTIFIER)
                                    Statement TRY VariableRef on 'CompareOrig_ed'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER CompareOrig_ed
>>>ADVANCE 152:35 [1] '.'(LITERAL)
                                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                                        PropertyAccess matched OK: . .
>>>ADVANCE 152:36 [2] 'setValue'(IDENTIFIER)
                                        PropertyAccess matched OK: IDENTIFIER setValue
>>>ADVANCE 152:44 [3] '('(LITERAL)
                                      Parsed OK!-> PropertyAccess
                                      VariableRef TRY FunctionAccess on '('(LITERAL)
                                        FunctionAccess matched OK: ( (
>>>ADVANCE 152:45 [4] 'data'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                        FunctionAccess TRY Expression on 'data'(IDENTIFIER)
                                          Expression TRY Operand on 'data'(IDENTIFIER)
                                            Operand TRY VariableRef on 'data'(IDENTIFIER)
                                              VariableRef matched OK: IDENTIFIER data
>>>ADVANCE 152:49 [5] ')'(LITERAL)
                                            Parsed OK!-> VariableRef
                                          Parsed OK!-> Operand
                                        Parsed OK!-> Expression
                                        FunctionAccess matched OK: ) )
>>>ADVANCE 152:50 [6] ';'(LITERAL)
                                      Parsed OK!-> FunctionAccess
                                    Parsed OK!-> VariableRef
                                    Statement TRY AssignmentStatement on ';'(LITERAL)
                                    AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:152:50. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 152:50 [6] ';'(LITERAL)
                                    Statement TRY FunctionCall on ';'(LITERAL)
                                    Parsed OK!-> FunctionCall
                                  Parsed OK!-> Statement
                                  Body matched OK: ; ;
>>>ADVANCE 154:0 [-1] ' '(NEWLINE)
                                  Body matched OK: NEWLINE  
>>>ADVANCE 154:21 [0] 'CompareOrig_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:12
                                  Body TRY Statement on 'CompareOrig_ed'(IDENTIFIER)

154 20(CODE) CompareOrig_ed.clearSelection();
    'CompareOrig_ed'(IDENTIFIER) '.'(LITERAL) 'clearSelection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) ';'(LITERAL)

                                    Statement TRY Adjective on 'CompareOrig_ed'(IDENTIFIER)
                                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:154:1. Adjective: found 'CompareOrig_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 154:21 [0] 'CompareOrig_ed'(IDENTIFIER)
                                    Statement TRY VariableRef on 'CompareOrig_ed'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER CompareOrig_ed
>>>ADVANCE 154:35 [1] '.'(LITERAL)
                                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                                        PropertyAccess matched OK: . .
>>>ADVANCE 154:36 [2] 'clearSelection'(IDENTIFIER)
                                        PropertyAccess matched OK: IDENTIFIER clearSelection
>>>ADVANCE 154:50 [3] '('(LITERAL)
                                      Parsed OK!-> PropertyAccess
                                      VariableRef TRY FunctionAccess on '('(LITERAL)
                                        FunctionAccess matched OK: ( (
>>>ADVANCE 154:51 [4] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                        FunctionAccess matched OK: ) )
>>>ADVANCE 154:52 [5] ';'(LITERAL)
                                      Parsed OK!-> FunctionAccess
                                    Parsed OK!-> VariableRef
                                    Statement TRY AssignmentStatement on ';'(LITERAL)
                                    AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:154:52. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 154:52 [5] ';'(LITERAL)
                                    Statement TRY FunctionCall on ';'(LITERAL)
                                    Parsed OK!-> FunctionCall
                                  Parsed OK!-> Statement
                                  Body matched OK: ; ;
>>>ADVANCE 155:0 [-1] ' '(NEWLINE)
                                  Body matched OK: NEWLINE  
>>>ADVANCE 155:21 [0] 'CompareOrig_ed'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:12
                                  Body TRY Statement on 'CompareOrig_ed'(IDENTIFIER)

155 20(CODE) CompareOrig_ed.scrollToLine(0);
    'CompareOrig_ed'(IDENTIFIER) '.'(LITERAL) 'scrollToLine'(IDENTIFIER) '('(LITERAL) '0'(NUMBER) ')'(LITERAL) ';'(LITERAL)

                                    Statement TRY Adjective on 'CompareOrig_ed'(IDENTIFIER)
                                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:155:1. Adjective: found 'CompareOrig_ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 155:21 [0] 'CompareOrig_ed'(IDENTIFIER)
                                    Statement TRY VariableRef on 'CompareOrig_ed'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER CompareOrig_ed
>>>ADVANCE 155:35 [1] '.'(LITERAL)
                                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                                        PropertyAccess matched OK: . .
>>>ADVANCE 155:36 [2] 'scrollToLine'(IDENTIFIER)
                                        PropertyAccess matched OK: IDENTIFIER scrollToLine
>>>ADVANCE 155:48 [3] '('(LITERAL)
                                      Parsed OK!-> PropertyAccess
                                      VariableRef TRY FunctionAccess on '('(LITERAL)
                                        FunctionAccess matched OK: ( (
>>>ADVANCE 155:49 [4] '0'(NUMBER)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                        FunctionAccess TRY Expression on '0'(NUMBER)
                                          Expression TRY Operand on '0'(NUMBER)
                                            Operand TRY NumberLiteral on '0'(NUMBER)
                                              NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 155:50 [5] ')'(LITERAL)
                                            Parsed OK!-> NumberLiteral
                                          Parsed OK!-> Operand
                                        Parsed OK!-> Expression
                                        FunctionAccess matched OK: ) )
>>>ADVANCE 155:51 [6] ';'(LITERAL)
                                      Parsed OK!-> FunctionAccess
                                    Parsed OK!-> VariableRef
                                    Statement TRY AssignmentStatement on ';'(LITERAL)
                                    AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:155:51. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 155:51 [6] ';'(LITERAL)
                                    Statement TRY FunctionCall on ';'(LITERAL)
                                    Parsed OK!-> FunctionCall
                                  Parsed OK!-> Statement
                                  Body matched OK: ; ;
>>>ADVANCE 157:0 [-1] ' '(NEWLINE)
                                  Body matched OK: NEWLINE  
>>>ADVANCE 157:21 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:12
                                  Body TRY Statement on 'if'(IDENTIFIER)

157 20(CODE) if callback, callback(null,data);
    'if'(IDENTIFIER) 'callback'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) '('(LITERAL) 'null'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                                    Statement TRY IfStatement on 'if'(IDENTIFIER)
                                      IfStatement matched OK: if if
>>>ADVANCE 157:24 [1] 'callback'(IDENTIFIER)
                                      IfStatement TRY Expression on 'callback'(IDENTIFIER)
                                        Expression TRY Operand on 'callback'(IDENTIFIER)
                                          Operand TRY VariableRef on 'callback'(IDENTIFIER)
                                            VariableRef matched OK: IDENTIFIER callback
>>>ADVANCE 157:32 [2] ','(LITERAL)
                                          Parsed OK!-> VariableRef
                                        Parsed OK!-> Operand
                                      Parsed OK!-> Expression
                                      IfStatement matched OK: , ,
>>>ADVANCE 157:34 [3] 'callback'(IDENTIFIER)
                                      IfStatement TRY SingleLineStatement on 'callback'(IDENTIFIER)
optSeparatedList [SingleLineStatement] indent:20, get SeparatedList of [Statement] by ';' closer: NEWLINE
                                        SingleLineStatement TRY Statement on 'callback'(IDENTIFIER)

157 20(CODE) if callback, callback(null,data);
    'if'(IDENTIFIER) 'callback'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) '('(LITERAL) 'null'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                                          Statement TRY Adjective on 'callback'(IDENTIFIER)
                                          Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:157:33. Adjective: found 'callback'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 157:34 [3] 'callback'(IDENTIFIER)
                                          Statement TRY VariableRef on 'callback'(IDENTIFIER)
                                            VariableRef matched OK: IDENTIFIER callback
>>>ADVANCE 157:42 [4] '('(LITERAL)
                                            VariableRef TRY FunctionAccess on '('(LITERAL)
                                              FunctionAccess matched OK: ( (
>>>ADVANCE 157:43 [5] 'null'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                              FunctionAccess TRY Expression on 'null'(IDENTIFIER)
                                                Expression TRY Operand on 'null'(IDENTIFIER)
                                                  Operand TRY VariableRef on 'null'(IDENTIFIER)
                                                    VariableRef matched OK: IDENTIFIER null
>>>ADVANCE 157:47 [6] ','(LITERAL)
                                                  Parsed OK!-> VariableRef
                                                Parsed OK!-> Operand
                                              Parsed OK!-> Expression
                                              FunctionAccess matched OK: , ,
>>>ADVANCE 157:48 [7] 'data'(IDENTIFIER)
                                              FunctionAccess TRY Expression on 'data'(IDENTIFIER)
                                                Expression TRY Operand on 'data'(IDENTIFIER)
                                                  Operand TRY VariableRef on 'data'(IDENTIFIER)
                                                    VariableRef matched OK: IDENTIFIER data
>>>ADVANCE 157:52 [8] ')'(LITERAL)
                                                  Parsed OK!-> VariableRef
                                                Parsed OK!-> Operand
                                              Parsed OK!-> Expression
                                              FunctionAccess matched OK: ) )
>>>ADVANCE 157:53 [9] ';'(LITERAL)
                                            Parsed OK!-> FunctionAccess
                                          Parsed OK!-> VariableRef
                                          Statement TRY AssignmentStatement on ';'(LITERAL)
                                          AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:157:53. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 157:53 [9] ';'(LITERAL)
                                          Statement TRY FunctionCall on ';'(LITERAL)
                                          Parsed OK!-> FunctionCall
                                        Parsed OK!-> Statement
                                        SingleLineStatement matched OK: ; ;
>>>ADVANCE 159:0 [-1] ' '(NEWLINE)
                                        SingleLineStatement matched OK: NEWLINE  
>>>ADVANCE 159:13 [0] 'error'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 159
                                      Parsed OK!-> SingleLineStatement
                                      IfStatement matched OK: NEWLINE  
>>>ADVANCE 159:13 [0] 'error'(IDENTIFIER)
                                      IfStatement TRY ElseIfStatement on 'error'(IDENTIFIER)
                                      ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:159:1. ElseIfStatement: found 'error'(IDENTIFIER) but 'else' required
<<REW to 159:13 [0] 'error'(IDENTIFIER)
                                      IfStatement TRY ElseStatement on 'error'(IDENTIFIER)
                                      ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:159:1. ElseStatement: found 'error'(IDENTIFIER) but 'else' required
<<REW to 159:13 [0] 'error'(IDENTIFIER)
                                    Parsed OK!-> IfStatement
                                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:20 parentIndent:12
END freeFormMode [Body] blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no closer-
                                Parsed OK!-> Body
                              Parsed OK!-> FunctionDeclaration
                            Parsed OK!-> Operand
                            Expression TRY Oper on 'error'(IDENTIFIER)
                            Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:159:1. Oper: found 'error'(IDENTIFIER) but 'OPER' required
<<REW to 159:13 [0] 'error'(IDENTIFIER)
                          Parsed OK!-> Expression
                        Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                        ObjectLiteral TRY NameValuePair on 'error'(IDENTIFIER)
                          NameValuePair matched OK: IDENTIFIER error
>>>ADVANCE 159:18 [1] ':'(OPER)
                          NameValuePair matched OK: : :
>>>ADVANCE 159:20 [2] 'function'(IDENTIFIER)
                          NameValuePair TRY Expression on 'function'(IDENTIFIER)
                            Expression TRY Operand on 'function'(IDENTIFIER)
                              Operand TRY FunctionDeclaration on 'function'(IDENTIFIER)
                                FunctionDeclaration matched OK: function function
>>>ADVANCE 159:29 [3] '('(LITERAL)
                                FunctionDeclaration matched OK: ( (
>>>ADVANCE 159:30 [4] 'jqxhr'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                                FunctionDeclaration TRY VariableDecl on 'jqxhr'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER jqxhr
>>>ADVANCE 159:35 [5] ','(LITERAL)
                                Parsed OK!-> VariableDecl
                                FunctionDeclaration matched OK: , ,
>>>ADVANCE 159:37 [6] 'textStatus'(IDENTIFIER)
                                FunctionDeclaration TRY VariableDecl on 'textStatus'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER textStatus
>>>ADVANCE 159:47 [7] ','(LITERAL)
                                Parsed OK!-> VariableDecl
                                FunctionDeclaration matched OK: , ,
>>>ADVANCE 159:49 [8] 'errorThrown'(IDENTIFIER)
                                FunctionDeclaration TRY VariableDecl on 'errorThrown'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER errorThrown
>>>ADVANCE 159:60 [9] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                FunctionDeclaration matched OK: ) )
>>>ADVANCE 160:0 [-1] ' '(NEWLINE)
                                FunctionDeclaration TRY Body on ' '(NEWLINE)
                                  Body matched OK: NEWLINE  
>>>ADVANCE 160:21 [0] 'global'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:12, blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:12
                                  Body TRY Statement on 'global'(IDENTIFIER)

160 20(CODE) global declare alert
    'global'(IDENTIFIER) 'declare'(IDENTIFIER) 'alert'(IDENTIFIER)

                                    Statement TRY Adjective on 'global'(IDENTIFIER)
                                      Adjective matched OK: global global
>>>ADVANCE 160:28 [1] 'declare'(IDENTIFIER)
                                    Parsed OK!-> Adjective
                                    Statement TRY Adjective on 'declare'(IDENTIFIER)
                                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:160:22. Adjective: found 'declare'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 160:28 [1] 'declare'(IDENTIFIER)
                                    Statement TRY DeclareStatement on 'declare'(IDENTIFIER)
                                      DeclareStatement matched OK: declare declare
>>>ADVANCE 160:36 [2] 'alert'(IDENTIFIER)
optSeparatedList [DeclareStatement] indent:20, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                                      DeclareStatement TRY VariableDecl on 'alert'(IDENTIFIER)
                                        VariableDecl matched OK: IDENTIFIER alert
>>>ADVANCE 161:0 [-1] ' '(NEWLINE)
                                      Parsed OK!-> VariableDecl
                                      DeclareStatement matched OK: NEWLINE  
>>>ADVANCE 161:21 [0] 'declare'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 161
                                    Parsed OK!-> DeclareStatement
                                  Parsed OK!-> Statement
                                  Body matched OK: NEWLINE  
>>>ADVANCE 161:21 [0] 'declare'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:12
                                  Body TRY Statement on 'declare'(IDENTIFIER)

161 20(CODE) declare valid jqxhr.responseText
    'declare'(IDENTIFIER) 'valid'(IDENTIFIER) 'jqxhr'(IDENTIFIER) '.'(LITERAL) 'responseText'(IDENTIFIER)

                                    Statement TRY DeclareStatement on 'declare'(IDENTIFIER)
                                      DeclareStatement matched OK: declare declare
>>>ADVANCE 161:29 [1] 'valid'(IDENTIFIER)
                                      DeclareStatement matched OK: valid valid
>>>ADVANCE 161:35 [2] 'jqxhr'(IDENTIFIER)
                                      DeclareStatement TRY VariableRef on 'jqxhr'(IDENTIFIER)
                                        VariableRef matched OK: IDENTIFIER jqxhr
>>>ADVANCE 161:40 [3] '.'(LITERAL)
                                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                                          PropertyAccess matched OK: . .
>>>ADVANCE 161:41 [4] 'responseText'(IDENTIFIER)
                                          PropertyAccess matched OK: IDENTIFIER responseText
>>>ADVANCE 162:0 [-1] ' '(NEWLINE)
                                        Parsed OK!-> PropertyAccess
                                      Parsed OK!-> VariableRef
                                    Parsed OK!-> DeclareStatement
                                  Parsed OK!-> Statement
                                  Body matched OK: NEWLINE  
>>>ADVANCE 162:21 [0] 'alert'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:12
                                  Body TRY Statement on 'alert'(IDENTIFIER)

162 20(CODE) alert jqxhr.responseText
    'alert'(IDENTIFIER) 'jqxhr'(IDENTIFIER) '.'(LITERAL) 'responseText'(IDENTIFIER)

                                    Statement TRY Adjective on 'alert'(IDENTIFIER)
                                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:162:1. Adjective: found 'alert'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 162:21 [0] 'alert'(IDENTIFIER)
                                    Statement TRY VariableRef on 'alert'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER alert
>>>ADVANCE 162:27 [1] 'jqxhr'(IDENTIFIER)
                                    Parsed OK!-> VariableRef
                                    Statement TRY AssignmentStatement on 'jqxhr'(IDENTIFIER)
                                    AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:162:22. AssignmentStatement: found 'jqxhr'(IDENTIFIER) but 'ASSIGN' required
<<REW to 162:27 [1] 'jqxhr'(IDENTIFIER)
                                    Statement TRY FunctionCall on 'jqxhr'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: -no closer-
                                        FunctionAccess TRY Expression on 'jqxhr'(IDENTIFIER)
                                          Expression TRY Operand on 'jqxhr'(IDENTIFIER)
                                            Operand TRY VariableRef on 'jqxhr'(IDENTIFIER)
                                              VariableRef matched OK: IDENTIFIER jqxhr
>>>ADVANCE 162:32 [2] '.'(LITERAL)
                                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                                PropertyAccess matched OK: . .
>>>ADVANCE 162:33 [3] 'responseText'(IDENTIFIER)
                                                PropertyAccess matched OK: IDENTIFIER responseText
>>>ADVANCE 164:0 [-1] ' '(NEWLINE)
                                              Parsed OK!-> PropertyAccess
                                            Parsed OK!-> VariableRef
                                          Parsed OK!-> Operand
                                          Expression matched OK: NEWLINE  
>>>ADVANCE 164:21 [0] 'if'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 164
                                        Parsed OK!-> Expression
                                        FunctionAccess matched OK: NEWLINE  
>>>ADVANCE 164:21 [0] 'if'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 164
                                    Parsed OK!-> FunctionCall
                                  Parsed OK!-> Statement
                                  Body matched OK: NEWLINE  
>>>ADVANCE 164:21 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:12
                                  Body TRY Statement on 'if'(IDENTIFIER)

164 20(CODE) if callback, callback(jqxhr);
    'if'(IDENTIFIER) 'callback'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) '('(LITERAL) 'jqxhr'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                                    Statement TRY IfStatement on 'if'(IDENTIFIER)
                                      IfStatement matched OK: if if
>>>ADVANCE 164:24 [1] 'callback'(IDENTIFIER)
                                      IfStatement TRY Expression on 'callback'(IDENTIFIER)
                                        Expression TRY Operand on 'callback'(IDENTIFIER)
                                          Operand TRY VariableRef on 'callback'(IDENTIFIER)
                                            VariableRef matched OK: IDENTIFIER callback
>>>ADVANCE 164:32 [2] ','(LITERAL)
                                          Parsed OK!-> VariableRef
                                        Parsed OK!-> Operand
                                      Parsed OK!-> Expression
                                      IfStatement matched OK: , ,
>>>ADVANCE 164:34 [3] 'callback'(IDENTIFIER)
                                      IfStatement TRY SingleLineStatement on 'callback'(IDENTIFIER)
optSeparatedList [SingleLineStatement] indent:20, get SeparatedList of [Statement] by ';' closer: NEWLINE
                                        SingleLineStatement TRY Statement on 'callback'(IDENTIFIER)

164 20(CODE) if callback, callback(jqxhr);
    'if'(IDENTIFIER) 'callback'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) '('(LITERAL) 'jqxhr'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                                          Statement TRY Adjective on 'callback'(IDENTIFIER)
                                          Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:164:33. Adjective: found 'callback'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 164:34 [3] 'callback'(IDENTIFIER)
                                          Statement TRY VariableRef on 'callback'(IDENTIFIER)
                                            VariableRef matched OK: IDENTIFIER callback
>>>ADVANCE 164:42 [4] '('(LITERAL)
                                            VariableRef TRY FunctionAccess on '('(LITERAL)
                                              FunctionAccess matched OK: ( (
>>>ADVANCE 164:43 [5] 'jqxhr'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                              FunctionAccess TRY Expression on 'jqxhr'(IDENTIFIER)
                                                Expression TRY Operand on 'jqxhr'(IDENTIFIER)
                                                  Operand TRY VariableRef on 'jqxhr'(IDENTIFIER)
                                                    VariableRef matched OK: IDENTIFIER jqxhr
>>>ADVANCE 164:48 [6] ')'(LITERAL)
                                                  Parsed OK!-> VariableRef
                                                Parsed OK!-> Operand
                                              Parsed OK!-> Expression
                                              FunctionAccess matched OK: ) )
>>>ADVANCE 164:49 [7] ';'(LITERAL)
                                            Parsed OK!-> FunctionAccess
                                          Parsed OK!-> VariableRef
                                          Statement TRY AssignmentStatement on ';'(LITERAL)
                                          AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:164:49. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 164:49 [7] ';'(LITERAL)
                                          Statement TRY FunctionCall on ';'(LITERAL)
                                          Parsed OK!-> FunctionCall
                                        Parsed OK!-> Statement
                                        SingleLineStatement matched OK: ; ;
>>>ADVANCE 165:0 [-1] ' '(NEWLINE)
                                        SingleLineStatement matched OK: NEWLINE  
>>>ADVANCE 165:10 [0] '}'(LITERAL)
<< Returned: ' '(NEWLINE) line 165
                                      Parsed OK!-> SingleLineStatement
                                      IfStatement matched OK: NEWLINE  
>>>ADVANCE 165:10 [0] '}'(LITERAL)
                                      IfStatement TRY ElseIfStatement on '}'(LITERAL)
                                      ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:165:1. ElseIfStatement: found '}'(LITERAL) but 'else' required
<<REW to 165:10 [0] '}'(LITERAL)
                                      IfStatement TRY ElseStatement on '}'(LITERAL)
                                      ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:165:1. ElseStatement: found '}'(LITERAL) but 'else' required
<<REW to 165:10 [0] '}'(LITERAL)
                                    Parsed OK!-> IfStatement
                                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:9 block indent:20 parentIndent:12
END freeFormMode [Body] blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no closer-
                                Parsed OK!-> Body
                              Parsed OK!-> FunctionDeclaration
                            Parsed OK!-> Operand
                            Expression TRY Oper on '}'(LITERAL)
                            Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:165:1. Oper: found '}'(LITERAL) but 'OPER' required
<<REW to 165:10 [0] '}'(LITERAL)
                          Parsed OK!-> Expression
                        Parsed OK!-> NameValuePair
                        ObjectLiteral matched OK: } }
>>>ADVANCE 165:11 [1] ')'(LITERAL)
END freeFormMode [ObjectLiteral] blockIndent:12, get SeparatedList of [NameValuePair] by ',' closer: }
                      Parsed OK!-> ObjectLiteral
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 181:0 [-1] ' '(NEWLINE)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ' '(NEWLINE)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:165:12. AssignmentStatement: found ' '(NEWLINE) but 'ASSIGN' required
<<REW to 181:0 [-1] ' '(NEWLINE)
              Statement TRY FunctionCall on ' '(NEWLINE)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 181:5 [0] 'function'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> FunctionDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'function'(IDENTIFIER)

181 4(CODE) function mkEditor(divName) returns ace.Editor
    'function'(IDENTIFIER) 'mkEditor'(IDENTIFIER) '('(LITERAL) 'divName'(IDENTIFIER) ')'(LITERAL) 'returns'(IDENTIFIER) 'ace'(IDENTIFIER) '.'(LITERAL) 'Editor'(IDENTIFIER)

        Statement TRY FunctionDeclaration on 'function'(IDENTIFIER)
          FunctionDeclaration matched OK: function function
>>>ADVANCE 181:14 [1] 'mkEditor'(IDENTIFIER)
          FunctionDeclaration matched OK: IDENTIFIER mkEditor
>>>ADVANCE 181:22 [2] '('(LITERAL)
          FunctionDeclaration matched OK: ( (
>>>ADVANCE 181:23 [3] 'divName'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:4, get SeparatedList of [VariableDecl] by ',' closer: )
          FunctionDeclaration TRY VariableDecl on 'divName'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER divName
>>>ADVANCE 181:30 [4] ')'(LITERAL)
          Parsed OK!-> VariableDecl
          FunctionDeclaration matched OK: ) )
>>>ADVANCE 181:32 [5] 'returns'(IDENTIFIER)
          FunctionDeclaration matched OK: returns returns
>>>ADVANCE 181:40 [6] 'ace'(IDENTIFIER)
          FunctionDeclaration TRY VariableRef on 'ace'(IDENTIFIER)
            VariableRef matched OK: IDENTIFIER ace
>>>ADVANCE 181:43 [7] '.'(LITERAL)
            VariableRef TRY PropertyAccess on '.'(LITERAL)
              PropertyAccess matched OK: . .
>>>ADVANCE 181:44 [8] 'Editor'(IDENTIFIER)
              PropertyAccess matched OK: IDENTIFIER Editor
>>>ADVANCE 183:0 [-1] ' '(NEWLINE)
            Parsed OK!-> PropertyAccess
          Parsed OK!-> VariableRef
          FunctionDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 183:9 [0] 'var'(IDENTIFIER)
optFreeFormList [Body] parentname:mkEditor parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'var'(IDENTIFIER)

183 8(CODE) var editor = ace.edit(divName);
    'var'(IDENTIFIER) 'editor'(IDENTIFIER) '='(ASSIGN) 'ace'(IDENTIFIER) '.'(LITERAL) 'edit'(IDENTIFIER) '('(LITERAL) 'divName'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

              Statement TRY VarStatement on 'var'(IDENTIFIER)
                VarStatement matched OK: var var
>>>ADVANCE 183:13 [1] 'editor'(IDENTIFIER)
optSeparatedList [VarStatement] indent:8, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                VarStatement TRY VariableDecl on 'editor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER editor
>>>ADVANCE 183:20 [2] '='(ASSIGN)
                  VariableDecl matched OK: = =
>>>ADVANCE 183:22 [3] 'ace'(IDENTIFIER)
                  VariableDecl TRY Expression on 'ace'(IDENTIFIER)
                    Expression TRY Operand on 'ace'(IDENTIFIER)
                      Operand TRY VariableRef on 'ace'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER ace
>>>ADVANCE 183:25 [4] '.'(LITERAL)
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 183:26 [5] 'edit'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER edit
>>>ADVANCE 183:30 [6] '('(LITERAL)
                        Parsed OK!-> PropertyAccess
                        VariableRef TRY FunctionAccess on '('(LITERAL)
                          FunctionAccess matched OK: ( (
>>>ADVANCE 183:31 [7] 'divName'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                          FunctionAccess TRY Expression on 'divName'(IDENTIFIER)
                            Expression TRY Operand on 'divName'(IDENTIFIER)
                              Operand TRY VariableRef on 'divName'(IDENTIFIER)
                                VariableRef matched OK: IDENTIFIER divName
>>>ADVANCE 183:38 [8] ')'(LITERAL)
                              Parsed OK!-> VariableRef
                            Parsed OK!-> Operand
                          Parsed OK!-> Expression
                          FunctionAccess matched OK: ) )
>>>ADVANCE 183:39 [9] ';'(LITERAL)
                        Parsed OK!-> FunctionAccess
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression TRY Oper on ';'(LITERAL)
                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:183:39. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 183:39 [9] ';'(LITERAL)
                  Parsed OK!-> Expression
                Parsed OK!-> VariableDecl
              Parsed OK!-> VarStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 184:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 184:9 [0] 'editor'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'editor'(IDENTIFIER)

184 8(CODE) editor.setTheme("ace/theme/monokai");
    'editor'(IDENTIFIER) '.'(LITERAL) 'setTheme'(IDENTIFIER) '('(LITERAL) '"ace/theme/monokai"'(STRING) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'editor'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:184:1. Adjective: found 'editor'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 184:9 [0] 'editor'(IDENTIFIER)
              Statement TRY VariableRef on 'editor'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER editor
>>>ADVANCE 184:15 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 184:16 [2] 'setTheme'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER setTheme
>>>ADVANCE 184:24 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 184:25 [4] '"ace/theme/monokai"'(STRING)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on '"ace/theme/monokai"'(STRING)
                    Expression TRY Operand on '"ace/theme/monokai"'(STRING)
                      Operand TRY StringLiteral on '"ace/theme/monokai"'(STRING)
                        StringLiteral matched OK: STRING "ace/theme/monokai"
>>>ADVANCE 184:44 [5] ')'(LITERAL)
                      Parsed OK!-> StringLiteral
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 184:45 [6] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:184:45. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 184:45 [6] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 185:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 185:9 [0] 'editor'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'editor'(IDENTIFIER)

185 8(CODE) editor.setShowPrintMargin(false);
    'editor'(IDENTIFIER) '.'(LITERAL) 'setShowPrintMargin'(IDENTIFIER) '('(LITERAL) 'false'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'editor'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:185:1. Adjective: found 'editor'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 185:9 [0] 'editor'(IDENTIFIER)
              Statement TRY VariableRef on 'editor'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER editor
>>>ADVANCE 185:15 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 185:16 [2] 'setShowPrintMargin'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER setShowPrintMargin
>>>ADVANCE 185:34 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 185:35 [4] 'false'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on 'false'(IDENTIFIER)
                    Expression TRY Operand on 'false'(IDENTIFIER)
                      Operand TRY VariableRef on 'false'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER false
>>>ADVANCE 185:40 [5] ')'(LITERAL)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 185:41 [6] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:185:41. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 185:41 [6] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 186:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 186:9 [0] 'editor'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'editor'(IDENTIFIER)

186 8(CODE) editor.setFontSize(16);
    'editor'(IDENTIFIER) '.'(LITERAL) 'setFontSize'(IDENTIFIER) '('(LITERAL) '16'(NUMBER) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'editor'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:186:1. Adjective: found 'editor'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 186:9 [0] 'editor'(IDENTIFIER)
              Statement TRY VariableRef on 'editor'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER editor
>>>ADVANCE 186:15 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 186:16 [2] 'setFontSize'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER setFontSize
>>>ADVANCE 186:27 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 186:28 [4] '16'(NUMBER)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on '16'(NUMBER)
                    Expression TRY Operand on '16'(NUMBER)
                      Operand TRY NumberLiteral on '16'(NUMBER)
                        NumberLiteral matched OK: NUMBER 16
>>>ADVANCE 186:30 [5] ')'(LITERAL)
                      Parsed OK!-> NumberLiteral
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 186:31 [6] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:186:31. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 186:31 [6] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 188:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 188:9 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'var'(IDENTIFIER)

188 8(CODE) var session = editor.getSession();
    'var'(IDENTIFIER) 'session'(IDENTIFIER) '='(ASSIGN) 'editor'(IDENTIFIER) '.'(LITERAL) 'getSession'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) ';'(LITERAL)

              Statement TRY VarStatement on 'var'(IDENTIFIER)
                VarStatement matched OK: var var
>>>ADVANCE 188:13 [1] 'session'(IDENTIFIER)
optSeparatedList [VarStatement] indent:8, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                VarStatement TRY VariableDecl on 'session'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 188:21 [2] '='(ASSIGN)
                  VariableDecl matched OK: = =
>>>ADVANCE 188:23 [3] 'editor'(IDENTIFIER)
                  VariableDecl TRY Expression on 'editor'(IDENTIFIER)
                    Expression TRY Operand on 'editor'(IDENTIFIER)
                      Operand TRY VariableRef on 'editor'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER editor
>>>ADVANCE 188:29 [4] '.'(LITERAL)
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 188:30 [5] 'getSession'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER getSession
>>>ADVANCE 188:40 [6] '('(LITERAL)
                        Parsed OK!-> PropertyAccess
                        VariableRef TRY FunctionAccess on '('(LITERAL)
                          FunctionAccess matched OK: ( (
>>>ADVANCE 188:41 [7] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                          FunctionAccess matched OK: ) )
>>>ADVANCE 188:42 [8] ';'(LITERAL)
                        Parsed OK!-> FunctionAccess
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression TRY Oper on ';'(LITERAL)
                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:188:42. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 188:42 [8] ';'(LITERAL)
                  Parsed OK!-> Expression
                Parsed OK!-> VariableDecl
              Parsed OK!-> VarStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 189:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 189:9 [0] 'session'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'session'(IDENTIFIER)

189 8(CODE) session.setUseWorker(false);
    'session'(IDENTIFIER) '.'(LITERAL) 'setUseWorker'(IDENTIFIER) '('(LITERAL) 'false'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'session'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:189:1. Adjective: found 'session'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 189:9 [0] 'session'(IDENTIFIER)
              Statement TRY VariableRef on 'session'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER session
>>>ADVANCE 189:16 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 189:17 [2] 'setUseWorker'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER setUseWorker
>>>ADVANCE 189:29 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 189:30 [4] 'false'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on 'false'(IDENTIFIER)
                    Expression TRY Operand on 'false'(IDENTIFIER)
                      Operand TRY VariableRef on 'false'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER false
>>>ADVANCE 189:35 [5] ')'(LITERAL)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 189:36 [6] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:189:36. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 189:36 [6] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 190:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 190:9 [0] 'session'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'session'(IDENTIFIER)

190 8(CODE) session.setMode("ace/mode/javascript");
    'session'(IDENTIFIER) '.'(LITERAL) 'setMode'(IDENTIFIER) '('(LITERAL) '"ace/mode/javascript"'(STRING) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'session'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:190:1. Adjective: found 'session'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 190:9 [0] 'session'(IDENTIFIER)
              Statement TRY VariableRef on 'session'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER session
>>>ADVANCE 190:16 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 190:17 [2] 'setMode'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER setMode
>>>ADVANCE 190:24 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 190:25 [4] '"ace/mode/javascript"'(STRING)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on '"ace/mode/javascript"'(STRING)
                    Expression TRY Operand on '"ace/mode/javascript"'(STRING)
                      Operand TRY StringLiteral on '"ace/mode/javascript"'(STRING)
                        StringLiteral matched OK: STRING "ace/mode/javascript"
>>>ADVANCE 190:46 [5] ')'(LITERAL)
                      Parsed OK!-> StringLiteral
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 190:47 [6] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:190:47. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 190:47 [6] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 191:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 191:9 [0] 'return'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'return'(IDENTIFIER)

191 8(CODE) return editor;
    'return'(IDENTIFIER) 'editor'(IDENTIFIER) ';'(LITERAL)

              Statement TRY ReturnStatement on 'return'(IDENTIFIER)
                ReturnStatement matched OK: return return
>>>ADVANCE 191:16 [1] 'editor'(IDENTIFIER)
                ReturnStatement TRY Expression on 'editor'(IDENTIFIER)
                  Expression TRY Operand on 'editor'(IDENTIFIER)
                    Operand TRY VariableRef on 'editor'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER editor
>>>ADVANCE 191:22 [2] ';'(LITERAL)
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression TRY Oper on ';'(LITERAL)
                  Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:191:17. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 191:22 [2] ';'(LITERAL)
                Parsed OK!-> Expression
              Parsed OK!-> ReturnStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 194:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 194:5 [0] 'function'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> FunctionDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'function'(IDENTIFIER)

194 4(CODE) function addLines(lineArray, ed:ace.Editor)
    'function'(IDENTIFIER) 'addLines'(IDENTIFIER) '('(LITERAL) 'lineArray'(IDENTIFIER) ','(LITERAL) 'ed'(IDENTIFIER) ':'(OPER) 'ace'(IDENTIFIER) '.'(LITERAL) 'Editor'(IDENTIFIER) ')'(LITERAL)

        Statement TRY FunctionDeclaration on 'function'(IDENTIFIER)
          FunctionDeclaration matched OK: function function
>>>ADVANCE 194:14 [1] 'addLines'(IDENTIFIER)
          FunctionDeclaration matched OK: IDENTIFIER addLines
>>>ADVANCE 194:22 [2] '('(LITERAL)
          FunctionDeclaration matched OK: ( (
>>>ADVANCE 194:23 [3] 'lineArray'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:4, get SeparatedList of [VariableDecl] by ',' closer: )
          FunctionDeclaration TRY VariableDecl on 'lineArray'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER lineArray
>>>ADVANCE 194:32 [4] ','(LITERAL)
          Parsed OK!-> VariableDecl
          FunctionDeclaration matched OK: , ,
>>>ADVANCE 194:34 [5] 'ed'(IDENTIFIER)
          FunctionDeclaration TRY VariableDecl on 'ed'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER ed
>>>ADVANCE 194:36 [6] ':'(OPER)
            VariableDecl matched OK: : :
>>>ADVANCE 194:37 [7] 'ace'(IDENTIFIER)
            VariableDecl TRY VariableRef on 'ace'(IDENTIFIER)
              VariableRef matched OK: IDENTIFIER ace
>>>ADVANCE 194:40 [8] '.'(LITERAL)
              VariableRef TRY PropertyAccess on '.'(LITERAL)
                PropertyAccess matched OK: . .
>>>ADVANCE 194:41 [9] 'Editor'(IDENTIFIER)
                PropertyAccess matched OK: IDENTIFIER Editor
>>>ADVANCE 194:47 [10] ')'(LITERAL)
              Parsed OK!-> PropertyAccess
            Parsed OK!-> VariableRef
          Parsed OK!-> VariableDecl
          FunctionDeclaration matched OK: ) )
>>>ADVANCE 196:0 [-1] ' '(NEWLINE)
          FunctionDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 196:13 [0] 'if'(IDENTIFIER)
optFreeFormList [Body] parentname:addLines parentIndent:4, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:4
            Body TRY Statement on 'if'(IDENTIFIER)

196 12(CODE) if no lineArray, return;
    'if'(IDENTIFIER) 'no'(IDENTIFIER) 'lineArray'(IDENTIFIER) ','(LITERAL) 'return'(IDENTIFIER) ';'(LITERAL)

              Statement TRY IfStatement on 'if'(IDENTIFIER)
                IfStatement matched OK: if if
>>>ADVANCE 196:16 [1] 'no'(IDENTIFIER)
                IfStatement TRY Expression on 'no'(IDENTIFIER)
                  Expression TRY UnaryOper on 'no'(IDENTIFIER)
                    UnaryOper matched OK: no no
>>>ADVANCE 196:19 [2] 'lineArray'(IDENTIFIER)
                  Parsed OK!-> UnaryOper
                  Expression TRY Operand on 'lineArray'(IDENTIFIER)
                    Operand TRY VariableRef on 'lineArray'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER lineArray
>>>ADVANCE 196:28 [3] ','(LITERAL)
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                Parsed OK!-> Expression
                IfStatement matched OK: , ,
>>>ADVANCE 196:30 [4] 'return'(IDENTIFIER)
                IfStatement TRY SingleLineStatement on 'return'(IDENTIFIER)
optSeparatedList [SingleLineStatement] indent:12, get SeparatedList of [Statement] by ';' closer: NEWLINE
                  SingleLineStatement TRY Statement on 'return'(IDENTIFIER)

196 12(CODE) if no lineArray, return;
    'if'(IDENTIFIER) 'no'(IDENTIFIER) 'lineArray'(IDENTIFIER) ','(LITERAL) 'return'(IDENTIFIER) ';'(LITERAL)

                    Statement TRY ReturnStatement on 'return'(IDENTIFIER)
                      ReturnStatement matched OK: return return
>>>ADVANCE 196:36 [5] ';'(LITERAL)
                      ReturnStatement TRY Expression on ';'(LITERAL)
                        Expression TRY Operand on ';'(LITERAL)
                          Operand TRY VariableRef on ';'(LITERAL)
                          VariableRef parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:196:31. VariableRef: found ';'(LITERAL) but 'IDENTIFIER' required
<<REW to 196:36 [5] ';'(LITERAL)
                        Operand parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:196:31. Operand: found ';'(LITERAL) but [VariableRef] required
<<REW to 196:36 [5] ';'(LITERAL)
                      Expression parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:196:31. Expression: found ';'(LITERAL) but [Operand] required
<<REW to 196:36 [5] ';'(LITERAL)
                    Parsed OK!-> ReturnStatement
                  Parsed OK!-> Statement
                  SingleLineStatement matched OK: ; ;
>>>ADVANCE 198:0 [-1] ' '(NEWLINE)
                  SingleLineStatement matched OK: NEWLINE  
>>>ADVANCE 198:13 [0] 'if'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 198
                Parsed OK!-> SingleLineStatement
                IfStatement matched OK: NEWLINE  
>>>ADVANCE 198:13 [0] 'if'(IDENTIFIER)
                IfStatement TRY ElseIfStatement on 'if'(IDENTIFIER)
                ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:198:1. ElseIfStatement: found 'if'(IDENTIFIER) but 'else' required
<<REW to 198:13 [0] 'if'(IDENTIFIER)
                IfStatement TRY ElseStatement on 'if'(IDENTIFIER)
                ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:198:1. ElseStatement: found 'if'(IDENTIFIER) but 'else' required
<<REW to 198:13 [0] 'if'(IDENTIFIER)
              Parsed OK!-> IfStatement
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:4
            Body TRY Statement on 'if'(IDENTIFIER)

198 12(CODE) if  type of lineArray is 'string'
    'if'(IDENTIFIER) 'type'(IDENTIFIER) 'of'(IDENTIFIER) 'lineArray'(IDENTIFIER) 'is'(OPER) ''string''(STRING)

              Statement TRY IfStatement on 'if'(IDENTIFIER)
                IfStatement matched OK: if if
>>>ADVANCE 198:17 [1] 'type'(IDENTIFIER)
                IfStatement TRY Expression on 'type'(IDENTIFIER)
                  Expression TRY UnaryOper on 'type'(IDENTIFIER)
                    UnaryOper matched OK: type type
>>>ADVANCE 198:22 [2] 'of'(IDENTIFIER)
                    UnaryOper matched OK: of of
>>>ADVANCE 198:25 [3] 'lineArray'(IDENTIFIER)
                  Parsed OK!-> UnaryOper
                  Expression TRY Operand on 'lineArray'(IDENTIFIER)
                    Operand TRY VariableRef on 'lineArray'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER lineArray
>>>ADVANCE 198:35 [4] 'is'(OPER)
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression TRY Oper on 'is'(OPER)
                    Oper matched OK: OPER is
>>>ADVANCE 198:38 [5] ''string''(STRING)
                  Parsed OK!-> Oper
                  Expression TRY Operand on ''string''(STRING)
                    Operand TRY StringLiteral on ''string''(STRING)
                      StringLiteral matched OK: STRING 'string'
>>>ADVANCE 199:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> StringLiteral
                  Parsed OK!-> Operand
                  Expression matched OK: NEWLINE  
>>>ADVANCE 199:17 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 199
                Parsed OK!-> Expression
                IfStatement TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 199:17 [0] 'var'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                  Body TRY Statement on 'var'(IDENTIFIER)

199 16(CODE) var a=[];
    'var'(IDENTIFIER) 'a'(IDENTIFIER) '='(ASSIGN) '['(LITERAL) ']'(LITERAL) ';'(LITERAL)

                    Statement TRY VarStatement on 'var'(IDENTIFIER)
                      VarStatement matched OK: var var
>>>ADVANCE 199:21 [1] 'a'(IDENTIFIER)
optSeparatedList [VarStatement] indent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                      VarStatement TRY VariableDecl on 'a'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER a
>>>ADVANCE 199:22 [2] '='(ASSIGN)
                        VariableDecl matched OK: = =
>>>ADVANCE 199:23 [3] '['(LITERAL)
                        VariableDecl TRY Expression on '['(LITERAL)
                          Expression TRY Operand on '['(LITERAL)
                            Operand TRY ArrayLiteral on '['(LITERAL)
                              ArrayLiteral matched OK: [ [
>>>ADVANCE 199:24 [4] ']'(LITERAL)
optSeparatedList [ArrayLiteral] indent:16, get SeparatedList of [Expression] by ',' closer: ]
                              ArrayLiteral matched OK: ] ]
>>>ADVANCE 199:25 [5] ';'(LITERAL)
                            Parsed OK!-> ArrayLiteral
                          Parsed OK!-> Operand
                          Expression TRY Oper on ';'(LITERAL)
                          Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:199:25. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 199:25 [5] ';'(LITERAL)
                        Parsed OK!-> Expression
                      Parsed OK!-> VariableDecl
                    Parsed OK!-> VarStatement
                  Parsed OK!-> Statement
                  Body matched OK: ; ;
>>>ADVANCE 200:0 [-1] ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 200:17 [0] 'a'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                  Body TRY Statement on 'a'(IDENTIFIER)

200 16(CODE) a[0]=lineArray;
    'a'(IDENTIFIER) '['(LITERAL) '0'(NUMBER) ']'(LITERAL) '='(ASSIGN) 'lineArray'(IDENTIFIER) ';'(LITERAL)

                    Statement TRY Adjective on 'a'(IDENTIFIER)
                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:200:1. Adjective: found 'a'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 200:17 [0] 'a'(IDENTIFIER)
                    Statement TRY VariableRef on 'a'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER a
>>>ADVANCE 200:18 [1] '['(LITERAL)
                      VariableRef TRY IndexAccess on '['(LITERAL)
                        IndexAccess matched OK: [ [
>>>ADVANCE 200:19 [2] '0'(NUMBER)
                        IndexAccess TRY Expression on '0'(NUMBER)
                          Expression TRY Operand on '0'(NUMBER)
                            Operand TRY NumberLiteral on '0'(NUMBER)
                              NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 200:20 [3] ']'(LITERAL)
                            Parsed OK!-> NumberLiteral
                          Parsed OK!-> Operand
                        Parsed OK!-> Expression
                        IndexAccess matched OK: ] ]
>>>ADVANCE 200:21 [4] '='(ASSIGN)
                      Parsed OK!-> IndexAccess
                    Parsed OK!-> VariableRef
                    Statement TRY AssignmentStatement on '='(ASSIGN)
                      AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 200:22 [5] 'lineArray'(IDENTIFIER)
                      AssignmentStatement TRY Expression on 'lineArray'(IDENTIFIER)
                        Expression TRY Operand on 'lineArray'(IDENTIFIER)
                          Operand TRY VariableRef on 'lineArray'(IDENTIFIER)
                            VariableRef matched OK: IDENTIFIER lineArray
>>>ADVANCE 200:31 [6] ';'(LITERAL)
                          Parsed OK!-> VariableRef
                        Parsed OK!-> Operand
                        Expression TRY Oper on ';'(LITERAL)
                        Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:200:23. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 200:31 [6] ';'(LITERAL)
                      Parsed OK!-> Expression
                    Parsed OK!-> AssignmentStatement
                  Parsed OK!-> Statement
                  Body matched OK: ; ;
>>>ADVANCE 201:0 [-1] ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 201:17 [0] 'lineArray'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                  Body TRY Statement on 'lineArray'(IDENTIFIER)

201 16(CODE) lineArray=a;
    'lineArray'(IDENTIFIER) '='(ASSIGN) 'a'(IDENTIFIER) ';'(LITERAL)

                    Statement TRY Adjective on 'lineArray'(IDENTIFIER)
                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:201:1. Adjective: found 'lineArray'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 201:17 [0] 'lineArray'(IDENTIFIER)
                    Statement TRY VariableRef on 'lineArray'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER lineArray
>>>ADVANCE 201:26 [1] '='(ASSIGN)
                    Parsed OK!-> VariableRef
                    Statement TRY AssignmentStatement on '='(ASSIGN)
                      AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 201:27 [2] 'a'(IDENTIFIER)
                      AssignmentStatement TRY Expression on 'a'(IDENTIFIER)
                        Expression TRY Operand on 'a'(IDENTIFIER)
                          Operand TRY VariableRef on 'a'(IDENTIFIER)
                            VariableRef matched OK: IDENTIFIER a
>>>ADVANCE 201:28 [3] ';'(LITERAL)
                          Parsed OK!-> VariableRef
                        Parsed OK!-> Operand
                        Expression TRY Oper on ';'(LITERAL)
                        Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:201:28. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 201:28 [3] ';'(LITERAL)
                      Parsed OK!-> Expression
                    Parsed OK!-> AssignmentStatement
                  Parsed OK!-> Statement
                  Body matched OK: ; ;
>>>ADVANCE 205:0 [-1] ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 205:13 [0] 'ed'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [Body] blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
                IfStatement TRY ElseIfStatement on 'ed'(IDENTIFIER)
                ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:205:1. ElseIfStatement: found 'ed'(IDENTIFIER) but 'else' required
<<REW to 205:13 [0] 'ed'(IDENTIFIER)
                IfStatement TRY ElseStatement on 'ed'(IDENTIFIER)
                ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:205:1. ElseStatement: found 'ed'(IDENTIFIER) but 'else' required
<<REW to 205:13 [0] 'ed'(IDENTIFIER)
              Parsed OK!-> IfStatement
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:4
            Body TRY Statement on 'ed'(IDENTIFIER)

205 12(CODE) ed.session.doc.insertLines(ed.session.doc.getLength()-1, lineArray);
    'ed'(IDENTIFIER) '.'(LITERAL) 'session'(IDENTIFIER) '.'(LITERAL) 'doc'(IDENTIFIER) '.'(LITERAL) 'insertLines'(IDENTIFIER) '('(LITERAL) 'ed'(IDENTIFIER) '.'(LITERAL) 'session'(IDENTIFIER) '.'(LITERAL) 'doc'(IDENTIFIER) '.'(LITERAL) 'getLength'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) '-'(OPER) '1'(NUMBER) ','(LITERAL) 'lineArray'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'ed'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:205:1. Adjective: found 'ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 205:13 [0] 'ed'(IDENTIFIER)
              Statement TRY VariableRef on 'ed'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER ed
>>>ADVANCE 205:15 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 205:16 [2] 'session'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER session
>>>ADVANCE 205:23 [3] '.'(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 205:24 [4] 'doc'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER doc
>>>ADVANCE 205:27 [5] '.'(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 205:28 [6] 'insertLines'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER insertLines
>>>ADVANCE 205:39 [7] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 205:40 [8] 'ed'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on 'ed'(IDENTIFIER)
                    Expression TRY Operand on 'ed'(IDENTIFIER)
                      Operand TRY VariableRef on 'ed'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER ed
>>>ADVANCE 205:42 [9] '.'(LITERAL)
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 205:43 [10] 'session'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER session
>>>ADVANCE 205:50 [11] '.'(LITERAL)
                        Parsed OK!-> PropertyAccess
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 205:51 [12] 'doc'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER doc
>>>ADVANCE 205:54 [13] '.'(LITERAL)
                        Parsed OK!-> PropertyAccess
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 205:55 [14] 'getLength'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER getLength
>>>ADVANCE 205:64 [15] '('(LITERAL)
                        Parsed OK!-> PropertyAccess
                        VariableRef TRY FunctionAccess on '('(LITERAL)
                          FunctionAccess matched OK: ( (
>>>ADVANCE 205:65 [16] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                          FunctionAccess matched OK: ) )
>>>ADVANCE 205:66 [17] '-'(OPER)
                        Parsed OK!-> FunctionAccess
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression TRY Oper on '-'(OPER)
                      Oper matched OK: OPER -
>>>ADVANCE 205:67 [18] '1'(NUMBER)
                    Parsed OK!-> Oper
                    Expression TRY Operand on '1'(NUMBER)
                      Operand TRY NumberLiteral on '1'(NUMBER)
                        NumberLiteral matched OK: NUMBER 1
>>>ADVANCE 205:68 [19] ','(LITERAL)
                      Parsed OK!-> NumberLiteral
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: , ,
>>>ADVANCE 205:70 [20] 'lineArray'(IDENTIFIER)
                  FunctionAccess TRY Expression on 'lineArray'(IDENTIFIER)
                    Expression TRY Operand on 'lineArray'(IDENTIFIER)
                      Operand TRY VariableRef on 'lineArray'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER lineArray
>>>ADVANCE 205:79 [21] ')'(LITERAL)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 205:80 [22] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:205:80. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 205:80 [22] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 206:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 206:13 [0] 'ed'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:4
            Body TRY Statement on 'ed'(IDENTIFIER)

206 12(CODE) ed.resize(true);
    'ed'(IDENTIFIER) '.'(LITERAL) 'resize'(IDENTIFIER) '('(LITERAL) 'true'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'ed'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:206:1. Adjective: found 'ed'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 206:13 [0] 'ed'(IDENTIFIER)
              Statement TRY VariableRef on 'ed'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER ed
>>>ADVANCE 206:15 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 206:16 [2] 'resize'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER resize
>>>ADVANCE 206:22 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 206:23 [4] 'true'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on 'true'(IDENTIFIER)
                    Expression TRY Operand on 'true'(IDENTIFIER)
                      Operand TRY VariableRef on 'true'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER true
>>>ADVANCE 206:27 [5] ')'(LITERAL)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 206:28 [6] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:206:28. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 206:28 [6] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 209:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 209:9 [0] 'function'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:12 parentIndent:4
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> FunctionDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'function'(IDENTIFIER)

209 4(CODE)     function syncEditors(aceEditors: ace.Editor array, onOff)
    'function'(IDENTIFIER) 'syncEditors'(IDENTIFIER) '('(LITERAL) 'aceEditors'(IDENTIFIER) ':'(OPER) 'ace'(IDENTIFIER) '.'(LITERAL) 'Editor'(IDENTIFIER) 'array'(IDENTIFIER) ','(LITERAL) 'onOff'(IDENTIFIER) ')'(LITERAL)

        Statement TRY FunctionDeclaration on 'function'(IDENTIFIER)
          FunctionDeclaration matched OK: function function
>>>ADVANCE 209:18 [1] 'syncEditors'(IDENTIFIER)
          FunctionDeclaration matched OK: IDENTIFIER syncEditors
>>>ADVANCE 209:29 [2] '('(LITERAL)
          FunctionDeclaration matched OK: ( (
>>>ADVANCE 209:30 [3] 'aceEditors'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:4, get SeparatedList of [VariableDecl] by ',' closer: )
          FunctionDeclaration TRY VariableDecl on 'aceEditors'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER aceEditors
>>>ADVANCE 209:40 [4] ':'(OPER)
            VariableDecl matched OK: : :
>>>ADVANCE 209:42 [5] 'ace'(IDENTIFIER)
            VariableDecl TRY VariableRef on 'ace'(IDENTIFIER)
              VariableRef matched OK: IDENTIFIER ace
>>>ADVANCE 209:45 [6] '.'(LITERAL)
              VariableRef TRY PropertyAccess on '.'(LITERAL)
                PropertyAccess matched OK: . .
>>>ADVANCE 209:46 [7] 'Editor'(IDENTIFIER)
                PropertyAccess matched OK: IDENTIFIER Editor
>>>ADVANCE 209:53 [8] 'array'(IDENTIFIER)
              Parsed OK!-> PropertyAccess
            Parsed OK!-> VariableRef
            VariableDecl matched OK: array array
>>>ADVANCE 209:58 [9] ','(LITERAL)
          Parsed OK!-> VariableDecl
          FunctionDeclaration matched OK: , ,
>>>ADVANCE 209:60 [10] 'onOff'(IDENTIFIER)
          FunctionDeclaration TRY VariableDecl on 'onOff'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER onOff
>>>ADVANCE 209:65 [11] ')'(LITERAL)
          Parsed OK!-> VariableDecl
          FunctionDeclaration matched OK: ) )
>>>ADVANCE 214:0 [-1] ' '(NEWLINE)
          FunctionDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 214:9 [0] 'for'(IDENTIFIER)
optFreeFormList [Body] parentname:syncEditors parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'for'(IDENTIFIER)

214 8(CODE) for n=0 while n<aceEditors.length
    'for'(IDENTIFIER) 'n'(IDENTIFIER) '='(ASSIGN) '0'(NUMBER) 'while'(IDENTIFIER) 'n'(IDENTIFIER) '<'(OPER) 'aceEditors'(IDENTIFIER) '.'(LITERAL) 'length'(IDENTIFIER)

              Statement TRY ForStatement on 'for'(IDENTIFIER)
                ForStatement matched OK: for for
>>>ADVANCE 214:13 [1] 'n'(IDENTIFIER)
                ForStatement TRY ForEachProperty on 'n'(IDENTIFIER)
                ForEachProperty parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:214:10. ForEachProperty: found 'n'(IDENTIFIER) but 'each' required
<<REW to 214:13 [1] 'n'(IDENTIFIER)
                ForStatement TRY ForEachInArray on 'n'(IDENTIFIER)
                ForEachInArray parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:214:10. ForEachInArray: found 'n'(IDENTIFIER) but 'each' required
<<REW to 214:13 [1] 'n'(IDENTIFIER)
                ForStatement TRY ForIndexNumeric on 'n'(IDENTIFIER)
                  ForIndexNumeric TRY VariableDecl on 'n'(IDENTIFIER)
                    VariableDecl matched OK: IDENTIFIER n
>>>ADVANCE 214:14 [2] '='(ASSIGN)
                    VariableDecl matched OK: = =
>>>ADVANCE 214:15 [3] '0'(NUMBER)
                    VariableDecl TRY Expression on '0'(NUMBER)
                      Expression TRY Operand on '0'(NUMBER)
                        Operand TRY NumberLiteral on '0'(NUMBER)
                          NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 214:17 [4] 'while'(IDENTIFIER)
                        Parsed OK!-> NumberLiteral
                      Parsed OK!-> Operand
                      Expression TRY Oper on 'while'(IDENTIFIER)
                      Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:214:16. Oper: found 'while'(IDENTIFIER) but 'OPER' required
<<REW to 214:17 [4] 'while'(IDENTIFIER)
                    Parsed OK!-> Expression
                  Parsed OK!-> VariableDecl
                  ForIndexNumeric matched OK: while while
>>>ADVANCE 214:23 [5] 'n'(IDENTIFIER)
                  ForIndexNumeric TRY Expression on 'n'(IDENTIFIER)
                    Expression TRY Operand on 'n'(IDENTIFIER)
                      Operand TRY VariableRef on 'n'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER n
>>>ADVANCE 214:24 [6] '<'(OPER)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression TRY Oper on '<'(OPER)
                      Oper matched OK: OPER <
>>>ADVANCE 214:25 [7] 'aceEditors'(IDENTIFIER)
                    Parsed OK!-> Oper
                    Expression TRY Operand on 'aceEditors'(IDENTIFIER)
                      Operand TRY VariableRef on 'aceEditors'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER aceEditors
>>>ADVANCE 214:35 [8] '.'(LITERAL)
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 214:36 [9] 'length'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER length
>>>ADVANCE 215:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> PropertyAccess
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression matched OK: NEWLINE  
>>>ADVANCE 215:13 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 215
                  Parsed OK!-> Expression
                  ForIndexNumeric TRY ForWhereFilter on ' '(NEWLINE)
                    ForWhereFilter matched OK: NEWLINE  
>>>ADVANCE 215:13 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 215
                  ForWhereFilter parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:214:37. expected '[NEWLINE] where'
<<REW to 215:0 [-1] ' '(NEWLINE)
                  ForIndexNumeric TRY SingleLineStatement on ' '(NEWLINE)
optSeparatedList [SingleLineStatement] indent:12, get SeparatedList of [Statement] by ';' closer: NEWLINE
                    SingleLineStatement matched OK: NEWLINE  
>>>ADVANCE 215:13 [0] 'var'(IDENTIFIER)
                  SingleLineStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:215:1. SingleLineStatement: Get list: At least one [Statement] was expected
<<REW to 215:0 [-1] ' '(NEWLINE)
                  ForIndexNumeric TRY Body on ' '(NEWLINE)
                    Body matched OK: NEWLINE  
>>>ADVANCE 215:13 [0] 'var'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                    Body TRY Statement on 'var'(IDENTIFIER)

215 12(CODE) var session1 = aceEditors[n].session;
    'var'(IDENTIFIER) 'session1'(IDENTIFIER) '='(ASSIGN) 'aceEditors'(IDENTIFIER) '['(LITERAL) 'n'(IDENTIFIER) ']'(LITERAL) '.'(LITERAL) 'session'(IDENTIFIER) ';'(LITERAL)

                      Statement TRY VarStatement on 'var'(IDENTIFIER)
                        VarStatement matched OK: var var
>>>ADVANCE 215:17 [1] 'session1'(IDENTIFIER)
optSeparatedList [VarStatement] indent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                        VarStatement TRY VariableDecl on 'session1'(IDENTIFIER)
                          VariableDecl matched OK: IDENTIFIER session1
>>>ADVANCE 215:26 [2] '='(ASSIGN)
                          VariableDecl matched OK: = =
>>>ADVANCE 215:28 [3] 'aceEditors'(IDENTIFIER)
                          VariableDecl TRY Expression on 'aceEditors'(IDENTIFIER)
                            Expression TRY Operand on 'aceEditors'(IDENTIFIER)
                              Operand TRY VariableRef on 'aceEditors'(IDENTIFIER)
                                VariableRef matched OK: IDENTIFIER aceEditors
>>>ADVANCE 215:38 [4] '['(LITERAL)
                                VariableRef TRY IndexAccess on '['(LITERAL)
                                  IndexAccess matched OK: [ [
>>>ADVANCE 215:39 [5] 'n'(IDENTIFIER)
                                  IndexAccess TRY Expression on 'n'(IDENTIFIER)
                                    Expression TRY Operand on 'n'(IDENTIFIER)
                                      Operand TRY VariableRef on 'n'(IDENTIFIER)
                                        VariableRef matched OK: IDENTIFIER n
>>>ADVANCE 215:40 [6] ']'(LITERAL)
                                      Parsed OK!-> VariableRef
                                    Parsed OK!-> Operand
                                  Parsed OK!-> Expression
                                  IndexAccess matched OK: ] ]
>>>ADVANCE 215:41 [7] '.'(LITERAL)
                                Parsed OK!-> IndexAccess
                                VariableRef TRY PropertyAccess on '.'(LITERAL)
                                  PropertyAccess matched OK: . .
>>>ADVANCE 215:42 [8] 'session'(IDENTIFIER)
                                  PropertyAccess matched OK: IDENTIFIER session
>>>ADVANCE 215:49 [9] ';'(LITERAL)
                                Parsed OK!-> PropertyAccess
                              Parsed OK!-> VariableRef
                            Parsed OK!-> Operand
                            Expression TRY Oper on ';'(LITERAL)
                            Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:215:43. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 215:49 [9] ';'(LITERAL)
                          Parsed OK!-> Expression
                        Parsed OK!-> VariableDecl
                      Parsed OK!-> VarStatement
                    Parsed OK!-> Statement
                    Body matched OK: ; ;
>>>ADVANCE 216:0 [-1] ' '(NEWLINE)
                    Body matched OK: NEWLINE  
>>>ADVANCE 216:13 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                    Body TRY Statement on 'if'(IDENTIFIER)

216 12(CODE) if onOff is off //disconnect
    'if'(IDENTIFIER) 'onOff'(IDENTIFIER) 'is'(OPER) 'off'(IDENTIFIER) '//disconnect'(COMMENT)

                      Statement TRY IfStatement on 'if'(IDENTIFIER)
                        IfStatement matched OK: if if
>>>ADVANCE 216:16 [1] 'onOff'(IDENTIFIER)
                        IfStatement TRY Expression on 'onOff'(IDENTIFIER)
                          Expression TRY Operand on 'onOff'(IDENTIFIER)
                            Operand TRY VariableRef on 'onOff'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER onOff
>>>ADVANCE 216:22 [2] 'is'(OPER)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> Operand
                          Expression TRY Oper on 'is'(OPER)
                            Oper matched OK: OPER is
>>>ADVANCE 216:25 [3] 'off'(IDENTIFIER)
                          Parsed OK!-> Oper
                          Expression TRY Operand on 'off'(IDENTIFIER)
                            Operand TRY VariableRef on 'off'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER off
>>>ADVANCE 217:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> Operand
                          Expression matched OK: NEWLINE  
>>>ADVANCE 217:17 [0] 'session1'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 217
                        Parsed OK!-> Expression
                        IfStatement TRY Body on ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 217:17 [0] 'session1'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                          Body TRY Statement on 'session1'(IDENTIFIER)

217 16(CODE) session1.removeAllListeners('changeScrollTop');
    'session1'(IDENTIFIER) '.'(LITERAL) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) ''changeScrollTop''(STRING) ')'(LITERAL) ';'(LITERAL)

                            Statement TRY Adjective on 'session1'(IDENTIFIER)
                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:217:1. Adjective: found 'session1'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 217:17 [0] 'session1'(IDENTIFIER)
                            Statement TRY VariableRef on 'session1'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER session1
>>>ADVANCE 217:25 [1] '.'(LITERAL)
                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                PropertyAccess matched OK: . .
>>>ADVANCE 217:26 [2] 'removeAllListeners'(IDENTIFIER)
                                PropertyAccess matched OK: IDENTIFIER removeAllListeners
>>>ADVANCE 217:44 [3] '('(LITERAL)
                              Parsed OK!-> PropertyAccess
                              VariableRef TRY FunctionAccess on '('(LITERAL)
                                FunctionAccess matched OK: ( (
>>>ADVANCE 217:45 [4] ''changeScrollTop''(STRING)
optSeparatedList [FunctionAccess] indent:16, get SeparatedList of [Expression] by ',' closer: )
                                FunctionAccess TRY Expression on ''changeScrollTop''(STRING)
                                  Expression TRY Operand on ''changeScrollTop''(STRING)
                                    Operand TRY StringLiteral on ''changeScrollTop''(STRING)
                                      StringLiteral matched OK: STRING 'changeScrollTop'
>>>ADVANCE 217:62 [5] ')'(LITERAL)
                                    Parsed OK!-> StringLiteral
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: ) )
>>>ADVANCE 217:63 [6] ';'(LITERAL)
                              Parsed OK!-> FunctionAccess
                            Parsed OK!-> VariableRef
                            Statement TRY AssignmentStatement on ';'(LITERAL)
                            AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:217:63. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 217:63 [6] ';'(LITERAL)
                            Statement TRY FunctionCall on ';'(LITERAL)
                            Parsed OK!-> FunctionCall
                          Parsed OK!-> Statement
                          Body matched OK: ; ;
>>>ADVANCE 218:0 [-1] ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 218:17 [0] 'session1'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                          Body TRY Statement on 'session1'(IDENTIFIER)

218 16(CODE) session1.removeAllListeners('changeScrollLeft');
    'session1'(IDENTIFIER) '.'(LITERAL) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) ''changeScrollLeft''(STRING) ')'(LITERAL) ';'(LITERAL)

                            Statement TRY Adjective on 'session1'(IDENTIFIER)
                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:218:1. Adjective: found 'session1'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 218:17 [0] 'session1'(IDENTIFIER)
                            Statement TRY VariableRef on 'session1'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER session1
>>>ADVANCE 218:25 [1] '.'(LITERAL)
                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                PropertyAccess matched OK: . .
>>>ADVANCE 218:26 [2] 'removeAllListeners'(IDENTIFIER)
                                PropertyAccess matched OK: IDENTIFIER removeAllListeners
>>>ADVANCE 218:44 [3] '('(LITERAL)
                              Parsed OK!-> PropertyAccess
                              VariableRef TRY FunctionAccess on '('(LITERAL)
                                FunctionAccess matched OK: ( (
>>>ADVANCE 218:45 [4] ''changeScrollLeft''(STRING)
optSeparatedList [FunctionAccess] indent:16, get SeparatedList of [Expression] by ',' closer: )
                                FunctionAccess TRY Expression on ''changeScrollLeft''(STRING)
                                  Expression TRY Operand on ''changeScrollLeft''(STRING)
                                    Operand TRY StringLiteral on ''changeScrollLeft''(STRING)
                                      StringLiteral matched OK: STRING 'changeScrollLeft'
>>>ADVANCE 218:63 [5] ')'(LITERAL)
                                    Parsed OK!-> StringLiteral
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: ) )
>>>ADVANCE 218:64 [6] ';'(LITERAL)
                              Parsed OK!-> FunctionAccess
                            Parsed OK!-> VariableRef
                            Statement TRY AssignmentStatement on ';'(LITERAL)
                            AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:218:64. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 218:64 [6] ';'(LITERAL)
                            Statement TRY FunctionCall on ';'(LITERAL)
                            Parsed OK!-> FunctionCall
                          Parsed OK!-> Statement
                          Body matched OK: ; ;
>>>ADVANCE 220:0 [-1] ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 220:13 [0] 'else'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [Body] blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no closer-
                        Parsed OK!-> Body
                        IfStatement TRY ElseIfStatement on 'else'(IDENTIFIER)
                          ElseIfStatement matched OK: else else
>>>ADVANCE 222:0 [-1] ' '(NEWLINE)
                        ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:220:14. ElseIfStatement: found ' '(NEWLINE) but 'if' required
<<REW to 220:13 [0] 'else'(IDENTIFIER)
                        IfStatement TRY ElseStatement on 'else'(IDENTIFIER)
                          ElseStatement matched OK: else else
>>>ADVANCE 222:0 [-1] ' '(NEWLINE)
                          ElseStatement TRY Body on ' '(NEWLINE)
                            Body matched OK: NEWLINE  
>>>ADVANCE 222:17 [0] 'var'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                            Body TRY Statement on 'var'(IDENTIFIER)

222 16(CODE) var session2 = aceEditors[n is aceEditors.length-1 ? 0 else n+1].session;
    'var'(IDENTIFIER) 'session2'(IDENTIFIER) '='(ASSIGN) 'aceEditors'(IDENTIFIER) '['(LITERAL) 'n'(IDENTIFIER) 'is'(OPER) 'aceEditors'(IDENTIFIER) '.'(LITERAL) 'length'(IDENTIFIER) '-'(OPER) '1'(NUMBER) '?'(OPER) '0'(NUMBER) 'else'(IDENTIFIER) 'n'(IDENTIFIER) '+'(OPER) '1'(NUMBER) ']'(LITERAL) '.'(LITERAL) 'session'(IDENTIFIER) ';'(LITERAL)

                              Statement TRY VarStatement on 'var'(IDENTIFIER)
                                VarStatement matched OK: var var
>>>ADVANCE 222:21 [1] 'session2'(IDENTIFIER)
optSeparatedList [VarStatement] indent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                                VarStatement TRY VariableDecl on 'session2'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER session2
>>>ADVANCE 222:30 [2] '='(ASSIGN)
                                  VariableDecl matched OK: = =
>>>ADVANCE 222:32 [3] 'aceEditors'(IDENTIFIER)
                                  VariableDecl TRY Expression on 'aceEditors'(IDENTIFIER)
                                    Expression TRY Operand on 'aceEditors'(IDENTIFIER)
                                      Operand TRY VariableRef on 'aceEditors'(IDENTIFIER)
                                        VariableRef matched OK: IDENTIFIER aceEditors
>>>ADVANCE 222:42 [4] '['(LITERAL)
                                        VariableRef TRY IndexAccess on '['(LITERAL)
                                          IndexAccess matched OK: [ [
>>>ADVANCE 222:43 [5] 'n'(IDENTIFIER)
                                          IndexAccess TRY Expression on 'n'(IDENTIFIER)
                                            Expression TRY Operand on 'n'(IDENTIFIER)
                                              Operand TRY VariableRef on 'n'(IDENTIFIER)
                                                VariableRef matched OK: IDENTIFIER n
>>>ADVANCE 222:45 [6] 'is'(OPER)
                                              Parsed OK!-> VariableRef
                                            Parsed OK!-> Operand
                                            Expression TRY Oper on 'is'(OPER)
                                              Oper matched OK: OPER is
>>>ADVANCE 222:48 [7] 'aceEditors'(IDENTIFIER)
                                            Parsed OK!-> Oper
                                            Expression TRY Operand on 'aceEditors'(IDENTIFIER)
                                              Operand TRY VariableRef on 'aceEditors'(IDENTIFIER)
                                                VariableRef matched OK: IDENTIFIER aceEditors
>>>ADVANCE 222:58 [8] '.'(LITERAL)
                                                VariableRef TRY PropertyAccess on '.'(LITERAL)
                                                  PropertyAccess matched OK: . .
>>>ADVANCE 222:59 [9] 'length'(IDENTIFIER)
                                                  PropertyAccess matched OK: IDENTIFIER length
>>>ADVANCE 222:65 [10] '-'(OPER)
                                                Parsed OK!-> PropertyAccess
                                              Parsed OK!-> VariableRef
                                            Parsed OK!-> Operand
                                            Expression TRY Oper on '-'(OPER)
                                              Oper matched OK: OPER -
>>>ADVANCE 222:66 [11] '1'(NUMBER)
                                            Parsed OK!-> Oper
                                            Expression TRY Operand on '1'(NUMBER)
                                              Operand TRY NumberLiteral on '1'(NUMBER)
                                                NumberLiteral matched OK: NUMBER 1
>>>ADVANCE 222:68 [12] '?'(OPER)
                                              Parsed OK!-> NumberLiteral
                                            Parsed OK!-> Operand
                                            Expression TRY Oper on '?'(OPER)
                                              Oper matched OK: OPER ?
>>>ADVANCE 222:70 [13] '0'(NUMBER)
                                            Parsed OK!-> Oper
                                            Expression TRY Operand on '0'(NUMBER)
                                              Operand TRY NumberLiteral on '0'(NUMBER)
                                                NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 222:72 [14] 'else'(IDENTIFIER)
                                              Parsed OK!-> NumberLiteral
                                            Parsed OK!-> Operand
                                            Expression TRY Oper on 'else'(IDENTIFIER)
                                              Oper matched OK: else else
>>>ADVANCE 222:77 [15] 'n'(IDENTIFIER)
                                            Parsed OK!-> Oper
                                            Expression TRY Operand on 'n'(IDENTIFIER)
                                              Operand TRY VariableRef on 'n'(IDENTIFIER)
                                                VariableRef matched OK: IDENTIFIER n
>>>ADVANCE 222:78 [16] '+'(OPER)
                                              Parsed OK!-> VariableRef
                                            Parsed OK!-> Operand
                                            Expression TRY Oper on '+'(OPER)
                                              Oper matched OK: OPER +
>>>ADVANCE 222:79 [17] '1'(NUMBER)
                                            Parsed OK!-> Oper
                                            Expression TRY Operand on '1'(NUMBER)
                                              Operand TRY NumberLiteral on '1'(NUMBER)
                                                NumberLiteral matched OK: NUMBER 1
>>>ADVANCE 222:80 [18] ']'(LITERAL)
                                              Parsed OK!-> NumberLiteral
                                            Parsed OK!-> Operand
                                          Parsed OK!-> Expression
                                          IndexAccess matched OK: ] ]
>>>ADVANCE 222:81 [19] '.'(LITERAL)
                                        Parsed OK!-> IndexAccess
                                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                                          PropertyAccess matched OK: . .
>>>ADVANCE 222:82 [20] 'session'(IDENTIFIER)
                                          PropertyAccess matched OK: IDENTIFIER session
>>>ADVANCE 222:89 [21] ';'(LITERAL)
                                        Parsed OK!-> PropertyAccess
                                      Parsed OK!-> VariableRef
                                    Parsed OK!-> Operand
                                    Expression TRY Oper on ';'(LITERAL)
                                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:222:83. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 222:89 [21] ';'(LITERAL)
                                  Parsed OK!-> Expression
                                Parsed OK!-> VariableDecl
                              Parsed OK!-> VarStatement
                            Parsed OK!-> Statement
                            Body matched OK: ; ;
>>>ADVANCE 224:0 [-1] ' '(NEWLINE)
                            Body matched OK: NEWLINE  
>>>ADVANCE 224:17 [0] 'session1'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                            Body TRY Statement on 'session1'(IDENTIFIER)

224 16(CODE) session1.on 'changeScrollTop',
    'session1'(IDENTIFIER) '.'(LITERAL) 'on'(IDENTIFIER) ''changeScrollTop''(STRING) ','(LITERAL)

                              Statement TRY Adjective on 'session1'(IDENTIFIER)
                              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:224:1. Adjective: found 'session1'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 224:17 [0] 'session1'(IDENTIFIER)
                              Statement TRY VariableRef on 'session1'(IDENTIFIER)
                                VariableRef matched OK: IDENTIFIER session1
>>>ADVANCE 224:25 [1] '.'(LITERAL)
                                VariableRef TRY PropertyAccess on '.'(LITERAL)
                                  PropertyAccess matched OK: . .
>>>ADVANCE 224:26 [2] 'on'(IDENTIFIER)
                                  PropertyAccess matched OK: IDENTIFIER on
>>>ADVANCE 224:29 [3] ''changeScrollTop''(STRING)
                                Parsed OK!-> PropertyAccess
                              Parsed OK!-> VariableRef
                              Statement TRY AssignmentStatement on ''changeScrollTop''(STRING)
                              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:224:27. AssignmentStatement: found ''changeScrollTop''(STRING) but 'ASSIGN' required
<<REW to 224:29 [3] ''changeScrollTop''(STRING)
                              Statement TRY FunctionCall on ''changeScrollTop''(STRING)
optSeparatedList [FunctionAccess] indent:16, get SeparatedList of [Expression] by ',' closer: -no closer-
                                  FunctionAccess TRY Expression on ''changeScrollTop''(STRING)
                                    Expression TRY Operand on ''changeScrollTop''(STRING)
                                      Operand TRY StringLiteral on ''changeScrollTop''(STRING)
                                        StringLiteral matched OK: STRING 'changeScrollTop'
>>>ADVANCE 224:46 [4] ','(LITERAL)
                                      Parsed OK!-> StringLiteral
                                    Parsed OK!-> Operand
                                  Parsed OK!-> Expression
                                  FunctionAccess matched OK: , ,
>>>ADVANCE 225:0 [-1] ' '(NEWLINE)
                                  FunctionAccess matched OK: NEWLINE  
>>>ADVANCE 225:19 [0] 'function'(IDENTIFIER)
                                  FunctionAccess TRY Expression on 'function'(IDENTIFIER)
                                    Expression TRY Operand on 'function'(IDENTIFIER)
                                      Operand TRY FunctionDeclaration on 'function'(IDENTIFIER)
                                        FunctionDeclaration matched OK: function function
>>>ADVANCE 225:27 [1] '('(LITERAL)
                                        FunctionDeclaration matched OK: ( (
>>>ADVANCE 225:28 [2] 'scroll'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:18, get SeparatedList of [VariableDecl] by ',' closer: )
                                        FunctionDeclaration TRY VariableDecl on 'scroll'(IDENTIFIER)
                                          VariableDecl matched OK: IDENTIFIER scroll
>>>ADVANCE 225:34 [3] ')'(LITERAL)
                                        Parsed OK!-> VariableDecl
                                        FunctionDeclaration matched OK: ) )
>>>ADVANCE 226:0 [-1] ' '(NEWLINE)
                                        FunctionDeclaration TRY Body on ' '(NEWLINE)
                                          Body matched OK: NEWLINE  
>>>ADVANCE 226:21 [0] 'session2'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:18, blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:18
                                          Body TRY Statement on 'session2'(IDENTIFIER)

226 20(CODE) session2.setScrollTop(parseInt(scroll) or 0)
    'session2'(IDENTIFIER) '.'(LITERAL) 'setScrollTop'(IDENTIFIER) '('(LITERAL) 'parseInt'(IDENTIFIER) '('(LITERAL) 'scroll'(IDENTIFIER) ')'(LITERAL) 'or'(OPER) '0'(NUMBER) ')'(LITERAL)

                                            Statement TRY Adjective on 'session2'(IDENTIFIER)
                                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:226:1. Adjective: found 'session2'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 226:21 [0] 'session2'(IDENTIFIER)
                                            Statement TRY VariableRef on 'session2'(IDENTIFIER)
                                              VariableRef matched OK: IDENTIFIER session2
>>>ADVANCE 226:29 [1] '.'(LITERAL)
                                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                                PropertyAccess matched OK: . .
>>>ADVANCE 226:30 [2] 'setScrollTop'(IDENTIFIER)
                                                PropertyAccess matched OK: IDENTIFIER setScrollTop
>>>ADVANCE 226:42 [3] '('(LITERAL)
                                              Parsed OK!-> PropertyAccess
                                              VariableRef TRY FunctionAccess on '('(LITERAL)
                                                FunctionAccess matched OK: ( (
>>>ADVANCE 226:43 [4] 'parseInt'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                                FunctionAccess TRY Expression on 'parseInt'(IDENTIFIER)
                                                  Expression TRY Operand on 'parseInt'(IDENTIFIER)
                                                    Operand TRY VariableRef on 'parseInt'(IDENTIFIER)
                                                      VariableRef matched OK: IDENTIFIER parseInt
>>>ADVANCE 226:51 [5] '('(LITERAL)
                                                      VariableRef TRY FunctionAccess on '('(LITERAL)
                                                        FunctionAccess matched OK: ( (
>>>ADVANCE 226:52 [6] 'scroll'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                                        FunctionAccess TRY Expression on 'scroll'(IDENTIFIER)
                                                          Expression TRY Operand on 'scroll'(IDENTIFIER)
                                                            Operand TRY VariableRef on 'scroll'(IDENTIFIER)
                                                              VariableRef matched OK: IDENTIFIER scroll
>>>ADVANCE 226:58 [7] ')'(LITERAL)
                                                            Parsed OK!-> VariableRef
                                                          Parsed OK!-> Operand
                                                        Parsed OK!-> Expression
                                                        FunctionAccess matched OK: ) )
>>>ADVANCE 226:60 [8] 'or'(OPER)
                                                      Parsed OK!-> FunctionAccess
                                                    Parsed OK!-> VariableRef
                                                  Parsed OK!-> Operand
                                                  Expression TRY Oper on 'or'(OPER)
                                                    Oper matched OK: OPER or
>>>ADVANCE 226:63 [9] '0'(NUMBER)
                                                  Parsed OK!-> Oper
                                                  Expression TRY Operand on '0'(NUMBER)
                                                    Operand TRY NumberLiteral on '0'(NUMBER)
                                                      NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 226:64 [10] ')'(LITERAL)
                                                    Parsed OK!-> NumberLiteral
                                                  Parsed OK!-> Operand
                                                Parsed OK!-> Expression
                                                FunctionAccess matched OK: ) )
>>>ADVANCE 235:0 [-1] ' '(NEWLINE)
                                              Parsed OK!-> FunctionAccess
                                            Parsed OK!-> VariableRef
                                            Statement TRY AssignmentStatement on ' '(NEWLINE)
                                            AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:226:65. AssignmentStatement: found ' '(NEWLINE) but 'ASSIGN' required
<<REW to 235:0 [-1] ' '(NEWLINE)
                                            Statement TRY FunctionCall on ' '(NEWLINE)
                                            Parsed OK!-> FunctionCall
                                          Parsed OK!-> Statement
                                          Body matched OK: NEWLINE  
>>>ADVANCE 235:17 [0] 'session2'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:20 parentIndent:18
END freeFormMode [Body] blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no closer-
                                        Parsed OK!-> Body
                                      Parsed OK!-> FunctionDeclaration
                                    Parsed OK!-> Operand
                                    Expression TRY Oper on 'session2'(IDENTIFIER)
                                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:235:1. Oper: found 'session2'(IDENTIFIER) but 'OPER' required
<<REW to 235:17 [0] 'session2'(IDENTIFIER)
                                  Parsed OK!-> Expression
                              Parsed OK!-> FunctionCall
                            Parsed OK!-> Statement
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                            Body TRY Statement on 'session2'(IDENTIFIER)

235 16(CODE) session2.on 'changeScrollTop',
    'session2'(IDENTIFIER) '.'(LITERAL) 'on'(IDENTIFIER) ''changeScrollTop''(STRING) ','(LITERAL)

                              Statement TRY Adjective on 'session2'(IDENTIFIER)
                              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:235:1. Adjective: found 'session2'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 235:17 [0] 'session2'(IDENTIFIER)
                              Statement TRY VariableRef on 'session2'(IDENTIFIER)
                                VariableRef matched OK: IDENTIFIER session2
>>>ADVANCE 235:25 [1] '.'(LITERAL)
                                VariableRef TRY PropertyAccess on '.'(LITERAL)
                                  PropertyAccess matched OK: . .
>>>ADVANCE 235:26 [2] 'on'(IDENTIFIER)
                                  PropertyAccess matched OK: IDENTIFIER on
>>>ADVANCE 235:29 [3] ''changeScrollTop''(STRING)
                                Parsed OK!-> PropertyAccess
                              Parsed OK!-> VariableRef
                              Statement TRY AssignmentStatement on ''changeScrollTop''(STRING)
                              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:235:27. AssignmentStatement: found ''changeScrollTop''(STRING) but 'ASSIGN' required
<<REW to 235:29 [3] ''changeScrollTop''(STRING)
                              Statement TRY FunctionCall on ''changeScrollTop''(STRING)
optSeparatedList [FunctionAccess] indent:16, get SeparatedList of [Expression] by ',' closer: -no closer-
                                  FunctionAccess TRY Expression on ''changeScrollTop''(STRING)
                                    Expression TRY Operand on ''changeScrollTop''(STRING)
                                      Operand TRY StringLiteral on ''changeScrollTop''(STRING)
                                        StringLiteral matched OK: STRING 'changeScrollTop'
>>>ADVANCE 235:46 [4] ','(LITERAL)
                                      Parsed OK!-> StringLiteral
                                    Parsed OK!-> Operand
                                  Parsed OK!-> Expression
                                  FunctionAccess matched OK: , ,
>>>ADVANCE 236:0 [-1] ' '(NEWLINE)
                                  FunctionAccess matched OK: NEWLINE  
>>>ADVANCE 236:19 [0] 'function'(IDENTIFIER)
                                  FunctionAccess TRY Expression on 'function'(IDENTIFIER)
                                    Expression TRY Operand on 'function'(IDENTIFIER)
                                      Operand TRY FunctionDeclaration on 'function'(IDENTIFIER)
                                        FunctionDeclaration matched OK: function function
>>>ADVANCE 236:27 [1] '('(LITERAL)
                                        FunctionDeclaration matched OK: ( (
>>>ADVANCE 236:28 [2] 'scroll'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:18, get SeparatedList of [VariableDecl] by ',' closer: )
                                        FunctionDeclaration TRY VariableDecl on 'scroll'(IDENTIFIER)
                                          VariableDecl matched OK: IDENTIFIER scroll
>>>ADVANCE 236:34 [3] ')'(LITERAL)
                                        Parsed OK!-> VariableDecl
                                        FunctionDeclaration matched OK: ) )
>>>ADVANCE 237:0 [-1] ' '(NEWLINE)
                                        FunctionDeclaration TRY Body on ' '(NEWLINE)
                                          Body matched OK: NEWLINE  
>>>ADVANCE 237:21 [0] 'session1'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:18, blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:18
                                          Body TRY Statement on 'session1'(IDENTIFIER)

237 20(CODE) session1.setScrollTop(parseInt(scroll) or 0)
    'session1'(IDENTIFIER) '.'(LITERAL) 'setScrollTop'(IDENTIFIER) '('(LITERAL) 'parseInt'(IDENTIFIER) '('(LITERAL) 'scroll'(IDENTIFIER) ')'(LITERAL) 'or'(OPER) '0'(NUMBER) ')'(LITERAL)

                                            Statement TRY Adjective on 'session1'(IDENTIFIER)
                                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:237:1. Adjective: found 'session1'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 237:21 [0] 'session1'(IDENTIFIER)
                                            Statement TRY VariableRef on 'session1'(IDENTIFIER)
                                              VariableRef matched OK: IDENTIFIER session1
>>>ADVANCE 237:29 [1] '.'(LITERAL)
                                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                                PropertyAccess matched OK: . .
>>>ADVANCE 237:30 [2] 'setScrollTop'(IDENTIFIER)
                                                PropertyAccess matched OK: IDENTIFIER setScrollTop
>>>ADVANCE 237:42 [3] '('(LITERAL)
                                              Parsed OK!-> PropertyAccess
                                              VariableRef TRY FunctionAccess on '('(LITERAL)
                                                FunctionAccess matched OK: ( (
>>>ADVANCE 237:43 [4] 'parseInt'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                                FunctionAccess TRY Expression on 'parseInt'(IDENTIFIER)
                                                  Expression TRY Operand on 'parseInt'(IDENTIFIER)
                                                    Operand TRY VariableRef on 'parseInt'(IDENTIFIER)
                                                      VariableRef matched OK: IDENTIFIER parseInt
>>>ADVANCE 237:51 [5] '('(LITERAL)
                                                      VariableRef TRY FunctionAccess on '('(LITERAL)
                                                        FunctionAccess matched OK: ( (
>>>ADVANCE 237:52 [6] 'scroll'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                                        FunctionAccess TRY Expression on 'scroll'(IDENTIFIER)
                                                          Expression TRY Operand on 'scroll'(IDENTIFIER)
                                                            Operand TRY VariableRef on 'scroll'(IDENTIFIER)
                                                              VariableRef matched OK: IDENTIFIER scroll
>>>ADVANCE 237:58 [7] ')'(LITERAL)
                                                            Parsed OK!-> VariableRef
                                                          Parsed OK!-> Operand
                                                        Parsed OK!-> Expression
                                                        FunctionAccess matched OK: ) )
>>>ADVANCE 237:60 [8] 'or'(OPER)
                                                      Parsed OK!-> FunctionAccess
                                                    Parsed OK!-> VariableRef
                                                  Parsed OK!-> Operand
                                                  Expression TRY Oper on 'or'(OPER)
                                                    Oper matched OK: OPER or
>>>ADVANCE 237:63 [9] '0'(NUMBER)
                                                  Parsed OK!-> Oper
                                                  Expression TRY Operand on '0'(NUMBER)
                                                    Operand TRY NumberLiteral on '0'(NUMBER)
                                                      NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 237:64 [10] ')'(LITERAL)
                                                    Parsed OK!-> NumberLiteral
                                                  Parsed OK!-> Operand
                                                Parsed OK!-> Expression
                                                FunctionAccess matched OK: ) )
>>>ADVANCE 237:0 [-1] ' '(EOF)
                                              Parsed OK!-> FunctionAccess
                                            Parsed OK!-> VariableRef
                                            Statement TRY AssignmentStatement on ' '(EOF)
                                            AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:237:65. AssignmentStatement: found ' '(EOF) but 'ASSIGN' required
<<REW to 237:0 [-1] ' '(EOF)
                                            Statement TRY FunctionCall on ' '(EOF)
                                            Parsed OK!-> FunctionCall
                                          Parsed OK!-> Statement
freeForm Mode .lexer.indent:0 block indent:20 parentIndent:18
END freeFormMode [Body] blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no closer-
                                        Parsed OK!-> Body
                                      Parsed OK!-> FunctionDeclaration
                                    Parsed OK!-> Operand
                                    Expression TRY Oper on ' '(EOF)
                                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/online.md:237:65. Oper: found ' '(EOF) but 'OPER' required
<<REW to 237:0 [-1] ' '(EOF)
                                  Parsed OK!-> Expression
                              Parsed OK!-> FunctionCall
                            Parsed OK!-> Statement
freeForm Mode .lexer.indent:0 block indent:16 parentIndent:12
END freeFormMode [Body] blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no closer-
                          Parsed OK!-> Body
                        Parsed OK!-> ElseStatement
                      Parsed OK!-> IfStatement
                    Parsed OK!-> Statement
freeForm Mode .lexer.indent:0 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                  Parsed OK!-> Body
                Parsed OK!-> ForIndexNumeric
              Parsed OK!-> ForStatement
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:0 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> FunctionDeclaration
      Parsed OK!-> Statement
      Module matched OK: EOF  
>>>ADVANCE 237:0 [-1] ' '(EOF)
END freeFormMode [Module] blockIndent:4, get SeparatedList of [Statement] by ';' closer: EOF

     'online.md' imports './jQuery'
[object Object]
addToScope: 'module' to '/home/ltato/LiteScript_online_playground/playground/js/jQuery.interface.md Scope'
addMember: 'exports' to 'module'
addToScope: 'exports' to '/home/ltato/LiteScript_online_playground/playground/js/jQuery.interface.md Scope'
addMember: 'filename' to 'module'
     compile: 'jQuery.interface.md'
1 (BLANK)
2 4(CODE) public var $:jQuery
3 (BLANK)
4 4(CODE) public class jQuery
5 (BLANK)
6 8(CODE) properties
7 12(CODE) jquery:string #version number
8 12(CODE) selector:string
9 12(CODE) length:number
10 (BLANK)
11 8(CODE) constructor ( selector, context )
12 8(CODE) method init ( selector, context, rootjQuery )
13 (BLANK)
14 8(CODE) method acceptData( elem )
15 8(CODE) method access( elems, fn, key, value, chainable, emptyGet, raw )
16 (BLANK)
17 8(CODE) method add( selector, context )
18 8(CODE) method addBack( selector )
19 8(CODE) method addClass( value )
20 8(CODE) method after()
21 (BLANK)
22 8(CODE) method ajax (url,options)
23 8(CODE) method ajaxComplete( fn )
24 8(CODE) method ajaxError( fn )
25 8(CODE) method ajaxPrefilter( dataTypeExpression, func )
26 8(CODE) method ajaxSend( fn )
27 8(CODE) method ajaxSetup( target, settings )
28 8(CODE) method ajaxStart( fn )
29 8(CODE) method ajaxStop( fn )
30 8(CODE) method ajaxSuccess( fn )
31 8(CODE) method ajaxTransport( dataTypeExpression, func )
32 8(CODE) method andSelf( selector )
33 8(CODE) method animate( prop, speed, easing, callback )
34 8(CODE) method Animation( elem, properties, options )
35 8(CODE) method append()
36 8(CODE) method appendTo( selector )
37 8(CODE) method attr( elem, name, value )
38 8(CODE) method before()
39 8(CODE) method bind( types, data, fn )
40 8(CODE) method blur( data, fn )
41 8(CODE) method buildFragment( elems, context, scripts, selection )
42 8(CODE) method Callbacks( options )
43 8(CODE) method camelCase( string )
44 8(CODE) method change( data, fn )
45 8(CODE) method children( until, selector )
**** START MULTILINE  /*
47 8(CODE) method clearQueue( type )
48 8(CODE) method click( data, fn )
49 8(CODE) method clone( elem, dataAndEvents, deepDataAndEvents )
50 8(CODE) method closest( selectors, context )
51 8(CODE) method contains( context, elem )
52 8(CODE) method contents( until, selector )
53 8(CODE) method contextmenu( data, fn )
54 8(CODE) method css( elem, name, extra, styles )
55 8(CODE) method data( elem, name, data )
56 8(CODE) method dblclick( data, fn )
57 8(CODE) method Deferred( func )
58 8(CODE) method delay( time, type )
59 8(CODE) method delegate( selector, types, data, fn )
60 8(CODE) method dequeue( type )
61 8(CODE) method detach( selector )
62 8(CODE) method dir( elem, dir, until )
63 8(CODE) method domManip( args, table, callback )
64 8(CODE) method each( obj, callback, args )
65 8(CODE) method empty()
66 8(CODE) method end()
67 8(CODE) method eq( i )
68 8(CODE) method error( data, fn )
69 8(CODE) method extend()
70 8(CODE) method fadeIn( speed, easing, callback )
71 8(CODE) method fadeOut( speed, easing, callback )
72 8(CODE) method fadeTo( speed, to, easing, callback )
73 8(CODE) method fadeToggle( speed, easing, callback )
74 8(CODE) method filter( expr, elems, notParam )
75 8(CODE) method find( selector, context, results, seed )
76 8(CODE) method finish( type )
77 8(CODE) method first()
78 8(CODE) method focus( data, fn )
79 8(CODE) method focusin( data, fn )
80 8(CODE) method focusout( data, fn )
81 8(CODE) method fx( elem, options, prop, end, easing, unit )
82 8(CODE) method get( num )
83 8(CODE) method getJSON( url, data, callback )
84 8(CODE) method getScript( url, callback )
85 8(CODE) method globalEval( data )
86 8(CODE) method grep( elems, callback, inv )
87 8(CODE) method has( target )
88 8(CODE) method hasClass( selector )
89 8(CODE) method hasData( elem )
90 8(CODE) method height( margin, value )
91 8(CODE) method hide( speed, easing, callback )
92 8(CODE) method holdReady( hold )
93 8(CODE) method hover( fnOver, fnOut )
94 8(CODE) method html( value )
95 8(CODE) method inArray( elem, arr, i )
96 8(CODE) method index( elem )
97 8(CODE) method innerHeight( margin, value )
98 8(CODE) method innerWidth( margin, value )
99 8(CODE) method insertAfter( selector )
100 8(CODE) method insertBefore( selector )
101 8(CODE) method is( selector )
102 8(CODE) method isArray()
103 8(CODE) method isEmptyObject( obj )
104 8(CODE) method isFunction( obj )
105 8(CODE) method isNumeric( obj )
106 8(CODE) method isPlainObject( obj )
107 8(CODE) method isWindow( obj )
108 8(CODE) method isXMLDoc( elem )
109 8(CODE) method keydown( data, fn )
110 8(CODE) method keypress( data, fn )
111 8(CODE) method keyup( data, fn )
112 8(CODE) method last()
113 8(CODE) method load( url, params, callback )
114 8(CODE) method makeArray( arr, results )
115 8(CODE) method map( elems, callback, arg )
116 8(CODE) method merge( first, second )
117 8(CODE) method mousedown( data, fn )
118 8(CODE) method mouseenter( data, fn )
119 8(CODE) method mouseleave( data, fn )
120 8(CODE) method mousemove( data, fn )
121 8(CODE) method mouseout( data, fn )
122 8(CODE) method mouseover( data, fn )
123 8(CODE) method mouseup( data, fn )
124 8(CODE) method next( until, selector )
125 8(CODE) method nextAll( until, selector )
126 8(CODE) method nextUntil( until, selector )
127 8(CODE) method noConflict( deep )
128 8(CODE) method nodeName( elem, name )
129 8(CODE) method noop()
130 8(CODE) method not( selector )
131 8(CODE) method now()
132 8(CODE) method off( types, selector, fn )
133 8(CODE) method offset( options )
134 8(CODE) method offsetParent()
**** START MULTILINE  /*
136 8(CODE) method one( types, selector, data, fn )
137 8(CODE) method outerHeight( margin, value )
138 8(CODE) method outerWidth( margin, value )
139 8(CODE) method param( a, traditional )
140 8(CODE) method parent( until, selector )
141 8(CODE) method parents( until, selector )
142 8(CODE) method parentsUntil( until, selector )
143 8(CODE) method parseHTML( data, context, keepScripts )
144 8(CODE) method parseJSON( data )
145 8(CODE) method parseXML( data )
146 8(CODE) method position()
147 8(CODE) method post( url, data, callback, type )
148 8(CODE) method prepend()
149 8(CODE) method prependTo( selector )
150 8(CODE) method prev( until, selector )
151 8(CODE) method prevAll( until, selector )
152 8(CODE) method prevUntil( until, selector )
153 8(CODE) method promise( type, obj )
154 8(CODE) method prop( elem, name, value )
155 8(CODE) method proxy( fn, context )
156 8(CODE) method push()
157 8(CODE) method pushStack( elems )
158 8(CODE) method queue( elem, type, data )
159 8(CODE) method ready( fn )
160 8(CODE) method remove( selector, keepData )
161 8(CODE) method removeAttr( elem, value )
162 8(CODE) method removeClass( value )
163 8(CODE) method removeData( elem, name )
164 8(CODE) method removeEvent( elem, type, handle )
165 8(CODE) method removeProp( name )
166 8(CODE) method replaceAll( selector )
167 8(CODE) method replaceWith( value )
168 8(CODE) method resize( data, fn )
169 8(CODE) method scroll( data, fn )
170 8(CODE) method scrollLeft( val )
171 8(CODE) method scrollTop( val )
172 8(CODE) method select( data, fn )
173 8(CODE) method serialize()
174 8(CODE) method serializeArray()
175 8(CODE) method show( speed, easing, callback )
176 8(CODE) method sibling( n, elem )
177 8(CODE) method siblings( until, selector )
178 8(CODE) method size()
179 8(CODE) method slice()
180 8(CODE) method slideDown( speed, easing, callback )
181 8(CODE) method slideToggle( speed, easing, callback )
182 8(CODE) method slideUp( speed, easing, callback )
183 8(CODE) method sort()
184 8(CODE) method speed( speed, easing, fn )
185 8(CODE) method splice()
186 8(CODE) method stop( type, clearQueue, gotoEnd )
187 8(CODE) method style( elem, name, value, extra )
188 8(CODE) method submit( data, fn )
189 8(CODE) method swap( elem, options, callback, args )
190 8(CODE) method text( elem )
191 8(CODE) method toArray()
192 8(CODE) method toggle( speed, easing, callback )
193 8(CODE) method toggleClass( value, stateVal )
194 8(CODE) method trigger( type, data )
195 8(CODE) method triggerHandler( type, data )
196 8(CODE) method trim( text )
197 8(CODE) method Tween( elem, options, prop, end, easing )
198 8(CODE) method type( obj )
199 8(CODE) method unbind( types, fn )
200 8(CODE) method undelegate( selector, types, fn )
201 8(CODE) method unique( results )
202 8(CODE) method unload( data, fn )
203 8(CODE) method unwrap()
204 8(CODE) method val( value )
**** START MULTILINE  /*
206 8(CODE) method width( margin, value )
207 8(CODE) method wrap( html )
208 8(CODE) method wrapAll( html )
209 8(CODE) method wrapInner( html )
210 (BLANK)
211 4(CODE) append to namespace jQuery
212 8(CODE) properties
213 12(CODE) fn:jQuery
214 8(CODE) class Event
215 12(CODE) constructor new Event ( src, props )
216 12(CODE) method isDefaultPrevented()
217 12(CODE) method isPropagationStopped()
218 12(CODE) method isImmediatePropagationStopped()
219 12(CODE) method preventDefault()
220 12(CODE) method stopPropagation()
221 12(CODE) method stopImmediatePropagation()
222 (BLANK)
223 (BLANK)
224 (BLANK)
225 (BLANK)
---- TOKENIZE
1 (BLANK)
2 4(CODE) public var $:jQuery
3 (BLANK)
4 4(CODE) public class jQuery
5 (BLANK)
6 8(CODE) properties
7 12(CODE) jquery:string #version number
8 12(CODE) selector:string
9 12(CODE) length:number
10 (BLANK)
11 8(CODE) constructor ( selector, context )
12 8(CODE) method init ( selector, context, rootjQuery )
13 (BLANK)
14 8(CODE) method acceptData( elem )
15 8(CODE) method access( elems, fn, key, value, chainable, emptyGet, raw )
16 (BLANK)
17 8(CODE) method add( selector, context )
18 8(CODE) method addBack( selector )
19 8(CODE) method addClass( value )
20 8(CODE) method after()
21 (BLANK)
22 8(CODE) method ajax (url,options)
23 8(CODE) method ajaxComplete( fn )
24 8(CODE) method ajaxError( fn )
25 8(CODE) method ajaxPrefilter( dataTypeExpression, func )
26 8(CODE) method ajaxSend( fn )
27 8(CODE) method ajaxSetup( target, settings )
28 8(CODE) method ajaxStart( fn )
29 8(CODE) method ajaxStop( fn )
30 8(CODE) method ajaxSuccess( fn )
31 8(CODE) method ajaxTransport( dataTypeExpression, func )
32 8(CODE) method andSelf( selector )
33 8(CODE) method animate( prop, speed, easing, callback )
34 8(CODE) method Animation( elem, properties, options )
35 8(CODE) method append()
36 8(CODE) method appendTo( selector )
37 8(CODE) method attr( elem, name, value )
38 8(CODE) method before()
39 8(CODE) method bind( types, data, fn )
40 8(CODE) method blur( data, fn )
41 8(CODE) method buildFragment( elems, context, scripts, selection )
42 8(CODE) method Callbacks( options )
43 8(CODE) method camelCase( string )
44 8(CODE) method change( data, fn )
45 8(CODE) method children( until, selector )
46 8(CODE) method cleanData( elems,  acceptData )//internal 
47 8(CODE) method clearQueue( type )
48 8(CODE) method click( data, fn )
49 8(CODE) method clone( elem, dataAndEvents, deepDataAndEvents )
50 8(CODE) method closest( selectors, context )
51 8(CODE) method contains( context, elem )
52 8(CODE) method contents( until, selector )
53 8(CODE) method contextmenu( data, fn )
54 8(CODE) method css( elem, name, extra, styles )
55 8(CODE) method data( elem, name, data )
56 8(CODE) method dblclick( data, fn )
57 8(CODE) method Deferred( func )
58 8(CODE) method delay( time, type )
59 8(CODE) method delegate( selector, types, data, fn )
60 8(CODE) method dequeue( type )
61 8(CODE) method detach( selector )
62 8(CODE) method dir( elem, dir, until )
63 8(CODE) method domManip( args, table, callback )
64 8(CODE) method each( obj, callback, args )
65 8(CODE) method empty()
66 8(CODE) method end()
67 8(CODE) method eq( i )
68 8(CODE) method error( data, fn )
69 8(CODE) method extend()
70 8(CODE) method fadeIn( speed, easing, callback )
71 8(CODE) method fadeOut( speed, easing, callback )
72 8(CODE) method fadeTo( speed, to, easing, callback )
73 8(CODE) method fadeToggle( speed, easing, callback )
74 8(CODE) method filter( expr, elems, notParam )
75 8(CODE) method find( selector, context, results, seed )
76 8(CODE) method finish( type )
77 8(CODE) method first()
78 8(CODE) method focus( data, fn )
79 8(CODE) method focusin( data, fn )
80 8(CODE) method focusout( data, fn )
81 8(CODE) method fx( elem, options, prop, end, easing, unit )
82 8(CODE) method get( num )
83 8(CODE) method getJSON( url, data, callback )
84 8(CODE) method getScript( url, callback )
85 8(CODE) method globalEval( data )
86 8(CODE) method grep( elems, callback, inv )
87 8(CODE) method has( target )
88 8(CODE) method hasClass( selector )
89 8(CODE) method hasData( elem )
90 8(CODE) method height( margin, value )
91 8(CODE) method hide( speed, easing, callback )
92 8(CODE) method holdReady( hold )
93 8(CODE) method hover( fnOver, fnOut )
94 8(CODE) method html( value )
95 8(CODE) method inArray( elem, arr, i )
96 8(CODE) method index( elem )
97 8(CODE) method innerHeight( margin, value )
98 8(CODE) method innerWidth( margin, value )
99 8(CODE) method insertAfter( selector )
100 8(CODE) method insertBefore( selector )
101 8(CODE) method is( selector )
102 8(CODE) method isArray()
103 8(CODE) method isEmptyObject( obj )
104 8(CODE) method isFunction( obj )
105 8(CODE) method isNumeric( obj )
106 8(CODE) method isPlainObject( obj )
107 8(CODE) method isWindow( obj )
108 8(CODE) method isXMLDoc( elem )
109 8(CODE) method keydown( data, fn )
110 8(CODE) method keypress( data, fn )
111 8(CODE) method keyup( data, fn )
112 8(CODE) method last()
113 8(CODE) method load( url, params, callback )
114 8(CODE) method makeArray( arr, results )
115 8(CODE) method map( elems, callback, arg )
116 8(CODE) method merge( first, second )
117 8(CODE) method mousedown( data, fn )
118 8(CODE) method mouseenter( data, fn )
119 8(CODE) method mouseleave( data, fn )
120 8(CODE) method mousemove( data, fn )
121 8(CODE) method mouseout( data, fn )
122 8(CODE) method mouseover( data, fn )
123 8(CODE) method mouseup( data, fn )
124 8(CODE) method next( until, selector )
125 8(CODE) method nextAll( until, selector )
126 8(CODE) method nextUntil( until, selector )
127 8(CODE) method noConflict( deep )
128 8(CODE) method nodeName( elem, name )
129 8(CODE) method noop()
130 8(CODE) method not( selector )
131 8(CODE) method now()
132 8(CODE) method off( types, selector, fn )
133 8(CODE) method offset( options )
134 8(CODE) method offsetParent()
135 8(CODE) method on( types, selector, data, fn,  one )//INTERNAL
136 8(CODE) method one( types, selector, data, fn )
137 8(CODE) method outerHeight( margin, value )
138 8(CODE) method outerWidth( margin, value )
139 8(CODE) method param( a, traditional )
140 8(CODE) method parent( until, selector )
141 8(CODE) method parents( until, selector )
142 8(CODE) method parentsUntil( until, selector )
143 8(CODE) method parseHTML( data, context, keepScripts )
144 8(CODE) method parseJSON( data )
145 8(CODE) method parseXML( data )
146 8(CODE) method position()
147 8(CODE) method post( url, data, callback, type )
148 8(CODE) method prepend()
149 8(CODE) method prependTo( selector )
150 8(CODE) method prev( until, selector )
151 8(CODE) method prevAll( until, selector )
152 8(CODE) method prevUntil( until, selector )
153 8(CODE) method promise( type, obj )
154 8(CODE) method prop( elem, name, value )
155 8(CODE) method proxy( fn, context )
156 8(CODE) method push()
157 8(CODE) method pushStack( elems )
158 8(CODE) method queue( elem, type, data )
159 8(CODE) method ready( fn )
160 8(CODE) method remove( selector, keepData )
161 8(CODE) method removeAttr( elem, value )
162 8(CODE) method removeClass( value )
163 8(CODE) method removeData( elem, name )
164 8(CODE) method removeEvent( elem, type, handle )
165 8(CODE) method removeProp( name )
166 8(CODE) method replaceAll( selector )
167 8(CODE) method replaceWith( value )
168 8(CODE) method resize( data, fn )
169 8(CODE) method scroll( data, fn )
170 8(CODE) method scrollLeft( val )
171 8(CODE) method scrollTop( val )
172 8(CODE) method select( data, fn )
173 8(CODE) method serialize()
174 8(CODE) method serializeArray()
175 8(CODE) method show( speed, easing, callback )
176 8(CODE) method sibling( n, elem )
177 8(CODE) method siblings( until, selector )
178 8(CODE) method size()
179 8(CODE) method slice()
180 8(CODE) method slideDown( speed, easing, callback )
181 8(CODE) method slideToggle( speed, easing, callback )
182 8(CODE) method slideUp( speed, easing, callback )
183 8(CODE) method sort()
184 8(CODE) method speed( speed, easing, fn )
185 8(CODE) method splice()
186 8(CODE) method stop( type, clearQueue, gotoEnd )
187 8(CODE) method style( elem, name, value, extra )
188 8(CODE) method submit( data, fn )
189 8(CODE) method swap( elem, options, callback, args )
190 8(CODE) method text( elem )
191 8(CODE) method toArray()
192 8(CODE) method toggle( speed, easing, callback )
193 8(CODE) method toggleClass( value, stateVal )
194 8(CODE) method trigger( type, data )
195 8(CODE) method triggerHandler( type, data )
196 8(CODE) method trim( text )
197 8(CODE) method Tween( elem, options, prop, end, easing )
198 8(CODE) method type( obj )
199 8(CODE) method unbind( types, fn )
200 8(CODE) method undelegate( selector, types, fn )
201 8(CODE) method unique( results )
202 8(CODE) method unload( data, fn )
203 8(CODE) method unwrap()
204 8(CODE) method val( value )
205 8(CODE) method when( subordinate  )//, ..., subordinateN 
206 8(CODE) method width( margin, value )
207 8(CODE) method wrap( html )
208 8(CODE) method wrapAll( html )
209 8(CODE) method wrapInner( html )
210 (BLANK)
211 4(CODE) append to namespace jQuery
212 8(CODE) properties
213 12(CODE) fn:jQuery
214 8(CODE) class Event
215 12(CODE) constructor new Event ( src, props )
216 12(CODE) method isDefaultPrevented()
217 12(CODE) method isPropagationStopped()
218 12(CODE) method isImmediatePropagationStopped()
219 12(CODE) method preventDefault()
220 12(CODE) method stopPropagation()
221 12(CODE) method stopImmediatePropagation()
222 (BLANK)
223 (BLANK)
224 (BLANK)
225 (BLANK)
>>>ADVANCE 2:0 [-1] ' '(NEWLINE)
      Module matched OK: NEWLINE  
>>>ADVANCE 2:5 [0] 'public'(IDENTIFIER)
optFreeFormList [Module] parentname:Project Root parentIndent:undefined, blockIndent:4, get SeparatedList of [Statement] by ';' closer: EOF
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

2 4(CODE) public var $:jQuery
    'public'(IDENTIFIER) 'var'(IDENTIFIER) '$'(IDENTIFIER) ':'(OPER) 'jQuery'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 2:12 [1] 'var'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'var'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/jQuery.interface.md:2:6. Adjective: found 'var'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 2:12 [1] 'var'(IDENTIFIER)
        Statement TRY VarStatement on 'var'(IDENTIFIER)
          VarStatement matched OK: var var
>>>ADVANCE 2:16 [2] '$'(IDENTIFIER)
optSeparatedList [VarStatement] indent:4, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
          VarStatement TRY VariableDecl on '$'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER $
>>>ADVANCE 2:17 [3] ':'(OPER)
            VariableDecl matched OK: : :
>>>ADVANCE 2:18 [4] 'jQuery'(IDENTIFIER)
            VariableDecl TRY VariableRef on 'jQuery'(IDENTIFIER)
              VariableRef matched OK: IDENTIFIER jQuery
>>>ADVANCE 4:0 [-1] ' '(NEWLINE)
            Parsed OK!-> VariableRef
          Parsed OK!-> VariableDecl
          VarStatement matched OK: NEWLINE  
>>>ADVANCE 4:5 [0] 'public'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 4
        Parsed OK!-> VarStatement
      Parsed OK!-> Statement
      Module matched OK: NEWLINE  
>>>ADVANCE 4:5 [0] 'public'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

4 4(CODE) public class jQuery
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'jQuery'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 4:12 [1] 'class'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'class'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/jQuery.interface.md:4:6. Adjective: found 'class'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 4:12 [1] 'class'(IDENTIFIER)
        Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
          ClassDeclaration matched OK: class class
>>>ADVANCE 4:18 [2] 'jQuery'(IDENTIFIER)
          ClassDeclaration matched OK: IDENTIFIER jQuery
>>>ADVANCE 6:0 [-1] ' '(NEWLINE)
          ClassDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 6:9 [0] 'properties'(IDENTIFIER)
optFreeFormList [Body] parentname:jQuery parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

6 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 7:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 7:13 [0] 'jquery'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'jquery'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER jquery
>>>ADVANCE 7:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 7:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 8:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 8:13 [0] 'selector'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 8:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 8:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 9:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 9:13 [0] 'length'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'length'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER length
>>>ADVANCE 9:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 9:20 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 11:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 11:9 [0] 'constructor'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'constructor'(IDENTIFIER)

11 8(CODE) constructor ( selector, context )
    'constructor'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ','(LITERAL) 'context'(IDENTIFIER) ')'(LITERAL)

              Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 11:21 [1] '('(LITERAL)
                ConstructorDeclaration matched OK: ( (
>>>ADVANCE 11:23 [2] 'selector'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                ConstructorDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 11:31 [3] ','(LITERAL)
                Parsed OK!-> VariableDecl
                ConstructorDeclaration matched OK: , ,
>>>ADVANCE 11:33 [4] 'context'(IDENTIFIER)
                ConstructorDeclaration TRY VariableDecl on 'context'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER context
>>>ADVANCE 11:41 [5] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                ConstructorDeclaration matched OK: ) )
>>>ADVANCE 12:0 [-1] ' '(NEWLINE)
                ConstructorDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> ConstructorDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 12:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

12 8(CODE) method init ( selector, context, rootjQuery )
    'method'(IDENTIFIER) 'init'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ','(LITERAL) 'context'(IDENTIFIER) ','(LITERAL) 'rootjQuery'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 12:16 [1] 'init'(IDENTIFIER)
>>>ADVANCE 12:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 12:23 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 12:31 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 12:33 [5] 'context'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'context'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER context
>>>ADVANCE 12:40 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 12:42 [7] 'rootjQuery'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'rootjQuery'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER rootjQuery
>>>ADVANCE 12:53 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 14:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 14:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

14 8(CODE) method acceptData( elem )
    'method'(IDENTIFIER) 'acceptData'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 14:16 [1] 'acceptData'(IDENTIFIER)
>>>ADVANCE 14:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 14:28 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 14:33 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 15:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 15:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

15 8(CODE) method access( elems, fn, key, value, chainable, emptyGet, raw )
    'method'(IDENTIFIER) 'access'(IDENTIFIER) '('(LITERAL) 'elems'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ','(LITERAL) 'key'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ','(LITERAL) 'chainable'(IDENTIFIER) ','(LITERAL) 'emptyGet'(IDENTIFIER) ','(LITERAL) 'raw'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 15:16 [1] 'access'(IDENTIFIER)
>>>ADVANCE 15:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 15:24 [3] 'elems'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elems'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elems
>>>ADVANCE 15:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 15:31 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 15:33 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 15:35 [7] 'key'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'key'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER key
>>>ADVANCE 15:38 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 15:40 [9] 'value'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 15:45 [10] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 15:47 [11] 'chainable'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'chainable'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER chainable
>>>ADVANCE 15:56 [12] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 15:58 [13] 'emptyGet'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'emptyGet'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER emptyGet
>>>ADVANCE 15:66 [14] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 15:68 [15] 'raw'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'raw'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER raw
>>>ADVANCE 15:72 [16] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 17:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 17:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

17 8(CODE) method add( selector, context )
    'method'(IDENTIFIER) 'add'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ','(LITERAL) 'context'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 17:16 [1] 'add'(IDENTIFIER)
>>>ADVANCE 17:19 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 17:21 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 17:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 17:31 [5] 'context'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'context'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER context
>>>ADVANCE 17:39 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 18:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 18:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

18 8(CODE) method addBack( selector )
    'method'(IDENTIFIER) 'addBack'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 18:16 [1] 'addBack'(IDENTIFIER)
>>>ADVANCE 18:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 18:25 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 18:34 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 19:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 19:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

19 8(CODE) method addClass( value )
    'method'(IDENTIFIER) 'addClass'(IDENTIFIER) '('(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 19:16 [1] 'addClass'(IDENTIFIER)
>>>ADVANCE 19:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 19:26 [3] 'value'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 19:32 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 20:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 20:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

20 8(CODE) method after()
    'method'(IDENTIFIER) 'after'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 20:16 [1] 'after'(IDENTIFIER)
>>>ADVANCE 20:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 20:22 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 22:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 22:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

22 8(CODE) method ajax (url,options)
    'method'(IDENTIFIER) 'ajax'(IDENTIFIER) '('(LITERAL) 'url'(IDENTIFIER) ','(LITERAL) 'options'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 22:16 [1] 'ajax'(IDENTIFIER)
>>>ADVANCE 22:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 22:22 [3] 'url'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'url'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER url
>>>ADVANCE 22:25 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 22:26 [5] 'options'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 22:33 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 23:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 23:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

23 8(CODE) method ajaxComplete( fn )
    'method'(IDENTIFIER) 'ajaxComplete'(IDENTIFIER) '('(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 23:16 [1] 'ajaxComplete'(IDENTIFIER)
>>>ADVANCE 23:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 23:30 [3] 'fn'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 23:33 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 24:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 24:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

24 8(CODE) method ajaxError( fn )
    'method'(IDENTIFIER) 'ajaxError'(IDENTIFIER) '('(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 24:16 [1] 'ajaxError'(IDENTIFIER)
>>>ADVANCE 24:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 24:27 [3] 'fn'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 24:30 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 25:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 25:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

25 8(CODE) method ajaxPrefilter( dataTypeExpression, func )
    'method'(IDENTIFIER) 'ajaxPrefilter'(IDENTIFIER) '('(LITERAL) 'dataTypeExpression'(IDENTIFIER) ','(LITERAL) 'func'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 25:16 [1] 'ajaxPrefilter'(IDENTIFIER)
>>>ADVANCE 25:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 25:31 [3] 'dataTypeExpression'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'dataTypeExpression'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER dataTypeExpression
>>>ADVANCE 25:49 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 25:51 [5] 'func'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'func'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER func
>>>ADVANCE 25:56 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 26:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 26:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

26 8(CODE) method ajaxSend( fn )
    'method'(IDENTIFIER) 'ajaxSend'(IDENTIFIER) '('(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 26:16 [1] 'ajaxSend'(IDENTIFIER)
>>>ADVANCE 26:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 26:26 [3] 'fn'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 26:29 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 27:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 27:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

27 8(CODE) method ajaxSetup( target, settings )
    'method'(IDENTIFIER) 'ajaxSetup'(IDENTIFIER) '('(LITERAL) 'target'(IDENTIFIER) ','(LITERAL) 'settings'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 27:16 [1] 'ajaxSetup'(IDENTIFIER)
>>>ADVANCE 27:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 27:27 [3] 'target'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'target'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER target
>>>ADVANCE 27:33 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 27:35 [5] 'settings'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'settings'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER settings
>>>ADVANCE 27:44 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 28:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 28:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

28 8(CODE) method ajaxStart( fn )
    'method'(IDENTIFIER) 'ajaxStart'(IDENTIFIER) '('(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 28:16 [1] 'ajaxStart'(IDENTIFIER)
>>>ADVANCE 28:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 28:27 [3] 'fn'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 28:30 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 29:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 29:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

29 8(CODE) method ajaxStop( fn )
    'method'(IDENTIFIER) 'ajaxStop'(IDENTIFIER) '('(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 29:16 [1] 'ajaxStop'(IDENTIFIER)
>>>ADVANCE 29:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 29:26 [3] 'fn'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 29:29 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 30:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 30:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

30 8(CODE) method ajaxSuccess( fn )
    'method'(IDENTIFIER) 'ajaxSuccess'(IDENTIFIER) '('(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 30:16 [1] 'ajaxSuccess'(IDENTIFIER)
>>>ADVANCE 30:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 30:29 [3] 'fn'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 30:32 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 31:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 31:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

31 8(CODE) method ajaxTransport( dataTypeExpression, func )
    'method'(IDENTIFIER) 'ajaxTransport'(IDENTIFIER) '('(LITERAL) 'dataTypeExpression'(IDENTIFIER) ','(LITERAL) 'func'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 31:16 [1] 'ajaxTransport'(IDENTIFIER)
>>>ADVANCE 31:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 31:31 [3] 'dataTypeExpression'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'dataTypeExpression'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER dataTypeExpression
>>>ADVANCE 31:49 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 31:51 [5] 'func'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'func'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER func
>>>ADVANCE 31:56 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 32:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 32:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

32 8(CODE) method andSelf( selector )
    'method'(IDENTIFIER) 'andSelf'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 32:16 [1] 'andSelf'(IDENTIFIER)
>>>ADVANCE 32:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 32:25 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 32:34 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 33:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 33:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

33 8(CODE) method animate( prop, speed, easing, callback )
    'method'(IDENTIFIER) 'animate'(IDENTIFIER) '('(LITERAL) 'prop'(IDENTIFIER) ','(LITERAL) 'speed'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 33:16 [1] 'animate'(IDENTIFIER)
>>>ADVANCE 33:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 33:25 [3] 'prop'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'prop'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER prop
>>>ADVANCE 33:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 33:31 [5] 'speed'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'speed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER speed
>>>ADVANCE 33:36 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 33:38 [7] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 33:44 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 33:46 [9] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 33:55 [10] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 34:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 34:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

34 8(CODE) method Animation( elem, properties, options )
    'method'(IDENTIFIER) 'Animation'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'properties'(IDENTIFIER) ','(LITERAL) 'options'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 34:16 [1] 'Animation'(IDENTIFIER)
>>>ADVANCE 34:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 34:27 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 34:31 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 34:33 [5] 'properties'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'properties'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER properties
>>>ADVANCE 34:43 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 34:45 [7] 'options'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 34:53 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 35:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 35:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

35 8(CODE) method append()
    'method'(IDENTIFIER) 'append'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 35:16 [1] 'append'(IDENTIFIER)
>>>ADVANCE 35:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 35:23 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 36:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 36:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

36 8(CODE) method appendTo( selector )
    'method'(IDENTIFIER) 'appendTo'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 36:16 [1] 'appendTo'(IDENTIFIER)
>>>ADVANCE 36:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 36:26 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 36:35 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 37:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 37:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

37 8(CODE) method attr( elem, name, value )
    'method'(IDENTIFIER) 'attr'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'name'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 37:16 [1] 'attr'(IDENTIFIER)
>>>ADVANCE 37:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 37:22 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 37:26 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 37:28 [5] 'name'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 37:32 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 37:34 [7] 'value'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 37:40 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 38:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 38:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

38 8(CODE) method before()
    'method'(IDENTIFIER) 'before'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 38:16 [1] 'before'(IDENTIFIER)
>>>ADVANCE 38:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 38:23 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 39:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 39:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

39 8(CODE) method bind( types, data, fn )
    'method'(IDENTIFIER) 'bind'(IDENTIFIER) '('(LITERAL) 'types'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 39:16 [1] 'bind'(IDENTIFIER)
>>>ADVANCE 39:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 39:22 [3] 'types'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'types'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER types
>>>ADVANCE 39:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 39:29 [5] 'data'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 39:33 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 39:35 [7] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 39:38 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 40:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 40:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

40 8(CODE) method blur( data, fn )
    'method'(IDENTIFIER) 'blur'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 40:16 [1] 'blur'(IDENTIFIER)
>>>ADVANCE 40:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 40:22 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 40:26 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 40:28 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 40:31 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 41:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 41:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

41 8(CODE) method buildFragment( elems, context, scripts, selection )
    'method'(IDENTIFIER) 'buildFragment'(IDENTIFIER) '('(LITERAL) 'elems'(IDENTIFIER) ','(LITERAL) 'context'(IDENTIFIER) ','(LITERAL) 'scripts'(IDENTIFIER) ','(LITERAL) 'selection'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 41:16 [1] 'buildFragment'(IDENTIFIER)
>>>ADVANCE 41:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 41:31 [3] 'elems'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elems'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elems
>>>ADVANCE 41:36 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 41:38 [5] 'context'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'context'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER context
>>>ADVANCE 41:45 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 41:47 [7] 'scripts'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'scripts'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER scripts
>>>ADVANCE 41:54 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 41:56 [9] 'selection'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selection'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selection
>>>ADVANCE 41:66 [10] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 42:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 42:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

42 8(CODE) method Callbacks( options )
    'method'(IDENTIFIER) 'Callbacks'(IDENTIFIER) '('(LITERAL) 'options'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 42:16 [1] 'Callbacks'(IDENTIFIER)
>>>ADVANCE 42:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 42:27 [3] 'options'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 42:35 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 43:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 43:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

43 8(CODE) method camelCase( string )
    'method'(IDENTIFIER) 'camelCase'(IDENTIFIER) '('(LITERAL) 'string'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 43:16 [1] 'camelCase'(IDENTIFIER)
>>>ADVANCE 43:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 43:27 [3] 'string'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'string'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER string
>>>ADVANCE 43:34 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 44:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 44:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

44 8(CODE) method change( data, fn )
    'method'(IDENTIFIER) 'change'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 44:16 [1] 'change'(IDENTIFIER)
>>>ADVANCE 44:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 44:24 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 44:28 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 44:30 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 44:33 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 45:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 45:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

45 8(CODE) method children( until, selector )
    'method'(IDENTIFIER) 'children'(IDENTIFIER) '('(LITERAL) 'until'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 45:16 [1] 'children'(IDENTIFIER)
>>>ADVANCE 45:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 45:26 [3] 'until'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'until'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER until
>>>ADVANCE 45:31 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 45:33 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 45:42 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 46:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 46:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

46 8(CODE) method cleanData( elems,  acceptData )//internal 
    'method'(IDENTIFIER) 'cleanData'(IDENTIFIER) '('(LITERAL) 'elems'(IDENTIFIER) ','(LITERAL) 'acceptData'(IDENTIFIER) ')'(LITERAL) '//internal '(COMMENT)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 46:16 [1] 'cleanData'(IDENTIFIER)
>>>ADVANCE 46:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 46:27 [3] 'elems'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elems'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elems
>>>ADVANCE 46:32 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 46:35 [5] 'acceptData'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'acceptData'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER acceptData
>>>ADVANCE 46:46 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 47:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 47:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

47 8(CODE) method clearQueue( type )
    'method'(IDENTIFIER) 'clearQueue'(IDENTIFIER) '('(LITERAL) 'type'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 47:16 [1] 'clearQueue'(IDENTIFIER)
>>>ADVANCE 47:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 47:28 [3] 'type'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'type'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER type
>>>ADVANCE 47:33 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 48:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 48:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

48 8(CODE) method click( data, fn )
    'method'(IDENTIFIER) 'click'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 48:16 [1] 'click'(IDENTIFIER)
>>>ADVANCE 48:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 48:23 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 48:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 48:29 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 48:32 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 49:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 49:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

49 8(CODE) method clone( elem, dataAndEvents, deepDataAndEvents )
    'method'(IDENTIFIER) 'clone'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'dataAndEvents'(IDENTIFIER) ','(LITERAL) 'deepDataAndEvents'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 49:16 [1] 'clone'(IDENTIFIER)
>>>ADVANCE 49:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 49:23 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 49:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 49:29 [5] 'dataAndEvents'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'dataAndEvents'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER dataAndEvents
>>>ADVANCE 49:42 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 49:44 [7] 'deepDataAndEvents'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'deepDataAndEvents'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER deepDataAndEvents
>>>ADVANCE 49:62 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 50:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 50:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

50 8(CODE) method closest( selectors, context )
    'method'(IDENTIFIER) 'closest'(IDENTIFIER) '('(LITERAL) 'selectors'(IDENTIFIER) ','(LITERAL) 'context'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 50:16 [1] 'closest'(IDENTIFIER)
>>>ADVANCE 50:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 50:25 [3] 'selectors'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selectors'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selectors
>>>ADVANCE 50:34 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 50:36 [5] 'context'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'context'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER context
>>>ADVANCE 50:44 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 51:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 51:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

51 8(CODE) method contains( context, elem )
    'method'(IDENTIFIER) 'contains'(IDENTIFIER) '('(LITERAL) 'context'(IDENTIFIER) ','(LITERAL) 'elem'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 51:16 [1] 'contains'(IDENTIFIER)
>>>ADVANCE 51:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 51:26 [3] 'context'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'context'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER context
>>>ADVANCE 51:33 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 51:35 [5] 'elem'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 51:40 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 52:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 52:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

52 8(CODE) method contents( until, selector )
    'method'(IDENTIFIER) 'contents'(IDENTIFIER) '('(LITERAL) 'until'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 52:16 [1] 'contents'(IDENTIFIER)
>>>ADVANCE 52:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 52:26 [3] 'until'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'until'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER until
>>>ADVANCE 52:31 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 52:33 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 52:42 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 53:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 53:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

53 8(CODE) method contextmenu( data, fn )
    'method'(IDENTIFIER) 'contextmenu'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 53:16 [1] 'contextmenu'(IDENTIFIER)
>>>ADVANCE 53:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 53:29 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 53:33 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 53:35 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 53:38 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 54:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 54:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

54 8(CODE) method css( elem, name, extra, styles )
    'method'(IDENTIFIER) 'css'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'name'(IDENTIFIER) ','(LITERAL) 'extra'(IDENTIFIER) ','(LITERAL) 'styles'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 54:16 [1] 'css'(IDENTIFIER)
>>>ADVANCE 54:19 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 54:21 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 54:25 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 54:27 [5] 'name'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 54:31 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 54:33 [7] 'extra'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'extra'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER extra
>>>ADVANCE 54:38 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 54:40 [9] 'styles'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'styles'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER styles
>>>ADVANCE 54:47 [10] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 55:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 55:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

55 8(CODE) method data( elem, name, data )
    'method'(IDENTIFIER) 'data'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'name'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 55:16 [1] 'data'(IDENTIFIER)
>>>ADVANCE 55:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 55:22 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 55:26 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 55:28 [5] 'name'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 55:32 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 55:34 [7] 'data'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 55:39 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 56:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 56:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

56 8(CODE) method dblclick( data, fn )
    'method'(IDENTIFIER) 'dblclick'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 56:16 [1] 'dblclick'(IDENTIFIER)
>>>ADVANCE 56:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 56:26 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 56:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 56:32 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 56:35 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 57:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 57:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

57 8(CODE) method Deferred( func )
    'method'(IDENTIFIER) 'Deferred'(IDENTIFIER) '('(LITERAL) 'func'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 57:16 [1] 'Deferred'(IDENTIFIER)
>>>ADVANCE 57:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 57:26 [3] 'func'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'func'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER func
>>>ADVANCE 57:31 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 58:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 58:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

58 8(CODE) method delay( time, type )
    'method'(IDENTIFIER) 'delay'(IDENTIFIER) '('(LITERAL) 'time'(IDENTIFIER) ','(LITERAL) 'type'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 58:16 [1] 'delay'(IDENTIFIER)
>>>ADVANCE 58:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 58:23 [3] 'time'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'time'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER time
>>>ADVANCE 58:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 58:29 [5] 'type'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'type'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER type
>>>ADVANCE 58:34 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 59:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 59:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

59 8(CODE) method delegate( selector, types, data, fn )
    'method'(IDENTIFIER) 'delegate'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ','(LITERAL) 'types'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 59:16 [1] 'delegate'(IDENTIFIER)
>>>ADVANCE 59:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 59:26 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 59:34 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 59:36 [5] 'types'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'types'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER types
>>>ADVANCE 59:41 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 59:43 [7] 'data'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 59:47 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 59:49 [9] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 59:52 [10] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 60:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 60:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

60 8(CODE) method dequeue( type )
    'method'(IDENTIFIER) 'dequeue'(IDENTIFIER) '('(LITERAL) 'type'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 60:16 [1] 'dequeue'(IDENTIFIER)
>>>ADVANCE 60:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 60:25 [3] 'type'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'type'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER type
>>>ADVANCE 60:30 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 61:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 61:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

61 8(CODE) method detach( selector )
    'method'(IDENTIFIER) 'detach'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 61:16 [1] 'detach'(IDENTIFIER)
>>>ADVANCE 61:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 61:24 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 61:33 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 62:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 62:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

62 8(CODE) method dir( elem, dir, until )
    'method'(IDENTIFIER) 'dir'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'dir'(IDENTIFIER) ','(LITERAL) 'until'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 62:16 [1] 'dir'(IDENTIFIER)
>>>ADVANCE 62:19 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 62:21 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 62:25 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 62:27 [5] 'dir'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'dir'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER dir
>>>ADVANCE 62:30 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 62:32 [7] 'until'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'until'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER until
>>>ADVANCE 62:38 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 63:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 63:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

63 8(CODE) method domManip( args, table, callback )
    'method'(IDENTIFIER) 'domManip'(IDENTIFIER) '('(LITERAL) 'args'(IDENTIFIER) ','(LITERAL) 'table'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 63:16 [1] 'domManip'(IDENTIFIER)
>>>ADVANCE 63:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 63:26 [3] 'args'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'args'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER args
>>>ADVANCE 63:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 63:32 [5] 'table'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'table'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER table
>>>ADVANCE 63:37 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 63:39 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 63:48 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 64:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 64:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

64 8(CODE) method each( obj, callback, args )
    'method'(IDENTIFIER) 'each'(IDENTIFIER) '('(LITERAL) 'obj'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'args'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 64:16 [1] 'each'(IDENTIFIER)
>>>ADVANCE 64:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 64:22 [3] 'obj'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'obj'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER obj
>>>ADVANCE 64:25 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 64:27 [5] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 64:35 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 64:37 [7] 'args'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'args'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER args
>>>ADVANCE 64:42 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 65:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 65:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

65 8(CODE) method empty()
    'method'(IDENTIFIER) 'empty'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 65:16 [1] 'empty'(IDENTIFIER)
>>>ADVANCE 65:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 65:22 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 66:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 66:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

66 8(CODE) method end()
    'method'(IDENTIFIER) 'end'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 66:16 [1] 'end'(IDENTIFIER)
>>>ADVANCE 66:19 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 66:20 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 67:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 67:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

67 8(CODE) method eq( i )
    'method'(IDENTIFIER) 'eq'(IDENTIFIER) '('(LITERAL) 'i'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 67:16 [1] 'eq'(IDENTIFIER)
>>>ADVANCE 67:18 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 67:20 [3] 'i'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'i'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER i
>>>ADVANCE 67:22 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 68:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 68:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

68 8(CODE) method error( data, fn )
    'method'(IDENTIFIER) 'error'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 68:16 [1] 'error'(IDENTIFIER)
>>>ADVANCE 68:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 68:23 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 68:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 68:29 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 68:32 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 69:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 69:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

69 8(CODE) method extend()
    'method'(IDENTIFIER) 'extend'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 69:16 [1] 'extend'(IDENTIFIER)
>>>ADVANCE 69:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 69:23 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 70:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 70:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

70 8(CODE) method fadeIn( speed, easing, callback )
    'method'(IDENTIFIER) 'fadeIn'(IDENTIFIER) '('(LITERAL) 'speed'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 70:16 [1] 'fadeIn'(IDENTIFIER)
>>>ADVANCE 70:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 70:24 [3] 'speed'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'speed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER speed
>>>ADVANCE 70:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 70:31 [5] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 70:37 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 70:39 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 70:48 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 71:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 71:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

71 8(CODE) method fadeOut( speed, easing, callback )
    'method'(IDENTIFIER) 'fadeOut'(IDENTIFIER) '('(LITERAL) 'speed'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 71:16 [1] 'fadeOut'(IDENTIFIER)
>>>ADVANCE 71:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 71:25 [3] 'speed'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'speed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER speed
>>>ADVANCE 71:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 71:32 [5] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 71:38 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 71:40 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 71:49 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 72:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 72:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

72 8(CODE) method fadeTo( speed, to, easing, callback )
    'method'(IDENTIFIER) 'fadeTo'(IDENTIFIER) '('(LITERAL) 'speed'(IDENTIFIER) ','(LITERAL) 'to'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 72:16 [1] 'fadeTo'(IDENTIFIER)
>>>ADVANCE 72:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 72:24 [3] 'speed'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'speed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER speed
>>>ADVANCE 72:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 72:31 [5] 'to'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'to'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER to
>>>ADVANCE 72:33 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 72:35 [7] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 72:41 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 72:43 [9] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 72:52 [10] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 73:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 73:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

73 8(CODE) method fadeToggle( speed, easing, callback )
    'method'(IDENTIFIER) 'fadeToggle'(IDENTIFIER) '('(LITERAL) 'speed'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 73:16 [1] 'fadeToggle'(IDENTIFIER)
>>>ADVANCE 73:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 73:28 [3] 'speed'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'speed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER speed
>>>ADVANCE 73:33 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 73:35 [5] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 73:41 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 73:43 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 73:52 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 74:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 74:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

74 8(CODE) method filter( expr, elems, notParam )
    'method'(IDENTIFIER) 'filter'(IDENTIFIER) '('(LITERAL) 'expr'(IDENTIFIER) ','(LITERAL) 'elems'(IDENTIFIER) ','(LITERAL) 'notParam'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 74:16 [1] 'filter'(IDENTIFIER)
>>>ADVANCE 74:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 74:24 [3] 'expr'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'expr'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER expr
>>>ADVANCE 74:28 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 74:30 [5] 'elems'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'elems'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elems
>>>ADVANCE 74:35 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 74:37 [7] 'notParam'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'notParam'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER notParam
>>>ADVANCE 74:46 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 75:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 75:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

75 8(CODE) method find( selector, context, results, seed )
    'method'(IDENTIFIER) 'find'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ','(LITERAL) 'context'(IDENTIFIER) ','(LITERAL) 'results'(IDENTIFIER) ','(LITERAL) 'seed'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 75:16 [1] 'find'(IDENTIFIER)
>>>ADVANCE 75:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 75:22 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 75:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 75:32 [5] 'context'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'context'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER context
>>>ADVANCE 75:39 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 75:41 [7] 'results'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'results'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER results
>>>ADVANCE 75:48 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 75:50 [9] 'seed'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'seed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER seed
>>>ADVANCE 75:55 [10] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 76:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 76:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

76 8(CODE) method finish( type )
    'method'(IDENTIFIER) 'finish'(IDENTIFIER) '('(LITERAL) 'type'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 76:16 [1] 'finish'(IDENTIFIER)
>>>ADVANCE 76:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 76:24 [3] 'type'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'type'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER type
>>>ADVANCE 76:29 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 77:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 77:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

77 8(CODE) method first()
    'method'(IDENTIFIER) 'first'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 77:16 [1] 'first'(IDENTIFIER)
>>>ADVANCE 77:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 77:22 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 78:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 78:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

78 8(CODE) method focus( data, fn )
    'method'(IDENTIFIER) 'focus'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 78:16 [1] 'focus'(IDENTIFIER)
>>>ADVANCE 78:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 78:23 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 78:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 78:29 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 78:32 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 79:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 79:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

79 8(CODE) method focusin( data, fn )
    'method'(IDENTIFIER) 'focusin'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 79:16 [1] 'focusin'(IDENTIFIER)
>>>ADVANCE 79:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 79:25 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 79:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 79:31 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 79:34 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 80:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 80:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

80 8(CODE) method focusout( data, fn )
    'method'(IDENTIFIER) 'focusout'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 80:16 [1] 'focusout'(IDENTIFIER)
>>>ADVANCE 80:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 80:26 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 80:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 80:32 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 80:35 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 81:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 81:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

81 8(CODE) method fx( elem, options, prop, end, easing, unit )
    'method'(IDENTIFIER) 'fx'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'options'(IDENTIFIER) ','(LITERAL) 'prop'(IDENTIFIER) ','(LITERAL) 'end'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ','(LITERAL) 'unit'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 81:16 [1] 'fx'(IDENTIFIER)
>>>ADVANCE 81:18 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 81:20 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 81:24 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 81:26 [5] 'options'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 81:33 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 81:35 [7] 'prop'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'prop'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER prop
>>>ADVANCE 81:39 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 81:41 [9] 'end'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'end'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER end
>>>ADVANCE 81:44 [10] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 81:46 [11] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 81:52 [12] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 81:54 [13] 'unit'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'unit'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER unit
>>>ADVANCE 81:59 [14] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 82:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 82:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

82 8(CODE) method get( num )
    'method'(IDENTIFIER) 'get'(IDENTIFIER) '('(LITERAL) 'num'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 82:16 [1] 'get'(IDENTIFIER)
>>>ADVANCE 82:19 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 82:21 [3] 'num'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'num'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER num
>>>ADVANCE 82:25 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 83:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 83:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

83 8(CODE) method getJSON( url, data, callback )
    'method'(IDENTIFIER) 'getJSON'(IDENTIFIER) '('(LITERAL) 'url'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 83:16 [1] 'getJSON'(IDENTIFIER)
>>>ADVANCE 83:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 83:25 [3] 'url'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'url'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER url
>>>ADVANCE 83:28 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 83:30 [5] 'data'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 83:34 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 83:36 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 83:45 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 84:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 84:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

84 8(CODE) method getScript( url, callback )
    'method'(IDENTIFIER) 'getScript'(IDENTIFIER) '('(LITERAL) 'url'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 84:16 [1] 'getScript'(IDENTIFIER)
>>>ADVANCE 84:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 84:27 [3] 'url'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'url'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER url
>>>ADVANCE 84:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 84:32 [5] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 84:41 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 85:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 85:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

85 8(CODE) method globalEval( data )
    'method'(IDENTIFIER) 'globalEval'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 85:16 [1] 'globalEval'(IDENTIFIER)
>>>ADVANCE 85:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 85:28 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 85:33 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 86:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 86:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

86 8(CODE) method grep( elems, callback, inv )
    'method'(IDENTIFIER) 'grep'(IDENTIFIER) '('(LITERAL) 'elems'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'inv'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 86:16 [1] 'grep'(IDENTIFIER)
>>>ADVANCE 86:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 86:22 [3] 'elems'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elems'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elems
>>>ADVANCE 86:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 86:29 [5] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 86:37 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 86:39 [7] 'inv'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'inv'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER inv
>>>ADVANCE 86:43 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 87:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 87:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

87 8(CODE) method has( target )
    'method'(IDENTIFIER) 'has'(OPER) '('(LITERAL) 'target'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 87:16 [1] 'has'(OPER)
>>>ADVANCE 87:19 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 87:21 [3] 'target'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'target'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER target
>>>ADVANCE 87:28 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 88:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 88:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

88 8(CODE) method hasClass( selector )
    'method'(IDENTIFIER) 'hasClass'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 88:16 [1] 'hasClass'(IDENTIFIER)
>>>ADVANCE 88:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 88:26 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 88:35 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 89:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 89:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

89 8(CODE) method hasData( elem )
    'method'(IDENTIFIER) 'hasData'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 89:16 [1] 'hasData'(IDENTIFIER)
>>>ADVANCE 89:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 89:25 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 89:30 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 90:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 90:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

90 8(CODE) method height( margin, value )
    'method'(IDENTIFIER) 'height'(IDENTIFIER) '('(LITERAL) 'margin'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 90:16 [1] 'height'(IDENTIFIER)
>>>ADVANCE 90:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 90:24 [3] 'margin'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'margin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER margin
>>>ADVANCE 90:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 90:32 [5] 'value'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 90:38 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 91:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 91:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

91 8(CODE) method hide( speed, easing, callback )
    'method'(IDENTIFIER) 'hide'(IDENTIFIER) '('(LITERAL) 'speed'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 91:16 [1] 'hide'(IDENTIFIER)
>>>ADVANCE 91:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 91:22 [3] 'speed'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'speed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER speed
>>>ADVANCE 91:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 91:29 [5] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 91:35 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 91:37 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 91:46 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 92:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 92:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

92 8(CODE) method holdReady( hold )
    'method'(IDENTIFIER) 'holdReady'(IDENTIFIER) '('(LITERAL) 'hold'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 92:16 [1] 'holdReady'(IDENTIFIER)
>>>ADVANCE 92:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 92:27 [3] 'hold'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'hold'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER hold
>>>ADVANCE 92:32 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 93:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 93:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

93 8(CODE) method hover( fnOver, fnOut )
    'method'(IDENTIFIER) 'hover'(IDENTIFIER) '('(LITERAL) 'fnOver'(IDENTIFIER) ','(LITERAL) 'fnOut'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 93:16 [1] 'hover'(IDENTIFIER)
>>>ADVANCE 93:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 93:23 [3] 'fnOver'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'fnOver'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fnOver
>>>ADVANCE 93:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 93:31 [5] 'fnOut'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fnOut'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fnOut
>>>ADVANCE 93:37 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 94:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 94:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

94 8(CODE) method html( value )
    'method'(IDENTIFIER) 'html'(IDENTIFIER) '('(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 94:16 [1] 'html'(IDENTIFIER)
>>>ADVANCE 94:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 94:22 [3] 'value'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 94:28 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 95:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 95:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

95 8(CODE) method inArray( elem, arr, i )
    'method'(IDENTIFIER) 'inArray'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'arr'(IDENTIFIER) ','(LITERAL) 'i'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 95:16 [1] 'inArray'(IDENTIFIER)
>>>ADVANCE 95:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 95:25 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 95:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 95:31 [5] 'arr'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'arr'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER arr
>>>ADVANCE 95:34 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 95:36 [7] 'i'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'i'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER i
>>>ADVANCE 95:38 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 96:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 96:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

96 8(CODE) method index( elem )
    'method'(IDENTIFIER) 'index'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 96:16 [1] 'index'(IDENTIFIER)
>>>ADVANCE 96:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 96:23 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 96:28 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 97:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 97:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

97 8(CODE) method innerHeight( margin, value )
    'method'(IDENTIFIER) 'innerHeight'(IDENTIFIER) '('(LITERAL) 'margin'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 97:16 [1] 'innerHeight'(IDENTIFIER)
>>>ADVANCE 97:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 97:29 [3] 'margin'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'margin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER margin
>>>ADVANCE 97:35 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 97:37 [5] 'value'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 97:43 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 98:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 98:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

98 8(CODE) method innerWidth( margin, value )
    'method'(IDENTIFIER) 'innerWidth'(IDENTIFIER) '('(LITERAL) 'margin'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 98:16 [1] 'innerWidth'(IDENTIFIER)
>>>ADVANCE 98:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 98:28 [3] 'margin'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'margin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER margin
>>>ADVANCE 98:34 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 98:36 [5] 'value'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 98:42 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 99:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 99:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

99 8(CODE) method insertAfter( selector )
    'method'(IDENTIFIER) 'insertAfter'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 99:16 [1] 'insertAfter'(IDENTIFIER)
>>>ADVANCE 99:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 99:29 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 99:38 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 100:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 100:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

100 8(CODE) method insertBefore( selector )
    'method'(IDENTIFIER) 'insertBefore'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 100:16 [1] 'insertBefore'(IDENTIFIER)
>>>ADVANCE 100:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 100:30 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 100:39 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 101:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 101:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

101 8(CODE) method is( selector )
    'method'(IDENTIFIER) 'is'(OPER) '('(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 101:16 [1] 'is'(OPER)
>>>ADVANCE 101:18 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 101:20 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 101:29 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 102:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 102:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

102 8(CODE) method isArray()
    'method'(IDENTIFIER) 'isArray'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 102:16 [1] 'isArray'(IDENTIFIER)
>>>ADVANCE 102:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 102:24 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 103:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 103:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

103 8(CODE) method isEmptyObject( obj )
    'method'(IDENTIFIER) 'isEmptyObject'(IDENTIFIER) '('(LITERAL) 'obj'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 103:16 [1] 'isEmptyObject'(IDENTIFIER)
>>>ADVANCE 103:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 103:31 [3] 'obj'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'obj'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER obj
>>>ADVANCE 103:35 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 104:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 104:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

104 8(CODE) method isFunction( obj )
    'method'(IDENTIFIER) 'isFunction'(IDENTIFIER) '('(LITERAL) 'obj'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 104:16 [1] 'isFunction'(IDENTIFIER)
>>>ADVANCE 104:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 104:28 [3] 'obj'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'obj'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER obj
>>>ADVANCE 104:32 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 105:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 105:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

105 8(CODE) method isNumeric( obj )
    'method'(IDENTIFIER) 'isNumeric'(IDENTIFIER) '('(LITERAL) 'obj'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 105:16 [1] 'isNumeric'(IDENTIFIER)
>>>ADVANCE 105:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 105:27 [3] 'obj'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'obj'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER obj
>>>ADVANCE 105:31 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 106:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 106:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

106 8(CODE) method isPlainObject( obj )
    'method'(IDENTIFIER) 'isPlainObject'(IDENTIFIER) '('(LITERAL) 'obj'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 106:16 [1] 'isPlainObject'(IDENTIFIER)
>>>ADVANCE 106:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 106:31 [3] 'obj'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'obj'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER obj
>>>ADVANCE 106:35 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 107:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 107:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

107 8(CODE) method isWindow( obj )
    'method'(IDENTIFIER) 'isWindow'(IDENTIFIER) '('(LITERAL) 'obj'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 107:16 [1] 'isWindow'(IDENTIFIER)
>>>ADVANCE 107:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 107:26 [3] 'obj'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'obj'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER obj
>>>ADVANCE 107:30 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 108:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 108:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

108 8(CODE) method isXMLDoc( elem )
    'method'(IDENTIFIER) 'isXMLDoc'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 108:16 [1] 'isXMLDoc'(IDENTIFIER)
>>>ADVANCE 108:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 108:26 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 108:31 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 109:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 109:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

109 8(CODE) method keydown( data, fn )
    'method'(IDENTIFIER) 'keydown'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 109:16 [1] 'keydown'(IDENTIFIER)
>>>ADVANCE 109:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 109:25 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 109:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 109:31 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 109:34 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 110:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 110:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

110 8(CODE) method keypress( data, fn )
    'method'(IDENTIFIER) 'keypress'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 110:16 [1] 'keypress'(IDENTIFIER)
>>>ADVANCE 110:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 110:26 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 110:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 110:32 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 110:35 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 111:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 111:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

111 8(CODE) method keyup( data, fn )
    'method'(IDENTIFIER) 'keyup'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 111:16 [1] 'keyup'(IDENTIFIER)
>>>ADVANCE 111:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 111:23 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 111:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 111:29 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 111:32 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 112:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 112:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

112 8(CODE) method last()
    'method'(IDENTIFIER) 'last'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 112:16 [1] 'last'(IDENTIFIER)
>>>ADVANCE 112:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 112:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 113:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 113:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

113 8(CODE) method load( url, params, callback )
    'method'(IDENTIFIER) 'load'(IDENTIFIER) '('(LITERAL) 'url'(IDENTIFIER) ','(LITERAL) 'params'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 113:16 [1] 'load'(IDENTIFIER)
>>>ADVANCE 113:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 113:22 [3] 'url'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'url'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER url
>>>ADVANCE 113:25 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 113:27 [5] 'params'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'params'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER params
>>>ADVANCE 113:33 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 113:35 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 113:44 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 114:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 114:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

114 8(CODE) method makeArray( arr, results )
    'method'(IDENTIFIER) 'makeArray'(IDENTIFIER) '('(LITERAL) 'arr'(IDENTIFIER) ','(LITERAL) 'results'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 114:16 [1] 'makeArray'(IDENTIFIER)
>>>ADVANCE 114:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 114:27 [3] 'arr'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'arr'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER arr
>>>ADVANCE 114:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 114:32 [5] 'results'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'results'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER results
>>>ADVANCE 114:40 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 115:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 115:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

115 8(CODE) method map( elems, callback, arg )
    'method'(IDENTIFIER) 'map'(IDENTIFIER) '('(LITERAL) 'elems'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'arg'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 115:16 [1] 'map'(IDENTIFIER)
>>>ADVANCE 115:19 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 115:21 [3] 'elems'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elems'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elems
>>>ADVANCE 115:26 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 115:28 [5] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 115:36 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 115:38 [7] 'arg'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'arg'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER arg
>>>ADVANCE 115:42 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 116:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 116:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

116 8(CODE) method merge( first, second )
    'method'(IDENTIFIER) 'merge'(IDENTIFIER) '('(LITERAL) 'first'(IDENTIFIER) ','(LITERAL) 'second'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 116:16 [1] 'merge'(IDENTIFIER)
>>>ADVANCE 116:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 116:23 [3] 'first'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'first'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER first
>>>ADVANCE 116:28 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 116:30 [5] 'second'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'second'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER second
>>>ADVANCE 116:37 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 117:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 117:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

117 8(CODE) method mousedown( data, fn )
    'method'(IDENTIFIER) 'mousedown'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 117:16 [1] 'mousedown'(IDENTIFIER)
>>>ADVANCE 117:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 117:27 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 117:31 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 117:33 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 117:36 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 118:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 118:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

118 8(CODE) method mouseenter( data, fn )
    'method'(IDENTIFIER) 'mouseenter'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 118:16 [1] 'mouseenter'(IDENTIFIER)
>>>ADVANCE 118:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 118:28 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 118:32 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 118:34 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 118:37 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 119:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 119:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

119 8(CODE) method mouseleave( data, fn )
    'method'(IDENTIFIER) 'mouseleave'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 119:16 [1] 'mouseleave'(IDENTIFIER)
>>>ADVANCE 119:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 119:28 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 119:32 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 119:34 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 119:37 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 120:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 120:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

120 8(CODE) method mousemove( data, fn )
    'method'(IDENTIFIER) 'mousemove'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 120:16 [1] 'mousemove'(IDENTIFIER)
>>>ADVANCE 120:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 120:27 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 120:31 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 120:33 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 120:36 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 121:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 121:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

121 8(CODE) method mouseout( data, fn )
    'method'(IDENTIFIER) 'mouseout'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 121:16 [1] 'mouseout'(IDENTIFIER)
>>>ADVANCE 121:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 121:26 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 121:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 121:32 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 121:35 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 122:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 122:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

122 8(CODE) method mouseover( data, fn )
    'method'(IDENTIFIER) 'mouseover'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 122:16 [1] 'mouseover'(IDENTIFIER)
>>>ADVANCE 122:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 122:27 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 122:31 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 122:33 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 122:36 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 123:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 123:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

123 8(CODE) method mouseup( data, fn )
    'method'(IDENTIFIER) 'mouseup'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 123:16 [1] 'mouseup'(IDENTIFIER)
>>>ADVANCE 123:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 123:25 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 123:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 123:31 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 123:34 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 124:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 124:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

124 8(CODE) method next( until, selector )
    'method'(IDENTIFIER) 'next'(IDENTIFIER) '('(LITERAL) 'until'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 124:16 [1] 'next'(IDENTIFIER)
>>>ADVANCE 124:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 124:22 [3] 'until'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'until'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER until
>>>ADVANCE 124:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 124:29 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 124:38 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 125:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 125:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

125 8(CODE) method nextAll( until, selector )
    'method'(IDENTIFIER) 'nextAll'(IDENTIFIER) '('(LITERAL) 'until'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 125:16 [1] 'nextAll'(IDENTIFIER)
>>>ADVANCE 125:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 125:25 [3] 'until'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'until'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER until
>>>ADVANCE 125:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 125:32 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 125:41 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 126:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 126:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

126 8(CODE) method nextUntil( until, selector )
    'method'(IDENTIFIER) 'nextUntil'(IDENTIFIER) '('(LITERAL) 'until'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 126:16 [1] 'nextUntil'(IDENTIFIER)
>>>ADVANCE 126:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 126:27 [3] 'until'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'until'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER until
>>>ADVANCE 126:32 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 126:34 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 126:43 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 127:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 127:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

127 8(CODE) method noConflict( deep )
    'method'(IDENTIFIER) 'noConflict'(IDENTIFIER) '('(LITERAL) 'deep'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 127:16 [1] 'noConflict'(IDENTIFIER)
>>>ADVANCE 127:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 127:28 [3] 'deep'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'deep'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER deep
>>>ADVANCE 127:33 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 128:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 128:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

128 8(CODE) method nodeName( elem, name )
    'method'(IDENTIFIER) 'nodeName'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'name'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 128:16 [1] 'nodeName'(IDENTIFIER)
>>>ADVANCE 128:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 128:26 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 128:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 128:32 [5] 'name'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 128:37 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 129:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 129:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

129 8(CODE) method noop()
    'method'(IDENTIFIER) 'noop'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 129:16 [1] 'noop'(IDENTIFIER)
>>>ADVANCE 129:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 129:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 130:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 130:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

130 8(CODE) method not( selector )
    'method'(IDENTIFIER) 'not'(OPER) '('(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 130:16 [1] 'not'(OPER)
>>>ADVANCE 130:19 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 130:21 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 130:30 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 131:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 131:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

131 8(CODE) method now()
    'method'(IDENTIFIER) 'now'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 131:16 [1] 'now'(IDENTIFIER)
>>>ADVANCE 131:19 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 131:20 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 132:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 132:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

132 8(CODE) method off( types, selector, fn )
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'types'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 132:16 [1] 'off'(IDENTIFIER)
>>>ADVANCE 132:19 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 132:21 [3] 'types'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'types'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER types
>>>ADVANCE 132:26 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 132:28 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 132:36 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 132:38 [7] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 132:41 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 133:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 133:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

133 8(CODE) method offset( options )
    'method'(IDENTIFIER) 'offset'(IDENTIFIER) '('(LITERAL) 'options'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 133:16 [1] 'offset'(IDENTIFIER)
>>>ADVANCE 133:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 133:24 [3] 'options'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 133:32 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 134:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 134:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

134 8(CODE) method offsetParent()
    'method'(IDENTIFIER) 'offsetParent'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 134:16 [1] 'offsetParent'(IDENTIFIER)
>>>ADVANCE 134:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 134:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 135:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 135:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

135 8(CODE) method on( types, selector, data, fn,  one )//INTERNAL
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'types'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ','(LITERAL) 'one'(IDENTIFIER) ')'(LITERAL) '//INTERNAL'(COMMENT)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 135:16 [1] 'on'(IDENTIFIER)
>>>ADVANCE 135:18 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 135:20 [3] 'types'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'types'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER types
>>>ADVANCE 135:25 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 135:27 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 135:35 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 135:37 [7] 'data'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 135:41 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 135:43 [9] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 135:45 [10] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 135:48 [11] 'one'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'one'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER one
>>>ADVANCE 135:52 [12] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 136:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 136:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

136 8(CODE) method one( types, selector, data, fn )
    'method'(IDENTIFIER) 'one'(IDENTIFIER) '('(LITERAL) 'types'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 136:16 [1] 'one'(IDENTIFIER)
>>>ADVANCE 136:19 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 136:21 [3] 'types'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'types'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER types
>>>ADVANCE 136:26 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 136:28 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 136:36 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 136:38 [7] 'data'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 136:42 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 136:44 [9] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 136:47 [10] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 137:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 137:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

137 8(CODE) method outerHeight( margin, value )
    'method'(IDENTIFIER) 'outerHeight'(IDENTIFIER) '('(LITERAL) 'margin'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 137:16 [1] 'outerHeight'(IDENTIFIER)
>>>ADVANCE 137:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 137:29 [3] 'margin'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'margin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER margin
>>>ADVANCE 137:35 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 137:37 [5] 'value'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 137:43 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 138:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 138:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

138 8(CODE) method outerWidth( margin, value )
    'method'(IDENTIFIER) 'outerWidth'(IDENTIFIER) '('(LITERAL) 'margin'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 138:16 [1] 'outerWidth'(IDENTIFIER)
>>>ADVANCE 138:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 138:28 [3] 'margin'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'margin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER margin
>>>ADVANCE 138:34 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 138:36 [5] 'value'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 138:42 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 139:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 139:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

139 8(CODE) method param( a, traditional )
    'method'(IDENTIFIER) 'param'(IDENTIFIER) '('(LITERAL) 'a'(IDENTIFIER) ','(LITERAL) 'traditional'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 139:16 [1] 'param'(IDENTIFIER)
>>>ADVANCE 139:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 139:23 [3] 'a'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'a'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER a
>>>ADVANCE 139:24 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 139:26 [5] 'traditional'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'traditional'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER traditional
>>>ADVANCE 139:38 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 140:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 140:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

140 8(CODE) method parent( until, selector )
    'method'(IDENTIFIER) 'parent'(IDENTIFIER) '('(LITERAL) 'until'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 140:16 [1] 'parent'(IDENTIFIER)
>>>ADVANCE 140:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 140:24 [3] 'until'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'until'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER until
>>>ADVANCE 140:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 140:31 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 140:40 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 141:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 141:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

141 8(CODE) method parents( until, selector )
    'method'(IDENTIFIER) 'parents'(IDENTIFIER) '('(LITERAL) 'until'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 141:16 [1] 'parents'(IDENTIFIER)
>>>ADVANCE 141:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 141:25 [3] 'until'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'until'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER until
>>>ADVANCE 141:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 141:32 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 141:41 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 142:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 142:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

142 8(CODE) method parentsUntil( until, selector )
    'method'(IDENTIFIER) 'parentsUntil'(IDENTIFIER) '('(LITERAL) 'until'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 142:16 [1] 'parentsUntil'(IDENTIFIER)
>>>ADVANCE 142:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 142:30 [3] 'until'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'until'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER until
>>>ADVANCE 142:35 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 142:37 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 142:46 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 143:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 143:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

143 8(CODE) method parseHTML( data, context, keepScripts )
    'method'(IDENTIFIER) 'parseHTML'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'context'(IDENTIFIER) ','(LITERAL) 'keepScripts'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 143:16 [1] 'parseHTML'(IDENTIFIER)
>>>ADVANCE 143:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 143:27 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 143:31 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 143:33 [5] 'context'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'context'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER context
>>>ADVANCE 143:40 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 143:42 [7] 'keepScripts'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'keepScripts'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER keepScripts
>>>ADVANCE 143:54 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 144:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 144:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

144 8(CODE) method parseJSON( data )
    'method'(IDENTIFIER) 'parseJSON'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 144:16 [1] 'parseJSON'(IDENTIFIER)
>>>ADVANCE 144:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 144:27 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 144:32 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 145:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 145:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

145 8(CODE) method parseXML( data )
    'method'(IDENTIFIER) 'parseXML'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 145:16 [1] 'parseXML'(IDENTIFIER)
>>>ADVANCE 145:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 145:26 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 145:31 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 146:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 146:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

146 8(CODE) method position()
    'method'(IDENTIFIER) 'position'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 146:16 [1] 'position'(IDENTIFIER)
>>>ADVANCE 146:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 146:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 147:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 147:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

147 8(CODE) method post( url, data, callback, type )
    'method'(IDENTIFIER) 'post'(IDENTIFIER) '('(LITERAL) 'url'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'type'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 147:16 [1] 'post'(IDENTIFIER)
>>>ADVANCE 147:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 147:22 [3] 'url'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'url'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER url
>>>ADVANCE 147:25 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 147:27 [5] 'data'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 147:31 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 147:33 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 147:41 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 147:43 [9] 'type'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'type'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER type
>>>ADVANCE 147:48 [10] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 148:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 148:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

148 8(CODE) method prepend()
    'method'(IDENTIFIER) 'prepend'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 148:16 [1] 'prepend'(IDENTIFIER)
>>>ADVANCE 148:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 148:24 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 149:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 149:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

149 8(CODE) method prependTo( selector )
    'method'(IDENTIFIER) 'prependTo'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 149:16 [1] 'prependTo'(IDENTIFIER)
>>>ADVANCE 149:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 149:27 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 149:36 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 150:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 150:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

150 8(CODE) method prev( until, selector )
    'method'(IDENTIFIER) 'prev'(IDENTIFIER) '('(LITERAL) 'until'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 150:16 [1] 'prev'(IDENTIFIER)
>>>ADVANCE 150:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 150:22 [3] 'until'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'until'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER until
>>>ADVANCE 150:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 150:29 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 150:38 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 151:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 151:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

151 8(CODE) method prevAll( until, selector )
    'method'(IDENTIFIER) 'prevAll'(IDENTIFIER) '('(LITERAL) 'until'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 151:16 [1] 'prevAll'(IDENTIFIER)
>>>ADVANCE 151:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 151:25 [3] 'until'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'until'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER until
>>>ADVANCE 151:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 151:32 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 151:41 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 152:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 152:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

152 8(CODE) method prevUntil( until, selector )
    'method'(IDENTIFIER) 'prevUntil'(IDENTIFIER) '('(LITERAL) 'until'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 152:16 [1] 'prevUntil'(IDENTIFIER)
>>>ADVANCE 152:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 152:27 [3] 'until'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'until'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER until
>>>ADVANCE 152:32 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 152:34 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 152:43 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 153:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 153:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

153 8(CODE) method promise( type, obj )
    'method'(IDENTIFIER) 'promise'(IDENTIFIER) '('(LITERAL) 'type'(IDENTIFIER) ','(LITERAL) 'obj'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 153:16 [1] 'promise'(IDENTIFIER)
>>>ADVANCE 153:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 153:25 [3] 'type'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'type'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER type
>>>ADVANCE 153:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 153:31 [5] 'obj'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'obj'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER obj
>>>ADVANCE 153:35 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 154:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 154:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

154 8(CODE) method prop( elem, name, value )
    'method'(IDENTIFIER) 'prop'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'name'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 154:16 [1] 'prop'(IDENTIFIER)
>>>ADVANCE 154:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 154:22 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 154:26 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 154:28 [5] 'name'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 154:32 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 154:34 [7] 'value'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 154:40 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 155:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 155:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

155 8(CODE) method proxy( fn, context )
    'method'(IDENTIFIER) 'proxy'(IDENTIFIER) '('(LITERAL) 'fn'(IDENTIFIER) ','(LITERAL) 'context'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 155:16 [1] 'proxy'(IDENTIFIER)
>>>ADVANCE 155:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 155:23 [3] 'fn'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 155:25 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 155:27 [5] 'context'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'context'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER context
>>>ADVANCE 155:35 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 156:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 156:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

156 8(CODE) method push()
    'method'(IDENTIFIER) 'push'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 156:16 [1] 'push'(IDENTIFIER)
>>>ADVANCE 156:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 156:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 157:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 157:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

157 8(CODE) method pushStack( elems )
    'method'(IDENTIFIER) 'pushStack'(IDENTIFIER) '('(LITERAL) 'elems'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 157:16 [1] 'pushStack'(IDENTIFIER)
>>>ADVANCE 157:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 157:27 [3] 'elems'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elems'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elems
>>>ADVANCE 157:33 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 158:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 158:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

158 8(CODE) method queue( elem, type, data )
    'method'(IDENTIFIER) 'queue'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'type'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 158:16 [1] 'queue'(IDENTIFIER)
>>>ADVANCE 158:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 158:23 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 158:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 158:29 [5] 'type'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'type'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER type
>>>ADVANCE 158:33 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 158:35 [7] 'data'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 158:40 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 159:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 159:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

159 8(CODE) method ready( fn )
    'method'(IDENTIFIER) 'ready'(IDENTIFIER) '('(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 159:16 [1] 'ready'(IDENTIFIER)
>>>ADVANCE 159:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 159:23 [3] 'fn'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 159:26 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 160:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 160:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

160 8(CODE) method remove( selector, keepData )
    'method'(IDENTIFIER) 'remove'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ','(LITERAL) 'keepData'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 160:16 [1] 'remove'(IDENTIFIER)
>>>ADVANCE 160:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 160:24 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 160:32 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 160:34 [5] 'keepData'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'keepData'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER keepData
>>>ADVANCE 160:43 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 161:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 161:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

161 8(CODE) method removeAttr( elem, value )
    'method'(IDENTIFIER) 'removeAttr'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 161:16 [1] 'removeAttr'(IDENTIFIER)
>>>ADVANCE 161:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 161:28 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 161:32 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 161:34 [5] 'value'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 161:40 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 162:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 162:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

162 8(CODE) method removeClass( value )
    'method'(IDENTIFIER) 'removeClass'(IDENTIFIER) '('(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 162:16 [1] 'removeClass'(IDENTIFIER)
>>>ADVANCE 162:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 162:29 [3] 'value'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 162:35 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 163:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 163:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

163 8(CODE) method removeData( elem, name )
    'method'(IDENTIFIER) 'removeData'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'name'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 163:16 [1] 'removeData'(IDENTIFIER)
>>>ADVANCE 163:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 163:28 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 163:32 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 163:34 [5] 'name'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 163:39 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 164:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 164:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

164 8(CODE) method removeEvent( elem, type, handle )
    'method'(IDENTIFIER) 'removeEvent'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'type'(IDENTIFIER) ','(LITERAL) 'handle'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 164:16 [1] 'removeEvent'(IDENTIFIER)
>>>ADVANCE 164:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 164:29 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 164:33 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 164:35 [5] 'type'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'type'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER type
>>>ADVANCE 164:39 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 164:41 [7] 'handle'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'handle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER handle
>>>ADVANCE 164:48 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 165:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 165:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

165 8(CODE) method removeProp( name )
    'method'(IDENTIFIER) 'removeProp'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 165:16 [1] 'removeProp'(IDENTIFIER)
>>>ADVANCE 165:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 165:28 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 165:33 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 166:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 166:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

166 8(CODE) method replaceAll( selector )
    'method'(IDENTIFIER) 'replaceAll'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 166:16 [1] 'replaceAll'(IDENTIFIER)
>>>ADVANCE 166:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 166:28 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 166:37 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 167:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 167:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

167 8(CODE) method replaceWith( value )
    'method'(IDENTIFIER) 'replaceWith'(IDENTIFIER) '('(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 167:16 [1] 'replaceWith'(IDENTIFIER)
>>>ADVANCE 167:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 167:29 [3] 'value'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 167:35 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 168:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 168:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

168 8(CODE) method resize( data, fn )
    'method'(IDENTIFIER) 'resize'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 168:16 [1] 'resize'(IDENTIFIER)
>>>ADVANCE 168:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 168:24 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 168:28 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 168:30 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 168:33 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 169:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 169:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

169 8(CODE) method scroll( data, fn )
    'method'(IDENTIFIER) 'scroll'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 169:16 [1] 'scroll'(IDENTIFIER)
>>>ADVANCE 169:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 169:24 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 169:28 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 169:30 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 169:33 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 170:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 170:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

170 8(CODE) method scrollLeft( val )
    'method'(IDENTIFIER) 'scrollLeft'(IDENTIFIER) '('(LITERAL) 'val'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 170:16 [1] 'scrollLeft'(IDENTIFIER)
>>>ADVANCE 170:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 170:28 [3] 'val'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'val'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER val
>>>ADVANCE 170:32 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 171:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 171:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

171 8(CODE) method scrollTop( val )
    'method'(IDENTIFIER) 'scrollTop'(IDENTIFIER) '('(LITERAL) 'val'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 171:16 [1] 'scrollTop'(IDENTIFIER)
>>>ADVANCE 171:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 171:27 [3] 'val'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'val'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER val
>>>ADVANCE 171:31 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 172:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 172:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

172 8(CODE) method select( data, fn )
    'method'(IDENTIFIER) 'select'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 172:16 [1] 'select'(IDENTIFIER)
>>>ADVANCE 172:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 172:24 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 172:28 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 172:30 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 172:33 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 173:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 173:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

173 8(CODE) method serialize()
    'method'(IDENTIFIER) 'serialize'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 173:16 [1] 'serialize'(IDENTIFIER)
>>>ADVANCE 173:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 173:26 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 174:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 174:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

174 8(CODE) method serializeArray()
    'method'(IDENTIFIER) 'serializeArray'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 174:16 [1] 'serializeArray'(IDENTIFIER)
>>>ADVANCE 174:30 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 174:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 175:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 175:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

175 8(CODE) method show( speed, easing, callback )
    'method'(IDENTIFIER) 'show'(IDENTIFIER) '('(LITERAL) 'speed'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 175:16 [1] 'show'(IDENTIFIER)
>>>ADVANCE 175:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 175:22 [3] 'speed'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'speed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER speed
>>>ADVANCE 175:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 175:29 [5] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 175:35 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 175:37 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 175:46 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 176:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 176:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

176 8(CODE) method sibling( n, elem )
    'method'(IDENTIFIER) 'sibling'(IDENTIFIER) '('(LITERAL) 'n'(IDENTIFIER) ','(LITERAL) 'elem'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 176:16 [1] 'sibling'(IDENTIFIER)
>>>ADVANCE 176:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 176:25 [3] 'n'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'n'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER n
>>>ADVANCE 176:26 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 176:28 [5] 'elem'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 176:33 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 177:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 177:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

177 8(CODE) method siblings( until, selector )
    'method'(IDENTIFIER) 'siblings'(IDENTIFIER) '('(LITERAL) 'until'(IDENTIFIER) ','(LITERAL) 'selector'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 177:16 [1] 'siblings'(IDENTIFIER)
>>>ADVANCE 177:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 177:26 [3] 'until'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'until'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER until
>>>ADVANCE 177:31 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 177:33 [5] 'selector'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 177:42 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 178:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 178:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

178 8(CODE) method size()
    'method'(IDENTIFIER) 'size'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 178:16 [1] 'size'(IDENTIFIER)
>>>ADVANCE 178:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 178:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 179:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 179:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

179 8(CODE) method slice()
    'method'(IDENTIFIER) 'slice'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 179:16 [1] 'slice'(IDENTIFIER)
>>>ADVANCE 179:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 179:22 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 180:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 180:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

180 8(CODE) method slideDown( speed, easing, callback )
    'method'(IDENTIFIER) 'slideDown'(IDENTIFIER) '('(LITERAL) 'speed'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 180:16 [1] 'slideDown'(IDENTIFIER)
>>>ADVANCE 180:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 180:27 [3] 'speed'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'speed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER speed
>>>ADVANCE 180:32 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 180:34 [5] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 180:40 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 180:42 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 180:51 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 181:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 181:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

181 8(CODE) method slideToggle( speed, easing, callback )
    'method'(IDENTIFIER) 'slideToggle'(IDENTIFIER) '('(LITERAL) 'speed'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 181:16 [1] 'slideToggle'(IDENTIFIER)
>>>ADVANCE 181:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 181:29 [3] 'speed'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'speed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER speed
>>>ADVANCE 181:34 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 181:36 [5] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 181:42 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 181:44 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 181:53 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 182:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 182:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

182 8(CODE) method slideUp( speed, easing, callback )
    'method'(IDENTIFIER) 'slideUp'(IDENTIFIER) '('(LITERAL) 'speed'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 182:16 [1] 'slideUp'(IDENTIFIER)
>>>ADVANCE 182:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 182:25 [3] 'speed'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'speed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER speed
>>>ADVANCE 182:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 182:32 [5] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 182:38 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 182:40 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 182:49 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 183:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 183:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

183 8(CODE) method sort()
    'method'(IDENTIFIER) 'sort'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 183:16 [1] 'sort'(IDENTIFIER)
>>>ADVANCE 183:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 183:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 184:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 184:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

184 8(CODE) method speed( speed, easing, fn )
    'method'(IDENTIFIER) 'speed'(IDENTIFIER) '('(LITERAL) 'speed'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 184:16 [1] 'speed'(IDENTIFIER)
>>>ADVANCE 184:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 184:23 [3] 'speed'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'speed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER speed
>>>ADVANCE 184:28 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 184:30 [5] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 184:36 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 184:38 [7] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 184:41 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 185:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 185:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

185 8(CODE) method splice()
    'method'(IDENTIFIER) 'splice'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 185:16 [1] 'splice'(IDENTIFIER)
>>>ADVANCE 185:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 185:23 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 186:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 186:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

186 8(CODE) method stop( type, clearQueue, gotoEnd )
    'method'(IDENTIFIER) 'stop'(IDENTIFIER) '('(LITERAL) 'type'(IDENTIFIER) ','(LITERAL) 'clearQueue'(IDENTIFIER) ','(LITERAL) 'gotoEnd'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 186:16 [1] 'stop'(IDENTIFIER)
>>>ADVANCE 186:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 186:22 [3] 'type'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'type'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER type
>>>ADVANCE 186:26 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 186:28 [5] 'clearQueue'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'clearQueue'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER clearQueue
>>>ADVANCE 186:38 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 186:40 [7] 'gotoEnd'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'gotoEnd'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER gotoEnd
>>>ADVANCE 186:48 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 187:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 187:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

187 8(CODE) method style( elem, name, value, extra )
    'method'(IDENTIFIER) 'style'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'name'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ','(LITERAL) 'extra'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 187:16 [1] 'style'(IDENTIFIER)
>>>ADVANCE 187:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 187:23 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 187:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 187:29 [5] 'name'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 187:33 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 187:35 [7] 'value'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 187:40 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 187:42 [9] 'extra'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'extra'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER extra
>>>ADVANCE 187:48 [10] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 188:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 188:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

188 8(CODE) method submit( data, fn )
    'method'(IDENTIFIER) 'submit'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 188:16 [1] 'submit'(IDENTIFIER)
>>>ADVANCE 188:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 188:24 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 188:28 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 188:30 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 188:33 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 189:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 189:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

189 8(CODE) method swap( elem, options, callback, args )
    'method'(IDENTIFIER) 'swap'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'options'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'args'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 189:16 [1] 'swap'(IDENTIFIER)
>>>ADVANCE 189:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 189:22 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 189:26 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 189:28 [5] 'options'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 189:35 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 189:37 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 189:45 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 189:47 [9] 'args'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'args'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER args
>>>ADVANCE 189:52 [10] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 190:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 190:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

190 8(CODE) method text( elem )
    'method'(IDENTIFIER) 'text'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 190:16 [1] 'text'(IDENTIFIER)
>>>ADVANCE 190:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 190:22 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 190:27 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 191:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 191:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

191 8(CODE) method toArray()
    'method'(IDENTIFIER) 'toArray'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 191:16 [1] 'toArray'(IDENTIFIER)
>>>ADVANCE 191:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 191:24 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 192:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 192:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

192 8(CODE) method toggle( speed, easing, callback )
    'method'(IDENTIFIER) 'toggle'(IDENTIFIER) '('(LITERAL) 'speed'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 192:16 [1] 'toggle'(IDENTIFIER)
>>>ADVANCE 192:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 192:24 [3] 'speed'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'speed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER speed
>>>ADVANCE 192:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 192:31 [5] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 192:37 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 192:39 [7] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 192:48 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 193:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 193:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

193 8(CODE) method toggleClass( value, stateVal )
    'method'(IDENTIFIER) 'toggleClass'(IDENTIFIER) '('(LITERAL) 'value'(IDENTIFIER) ','(LITERAL) 'stateVal'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 193:16 [1] 'toggleClass'(IDENTIFIER)
>>>ADVANCE 193:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 193:29 [3] 'value'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 193:34 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 193:36 [5] 'stateVal'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'stateVal'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER stateVal
>>>ADVANCE 193:45 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 194:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 194:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

194 8(CODE) method trigger( type, data )
    'method'(IDENTIFIER) 'trigger'(IDENTIFIER) '('(LITERAL) 'type'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 194:16 [1] 'trigger'(IDENTIFIER)
>>>ADVANCE 194:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 194:25 [3] 'type'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'type'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER type
>>>ADVANCE 194:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 194:31 [5] 'data'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 194:36 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 195:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 195:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

195 8(CODE) method triggerHandler( type, data )
    'method'(IDENTIFIER) 'triggerHandler'(IDENTIFIER) '('(LITERAL) 'type'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 195:16 [1] 'triggerHandler'(IDENTIFIER)
>>>ADVANCE 195:30 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 195:32 [3] 'type'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'type'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER type
>>>ADVANCE 195:36 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 195:38 [5] 'data'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 195:43 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 196:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 196:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

196 8(CODE) method trim( text )
    'method'(IDENTIFIER) 'trim'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 196:16 [1] 'trim'(IDENTIFIER)
>>>ADVANCE 196:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 196:22 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 196:27 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 197:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 197:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

197 8(CODE) method Tween( elem, options, prop, end, easing )
    'method'(IDENTIFIER) 'Tween'(IDENTIFIER) '('(LITERAL) 'elem'(IDENTIFIER) ','(LITERAL) 'options'(IDENTIFIER) ','(LITERAL) 'prop'(IDENTIFIER) ','(LITERAL) 'end'(IDENTIFIER) ','(LITERAL) 'easing'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 197:16 [1] 'Tween'(IDENTIFIER)
>>>ADVANCE 197:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 197:23 [3] 'elem'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'elem'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER elem
>>>ADVANCE 197:27 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 197:29 [5] 'options'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 197:36 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 197:38 [7] 'prop'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'prop'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER prop
>>>ADVANCE 197:42 [8] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 197:44 [9] 'end'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'end'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER end
>>>ADVANCE 197:47 [10] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 197:49 [11] 'easing'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'easing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER easing
>>>ADVANCE 197:56 [12] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 198:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 198:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

198 8(CODE) method type( obj )
    'method'(IDENTIFIER) 'type'(IDENTIFIER) '('(LITERAL) 'obj'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 198:16 [1] 'type'(IDENTIFIER)
>>>ADVANCE 198:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 198:22 [3] 'obj'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'obj'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER obj
>>>ADVANCE 198:26 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 199:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 199:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

199 8(CODE) method unbind( types, fn )
    'method'(IDENTIFIER) 'unbind'(IDENTIFIER) '('(LITERAL) 'types'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 199:16 [1] 'unbind'(IDENTIFIER)
>>>ADVANCE 199:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 199:24 [3] 'types'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'types'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER types
>>>ADVANCE 199:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 199:31 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 199:34 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 200:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 200:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

200 8(CODE) method undelegate( selector, types, fn )
    'method'(IDENTIFIER) 'undelegate'(IDENTIFIER) '('(LITERAL) 'selector'(IDENTIFIER) ','(LITERAL) 'types'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 200:16 [1] 'undelegate'(IDENTIFIER)
>>>ADVANCE 200:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 200:28 [3] 'selector'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'selector'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER selector
>>>ADVANCE 200:36 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 200:38 [5] 'types'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'types'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER types
>>>ADVANCE 200:43 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 200:45 [7] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 200:48 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 201:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 201:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

201 8(CODE) method unique( results )
    'method'(IDENTIFIER) 'unique'(IDENTIFIER) '('(LITERAL) 'results'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 201:16 [1] 'unique'(IDENTIFIER)
>>>ADVANCE 201:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 201:24 [3] 'results'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'results'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER results
>>>ADVANCE 201:32 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 202:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 202:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

202 8(CODE) method unload( data, fn )
    'method'(IDENTIFIER) 'unload'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'fn'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 202:16 [1] 'unload'(IDENTIFIER)
>>>ADVANCE 202:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 202:24 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 202:28 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 202:30 [5] 'fn'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 202:33 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 203:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 203:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

203 8(CODE) method unwrap()
    'method'(IDENTIFIER) 'unwrap'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 203:16 [1] 'unwrap'(IDENTIFIER)
>>>ADVANCE 203:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 203:23 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 204:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 204:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

204 8(CODE) method val( value )
    'method'(IDENTIFIER) 'val'(IDENTIFIER) '('(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 204:16 [1] 'val'(IDENTIFIER)
>>>ADVANCE 204:19 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 204:21 [3] 'value'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 204:27 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 205:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 205:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

205 8(CODE) method when( subordinate  )//, ..., subordinateN 
    'method'(IDENTIFIER) 'when'(IDENTIFIER) '('(LITERAL) 'subordinate'(IDENTIFIER) ')'(LITERAL) '//, ..., subordinateN '(COMMENT)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 205:16 [1] 'when'(IDENTIFIER)
>>>ADVANCE 205:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 205:22 [3] 'subordinate'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'subordinate'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER subordinate
>>>ADVANCE 205:35 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 206:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 206:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

206 8(CODE) method width( margin, value )
    'method'(IDENTIFIER) 'width'(IDENTIFIER) '('(LITERAL) 'margin'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 206:16 [1] 'width'(IDENTIFIER)
>>>ADVANCE 206:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 206:23 [3] 'margin'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'margin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER margin
>>>ADVANCE 206:29 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 206:31 [5] 'value'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 206:37 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 207:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 207:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

207 8(CODE) method wrap( html )
    'method'(IDENTIFIER) 'wrap'(IDENTIFIER) '('(LITERAL) 'html'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 207:16 [1] 'wrap'(IDENTIFIER)
>>>ADVANCE 207:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 207:22 [3] 'html'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'html'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER html
>>>ADVANCE 207:27 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 208:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 208:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

208 8(CODE) method wrapAll( html )
    'method'(IDENTIFIER) 'wrapAll'(IDENTIFIER) '('(LITERAL) 'html'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 208:16 [1] 'wrapAll'(IDENTIFIER)
>>>ADVANCE 208:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 208:25 [3] 'html'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'html'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER html
>>>ADVANCE 208:30 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 209:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 209:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

209 8(CODE) method wrapInner( html )
    'method'(IDENTIFIER) 'wrapInner'(IDENTIFIER) '('(LITERAL) 'html'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 209:16 [1] 'wrapInner'(IDENTIFIER)
>>>ADVANCE 209:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 209:27 [3] 'html'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'html'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER html
>>>ADVANCE 209:32 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 211:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 211:5 [0] 'append'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> ClassDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'append'(IDENTIFIER)

211 4(CODE) append to namespace jQuery
    'append'(IDENTIFIER) 'to'(IDENTIFIER) 'namespace'(IDENTIFIER) 'jQuery'(IDENTIFIER)

        Statement TRY AppendToDeclaration on 'append'(IDENTIFIER)
          AppendToDeclaration matched OK: append append
>>>ADVANCE 211:12 [1] 'to'(IDENTIFIER)
          AppendToDeclaration matched OK: to to
>>>ADVANCE 211:15 [2] 'namespace'(IDENTIFIER)
          AppendToDeclaration matched OK: namespace namespace
>>>ADVANCE 211:25 [3] 'jQuery'(IDENTIFIER)
          AppendToDeclaration TRY VariableRef on 'jQuery'(IDENTIFIER)
            VariableRef matched OK: IDENTIFIER jQuery
>>>ADVANCE 212:0 [-1] ' '(NEWLINE)
          Parsed OK!-> VariableRef
          AppendToDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 212:9 [0] 'properties'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

212 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 213:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 213:13 [0] 'fn'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'fn'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fn
>>>ADVANCE 213:15 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 213:16 [2] 'jQuery'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'jQuery'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER jQuery
>>>ADVANCE 214:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 214:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

214 8(CODE) class Event
    'class'(IDENTIFIER) 'Event'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 214:15 [1] 'Event'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Event
>>>ADVANCE 215:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 215:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Event parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

215 12(CODE) constructor new Event ( src, props )
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Event'(IDENTIFIER) '('(LITERAL) 'src'(IDENTIFIER) ','(LITERAL) 'props'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 215:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 215:29 [2] 'Event'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Event
>>>ADVANCE 215:35 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 215:37 [4] 'src'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'src'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER src
>>>ADVANCE 215:40 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 215:42 [6] 'props'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'props'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER props
>>>ADVANCE 215:48 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 216:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 216:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

216 12(CODE) method isDefaultPrevented()
    'method'(IDENTIFIER) 'isDefaultPrevented'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 216:20 [1] 'isDefaultPrevented'(IDENTIFIER)
>>>ADVANCE 216:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 216:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 217:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 217:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

217 12(CODE) method isPropagationStopped()
    'method'(IDENTIFIER) 'isPropagationStopped'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 217:20 [1] 'isPropagationStopped'(IDENTIFIER)
>>>ADVANCE 217:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 217:41 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 218:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 218:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

218 12(CODE) method isImmediatePropagationStopped()
    'method'(IDENTIFIER) 'isImmediatePropagationStopped'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 218:20 [1] 'isImmediatePropagationStopped'(IDENTIFIER)
>>>ADVANCE 218:49 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 218:50 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 219:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 219:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

219 12(CODE) method preventDefault()
    'method'(IDENTIFIER) 'preventDefault'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 219:20 [1] 'preventDefault'(IDENTIFIER)
>>>ADVANCE 219:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 219:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 220:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 220:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

220 12(CODE) method stopPropagation()
    'method'(IDENTIFIER) 'stopPropagation'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 220:20 [1] 'stopPropagation'(IDENTIFIER)
>>>ADVANCE 220:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 220:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 221:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 221:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

221 12(CODE) method stopImmediatePropagation()
    'method'(IDENTIFIER) 'stopImmediatePropagation'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 221:20 [1] 'stopImmediatePropagation'(IDENTIFIER)
>>>ADVANCE 221:44 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 221:45 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 221:0 [-1] ' '(EOF)
                      MethodDeclaration TRY Body on ' '(EOF)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:-1 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:-1 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> AppendToDeclaration
      Parsed OK!-> Statement
      Module matched OK: EOF  
>>>ADVANCE 221:0 [0] ' '(EOF)
END freeFormMode [Module] blockIndent:4, get SeparatedList of [Statement] by ';' closer: EOF

     'online.md' imports './Document'
[object Object]
addToScope: 'module' to '/home/ltato/LiteScript_online_playground/playground/js/Document.interface.md Scope'
addMember: 'exports' to 'module'
addToScope: 'exports' to '/home/ltato/LiteScript_online_playground/playground/js/Document.interface.md Scope'
addMember: 'filename' to 'module'
     compile: 'Document.interface.md'
1 0(COMMENT) ## Partial DOM Interface
2 0(COMMENT) Window, Document, Element, Node, Event, XMLHttpRequest, CSSStyle
3 (BLANK)
4 4(CODE) public var window:Window
5 4(CODE) public var document:Document
6 (BLANK)
7 4(CODE)     public class Window
8 8(CODE) properties
9 12(CODE) applicationCache
10 12(CODE) closed
11 12(CODE) content
12 12(CODE) document
13 12(CODE) frameElement
14 12(CODE) frames
15 12(CODE) fullScreen
16 12(CODE) gamepadconnected
17 12(CODE) gamepaddisconnected
18 12(CODE) history
19 12(CODE) innerHeight
20 12(CODE) innerWidth
21 12(CODE) length
22 12(CODE) location: Location
23 12(CODE) locationbar
24 12(CODE) menubar
25 12(CODE) name
26 12(CODE) navigator
27 12(CODE) onafterprint
28 12(CODE) onbeforeprint
29 12(CODE) onbeforeunload
30 12(CODE) onblur
31 12(CODE) onchange
32 12(CODE) onclick
33 12(CODE) ondevicelight
34 12(CODE) ondevicemotion
35 12(CODE) ondeviceorientation
36 12(CODE) ondeviceproximity
37 12(CODE) ondragdrop
38 12(CODE) onfocus
39 12(CODE) onhashchange
40 12(CODE) onkeydown
41 12(CODE) onkeypress
42 12(CODE) onkeyup
43 12(CODE) onmousedown
44 12(CODE) onmousemove
45 12(CODE) onmouseout
46 12(CODE) onmouseover
47 12(CODE) onmouseup
48 12(CODE) onpaint
49 12(CODE) onpopstate
50 12(CODE) onreset
51 12(CODE) onresize
52 12(CODE) onscroll
53 12(CODE) onunload
54 12(CODE) opener
55 12(CODE) outerHeight
56 12(CODE) outerWidth
57 12(CODE) parent
58 12(CODE) performance
59 12(CODE) personalbar
60 12(CODE) screen
61 12(CODE) screenX
62 12(CODE) screenY
63 12(CODE) scrollbars
64 12(CODE) scrollMaxX
65 12(CODE) scrollMaxY
66 12(CODE) scrollX
67 12(CODE) scrollY
68 12(CODE) self
69 12(CODE) sidebar
70 12(CODE) status
71 12(CODE) statusbar
72 12(CODE) toolbar
73 12(CODE) top
74 12(CODE) window
75 12(CODE) XPCSafeJSObjectWrapper
76 (BLANK)
77 8(CODE) method QueryInterface()
78 8(CODE) method back()
79 8(CODE) method blur()
80 8(CODE) method btoa()
81 8(CODE) method captureEvents()
82 8(CODE) method clearImmediate()
83 8(CODE) method clearTimeout()
84 8(CODE) method close()
85 8(CODE) method confirm()
86 8(CODE) method dispatchEvent()
87 8(CODE) method dump()
88 8(CODE) method escape()
89 8(CODE) method find()
90 8(CODE) method focus()
91 8(CODE) method forward()
92 8(CODE) method getComputedStyle()
93 8(CODE) method home()
94 8(CODE) method matchMedia()
95 8(CODE) method minimize()
96 8(CODE) method moveBy()
97 8(CODE) method moveTo()
98 8(CODE) method onuserproximity()
99 8(CODE) method openDialog()
100 8(CODE) method print()
101 8(CODE) method releaseEvents()
102 8(CODE) method resizeBy()
103 8(CODE) method resizeTo()
104 8(CODE) method restore()
105 8(CODE) method scroll()
106 8(CODE) method scrollByLines()
107 8(CODE) method scrollTo()
108 8(CODE) method setCursor()
109 8(CODE) method setImmediate()
110 8(CODE) method setInterval()
111 8(CODE) method setTimeout()
112 8(CODE) method showModalDialog()
113 8(CODE) method sizeToContent()
114 8(CODE) method stop()
115 8(CODE) method unescape()
116 8(CODE) method updateCommands()
117 8(CODE) method cancelAnimationFrame()
118 8(CODE) method clearInterval()
119 8(CODE) method getAttention()
120 8(CODE) method getDefaultComputedStyle()
121 8(CODE) method getSelection()
122 8(CODE) method importDialog()
123 8(CODE) method open()
124 8(CODE) method postMessage()
125 8(CODE) method prompt()
126 8(CODE) method prompter()
127 8(CODE) method requestAnimationFrame()
128 8(CODE) method routeEvent()
129 8(CODE) method scrollBy()
130 8(CODE) method scrollByPages()
131 (BLANK)
132 4(CODE) public class Location
133 8(CODE) properties
134 12(CODE) ancestorOrigins:array
135 12(CODE) hash:string
136 12(CODE) host:string
137 12(CODE) hostname:string
138 12(CODE) href:string
139 12(CODE) origin:string
140 12(CODE) pathname:string
141 12(CODE) port:string
142 12(CODE) protocol:string
143 12(CODE) search:string
144 (BLANK)
145 8(CODE) method assign()
146 8(CODE) method reload()
147 8(CODE) method replace()
148 8(CODE) method toString()
149 8(CODE) method valueOf()
150 (BLANK)
151 (BLANK)
152 4(CODE)     public class Document extends Node
153 8(CODE) properties
154 12(CODE) location: Location
155 (BLANK)
156 8(CODE) method adoptNode()
157 8(CODE) method caretRangeFromPoint()
158 8(CODE) method createAttribute()
159 8(CODE) method createAttributeNS()
160 8(CODE) method createCDATASection()
161 8(CODE) method createComment()
162 8(CODE) method createDocumentFragment()
163 8(CODE) method createElement()
164 8(CODE) method createElementNS()
165 8(CODE) method createEvent()
166 8(CODE) method createExpression()
167 8(CODE) method createNodeIterator()
168 8(CODE) method createNSResolver()
169 8(CODE) method createProcessingInstruction()
170 8(CODE) method createRange()
171 8(CODE) method createTextNode()
172 8(CODE) method createTreeWalker()
173 8(CODE) method elementFromPoint()
174 8(CODE) method evaluate()
175 8(CODE) method execCommand()
176 8(CODE) method getCSSCanvasContext()
177 8(CODE) method getElementById(id) returns Element
178 8(CODE) method getElementsByClassName()
179 8(CODE) method getElementsByName()
180 8(CODE) method getElementsByTagName()
181 8(CODE) method getElementsByTagNameNS()
182 8(CODE) method getOverrideStyle()
183 8(CODE) method getSelection()
184 8(CODE) method importNode()
185 8(CODE) method queryCommandEnabled()
186 8(CODE) method queryCommandIndeterm()
187 8(CODE) method queryCommandState()
188 8(CODE) method queryCommandSupported()
189 8(CODE) method queryCommandValue()
190 8(CODE) method registerElement()
191 8(CODE) method webkitCancelFullScreen()
192 8(CODE) method webkitExitFullscreen()
193 8(CODE) method webkitExitPointerLock()
194 (BLANK)
195 4(CODE) public class NodeList
196 8(CODE) properties
197 12(CODE) length
198 (BLANK)
199 (BLANK)
200 4(CODE)     public class Node
201 8(CODE) constructor new Node ()
202 (BLANK)
203 8(CODE) properties
204 12(CODE) baseURI
205 12(CODE) childNodes
206 12(CODE) firstChild:Node
207 12(CODE) lastChild:Node
208 12(CODE) localName
209 12(CODE) namespaceURI
210 12(CODE) nextSibling:Node
211 12(CODE) nodeName:string
212 12(CODE) nodePrincipal
213 12(CODE) nodeType
214 12(CODE) nodeValue
215 12(CODE) ownerDocument
216 12(CODE) parentElement
217 12(CODE) parentNode:Node
218 12(CODE) prefix
219 12(CODE) previousSibling
220 12(CODE) textContent
221 (BLANK)
222 8(CODE) method appendChild()
223 8(CODE) method cloneNode()
224 8(CODE) method compareDocumentPosition()
225 8(CODE) method contains()
226 8(CODE) method hasChildNodes()
227 8(CODE) method insertBefore()
228 8(CODE) method isDefaultNamespace()
229 8(CODE) method isEqualNode()
230 8(CODE) method isSameNode()
231 8(CODE) method isSupported()
232 8(CODE) method lookupNamespaceURI()
233 8(CODE) method lookupPrefix()
234 8(CODE) method normalize()
235 8(CODE) method removeChild()
236 8(CODE) method replaceChild()
237 (BLANK)
238 (BLANK)
239 4(CODE)     public class Element extends Node
240 8(CODE) constructor new Element ()
241 (BLANK)
242 8(CODE) properties
243 (BLANK)
244 12(CODE) accessKey:string
245 12(CODE) align:string
246 12(CODE) attributes:array
247 12(CODE) baseURI:string
248 12(CODE) childElementCount:number
249 12(CODE) childNodes: array
250 12(CODE) children:array
251 12(CODE) classList:array
252 12(CODE) className:string
253 12(CODE) clientHeight:number
254 12(CODE) clientLeft:number
255 12(CODE) clientTop:number
256 12(CODE) clientWidth:number
257 12(CODE) contentEditable:string
258 12(CODE) dataset:object
259 12(CODE) dir:string
260 12(CODE) draggable:boolean
261 12(CODE) firstChild:object
262 12(CODE) firstElementChild:object
263 12(CODE) hidden:boolean
264 12(CODE) id:string
265 12(CODE) innerHTML:string
266 12(CODE) innerText:string
267 12(CODE) isContentEditable:boolean
268 12(CODE) lang:string
269 12(CODE) lastChild:object
270 12(CODE) lastElementChild:object
271 12(CODE) localName:string
272 12(CODE) namespaceURI:string
273 12(CODE) nextElementSibling:object
274 12(CODE) nextSibling:object
275 12(CODE) nodeName:string
276 12(CODE) nodeType:number
277 12(CODE) nodeValue:object
278 12(CODE) offsetHeight:number
279 12(CODE) offsetLeft:number
280 12(CODE) offsetParent:object
281 12(CODE) offsetTop:number
282 12(CODE) offsetWidth:number
283 12(CODE) onabort:object
284 12(CODE) onbeforecopy:object
285 12(CODE) onbeforecut:object
286 12(CODE) onbeforepaste:object
287 12(CODE) onblur:object
288 12(CODE) oncancel:object
289 12(CODE) oncanplay:object
290 12(CODE) oncanplaythrough:object
291 12(CODE) onchange:object
292 12(CODE) onclick:object
293 12(CODE) onclose:object
294 12(CODE) oncontextmenu:object
295 12(CODE) oncopy:object
296 12(CODE) oncuechange:object
297 12(CODE) oncut:object
298 12(CODE) ondblclick:object
299 12(CODE) ondrag:object
300 12(CODE) ondragend:object
301 12(CODE) ondragenter:object
302 12(CODE) ondragleave:object
303 12(CODE) ondragover:object
304 12(CODE) ondragstart:object
305 12(CODE) ondrop:object
306 12(CODE) ondurationchange:object
307 12(CODE) onemptied:object
308 12(CODE) onended:object
309 12(CODE) onerror:object
310 12(CODE) onfocus:object
311 12(CODE) oninput:object
312 12(CODE) oninvalid:object
313 12(CODE) onkeydown:object
314 12(CODE) onkeypress:object
315 12(CODE) onkeyup:object
316 12(CODE) onload:object
317 12(CODE) onloadeddata:object
318 12(CODE) onloadedmetadata:object
319 12(CODE) onloadstart:object
320 12(CODE) onmousedown:object
321 12(CODE) onmouseenter:object
322 12(CODE) onmouseleave:object
323 12(CODE) onmousemove:object
324 12(CODE) onmouseout:object
325 12(CODE) onmouseover:object
326 12(CODE) onmouseup:object
327 12(CODE) onmousewheel:object
328 12(CODE) onpaste:object
329 12(CODE) onpause:object
330 12(CODE) onplay:object
331 12(CODE) onplaying:object
332 12(CODE) onprogress:object
333 12(CODE) onratechange:object
334 12(CODE) onreset:object
335 12(CODE) onscroll:object
336 12(CODE) onsearch:object
337 12(CODE) onseeked:object
338 12(CODE) onseeking:object
339 12(CODE) onselect:object
340 12(CODE) onselectstart:object
341 12(CODE) onshow:object
342 12(CODE) onstalled:object
343 12(CODE) onsubmit:object
344 12(CODE) onsuspend:object
345 12(CODE) ontimeupdate:object
346 12(CODE) onvolumechange:object
347 12(CODE) onwaiting:object
348 12(CODE) onwebkitfullscreenchange:object
349 12(CODE) onwebkitfullscreenerror:object
350 12(CODE) onwheel:object
351 12(CODE) outerHTML:string
352 12(CODE) outerText:string
353 12(CODE) ownerDocument:Document
354 12(CODE) parentElement:object
355 12(CODE) parentNode:object
356 12(CODE) prefix:object
357 12(CODE) previousElementSibling:object
358 12(CODE) previousSibling:object
359 12(CODE) scrollHeight:number
360 12(CODE) scrollLeft:number
361 12(CODE) scrollTop:number
362 12(CODE) scrollWidth:number
363 12(CODE) spellcheck:boolean
364 12(CODE) style:CSSStyle
365 12(CODE) tabIndex:number
366 12(CODE) tagName:string
367 12(CODE) textContent:string
368 12(CODE) title:string
369 12(CODE) translate:boolean
370 12(CODE) value
371 12(CODE) webkitdropzone:string
372 12(CODE) webkitPseudo:string
373 12(CODE) webkitShadowRoot:object
374 (BLANK)
375 8(CODE) method blur()
376 8(CODE) method focus()
377 8(CODE) method getAttribute()
378 8(CODE) method getAttributeNode()
379 8(CODE) method getAttributeNodeNS()
380 8(CODE) method getAttributeNS()
381 8(CODE) method getBoundingClientRect()
382 8(CODE) method getClientRects()
383 8(CODE) method getElementsByClassName()
384 8(CODE) method getElementsByTagName()
385 8(CODE) method getElementsByTagNameNS()
386 8(CODE) method hasAttribute()
387 8(CODE) method hasAttributeNS()
388 8(CODE) method hasAttributes()
389 8(CODE) method insertAdjacentHTML()
390 8(CODE) method querySelector()
391 8(CODE) method querySelectorAll()
392 8(CODE) method remove()
393 8(CODE) method removeAttribute()
394 8(CODE) method removeAttributeNode()
395 8(CODE) method removeAttributeNS()
396 8(CODE) method scrollByLines()
397 8(CODE) method scrollByPages()
398 8(CODE) method scrollIntoView()
399 8(CODE) method scrollIntoViewIfNeeded()
400 8(CODE) method setAttribute()
401 8(CODE) method setAttributeNode()
402 8(CODE) method setAttributeNodeNS()
403 8(CODE) method setAttributeNS()
404 8(CODE) method webkitCreateShadowRoot()
405 8(CODE) method webkitMatchesSelector()
406 8(CODE) method webkitRequestFullScreen()
407 8(CODE) method webkitRequestPointerLock()
408 (BLANK)
409 (BLANK)
410 4(CODE)     public class XMLHttpRequest
411 (BLANK)
412 8(CODE) constructor new XMLHttpRequest ()
413 (BLANK)
414 8(CODE) properties
415 (BLANK)
416 12(CODE) onload:function
417 12(CODE) onerror:function
418 12(CODE) ontimeout:function
419 (BLANK)
420 12(CODE) readyState:number
421 (BLANK)
422 12(CODE) response:object
423 12(CODE) responseText:string
424 12(CODE) responseType:string
425 12(CODE) responseXML:string
426 (BLANK)
427 12(CODE) status:number
428 12(CODE) statusText:string
429 (BLANK)
430 12(CODE) timeout:number
431 12(CODE) upload:object
432 12(CODE) withCredentials:boolean
433 (BLANK)
434 (BLANK)
435 12(CODE) UNSENT:number
436 12(CODE) OPENED:number
437 12(CODE) HEADERS_RECEIVED:number
438 12(CODE) LOADING:number
439 12(CODE) DONE:number
440 (BLANK)
441 (BLANK)
442 8(CODE) method abort()
443 8(CODE) method getAllResponseHeaders()
444 8(CODE) method getResponseHeader()
445 8(CODE) method open()
446 8(CODE) method overrideMimeType()
447 8(CODE) method send()
448 8(CODE) method setRequestHeader()
449 (BLANK)
450 (BLANK)
451 (BLANK)
452 4(CODE)     public class Event
453 8(CODE) constructor new Event ()
454 (BLANK)
455 8(CODE) properties
456 12(CODE) bubbles:boolean
457 12(CODE) cancelBubble:boolean
458 12(CODE) cancelable:boolean
459 12(CODE) currentTarget
460 12(CODE) defaultPrevented
461 12(CODE) eventPhase
462 12(CODE) explicitOriginalTarget
463 12(CODE) originalTarget
464 12(CODE) target
465 12(CODE) timeStamp
466 12(CODE) type:string
467 12(CODE) isTrusted
468 (BLANK)
469 8(CODE) method initEvent()
470 8(CODE) method preventDefault()
471 8(CODE) method stopImmediatePropagation()
472 8(CODE) method stopPropagation()
473 (BLANK)
474 (BLANK)
475 4(CODE)     public class CSSStyle
476 8(CODE) properties
477 12(CODE) alignContent:string
478 12(CODE) alignItems:string
479 12(CODE) alignmentBaseline:string
480 12(CODE) alignSelf:string
481 12(CODE) background:string
482 12(CODE) backgroundAttachment:string
483 12(CODE) backgroundClip:string
484 12(CODE) backgroundColor:string
485 12(CODE) backgroundImage:string
486 12(CODE) backgroundOrigin:string
487 12(CODE) backgroundPosition:string
488 12(CODE) backgroundPositionX:string
489 12(CODE) backgroundPositionY:string
490 12(CODE) backgroundRepeat:string
491 12(CODE) backgroundRepeatX:string
492 12(CODE) backgroundRepeatY:string
493 12(CODE) backgroundSize:string
494 12(CODE) baselineShift:string
495 12(CODE) border:string
496 12(CODE) borderBottom:string
497 12(CODE) borderBottomColor:string
498 12(CODE) borderBottomLeftRadius:string
499 12(CODE) borderBottomRightRadius:string
500 12(CODE) borderBottomStyle:string
501 12(CODE) borderBottomWidth:string
502 12(CODE) borderCollapse:string
503 12(CODE) borderColor:string
504 12(CODE) borderImage:string
505 12(CODE) borderImageOutset:string
506 12(CODE) borderImageRepeat:string
507 12(CODE) borderImageSlice:string
508 12(CODE) borderImageSource:string
509 12(CODE) borderImageWidth:string
510 12(CODE) borderLeft:string
511 12(CODE) borderLeftColor:string
512 12(CODE) borderLeftStyle:string
513 12(CODE) borderLeftWidth:string
514 12(CODE) borderRadius:string
515 12(CODE) borderRight:string
516 12(CODE) borderRightColor:string
517 12(CODE) borderRightStyle:string
518 12(CODE) borderRightWidth:string
519 12(CODE) borderSpacing:string
520 12(CODE) borderStyle:string
521 12(CODE) borderTop:string
522 12(CODE) borderTopColor:string
523 12(CODE) borderTopLeftRadius:string
524 12(CODE) borderTopRightRadius:string
525 12(CODE) borderTopStyle:string
526 12(CODE) borderTopWidth:string
527 12(CODE) borderWidth:string
528 12(CODE) bottom:string
529 12(CODE) boxShadow:string
530 12(CODE) boxSizing:string
531 12(CODE) bufferedRendering:string
532 12(CODE) captionSide:string
533 12(CODE) clear:string
534 12(CODE) clip:string
535 12(CODE) clipPath:string
536 12(CODE) clipRule:string
537 12(CODE) color:string
538 12(CODE) colorInterpolation:string
539 12(CODE) colorInterpolationFilters:string
540 12(CODE) colorProfile:string
541 12(CODE) colorRendering:string
542 12(CODE) content:string
543 12(CODE) counterIncrement:string
544 12(CODE) counterReset:string
545 12(CODE) cssText:string
546 12(CODE) cursor:string
547 12(CODE) direction:string
548 12(CODE) display:string
549 12(CODE) dominantBaseline:string
550 12(CODE) emptyCells:string
551 12(CODE) enableBackground:string
552 12(CODE) fill:string
553 12(CODE) fillOpacity:string
554 12(CODE) fillRule:string
555 12(CODE) filter:string
556 12(CODE) flex:string
557 12(CODE) flexBasis:string
558 12(CODE) flexDirection:string
559 12(CODE) flexFlow:string
560 12(CODE) flexGrow:string
561 12(CODE) flexShrink:string
562 12(CODE) flexWrap:string
563 12(CODE) float:string
564 12(CODE) floodColor:string
565 12(CODE) floodOpacity:string
566 12(CODE) font:string
567 12(CODE) fontFamily:string
568 12(CODE) fontKerning:string
569 12(CODE) fontSize:string
570 12(CODE) fontStretch:string
571 12(CODE) fontStyle:string
572 12(CODE) fontVariant:string
573 12(CODE) fontWeight:string
574 12(CODE) glyphOrientationHorizontal:string
575 12(CODE) glyphOrientationVertical:string
576 12(CODE) height:string
577 12(CODE) imageRendering:string
578 12(CODE) justifyContent:string
579 12(CODE) kerning:string
580 12(CODE) left:string
581 12(CODE) length:number
582 12(CODE) letterSpacing:string
583 12(CODE) lightingColor:string
584 12(CODE) lineHeight:string
585 12(CODE) listStyle:string
586 12(CODE) listStyleImage:string
587 12(CODE) listStylePosition:string
588 12(CODE) listStyleType:string
589 12(CODE) margin:string
590 12(CODE) marginBottom:string
591 12(CODE) marginLeft:string
592 12(CODE) marginRight:string
593 12(CODE) marginTop:string
594 12(CODE) marker:string
595 12(CODE) markerEnd:string
596 12(CODE) markerMid:string
597 12(CODE) markerStart:string
598 12(CODE) mask:string
599 12(CODE) maskType:string
600 12(CODE) maxHeight:string
601 12(CODE) maxWidth:string
602 12(CODE) maxZoom:string
603 12(CODE) minHeight:string
604 12(CODE) minWidth:string
605 12(CODE) minZoom:string
606 12(CODE) objectFit:string
607 12(CODE) objectPosition:string
608 12(CODE) opacity:string
609 12(CODE) order:string
610 12(CODE) orientation:string
611 12(CODE) orphans:string
612 12(CODE) outline:string
613 12(CODE) outlineColor:string
614 12(CODE) outlineOffset:string
615 12(CODE) outlineStyle:string
616 12(CODE) outlineWidth:string
617 12(CODE) overflow:string
618 12(CODE) overflowWrap:string
619 12(CODE) overflowX:string
620 12(CODE) overflowY:string
621 12(CODE) padding:string
622 12(CODE) paddingBottom:string
623 12(CODE) paddingLeft:string
624 12(CODE) paddingRight:string
625 12(CODE) paddingTop:string
626 12(CODE) page:string
627 12(CODE) pageBreakAfter:string
628 12(CODE) pageBreakBefore:string
629 12(CODE) pageBreakInside:string
630 12(CODE) parentRule:object
631 12(CODE) pointerEvents:string
632 12(CODE) position:string
633 12(CODE) quotes:string
634 12(CODE) resize:string
635 12(CODE) right:string
636 12(CODE) shapeRendering:string
637 12(CODE) size:string
638 12(CODE) speak:string
639 12(CODE) src:string
640 12(CODE) stopColor:string
641 12(CODE) stopOpacity:string
642 12(CODE) stroke:string
643 12(CODE) strokeDasharray:string
644 12(CODE) strokeDashoffset:string
645 12(CODE) strokeLinecap:string
646 12(CODE) strokeLinejoin:string
647 12(CODE) strokeMiterlimit:string
648 12(CODE) strokeOpacity:string
649 12(CODE) strokeWidth:string
650 12(CODE) tableLayout:string
651 12(CODE) tabSize:string
652 12(CODE) textAlign:string
653 12(CODE) textAnchor:string
654 12(CODE) textDecoration:string
655 12(CODE) textIndent:string
656 12(CODE) textLineThroughColor:string
657 12(CODE) textLineThroughMode:string
658 12(CODE) textLineThroughStyle:string
659 12(CODE) textLineThroughWidth:string
660 12(CODE) textOverflow:string
661 12(CODE) textOverlineColor:string
662 12(CODE) textOverlineMode:string
663 12(CODE) textOverlineStyle:string
664 12(CODE) textOverlineWidth:string
665 12(CODE) textRendering:string
666 12(CODE) textShadow:string
667 12(CODE) textTransform:string
668 12(CODE) textUnderlineColor:string
669 12(CODE) textUnderlineMode:string
670 12(CODE) textUnderlineStyle:string
671 12(CODE) textUnderlineWidth:string
672 12(CODE) top:string
673 12(CODE) touchActionDelay:string
674 12(CODE) transition:string
675 12(CODE) transitionDelay:string
676 12(CODE) transitionDuration:string
677 12(CODE) transitionProperty:string
678 12(CODE) transitionTimingFunction:string
679 12(CODE) unicodeBidi:string
680 12(CODE) unicodeRange:string
681 12(CODE) userZoom:string
682 12(CODE) vectorEffect:string
683 12(CODE) verticalAlign:string
684 12(CODE) visibility:string
685 12(CODE) webkitAnimation:string
686 12(CODE) webkitAnimationDelay:string
687 12(CODE) webkitAnimationDirection:string
688 12(CODE) webkitAnimationDuration:string
689 12(CODE) webkitAnimationFillMode:string
690 12(CODE) webkitAnimationIterationCount:string
691 12(CODE) webkitAnimationName:string
692 12(CODE) webkitAnimationPlayState:string
693 12(CODE) webkitAnimationTimingFunction:string
694 12(CODE) webkitAppearance:string
695 12(CODE) webkitAppRegion:string
696 12(CODE) webkitAspectRatio:string
697 12(CODE) webkitBackfaceVisibility:string
698 12(CODE) webkitBackgroundClip:string
699 12(CODE) webkitBackgroundComposite:string
700 12(CODE) webkitBackgroundOrigin:string
701 12(CODE) webkitBackgroundSize:string
702 12(CODE) webkitBorderAfter:string
703 12(CODE) webkitBorderAfterColor:string
704 12(CODE) webkitBorderAfterStyle:string
705 12(CODE) webkitBorderAfterWidth:string
706 12(CODE) webkitBorderBefore:string
707 12(CODE) webkitBorderBeforeColor:string
708 12(CODE) webkitBorderBeforeStyle:string
709 12(CODE) webkitBorderBeforeWidth:string
710 12(CODE) webkitBorderEnd:string
711 12(CODE) webkitBorderEndColor:string
712 12(CODE) webkitBorderEndStyle:string
713 12(CODE) webkitBorderEndWidth:string
714 12(CODE) webkitBorderFit:string
715 12(CODE) webkitBorderHorizontalSpacing:string
716 12(CODE) webkitBorderImage:string
717 12(CODE) webkitBorderRadius:string
718 12(CODE) webkitBorderStart:string
719 12(CODE) webkitBorderStartColor:string
720 12(CODE) webkitBorderStartStyle:string
721 12(CODE) webkitBorderStartWidth:string
722 12(CODE) webkitBorderVerticalSpacing:string
723 12(CODE) webkitBoxAlign:string
724 12(CODE) webkitBoxDecorationBreak:string
725 12(CODE) webkitBoxDirection:string
726 12(CODE) webkitBoxFlex:string
727 12(CODE) webkitBoxFlexGroup:string
728 12(CODE) webkitBoxLines:string
729 12(CODE) webkitBoxOrdinalGroup:string
730 12(CODE) webkitBoxOrient:string
731 12(CODE) webkitBoxPack:string
732 12(CODE) webkitBoxReflect:string
733 12(CODE) webkitBoxShadow:string
734 12(CODE) webkitClipPath:string
735 12(CODE) webkitColumnAxis:string
736 12(CODE) webkitColumnBreakAfter:string
737 12(CODE) webkitColumnBreakBefore:string
738 12(CODE) webkitColumnBreakInside:string
739 12(CODE) webkitColumnCount:string
740 12(CODE) webkitColumnGap:string
741 12(CODE) webkitColumnProgression:string
742 12(CODE) webkitColumnRule:string
743 12(CODE) webkitColumnRuleColor:string
744 12(CODE) webkitColumnRuleStyle:string
745 12(CODE) webkitColumnRuleWidth:string
746 12(CODE) webkitColumns:string
747 12(CODE) webkitColumnSpan:string
748 12(CODE) webkitColumnWidth:string
749 12(CODE) webkitFilter:string
750 12(CODE) webkitFontFeatureSettings:string
751 12(CODE) webkitFontSizeDelta:string
752 12(CODE) webkitFontSmoothing:string
753 12(CODE) webkitFontVariantLigatures:string
754 12(CODE) webkitHighlight:string
755 12(CODE) webkitHyphenateCharacter:string
756 12(CODE) webkitLineAlign:string
757 12(CODE) webkitLineBoxContain:string
758 12(CODE) webkitLineBreak:string
759 12(CODE) webkitLineClamp:string
760 12(CODE) webkitLineGrid:string
761 12(CODE) webkitLineSnap:string
762 12(CODE) webkitLocale:string
763 12(CODE) webkitLogicalHeight:string
764 12(CODE) webkitLogicalWidth:string
765 12(CODE) webkitMarginAfter:string
766 12(CODE) webkitMarginAfterCollapse:string
767 12(CODE) webkitMarginBefore:string
768 12(CODE) webkitMarginBeforeCollapse:string
769 12(CODE) webkitMarginBottomCollapse:string
770 12(CODE) webkitMarginCollapse:string
771 12(CODE) webkitMarginEnd:string
772 12(CODE) webkitMarginStart:string
773 12(CODE) webkitMarginTopCollapse:string
774 12(CODE) webkitMask:string
775 12(CODE) webkitMaskBoxImage:string
776 12(CODE) webkitMaskBoxImageOutset:string
777 12(CODE) webkitMaskBoxImageRepeat:string
778 12(CODE) webkitMaskBoxImageSlice:string
779 12(CODE) webkitMaskBoxImageSource:string
780 12(CODE) webkitMaskBoxImageWidth:string
781 12(CODE) webkitMaskClip:string
782 12(CODE) webkitMaskComposite:string
783 12(CODE) webkitMaskImage:string
784 12(CODE) webkitMaskOrigin:string
785 12(CODE) webkitMaskPosition:string
786 12(CODE) webkitMaskPositionX:string
787 12(CODE) webkitMaskPositionY:string
788 12(CODE) webkitMaskRepeat:string
789 12(CODE) webkitMaskRepeatX:string
790 12(CODE) webkitMaskRepeatY:string
791 12(CODE) webkitMaskSize:string
792 12(CODE) webkitMaxLogicalHeight:string
793 12(CODE) webkitMaxLogicalWidth:string
794 12(CODE) webkitMinLogicalHeight:string
795 12(CODE) webkitMinLogicalWidth:string
796 12(CODE) webkitPaddingAfter:string
797 12(CODE) webkitPaddingBefore:string
798 12(CODE) webkitPaddingEnd:string
799 12(CODE) webkitPaddingStart:string
800 12(CODE) webkitPerspective:string
801 12(CODE) webkitPerspectiveOrigin:string
802 12(CODE) webkitPerspectiveOriginX:string
803 12(CODE) webkitPerspectiveOriginY:string
804 12(CODE) webkitPrintColorAdjust:string
805 12(CODE) webkitRtlOrdering:string
806 12(CODE) webkitRubyPosition:string
807 12(CODE) webkitTapHighlightColor:string
808 12(CODE) webkitTextCombine:string
809 12(CODE) webkitTextDecorationsInEffect:string
810 12(CODE) webkitTextEmphasis:string
811 12(CODE) webkitTextEmphasisColor:string
812 12(CODE) webkitTextEmphasisPosition:string
813 12(CODE) webkitTextEmphasisStyle:string
814 12(CODE) webkitTextFillColor:string
815 12(CODE) webkitTextOrientation:string
816 12(CODE) webkitTextSecurity:string
817 12(CODE) webkitTextStroke:string
818 12(CODE) webkitTextStrokeColor:string
819 12(CODE) webkitTextStrokeWidth:string
820 12(CODE) webkitTransform:string
821 12(CODE) webkitTransformOrigin:string
822 12(CODE) webkitTransformOriginX:string
823 12(CODE) webkitTransformOriginY:string
824 12(CODE) webkitTransformOriginZ:string
825 12(CODE) webkitTransformStyle:string
826 12(CODE) webkitTransition:string
827 12(CODE) webkitTransitionDelay:string
828 12(CODE) webkitTransitionDuration:string
829 12(CODE) webkitTransitionProperty:string
830 12(CODE) webkitTransitionTimingFunction:string
831 12(CODE) webkitUserDrag:string
832 12(CODE) webkitUserModify:string
833 12(CODE) webkitUserSelect:string
834 12(CODE) webkitWritingMode:string
835 12(CODE) whiteSpace:string
836 12(CODE) widows:string
837 12(CODE) width:string
838 12(CODE) wordBreak:string
839 12(CODE) wordSpacing:string
840 12(CODE) wordWrap:string
841 12(CODE) writingMode:string
842 12(CODE) zIndex:string
843 12(CODE) zoom:string
844 (BLANK)
845 (BLANK)
---- TOKENIZE
1 0(COMMENT) ## Partial DOM Interface
2 0(COMMENT) Window, Document, Element, Node, Event, XMLHttpRequest, CSSStyle
3 (BLANK)
4 4(CODE) public var window:Window
5 4(CODE) public var document:Document
6 (BLANK)
7 4(CODE)     public class Window
8 8(CODE) properties
9 12(CODE) applicationCache
10 12(CODE) closed
11 12(CODE) content
12 12(CODE) document
13 12(CODE) frameElement
14 12(CODE) frames
15 12(CODE) fullScreen
16 12(CODE) gamepadconnected
17 12(CODE) gamepaddisconnected
18 12(CODE) history
19 12(CODE) innerHeight
20 12(CODE) innerWidth
21 12(CODE) length
22 12(CODE) location: Location
23 12(CODE) locationbar
24 12(CODE) menubar
25 12(CODE) name
26 12(CODE) navigator
27 12(CODE) onafterprint
28 12(CODE) onbeforeprint
29 12(CODE) onbeforeunload
30 12(CODE) onblur
31 12(CODE) onchange
32 12(CODE) onclick
33 12(CODE) ondevicelight
34 12(CODE) ondevicemotion
35 12(CODE) ondeviceorientation
36 12(CODE) ondeviceproximity
37 12(CODE) ondragdrop
38 12(CODE) onfocus
39 12(CODE) onhashchange
40 12(CODE) onkeydown
41 12(CODE) onkeypress
42 12(CODE) onkeyup
43 12(CODE) onmousedown
44 12(CODE) onmousemove
45 12(CODE) onmouseout
46 12(CODE) onmouseover
47 12(CODE) onmouseup
48 12(CODE) onpaint
49 12(CODE) onpopstate
50 12(CODE) onreset
51 12(CODE) onresize
52 12(CODE) onscroll
53 12(CODE) onunload
54 12(CODE) opener
55 12(CODE) outerHeight
56 12(CODE) outerWidth
57 12(CODE) parent
58 12(CODE) performance
59 12(CODE) personalbar
60 12(CODE) screen
61 12(CODE) screenX
62 12(CODE) screenY
63 12(CODE) scrollbars
64 12(CODE) scrollMaxX
65 12(CODE) scrollMaxY
66 12(CODE) scrollX
67 12(CODE) scrollY
68 12(CODE) self
69 12(CODE) sidebar
70 12(CODE) status
71 12(CODE) statusbar
72 12(CODE) toolbar
73 12(CODE) top
74 12(CODE) window
75 12(CODE) XPCSafeJSObjectWrapper
76 (BLANK)
77 8(CODE) method QueryInterface()
78 8(CODE) method back()
79 8(CODE) method blur()
80 8(CODE) method btoa()
81 8(CODE) method captureEvents()
82 8(CODE) method clearImmediate()
83 8(CODE) method clearTimeout()
84 8(CODE) method close()
85 8(CODE) method confirm()
86 8(CODE) method dispatchEvent()
87 8(CODE) method dump()
88 8(CODE) method escape()
89 8(CODE) method find()
90 8(CODE) method focus()
91 8(CODE) method forward()
92 8(CODE) method getComputedStyle()
93 8(CODE) method home()
94 8(CODE) method matchMedia()
95 8(CODE) method minimize()
96 8(CODE) method moveBy()
97 8(CODE) method moveTo()
98 8(CODE) method onuserproximity()
99 8(CODE) method openDialog()
100 8(CODE) method print()
101 8(CODE) method releaseEvents()
102 8(CODE) method resizeBy()
103 8(CODE) method resizeTo()
104 8(CODE) method restore()
105 8(CODE) method scroll()
106 8(CODE) method scrollByLines()
107 8(CODE) method scrollTo()
108 8(CODE) method setCursor()
109 8(CODE) method setImmediate()
110 8(CODE) method setInterval()
111 8(CODE) method setTimeout()
112 8(CODE) method showModalDialog()
113 8(CODE) method sizeToContent()
114 8(CODE) method stop()
115 8(CODE) method unescape()
116 8(CODE) method updateCommands()
117 8(CODE) method cancelAnimationFrame()
118 8(CODE) method clearInterval()
119 8(CODE) method getAttention()
120 8(CODE) method getDefaultComputedStyle()
121 8(CODE) method getSelection()
122 8(CODE) method importDialog()
123 8(CODE) method open()
124 8(CODE) method postMessage()
125 8(CODE) method prompt()
126 8(CODE) method prompter()
127 8(CODE) method requestAnimationFrame()
128 8(CODE) method routeEvent()
129 8(CODE) method scrollBy()
130 8(CODE) method scrollByPages()
131 (BLANK)
132 4(CODE) public class Location
133 8(CODE) properties
134 12(CODE) ancestorOrigins:array
135 12(CODE) hash:string
136 12(CODE) host:string
137 12(CODE) hostname:string
138 12(CODE) href:string
139 12(CODE) origin:string
140 12(CODE) pathname:string
141 12(CODE) port:string
142 12(CODE) protocol:string
143 12(CODE) search:string
144 (BLANK)
145 8(CODE) method assign()
146 8(CODE) method reload()
147 8(CODE) method replace()
148 8(CODE) method toString()
149 8(CODE) method valueOf()
150 (BLANK)
151 (BLANK)
152 4(CODE)     public class Document extends Node
153 8(CODE) properties
154 12(CODE) location: Location
155 (BLANK)
156 8(CODE) method adoptNode()
157 8(CODE) method caretRangeFromPoint()
158 8(CODE) method createAttribute()
159 8(CODE) method createAttributeNS()
160 8(CODE) method createCDATASection()
161 8(CODE) method createComment()
162 8(CODE) method createDocumentFragment()
163 8(CODE) method createElement()
164 8(CODE) method createElementNS()
165 8(CODE) method createEvent()
166 8(CODE) method createExpression()
167 8(CODE) method createNodeIterator()
168 8(CODE) method createNSResolver()
169 8(CODE) method createProcessingInstruction()
170 8(CODE) method createRange()
171 8(CODE) method createTextNode()
172 8(CODE) method createTreeWalker()
173 8(CODE) method elementFromPoint()
174 8(CODE) method evaluate()
175 8(CODE) method execCommand()
176 8(CODE) method getCSSCanvasContext()
177 8(CODE) method getElementById(id) returns Element
178 8(CODE) method getElementsByClassName()
179 8(CODE) method getElementsByName()
180 8(CODE) method getElementsByTagName()
181 8(CODE) method getElementsByTagNameNS()
182 8(CODE) method getOverrideStyle()
183 8(CODE) method getSelection()
184 8(CODE) method importNode()
185 8(CODE) method queryCommandEnabled()
186 8(CODE) method queryCommandIndeterm()
187 8(CODE) method queryCommandState()
188 8(CODE) method queryCommandSupported()
189 8(CODE) method queryCommandValue()
190 8(CODE) method registerElement()
191 8(CODE) method webkitCancelFullScreen()
192 8(CODE) method webkitExitFullscreen()
193 8(CODE) method webkitExitPointerLock()
194 (BLANK)
195 4(CODE) public class NodeList
196 8(CODE) properties
197 12(CODE) length
198 (BLANK)
199 (BLANK)
200 4(CODE)     public class Node
201 8(CODE) constructor new Node ()
202 (BLANK)
203 8(CODE) properties
204 12(CODE) baseURI
205 12(CODE) childNodes
206 12(CODE) firstChild:Node
207 12(CODE) lastChild:Node
208 12(CODE) localName
209 12(CODE) namespaceURI
210 12(CODE) nextSibling:Node
211 12(CODE) nodeName:string
212 12(CODE) nodePrincipal
213 12(CODE) nodeType
214 12(CODE) nodeValue
215 12(CODE) ownerDocument
216 12(CODE) parentElement
217 12(CODE) parentNode:Node
218 12(CODE) prefix
219 12(CODE) previousSibling
220 12(CODE) textContent
221 (BLANK)
222 8(CODE) method appendChild()
223 8(CODE) method cloneNode()
224 8(CODE) method compareDocumentPosition()
225 8(CODE) method contains()
226 8(CODE) method hasChildNodes()
227 8(CODE) method insertBefore()
228 8(CODE) method isDefaultNamespace()
229 8(CODE) method isEqualNode()
230 8(CODE) method isSameNode()
231 8(CODE) method isSupported()
232 8(CODE) method lookupNamespaceURI()
233 8(CODE) method lookupPrefix()
234 8(CODE) method normalize()
235 8(CODE) method removeChild()
236 8(CODE) method replaceChild()
237 (BLANK)
238 (BLANK)
239 4(CODE)     public class Element extends Node
240 8(CODE) constructor new Element ()
241 (BLANK)
242 8(CODE) properties
243 (BLANK)
244 12(CODE) accessKey:string
245 12(CODE) align:string
246 12(CODE) attributes:array
247 12(CODE) baseURI:string
248 12(CODE) childElementCount:number
249 12(CODE) childNodes: array
250 12(CODE) children:array
251 12(CODE) classList:array
252 12(CODE) className:string
253 12(CODE) clientHeight:number
254 12(CODE) clientLeft:number
255 12(CODE) clientTop:number
256 12(CODE) clientWidth:number
257 12(CODE) contentEditable:string
258 12(CODE) dataset:object
259 12(CODE) dir:string
260 12(CODE) draggable:boolean
261 12(CODE) firstChild:object
262 12(CODE) firstElementChild:object
263 12(CODE) hidden:boolean
264 12(CODE) id:string
265 12(CODE) innerHTML:string
266 12(CODE) innerText:string
267 12(CODE) isContentEditable:boolean
268 12(CODE) lang:string
269 12(CODE) lastChild:object
270 12(CODE) lastElementChild:object
271 12(CODE) localName:string
272 12(CODE) namespaceURI:string
273 12(CODE) nextElementSibling:object
274 12(CODE) nextSibling:object
275 12(CODE) nodeName:string
276 12(CODE) nodeType:number
277 12(CODE) nodeValue:object
278 12(CODE) offsetHeight:number
279 12(CODE) offsetLeft:number
280 12(CODE) offsetParent:object
281 12(CODE) offsetTop:number
282 12(CODE) offsetWidth:number
283 12(CODE) onabort:object
284 12(CODE) onbeforecopy:object
285 12(CODE) onbeforecut:object
286 12(CODE) onbeforepaste:object
287 12(CODE) onblur:object
288 12(CODE) oncancel:object
289 12(CODE) oncanplay:object
290 12(CODE) oncanplaythrough:object
291 12(CODE) onchange:object
292 12(CODE) onclick:object
293 12(CODE) onclose:object
294 12(CODE) oncontextmenu:object
295 12(CODE) oncopy:object
296 12(CODE) oncuechange:object
297 12(CODE) oncut:object
298 12(CODE) ondblclick:object
299 12(CODE) ondrag:object
300 12(CODE) ondragend:object
301 12(CODE) ondragenter:object
302 12(CODE) ondragleave:object
303 12(CODE) ondragover:object
304 12(CODE) ondragstart:object
305 12(CODE) ondrop:object
306 12(CODE) ondurationchange:object
307 12(CODE) onemptied:object
308 12(CODE) onended:object
309 12(CODE) onerror:object
310 12(CODE) onfocus:object
311 12(CODE) oninput:object
312 12(CODE) oninvalid:object
313 12(CODE) onkeydown:object
314 12(CODE) onkeypress:object
315 12(CODE) onkeyup:object
316 12(CODE) onload:object
317 12(CODE) onloadeddata:object
318 12(CODE) onloadedmetadata:object
319 12(CODE) onloadstart:object
320 12(CODE) onmousedown:object
321 12(CODE) onmouseenter:object
322 12(CODE) onmouseleave:object
323 12(CODE) onmousemove:object
324 12(CODE) onmouseout:object
325 12(CODE) onmouseover:object
326 12(CODE) onmouseup:object
327 12(CODE) onmousewheel:object
328 12(CODE) onpaste:object
329 12(CODE) onpause:object
330 12(CODE) onplay:object
331 12(CODE) onplaying:object
332 12(CODE) onprogress:object
333 12(CODE) onratechange:object
334 12(CODE) onreset:object
335 12(CODE) onscroll:object
336 12(CODE) onsearch:object
337 12(CODE) onseeked:object
338 12(CODE) onseeking:object
339 12(CODE) onselect:object
340 12(CODE) onselectstart:object
341 12(CODE) onshow:object
342 12(CODE) onstalled:object
343 12(CODE) onsubmit:object
344 12(CODE) onsuspend:object
345 12(CODE) ontimeupdate:object
346 12(CODE) onvolumechange:object
347 12(CODE) onwaiting:object
348 12(CODE) onwebkitfullscreenchange:object
349 12(CODE) onwebkitfullscreenerror:object
350 12(CODE) onwheel:object
351 12(CODE) outerHTML:string
352 12(CODE) outerText:string
353 12(CODE) ownerDocument:Document
354 12(CODE) parentElement:object
355 12(CODE) parentNode:object
356 12(CODE) prefix:object
357 12(CODE) previousElementSibling:object
358 12(CODE) previousSibling:object
359 12(CODE) scrollHeight:number
360 12(CODE) scrollLeft:number
361 12(CODE) scrollTop:number
362 12(CODE) scrollWidth:number
363 12(CODE) spellcheck:boolean
364 12(CODE) style:CSSStyle
365 12(CODE) tabIndex:number
366 12(CODE) tagName:string
367 12(CODE) textContent:string
368 12(CODE) title:string
369 12(CODE) translate:boolean
370 12(CODE) value
371 12(CODE) webkitdropzone:string
372 12(CODE) webkitPseudo:string
373 12(CODE) webkitShadowRoot:object
374 (BLANK)
375 8(CODE) method blur()
376 8(CODE) method focus()
377 8(CODE) method getAttribute()
378 8(CODE) method getAttributeNode()
379 8(CODE) method getAttributeNodeNS()
380 8(CODE) method getAttributeNS()
381 8(CODE) method getBoundingClientRect()
382 8(CODE) method getClientRects()
383 8(CODE) method getElementsByClassName()
384 8(CODE) method getElementsByTagName()
385 8(CODE) method getElementsByTagNameNS()
386 8(CODE) method hasAttribute()
387 8(CODE) method hasAttributeNS()
388 8(CODE) method hasAttributes()
389 8(CODE) method insertAdjacentHTML()
390 8(CODE) method querySelector()
391 8(CODE) method querySelectorAll()
392 8(CODE) method remove()
393 8(CODE) method removeAttribute()
394 8(CODE) method removeAttributeNode()
395 8(CODE) method removeAttributeNS()
396 8(CODE) method scrollByLines()
397 8(CODE) method scrollByPages()
398 8(CODE) method scrollIntoView()
399 8(CODE) method scrollIntoViewIfNeeded()
400 8(CODE) method setAttribute()
401 8(CODE) method setAttributeNode()
402 8(CODE) method setAttributeNodeNS()
403 8(CODE) method setAttributeNS()
404 8(CODE) method webkitCreateShadowRoot()
405 8(CODE) method webkitMatchesSelector()
406 8(CODE) method webkitRequestFullScreen()
407 8(CODE) method webkitRequestPointerLock()
408 (BLANK)
409 (BLANK)
410 4(CODE)     public class XMLHttpRequest
411 (BLANK)
412 8(CODE) constructor new XMLHttpRequest ()
413 (BLANK)
414 8(CODE) properties
415 (BLANK)
416 12(CODE) onload:function
417 12(CODE) onerror:function
418 12(CODE) ontimeout:function
419 (BLANK)
420 12(CODE) readyState:number
421 (BLANK)
422 12(CODE) response:object
423 12(CODE) responseText:string
424 12(CODE) responseType:string
425 12(CODE) responseXML:string
426 (BLANK)
427 12(CODE) status:number
428 12(CODE) statusText:string
429 (BLANK)
430 12(CODE) timeout:number
431 12(CODE) upload:object
432 12(CODE) withCredentials:boolean
433 (BLANK)
434 (BLANK)
435 12(CODE) UNSENT:number
436 12(CODE) OPENED:number
437 12(CODE) HEADERS_RECEIVED:number
438 12(CODE) LOADING:number
439 12(CODE) DONE:number
440 (BLANK)
441 (BLANK)
442 8(CODE) method abort()
443 8(CODE) method getAllResponseHeaders()
444 8(CODE) method getResponseHeader()
445 8(CODE) method open()
446 8(CODE) method overrideMimeType()
447 8(CODE) method send()
448 8(CODE) method setRequestHeader()
449 (BLANK)
450 (BLANK)
451 (BLANK)
452 4(CODE)     public class Event
453 8(CODE) constructor new Event ()
454 (BLANK)
455 8(CODE) properties
456 12(CODE) bubbles:boolean
457 12(CODE) cancelBubble:boolean
458 12(CODE) cancelable:boolean
459 12(CODE) currentTarget
460 12(CODE) defaultPrevented
461 12(CODE) eventPhase
462 12(CODE) explicitOriginalTarget
463 12(CODE) originalTarget
464 12(CODE) target
465 12(CODE) timeStamp
466 12(CODE) type:string
467 12(CODE) isTrusted
468 (BLANK)
469 8(CODE) method initEvent()
470 8(CODE) method preventDefault()
471 8(CODE) method stopImmediatePropagation()
472 8(CODE) method stopPropagation()
473 (BLANK)
474 (BLANK)
475 4(CODE)     public class CSSStyle
476 8(CODE) properties
477 12(CODE) alignContent:string
478 12(CODE) alignItems:string
479 12(CODE) alignmentBaseline:string
480 12(CODE) alignSelf:string
481 12(CODE) background:string
482 12(CODE) backgroundAttachment:string
483 12(CODE) backgroundClip:string
484 12(CODE) backgroundColor:string
485 12(CODE) backgroundImage:string
486 12(CODE) backgroundOrigin:string
487 12(CODE) backgroundPosition:string
488 12(CODE) backgroundPositionX:string
489 12(CODE) backgroundPositionY:string
490 12(CODE) backgroundRepeat:string
491 12(CODE) backgroundRepeatX:string
492 12(CODE) backgroundRepeatY:string
493 12(CODE) backgroundSize:string
494 12(CODE) baselineShift:string
495 12(CODE) border:string
496 12(CODE) borderBottom:string
497 12(CODE) borderBottomColor:string
498 12(CODE) borderBottomLeftRadius:string
499 12(CODE) borderBottomRightRadius:string
500 12(CODE) borderBottomStyle:string
501 12(CODE) borderBottomWidth:string
502 12(CODE) borderCollapse:string
503 12(CODE) borderColor:string
504 12(CODE) borderImage:string
505 12(CODE) borderImageOutset:string
506 12(CODE) borderImageRepeat:string
507 12(CODE) borderImageSlice:string
508 12(CODE) borderImageSource:string
509 12(CODE) borderImageWidth:string
510 12(CODE) borderLeft:string
511 12(CODE) borderLeftColor:string
512 12(CODE) borderLeftStyle:string
513 12(CODE) borderLeftWidth:string
514 12(CODE) borderRadius:string
515 12(CODE) borderRight:string
516 12(CODE) borderRightColor:string
517 12(CODE) borderRightStyle:string
518 12(CODE) borderRightWidth:string
519 12(CODE) borderSpacing:string
520 12(CODE) borderStyle:string
521 12(CODE) borderTop:string
522 12(CODE) borderTopColor:string
523 12(CODE) borderTopLeftRadius:string
524 12(CODE) borderTopRightRadius:string
525 12(CODE) borderTopStyle:string
526 12(CODE) borderTopWidth:string
527 12(CODE) borderWidth:string
528 12(CODE) bottom:string
529 12(CODE) boxShadow:string
530 12(CODE) boxSizing:string
531 12(CODE) bufferedRendering:string
532 12(CODE) captionSide:string
533 12(CODE) clear:string
534 12(CODE) clip:string
535 12(CODE) clipPath:string
536 12(CODE) clipRule:string
537 12(CODE) color:string
538 12(CODE) colorInterpolation:string
539 12(CODE) colorInterpolationFilters:string
540 12(CODE) colorProfile:string
541 12(CODE) colorRendering:string
542 12(CODE) content:string
543 12(CODE) counterIncrement:string
544 12(CODE) counterReset:string
545 12(CODE) cssText:string
546 12(CODE) cursor:string
547 12(CODE) direction:string
548 12(CODE) display:string
549 12(CODE) dominantBaseline:string
550 12(CODE) emptyCells:string
551 12(CODE) enableBackground:string
552 12(CODE) fill:string
553 12(CODE) fillOpacity:string
554 12(CODE) fillRule:string
555 12(CODE) filter:string
556 12(CODE) flex:string
557 12(CODE) flexBasis:string
558 12(CODE) flexDirection:string
559 12(CODE) flexFlow:string
560 12(CODE) flexGrow:string
561 12(CODE) flexShrink:string
562 12(CODE) flexWrap:string
563 12(CODE) float:string
564 12(CODE) floodColor:string
565 12(CODE) floodOpacity:string
566 12(CODE) font:string
567 12(CODE) fontFamily:string
568 12(CODE) fontKerning:string
569 12(CODE) fontSize:string
570 12(CODE) fontStretch:string
571 12(CODE) fontStyle:string
572 12(CODE) fontVariant:string
573 12(CODE) fontWeight:string
574 12(CODE) glyphOrientationHorizontal:string
575 12(CODE) glyphOrientationVertical:string
576 12(CODE) height:string
577 12(CODE) imageRendering:string
578 12(CODE) justifyContent:string
579 12(CODE) kerning:string
580 12(CODE) left:string
581 12(CODE) length:number
582 12(CODE) letterSpacing:string
583 12(CODE) lightingColor:string
584 12(CODE) lineHeight:string
585 12(CODE) listStyle:string
586 12(CODE) listStyleImage:string
587 12(CODE) listStylePosition:string
588 12(CODE) listStyleType:string
589 12(CODE) margin:string
590 12(CODE) marginBottom:string
591 12(CODE) marginLeft:string
592 12(CODE) marginRight:string
593 12(CODE) marginTop:string
594 12(CODE) marker:string
595 12(CODE) markerEnd:string
596 12(CODE) markerMid:string
597 12(CODE) markerStart:string
598 12(CODE) mask:string
599 12(CODE) maskType:string
600 12(CODE) maxHeight:string
601 12(CODE) maxWidth:string
602 12(CODE) maxZoom:string
603 12(CODE) minHeight:string
604 12(CODE) minWidth:string
605 12(CODE) minZoom:string
606 12(CODE) objectFit:string
607 12(CODE) objectPosition:string
608 12(CODE) opacity:string
609 12(CODE) order:string
610 12(CODE) orientation:string
611 12(CODE) orphans:string
612 12(CODE) outline:string
613 12(CODE) outlineColor:string
614 12(CODE) outlineOffset:string
615 12(CODE) outlineStyle:string
616 12(CODE) outlineWidth:string
617 12(CODE) overflow:string
618 12(CODE) overflowWrap:string
619 12(CODE) overflowX:string
620 12(CODE) overflowY:string
621 12(CODE) padding:string
622 12(CODE) paddingBottom:string
623 12(CODE) paddingLeft:string
624 12(CODE) paddingRight:string
625 12(CODE) paddingTop:string
626 12(CODE) page:string
627 12(CODE) pageBreakAfter:string
628 12(CODE) pageBreakBefore:string
629 12(CODE) pageBreakInside:string
630 12(CODE) parentRule:object
631 12(CODE) pointerEvents:string
632 12(CODE) position:string
633 12(CODE) quotes:string
634 12(CODE) resize:string
635 12(CODE) right:string
636 12(CODE) shapeRendering:string
637 12(CODE) size:string
638 12(CODE) speak:string
639 12(CODE) src:string
640 12(CODE) stopColor:string
641 12(CODE) stopOpacity:string
642 12(CODE) stroke:string
643 12(CODE) strokeDasharray:string
644 12(CODE) strokeDashoffset:string
645 12(CODE) strokeLinecap:string
646 12(CODE) strokeLinejoin:string
647 12(CODE) strokeMiterlimit:string
648 12(CODE) strokeOpacity:string
649 12(CODE) strokeWidth:string
650 12(CODE) tableLayout:string
651 12(CODE) tabSize:string
652 12(CODE) textAlign:string
653 12(CODE) textAnchor:string
654 12(CODE) textDecoration:string
655 12(CODE) textIndent:string
656 12(CODE) textLineThroughColor:string
657 12(CODE) textLineThroughMode:string
658 12(CODE) textLineThroughStyle:string
659 12(CODE) textLineThroughWidth:string
660 12(CODE) textOverflow:string
661 12(CODE) textOverlineColor:string
662 12(CODE) textOverlineMode:string
663 12(CODE) textOverlineStyle:string
664 12(CODE) textOverlineWidth:string
665 12(CODE) textRendering:string
666 12(CODE) textShadow:string
667 12(CODE) textTransform:string
668 12(CODE) textUnderlineColor:string
669 12(CODE) textUnderlineMode:string
670 12(CODE) textUnderlineStyle:string
671 12(CODE) textUnderlineWidth:string
672 12(CODE) top:string
673 12(CODE) touchActionDelay:string
674 12(CODE) transition:string
675 12(CODE) transitionDelay:string
676 12(CODE) transitionDuration:string
677 12(CODE) transitionProperty:string
678 12(CODE) transitionTimingFunction:string
679 12(CODE) unicodeBidi:string
680 12(CODE) unicodeRange:string
681 12(CODE) userZoom:string
682 12(CODE) vectorEffect:string
683 12(CODE) verticalAlign:string
684 12(CODE) visibility:string
685 12(CODE) webkitAnimation:string
686 12(CODE) webkitAnimationDelay:string
687 12(CODE) webkitAnimationDirection:string
688 12(CODE) webkitAnimationDuration:string
689 12(CODE) webkitAnimationFillMode:string
690 12(CODE) webkitAnimationIterationCount:string
691 12(CODE) webkitAnimationName:string
692 12(CODE) webkitAnimationPlayState:string
693 12(CODE) webkitAnimationTimingFunction:string
694 12(CODE) webkitAppearance:string
695 12(CODE) webkitAppRegion:string
696 12(CODE) webkitAspectRatio:string
697 12(CODE) webkitBackfaceVisibility:string
698 12(CODE) webkitBackgroundClip:string
699 12(CODE) webkitBackgroundComposite:string
700 12(CODE) webkitBackgroundOrigin:string
701 12(CODE) webkitBackgroundSize:string
702 12(CODE) webkitBorderAfter:string
703 12(CODE) webkitBorderAfterColor:string
704 12(CODE) webkitBorderAfterStyle:string
705 12(CODE) webkitBorderAfterWidth:string
706 12(CODE) webkitBorderBefore:string
707 12(CODE) webkitBorderBeforeColor:string
708 12(CODE) webkitBorderBeforeStyle:string
709 12(CODE) webkitBorderBeforeWidth:string
710 12(CODE) webkitBorderEnd:string
711 12(CODE) webkitBorderEndColor:string
712 12(CODE) webkitBorderEndStyle:string
713 12(CODE) webkitBorderEndWidth:string
714 12(CODE) webkitBorderFit:string
715 12(CODE) webkitBorderHorizontalSpacing:string
716 12(CODE) webkitBorderImage:string
717 12(CODE) webkitBorderRadius:string
718 12(CODE) webkitBorderStart:string
719 12(CODE) webkitBorderStartColor:string
720 12(CODE) webkitBorderStartStyle:string
721 12(CODE) webkitBorderStartWidth:string
722 12(CODE) webkitBorderVerticalSpacing:string
723 12(CODE) webkitBoxAlign:string
724 12(CODE) webkitBoxDecorationBreak:string
725 12(CODE) webkitBoxDirection:string
726 12(CODE) webkitBoxFlex:string
727 12(CODE) webkitBoxFlexGroup:string
728 12(CODE) webkitBoxLines:string
729 12(CODE) webkitBoxOrdinalGroup:string
730 12(CODE) webkitBoxOrient:string
731 12(CODE) webkitBoxPack:string
732 12(CODE) webkitBoxReflect:string
733 12(CODE) webkitBoxShadow:string
734 12(CODE) webkitClipPath:string
735 12(CODE) webkitColumnAxis:string
736 12(CODE) webkitColumnBreakAfter:string
737 12(CODE) webkitColumnBreakBefore:string
738 12(CODE) webkitColumnBreakInside:string
739 12(CODE) webkitColumnCount:string
740 12(CODE) webkitColumnGap:string
741 12(CODE) webkitColumnProgression:string
742 12(CODE) webkitColumnRule:string
743 12(CODE) webkitColumnRuleColor:string
744 12(CODE) webkitColumnRuleStyle:string
745 12(CODE) webkitColumnRuleWidth:string
746 12(CODE) webkitColumns:string
747 12(CODE) webkitColumnSpan:string
748 12(CODE) webkitColumnWidth:string
749 12(CODE) webkitFilter:string
750 12(CODE) webkitFontFeatureSettings:string
751 12(CODE) webkitFontSizeDelta:string
752 12(CODE) webkitFontSmoothing:string
753 12(CODE) webkitFontVariantLigatures:string
754 12(CODE) webkitHighlight:string
755 12(CODE) webkitHyphenateCharacter:string
756 12(CODE) webkitLineAlign:string
757 12(CODE) webkitLineBoxContain:string
758 12(CODE) webkitLineBreak:string
759 12(CODE) webkitLineClamp:string
760 12(CODE) webkitLineGrid:string
761 12(CODE) webkitLineSnap:string
762 12(CODE) webkitLocale:string
763 12(CODE) webkitLogicalHeight:string
764 12(CODE) webkitLogicalWidth:string
765 12(CODE) webkitMarginAfter:string
766 12(CODE) webkitMarginAfterCollapse:string
767 12(CODE) webkitMarginBefore:string
768 12(CODE) webkitMarginBeforeCollapse:string
769 12(CODE) webkitMarginBottomCollapse:string
770 12(CODE) webkitMarginCollapse:string
771 12(CODE) webkitMarginEnd:string
772 12(CODE) webkitMarginStart:string
773 12(CODE) webkitMarginTopCollapse:string
774 12(CODE) webkitMask:string
775 12(CODE) webkitMaskBoxImage:string
776 12(CODE) webkitMaskBoxImageOutset:string
777 12(CODE) webkitMaskBoxImageRepeat:string
778 12(CODE) webkitMaskBoxImageSlice:string
779 12(CODE) webkitMaskBoxImageSource:string
780 12(CODE) webkitMaskBoxImageWidth:string
781 12(CODE) webkitMaskClip:string
782 12(CODE) webkitMaskComposite:string
783 12(CODE) webkitMaskImage:string
784 12(CODE) webkitMaskOrigin:string
785 12(CODE) webkitMaskPosition:string
786 12(CODE) webkitMaskPositionX:string
787 12(CODE) webkitMaskPositionY:string
788 12(CODE) webkitMaskRepeat:string
789 12(CODE) webkitMaskRepeatX:string
790 12(CODE) webkitMaskRepeatY:string
791 12(CODE) webkitMaskSize:string
792 12(CODE) webkitMaxLogicalHeight:string
793 12(CODE) webkitMaxLogicalWidth:string
794 12(CODE) webkitMinLogicalHeight:string
795 12(CODE) webkitMinLogicalWidth:string
796 12(CODE) webkitPaddingAfter:string
797 12(CODE) webkitPaddingBefore:string
798 12(CODE) webkitPaddingEnd:string
799 12(CODE) webkitPaddingStart:string
800 12(CODE) webkitPerspective:string
801 12(CODE) webkitPerspectiveOrigin:string
802 12(CODE) webkitPerspectiveOriginX:string
803 12(CODE) webkitPerspectiveOriginY:string
804 12(CODE) webkitPrintColorAdjust:string
805 12(CODE) webkitRtlOrdering:string
806 12(CODE) webkitRubyPosition:string
807 12(CODE) webkitTapHighlightColor:string
808 12(CODE) webkitTextCombine:string
809 12(CODE) webkitTextDecorationsInEffect:string
810 12(CODE) webkitTextEmphasis:string
811 12(CODE) webkitTextEmphasisColor:string
812 12(CODE) webkitTextEmphasisPosition:string
813 12(CODE) webkitTextEmphasisStyle:string
814 12(CODE) webkitTextFillColor:string
815 12(CODE) webkitTextOrientation:string
816 12(CODE) webkitTextSecurity:string
817 12(CODE) webkitTextStroke:string
818 12(CODE) webkitTextStrokeColor:string
819 12(CODE) webkitTextStrokeWidth:string
820 12(CODE) webkitTransform:string
821 12(CODE) webkitTransformOrigin:string
822 12(CODE) webkitTransformOriginX:string
823 12(CODE) webkitTransformOriginY:string
824 12(CODE) webkitTransformOriginZ:string
825 12(CODE) webkitTransformStyle:string
826 12(CODE) webkitTransition:string
827 12(CODE) webkitTransitionDelay:string
828 12(CODE) webkitTransitionDuration:string
829 12(CODE) webkitTransitionProperty:string
830 12(CODE) webkitTransitionTimingFunction:string
831 12(CODE) webkitUserDrag:string
832 12(CODE) webkitUserModify:string
833 12(CODE) webkitUserSelect:string
834 12(CODE) webkitWritingMode:string
835 12(CODE) whiteSpace:string
836 12(CODE) widows:string
837 12(CODE) width:string
838 12(CODE) wordBreak:string
839 12(CODE) wordSpacing:string
840 12(CODE) wordWrap:string
841 12(CODE) writingMode:string
842 12(CODE) zIndex:string
843 12(CODE) zoom:string
844 (BLANK)
845 (BLANK)
>>>ADVANCE 4:0 [-1] ' '(NEWLINE)
      Module matched OK: NEWLINE  
>>>ADVANCE 4:5 [0] 'public'(IDENTIFIER)
optFreeFormList [Module] parentname:Project Root parentIndent:undefined, blockIndent:4, get SeparatedList of [Statement] by ';' closer: EOF
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

4 4(CODE) public var window:Window
    'public'(IDENTIFIER) 'var'(IDENTIFIER) 'window'(IDENTIFIER) ':'(OPER) 'Window'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 4:12 [1] 'var'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'var'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/Document.interface.md:4:6. Adjective: found 'var'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 4:12 [1] 'var'(IDENTIFIER)
        Statement TRY VarStatement on 'var'(IDENTIFIER)
          VarStatement matched OK: var var
>>>ADVANCE 4:16 [2] 'window'(IDENTIFIER)
optSeparatedList [VarStatement] indent:4, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
          VarStatement TRY VariableDecl on 'window'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER window
>>>ADVANCE 4:22 [3] ':'(OPER)
            VariableDecl matched OK: : :
>>>ADVANCE 4:23 [4] 'Window'(IDENTIFIER)
            VariableDecl TRY VariableRef on 'Window'(IDENTIFIER)
              VariableRef matched OK: IDENTIFIER Window
>>>ADVANCE 5:0 [-1] ' '(NEWLINE)
            Parsed OK!-> VariableRef
          Parsed OK!-> VariableDecl
          VarStatement matched OK: NEWLINE  
>>>ADVANCE 5:5 [0] 'public'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 5
        Parsed OK!-> VarStatement
      Parsed OK!-> Statement
      Module matched OK: NEWLINE  
>>>ADVANCE 5:5 [0] 'public'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

5 4(CODE) public var document:Document
    'public'(IDENTIFIER) 'var'(IDENTIFIER) 'document'(IDENTIFIER) ':'(OPER) 'Document'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 5:12 [1] 'var'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'var'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/Document.interface.md:5:6. Adjective: found 'var'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 5:12 [1] 'var'(IDENTIFIER)
        Statement TRY VarStatement on 'var'(IDENTIFIER)
          VarStatement matched OK: var var
>>>ADVANCE 5:16 [2] 'document'(IDENTIFIER)
optSeparatedList [VarStatement] indent:4, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
          VarStatement TRY VariableDecl on 'document'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER document
>>>ADVANCE 5:24 [3] ':'(OPER)
            VariableDecl matched OK: : :
>>>ADVANCE 5:25 [4] 'Document'(IDENTIFIER)
            VariableDecl TRY VariableRef on 'Document'(IDENTIFIER)
              VariableRef matched OK: IDENTIFIER Document
>>>ADVANCE 7:0 [-1] ' '(NEWLINE)
            Parsed OK!-> VariableRef
          Parsed OK!-> VariableDecl
          VarStatement matched OK: NEWLINE  
>>>ADVANCE 7:9 [0] 'public'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 7
        Parsed OK!-> VarStatement
      Parsed OK!-> Statement
      Module matched OK: NEWLINE  
>>>ADVANCE 7:9 [0] 'public'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

7 4(CODE)     public class Window
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'Window'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 7:16 [1] 'class'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'class'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/Document.interface.md:7:10. Adjective: found 'class'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 7:16 [1] 'class'(IDENTIFIER)
        Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
          ClassDeclaration matched OK: class class
>>>ADVANCE 7:22 [2] 'Window'(IDENTIFIER)
          ClassDeclaration matched OK: IDENTIFIER Window
>>>ADVANCE 8:0 [-1] ' '(NEWLINE)
          ClassDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 8:9 [0] 'properties'(IDENTIFIER)
optFreeFormList [Body] parentname:Window parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

8 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 9:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 9:13 [0] 'applicationCache'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'applicationCache'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER applicationCache
>>>ADVANCE 10:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 10:13 [0] 'closed'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'closed'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER closed
>>>ADVANCE 11:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 11:13 [0] 'content'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'content'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER content
>>>ADVANCE 12:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 12:13 [0] 'document'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'document'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER document
>>>ADVANCE 13:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 13:13 [0] 'frameElement'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'frameElement'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER frameElement
>>>ADVANCE 14:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 14:13 [0] 'frames'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'frames'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER frames
>>>ADVANCE 15:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 15:13 [0] 'fullScreen'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'fullScreen'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fullScreen
>>>ADVANCE 16:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 16:13 [0] 'gamepadconnected'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'gamepadconnected'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER gamepadconnected
>>>ADVANCE 17:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 17:13 [0] 'gamepaddisconnected'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'gamepaddisconnected'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER gamepaddisconnected
>>>ADVANCE 18:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 18:13 [0] 'history'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'history'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER history
>>>ADVANCE 19:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 19:13 [0] 'innerHeight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'innerHeight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER innerHeight
>>>ADVANCE 20:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 20:13 [0] 'innerWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'innerWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER innerWidth
>>>ADVANCE 21:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 21:13 [0] 'length'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'length'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER length
>>>ADVANCE 22:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 22:13 [0] 'location'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'location'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER location
>>>ADVANCE 22:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 22:23 [2] 'Location'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'Location'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER Location
>>>ADVANCE 23:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 23:13 [0] 'locationbar'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'locationbar'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER locationbar
>>>ADVANCE 24:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 24:13 [0] 'menubar'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'menubar'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER menubar
>>>ADVANCE 25:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 25:13 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 26:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 26:13 [0] 'navigator'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'navigator'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER navigator
>>>ADVANCE 27:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 27:13 [0] 'onafterprint'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onafterprint'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onafterprint
>>>ADVANCE 28:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 28:13 [0] 'onbeforeprint'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onbeforeprint'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onbeforeprint
>>>ADVANCE 29:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 29:13 [0] 'onbeforeunload'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onbeforeunload'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onbeforeunload
>>>ADVANCE 30:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 30:13 [0] 'onblur'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onblur'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onblur
>>>ADVANCE 31:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 31:13 [0] 'onchange'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onchange'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onchange
>>>ADVANCE 32:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 32:13 [0] 'onclick'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onclick'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onclick
>>>ADVANCE 33:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 33:13 [0] 'ondevicelight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondevicelight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondevicelight
>>>ADVANCE 34:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 34:13 [0] 'ondevicemotion'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondevicemotion'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondevicemotion
>>>ADVANCE 35:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 35:13 [0] 'ondeviceorientation'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondeviceorientation'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondeviceorientation
>>>ADVANCE 36:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 36:13 [0] 'ondeviceproximity'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondeviceproximity'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondeviceproximity
>>>ADVANCE 37:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 37:13 [0] 'ondragdrop'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondragdrop'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondragdrop
>>>ADVANCE 38:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 38:13 [0] 'onfocus'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onfocus'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onfocus
>>>ADVANCE 39:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 39:13 [0] 'onhashchange'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onhashchange'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onhashchange
>>>ADVANCE 40:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 40:13 [0] 'onkeydown'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onkeydown'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onkeydown
>>>ADVANCE 41:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 41:13 [0] 'onkeypress'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onkeypress'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onkeypress
>>>ADVANCE 42:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 42:13 [0] 'onkeyup'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onkeyup'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onkeyup
>>>ADVANCE 43:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 43:13 [0] 'onmousedown'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onmousedown'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onmousedown
>>>ADVANCE 44:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 44:13 [0] 'onmousemove'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onmousemove'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onmousemove
>>>ADVANCE 45:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 45:13 [0] 'onmouseout'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onmouseout'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onmouseout
>>>ADVANCE 46:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 46:13 [0] 'onmouseover'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onmouseover'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onmouseover
>>>ADVANCE 47:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 47:13 [0] 'onmouseup'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onmouseup'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onmouseup
>>>ADVANCE 48:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 48:13 [0] 'onpaint'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onpaint'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onpaint
>>>ADVANCE 49:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 49:13 [0] 'onpopstate'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onpopstate'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onpopstate
>>>ADVANCE 50:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 50:13 [0] 'onreset'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onreset'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onreset
>>>ADVANCE 51:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 51:13 [0] 'onresize'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onresize'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onresize
>>>ADVANCE 52:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 52:13 [0] 'onscroll'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onscroll'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onscroll
>>>ADVANCE 53:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 53:13 [0] 'onunload'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onunload'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onunload
>>>ADVANCE 54:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 54:13 [0] 'opener'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'opener'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER opener
>>>ADVANCE 55:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 55:13 [0] 'outerHeight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'outerHeight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER outerHeight
>>>ADVANCE 56:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 56:13 [0] 'outerWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'outerWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER outerWidth
>>>ADVANCE 57:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 57:13 [0] 'parent'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'parent'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER parent
>>>ADVANCE 58:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 58:13 [0] 'performance'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'performance'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER performance
>>>ADVANCE 59:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 59:13 [0] 'personalbar'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'personalbar'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER personalbar
>>>ADVANCE 60:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 60:13 [0] 'screen'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'screen'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER screen
>>>ADVANCE 61:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 61:13 [0] 'screenX'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'screenX'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER screenX
>>>ADVANCE 62:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 62:13 [0] 'screenY'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'screenY'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER screenY
>>>ADVANCE 63:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 63:13 [0] 'scrollbars'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'scrollbars'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER scrollbars
>>>ADVANCE 64:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 64:13 [0] 'scrollMaxX'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'scrollMaxX'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER scrollMaxX
>>>ADVANCE 65:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 65:13 [0] 'scrollMaxY'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'scrollMaxY'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER scrollMaxY
>>>ADVANCE 66:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 66:13 [0] 'scrollX'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'scrollX'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER scrollX
>>>ADVANCE 67:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 67:13 [0] 'scrollY'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'scrollY'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER scrollY
>>>ADVANCE 68:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 68:13 [0] 'self'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'self'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER self
>>>ADVANCE 69:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 69:13 [0] 'sidebar'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'sidebar'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER sidebar
>>>ADVANCE 70:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 70:13 [0] 'status'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'status'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER status
>>>ADVANCE 71:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 71:13 [0] 'statusbar'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'statusbar'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER statusbar
>>>ADVANCE 72:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 72:13 [0] 'toolbar'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'toolbar'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER toolbar
>>>ADVANCE 73:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 73:13 [0] 'top'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'top'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER top
>>>ADVANCE 74:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 74:13 [0] 'window'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'window'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER window
>>>ADVANCE 75:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 75:13 [0] 'XPCSafeJSObjectWrapper'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'XPCSafeJSObjectWrapper'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER XPCSafeJSObjectWrapper
>>>ADVANCE 77:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 77:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

77 8(CODE) method QueryInterface()
    'method'(IDENTIFIER) 'QueryInterface'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 77:16 [1] 'QueryInterface'(IDENTIFIER)
>>>ADVANCE 77:30 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 77:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 78:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 78:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

78 8(CODE) method back()
    'method'(IDENTIFIER) 'back'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 78:16 [1] 'back'(IDENTIFIER)
>>>ADVANCE 78:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 78:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 79:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 79:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

79 8(CODE) method blur()
    'method'(IDENTIFIER) 'blur'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 79:16 [1] 'blur'(IDENTIFIER)
>>>ADVANCE 79:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 79:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 80:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 80:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

80 8(CODE) method btoa()
    'method'(IDENTIFIER) 'btoa'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 80:16 [1] 'btoa'(IDENTIFIER)
>>>ADVANCE 80:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 80:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 81:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 81:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

81 8(CODE) method captureEvents()
    'method'(IDENTIFIER) 'captureEvents'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 81:16 [1] 'captureEvents'(IDENTIFIER)
>>>ADVANCE 81:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 81:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 82:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 82:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

82 8(CODE) method clearImmediate()
    'method'(IDENTIFIER) 'clearImmediate'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 82:16 [1] 'clearImmediate'(IDENTIFIER)
>>>ADVANCE 82:30 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 82:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 83:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 83:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

83 8(CODE) method clearTimeout()
    'method'(IDENTIFIER) 'clearTimeout'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 83:16 [1] 'clearTimeout'(IDENTIFIER)
>>>ADVANCE 83:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 83:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 84:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 84:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

84 8(CODE) method close()
    'method'(IDENTIFIER) 'close'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 84:16 [1] 'close'(IDENTIFIER)
>>>ADVANCE 84:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 84:22 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 85:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 85:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

85 8(CODE) method confirm()
    'method'(IDENTIFIER) 'confirm'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 85:16 [1] 'confirm'(IDENTIFIER)
>>>ADVANCE 85:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 85:24 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 86:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 86:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

86 8(CODE) method dispatchEvent()
    'method'(IDENTIFIER) 'dispatchEvent'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 86:16 [1] 'dispatchEvent'(IDENTIFIER)
>>>ADVANCE 86:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 86:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 87:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 87:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

87 8(CODE) method dump()
    'method'(IDENTIFIER) 'dump'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 87:16 [1] 'dump'(IDENTIFIER)
>>>ADVANCE 87:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 87:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 88:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 88:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

88 8(CODE) method escape()
    'method'(IDENTIFIER) 'escape'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 88:16 [1] 'escape'(IDENTIFIER)
>>>ADVANCE 88:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 88:23 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 89:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 89:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

89 8(CODE) method find()
    'method'(IDENTIFIER) 'find'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 89:16 [1] 'find'(IDENTIFIER)
>>>ADVANCE 89:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 89:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 90:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 90:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

90 8(CODE) method focus()
    'method'(IDENTIFIER) 'focus'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 90:16 [1] 'focus'(IDENTIFIER)
>>>ADVANCE 90:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 90:22 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 91:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 91:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

91 8(CODE) method forward()
    'method'(IDENTIFIER) 'forward'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 91:16 [1] 'forward'(IDENTIFIER)
>>>ADVANCE 91:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 91:24 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 92:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 92:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

92 8(CODE) method getComputedStyle()
    'method'(IDENTIFIER) 'getComputedStyle'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 92:16 [1] 'getComputedStyle'(IDENTIFIER)
>>>ADVANCE 92:32 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 92:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 93:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 93:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

93 8(CODE) method home()
    'method'(IDENTIFIER) 'home'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 93:16 [1] 'home'(IDENTIFIER)
>>>ADVANCE 93:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 93:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 94:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 94:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

94 8(CODE) method matchMedia()
    'method'(IDENTIFIER) 'matchMedia'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 94:16 [1] 'matchMedia'(IDENTIFIER)
>>>ADVANCE 94:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 94:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 95:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 95:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

95 8(CODE) method minimize()
    'method'(IDENTIFIER) 'minimize'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 95:16 [1] 'minimize'(IDENTIFIER)
>>>ADVANCE 95:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 95:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 96:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 96:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

96 8(CODE) method moveBy()
    'method'(IDENTIFIER) 'moveBy'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 96:16 [1] 'moveBy'(IDENTIFIER)
>>>ADVANCE 96:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 96:23 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 97:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 97:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

97 8(CODE) method moveTo()
    'method'(IDENTIFIER) 'moveTo'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 97:16 [1] 'moveTo'(IDENTIFIER)
>>>ADVANCE 97:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 97:23 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 98:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 98:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

98 8(CODE) method onuserproximity()
    'method'(IDENTIFIER) 'onuserproximity'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 98:16 [1] 'onuserproximity'(IDENTIFIER)
>>>ADVANCE 98:31 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 98:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 99:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 99:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

99 8(CODE) method openDialog()
    'method'(IDENTIFIER) 'openDialog'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 99:16 [1] 'openDialog'(IDENTIFIER)
>>>ADVANCE 99:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 99:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 100:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 100:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

100 8(CODE) method print()
    'method'(IDENTIFIER) 'print'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 100:16 [1] 'print'(IDENTIFIER)
>>>ADVANCE 100:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 100:22 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 101:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 101:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

101 8(CODE) method releaseEvents()
    'method'(IDENTIFIER) 'releaseEvents'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 101:16 [1] 'releaseEvents'(IDENTIFIER)
>>>ADVANCE 101:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 101:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 102:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 102:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

102 8(CODE) method resizeBy()
    'method'(IDENTIFIER) 'resizeBy'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 102:16 [1] 'resizeBy'(IDENTIFIER)
>>>ADVANCE 102:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 102:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 103:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 103:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

103 8(CODE) method resizeTo()
    'method'(IDENTIFIER) 'resizeTo'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 103:16 [1] 'resizeTo'(IDENTIFIER)
>>>ADVANCE 103:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 103:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 104:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 104:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

104 8(CODE) method restore()
    'method'(IDENTIFIER) 'restore'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 104:16 [1] 'restore'(IDENTIFIER)
>>>ADVANCE 104:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 104:24 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 105:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 105:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

105 8(CODE) method scroll()
    'method'(IDENTIFIER) 'scroll'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 105:16 [1] 'scroll'(IDENTIFIER)
>>>ADVANCE 105:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 105:23 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 106:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 106:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

106 8(CODE) method scrollByLines()
    'method'(IDENTIFIER) 'scrollByLines'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 106:16 [1] 'scrollByLines'(IDENTIFIER)
>>>ADVANCE 106:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 106:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 107:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 107:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

107 8(CODE) method scrollTo()
    'method'(IDENTIFIER) 'scrollTo'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 107:16 [1] 'scrollTo'(IDENTIFIER)
>>>ADVANCE 107:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 107:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 108:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 108:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

108 8(CODE) method setCursor()
    'method'(IDENTIFIER) 'setCursor'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 108:16 [1] 'setCursor'(IDENTIFIER)
>>>ADVANCE 108:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 108:26 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 109:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 109:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

109 8(CODE) method setImmediate()
    'method'(IDENTIFIER) 'setImmediate'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 109:16 [1] 'setImmediate'(IDENTIFIER)
>>>ADVANCE 109:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 109:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 110:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 110:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

110 8(CODE) method setInterval()
    'method'(IDENTIFIER) 'setInterval'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 110:16 [1] 'setInterval'(IDENTIFIER)
>>>ADVANCE 110:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 110:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 111:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 111:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

111 8(CODE) method setTimeout()
    'method'(IDENTIFIER) 'setTimeout'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 111:16 [1] 'setTimeout'(IDENTIFIER)
>>>ADVANCE 111:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 111:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 112:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 112:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

112 8(CODE) method showModalDialog()
    'method'(IDENTIFIER) 'showModalDialog'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 112:16 [1] 'showModalDialog'(IDENTIFIER)
>>>ADVANCE 112:31 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 112:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 113:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 113:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

113 8(CODE) method sizeToContent()
    'method'(IDENTIFIER) 'sizeToContent'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 113:16 [1] 'sizeToContent'(IDENTIFIER)
>>>ADVANCE 113:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 113:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 114:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 114:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

114 8(CODE) method stop()
    'method'(IDENTIFIER) 'stop'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 114:16 [1] 'stop'(IDENTIFIER)
>>>ADVANCE 114:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 114:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 115:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 115:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

115 8(CODE) method unescape()
    'method'(IDENTIFIER) 'unescape'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 115:16 [1] 'unescape'(IDENTIFIER)
>>>ADVANCE 115:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 115:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 116:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 116:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

116 8(CODE) method updateCommands()
    'method'(IDENTIFIER) 'updateCommands'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 116:16 [1] 'updateCommands'(IDENTIFIER)
>>>ADVANCE 116:30 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 116:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 117:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 117:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

117 8(CODE) method cancelAnimationFrame()
    'method'(IDENTIFIER) 'cancelAnimationFrame'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 117:16 [1] 'cancelAnimationFrame'(IDENTIFIER)
>>>ADVANCE 117:36 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 117:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 118:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 118:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

118 8(CODE) method clearInterval()
    'method'(IDENTIFIER) 'clearInterval'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 118:16 [1] 'clearInterval'(IDENTIFIER)
>>>ADVANCE 118:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 118:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 119:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 119:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

119 8(CODE) method getAttention()
    'method'(IDENTIFIER) 'getAttention'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 119:16 [1] 'getAttention'(IDENTIFIER)
>>>ADVANCE 119:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 119:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 120:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 120:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

120 8(CODE) method getDefaultComputedStyle()
    'method'(IDENTIFIER) 'getDefaultComputedStyle'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 120:16 [1] 'getDefaultComputedStyle'(IDENTIFIER)
>>>ADVANCE 120:39 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 120:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 121:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 121:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

121 8(CODE) method getSelection()
    'method'(IDENTIFIER) 'getSelection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 121:16 [1] 'getSelection'(IDENTIFIER)
>>>ADVANCE 121:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 121:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 122:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 122:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

122 8(CODE) method importDialog()
    'method'(IDENTIFIER) 'importDialog'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 122:16 [1] 'importDialog'(IDENTIFIER)
>>>ADVANCE 122:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 122:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 123:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 123:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

123 8(CODE) method open()
    'method'(IDENTIFIER) 'open'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 123:16 [1] 'open'(IDENTIFIER)
>>>ADVANCE 123:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 123:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 124:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 124:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

124 8(CODE) method postMessage()
    'method'(IDENTIFIER) 'postMessage'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 124:16 [1] 'postMessage'(IDENTIFIER)
>>>ADVANCE 124:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 124:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 125:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 125:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

125 8(CODE) method prompt()
    'method'(IDENTIFIER) 'prompt'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 125:16 [1] 'prompt'(IDENTIFIER)
>>>ADVANCE 125:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 125:23 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 126:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 126:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

126 8(CODE) method prompter()
    'method'(IDENTIFIER) 'prompter'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 126:16 [1] 'prompter'(IDENTIFIER)
>>>ADVANCE 126:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 126:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 127:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 127:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

127 8(CODE) method requestAnimationFrame()
    'method'(IDENTIFIER) 'requestAnimationFrame'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 127:16 [1] 'requestAnimationFrame'(IDENTIFIER)
>>>ADVANCE 127:37 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 127:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 128:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 128:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

128 8(CODE) method routeEvent()
    'method'(IDENTIFIER) 'routeEvent'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 128:16 [1] 'routeEvent'(IDENTIFIER)
>>>ADVANCE 128:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 128:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 129:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 129:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

129 8(CODE) method scrollBy()
    'method'(IDENTIFIER) 'scrollBy'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 129:16 [1] 'scrollBy'(IDENTIFIER)
>>>ADVANCE 129:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 129:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 130:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 130:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

130 8(CODE) method scrollByPages()
    'method'(IDENTIFIER) 'scrollByPages'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 130:16 [1] 'scrollByPages'(IDENTIFIER)
>>>ADVANCE 130:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 130:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 132:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 132:5 [0] 'public'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> ClassDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

132 4(CODE) public class Location
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'Location'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 132:12 [1] 'class'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'class'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/Document.interface.md:132:6. Adjective: found 'class'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 132:12 [1] 'class'(IDENTIFIER)
        Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
          ClassDeclaration matched OK: class class
>>>ADVANCE 132:18 [2] 'Location'(IDENTIFIER)
          ClassDeclaration matched OK: IDENTIFIER Location
>>>ADVANCE 133:0 [-1] ' '(NEWLINE)
          ClassDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 133:9 [0] 'properties'(IDENTIFIER)
optFreeFormList [Body] parentname:Location parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

133 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 134:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 134:13 [0] 'ancestorOrigins'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ancestorOrigins'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ancestorOrigins
>>>ADVANCE 134:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 134:29 [2] 'array'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'array'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER array
>>>ADVANCE 135:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 135:13 [0] 'hash'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'hash'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER hash
>>>ADVANCE 135:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 135:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 136:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 136:13 [0] 'host'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'host'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER host
>>>ADVANCE 136:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 136:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 137:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 137:13 [0] 'hostname'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'hostname'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER hostname
>>>ADVANCE 137:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 137:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 138:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 138:13 [0] 'href'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'href'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER href
>>>ADVANCE 138:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 138:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 139:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 139:13 [0] 'origin'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'origin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER origin
>>>ADVANCE 139:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 139:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 140:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 140:13 [0] 'pathname'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'pathname'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER pathname
>>>ADVANCE 140:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 140:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 141:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 141:13 [0] 'port'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'port'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER port
>>>ADVANCE 141:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 141:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 142:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 142:13 [0] 'protocol'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'protocol'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER protocol
>>>ADVANCE 142:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 142:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 143:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 143:13 [0] 'search'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'search'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER search
>>>ADVANCE 143:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 143:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 145:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 145:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

145 8(CODE) method assign()
    'method'(IDENTIFIER) 'assign'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 145:16 [1] 'assign'(IDENTIFIER)
>>>ADVANCE 145:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 145:23 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 146:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 146:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

146 8(CODE) method reload()
    'method'(IDENTIFIER) 'reload'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 146:16 [1] 'reload'(IDENTIFIER)
>>>ADVANCE 146:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 146:23 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 147:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 147:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

147 8(CODE) method replace()
    'method'(IDENTIFIER) 'replace'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 147:16 [1] 'replace'(IDENTIFIER)
>>>ADVANCE 147:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 147:24 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 148:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 148:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

148 8(CODE) method toString()
    'method'(IDENTIFIER) 'toString'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 148:16 [1] 'toString'(IDENTIFIER)
>>>ADVANCE 148:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 148:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 149:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 149:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

149 8(CODE) method valueOf()
    'method'(IDENTIFIER) 'valueOf'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 149:16 [1] 'valueOf'(IDENTIFIER)
>>>ADVANCE 149:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 149:24 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 152:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 152:9 [0] 'public'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> ClassDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

152 4(CODE)     public class Document extends Node
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'Document'(IDENTIFIER) 'extends'(IDENTIFIER) 'Node'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 152:16 [1] 'class'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'class'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/Document.interface.md:152:10. Adjective: found 'class'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 152:16 [1] 'class'(IDENTIFIER)
        Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
          ClassDeclaration matched OK: class class
>>>ADVANCE 152:22 [2] 'Document'(IDENTIFIER)
          ClassDeclaration matched OK: IDENTIFIER Document
>>>ADVANCE 152:31 [3] 'extends'(IDENTIFIER)
          ClassDeclaration matched OK: extends extends
>>>ADVANCE 152:39 [4] 'Node'(IDENTIFIER)
          ClassDeclaration TRY VariableRef on 'Node'(IDENTIFIER)
            VariableRef matched OK: IDENTIFIER Node
>>>ADVANCE 153:0 [-1] ' '(NEWLINE)
          Parsed OK!-> VariableRef
          ClassDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 153:9 [0] 'properties'(IDENTIFIER)
optFreeFormList [Body] parentname:Document parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

153 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 154:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 154:13 [0] 'location'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'location'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER location
>>>ADVANCE 154:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 154:23 [2] 'Location'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'Location'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER Location
>>>ADVANCE 156:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 156:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

156 8(CODE) method adoptNode()
    'method'(IDENTIFIER) 'adoptNode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 156:16 [1] 'adoptNode'(IDENTIFIER)
>>>ADVANCE 156:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 156:26 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 157:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 157:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

157 8(CODE) method caretRangeFromPoint()
    'method'(IDENTIFIER) 'caretRangeFromPoint'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 157:16 [1] 'caretRangeFromPoint'(IDENTIFIER)
>>>ADVANCE 157:35 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 157:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 158:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 158:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

158 8(CODE) method createAttribute()
    'method'(IDENTIFIER) 'createAttribute'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 158:16 [1] 'createAttribute'(IDENTIFIER)
>>>ADVANCE 158:31 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 158:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 159:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 159:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

159 8(CODE) method createAttributeNS()
    'method'(IDENTIFIER) 'createAttributeNS'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 159:16 [1] 'createAttributeNS'(IDENTIFIER)
>>>ADVANCE 159:33 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 159:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 160:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 160:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

160 8(CODE) method createCDATASection()
    'method'(IDENTIFIER) 'createCDATASection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 160:16 [1] 'createCDATASection'(IDENTIFIER)
>>>ADVANCE 160:34 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 160:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 161:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 161:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

161 8(CODE) method createComment()
    'method'(IDENTIFIER) 'createComment'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 161:16 [1] 'createComment'(IDENTIFIER)
>>>ADVANCE 161:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 161:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 162:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 162:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

162 8(CODE) method createDocumentFragment()
    'method'(IDENTIFIER) 'createDocumentFragment'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 162:16 [1] 'createDocumentFragment'(IDENTIFIER)
>>>ADVANCE 162:38 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 162:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 163:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 163:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

163 8(CODE) method createElement()
    'method'(IDENTIFIER) 'createElement'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 163:16 [1] 'createElement'(IDENTIFIER)
>>>ADVANCE 163:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 163:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 164:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 164:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

164 8(CODE) method createElementNS()
    'method'(IDENTIFIER) 'createElementNS'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 164:16 [1] 'createElementNS'(IDENTIFIER)
>>>ADVANCE 164:31 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 164:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 165:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 165:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

165 8(CODE) method createEvent()
    'method'(IDENTIFIER) 'createEvent'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 165:16 [1] 'createEvent'(IDENTIFIER)
>>>ADVANCE 165:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 165:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 166:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 166:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

166 8(CODE) method createExpression()
    'method'(IDENTIFIER) 'createExpression'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 166:16 [1] 'createExpression'(IDENTIFIER)
>>>ADVANCE 166:32 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 166:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 167:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 167:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

167 8(CODE) method createNodeIterator()
    'method'(IDENTIFIER) 'createNodeIterator'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 167:16 [1] 'createNodeIterator'(IDENTIFIER)
>>>ADVANCE 167:34 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 167:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 168:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 168:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

168 8(CODE) method createNSResolver()
    'method'(IDENTIFIER) 'createNSResolver'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 168:16 [1] 'createNSResolver'(IDENTIFIER)
>>>ADVANCE 168:32 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 168:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 169:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 169:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

169 8(CODE) method createProcessingInstruction()
    'method'(IDENTIFIER) 'createProcessingInstruction'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 169:16 [1] 'createProcessingInstruction'(IDENTIFIER)
>>>ADVANCE 169:43 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 169:44 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 170:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 170:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

170 8(CODE) method createRange()
    'method'(IDENTIFIER) 'createRange'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 170:16 [1] 'createRange'(IDENTIFIER)
>>>ADVANCE 170:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 170:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 171:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 171:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

171 8(CODE) method createTextNode()
    'method'(IDENTIFIER) 'createTextNode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 171:16 [1] 'createTextNode'(IDENTIFIER)
>>>ADVANCE 171:30 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 171:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 172:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 172:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

172 8(CODE) method createTreeWalker()
    'method'(IDENTIFIER) 'createTreeWalker'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 172:16 [1] 'createTreeWalker'(IDENTIFIER)
>>>ADVANCE 172:32 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 172:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 173:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 173:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

173 8(CODE) method elementFromPoint()
    'method'(IDENTIFIER) 'elementFromPoint'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 173:16 [1] 'elementFromPoint'(IDENTIFIER)
>>>ADVANCE 173:32 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 173:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 174:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 174:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

174 8(CODE) method evaluate()
    'method'(IDENTIFIER) 'evaluate'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 174:16 [1] 'evaluate'(IDENTIFIER)
>>>ADVANCE 174:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 174:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 175:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 175:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

175 8(CODE) method execCommand()
    'method'(IDENTIFIER) 'execCommand'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 175:16 [1] 'execCommand'(IDENTIFIER)
>>>ADVANCE 175:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 175:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 176:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 176:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

176 8(CODE) method getCSSCanvasContext()
    'method'(IDENTIFIER) 'getCSSCanvasContext'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 176:16 [1] 'getCSSCanvasContext'(IDENTIFIER)
>>>ADVANCE 176:35 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 176:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 177:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 177:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

177 8(CODE) method getElementById(id) returns Element
    'method'(IDENTIFIER) 'getElementById'(IDENTIFIER) '('(LITERAL) 'id'(IDENTIFIER) ')'(LITERAL) 'returns'(IDENTIFIER) 'Element'(IDENTIFIER)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 177:16 [1] 'getElementById'(IDENTIFIER)
>>>ADVANCE 177:30 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 177:31 [3] 'id'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'id'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER id
>>>ADVANCE 177:33 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 177:35 [5] 'returns'(IDENTIFIER)
                MethodDeclaration matched OK: returns returns
>>>ADVANCE 177:43 [6] 'Element'(IDENTIFIER)
                MethodDeclaration TRY VariableRef on 'Element'(IDENTIFIER)
                  VariableRef matched OK: IDENTIFIER Element
>>>ADVANCE 178:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableRef
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 178:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

178 8(CODE) method getElementsByClassName()
    'method'(IDENTIFIER) 'getElementsByClassName'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 178:16 [1] 'getElementsByClassName'(IDENTIFIER)
>>>ADVANCE 178:38 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 178:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 179:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 179:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

179 8(CODE) method getElementsByName()
    'method'(IDENTIFIER) 'getElementsByName'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 179:16 [1] 'getElementsByName'(IDENTIFIER)
>>>ADVANCE 179:33 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 179:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 180:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 180:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

180 8(CODE) method getElementsByTagName()
    'method'(IDENTIFIER) 'getElementsByTagName'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 180:16 [1] 'getElementsByTagName'(IDENTIFIER)
>>>ADVANCE 180:36 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 180:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 181:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 181:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

181 8(CODE) method getElementsByTagNameNS()
    'method'(IDENTIFIER) 'getElementsByTagNameNS'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 181:16 [1] 'getElementsByTagNameNS'(IDENTIFIER)
>>>ADVANCE 181:38 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 181:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 182:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 182:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

182 8(CODE) method getOverrideStyle()
    'method'(IDENTIFIER) 'getOverrideStyle'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 182:16 [1] 'getOverrideStyle'(IDENTIFIER)
>>>ADVANCE 182:32 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 182:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 183:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 183:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

183 8(CODE) method getSelection()
    'method'(IDENTIFIER) 'getSelection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 183:16 [1] 'getSelection'(IDENTIFIER)
>>>ADVANCE 183:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 183:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 184:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 184:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

184 8(CODE) method importNode()
    'method'(IDENTIFIER) 'importNode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 184:16 [1] 'importNode'(IDENTIFIER)
>>>ADVANCE 184:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 184:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 185:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 185:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

185 8(CODE) method queryCommandEnabled()
    'method'(IDENTIFIER) 'queryCommandEnabled'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 185:16 [1] 'queryCommandEnabled'(IDENTIFIER)
>>>ADVANCE 185:35 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 185:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 186:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 186:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

186 8(CODE) method queryCommandIndeterm()
    'method'(IDENTIFIER) 'queryCommandIndeterm'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 186:16 [1] 'queryCommandIndeterm'(IDENTIFIER)
>>>ADVANCE 186:36 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 186:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 187:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 187:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

187 8(CODE) method queryCommandState()
    'method'(IDENTIFIER) 'queryCommandState'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 187:16 [1] 'queryCommandState'(IDENTIFIER)
>>>ADVANCE 187:33 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 187:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 188:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 188:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

188 8(CODE) method queryCommandSupported()
    'method'(IDENTIFIER) 'queryCommandSupported'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 188:16 [1] 'queryCommandSupported'(IDENTIFIER)
>>>ADVANCE 188:37 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 188:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 189:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 189:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

189 8(CODE) method queryCommandValue()
    'method'(IDENTIFIER) 'queryCommandValue'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 189:16 [1] 'queryCommandValue'(IDENTIFIER)
>>>ADVANCE 189:33 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 189:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 190:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 190:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

190 8(CODE) method registerElement()
    'method'(IDENTIFIER) 'registerElement'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 190:16 [1] 'registerElement'(IDENTIFIER)
>>>ADVANCE 190:31 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 190:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 191:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 191:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

191 8(CODE) method webkitCancelFullScreen()
    'method'(IDENTIFIER) 'webkitCancelFullScreen'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 191:16 [1] 'webkitCancelFullScreen'(IDENTIFIER)
>>>ADVANCE 191:38 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 191:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 192:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 192:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

192 8(CODE) method webkitExitFullscreen()
    'method'(IDENTIFIER) 'webkitExitFullscreen'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 192:16 [1] 'webkitExitFullscreen'(IDENTIFIER)
>>>ADVANCE 192:36 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 192:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 193:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 193:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

193 8(CODE) method webkitExitPointerLock()
    'method'(IDENTIFIER) 'webkitExitPointerLock'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 193:16 [1] 'webkitExitPointerLock'(IDENTIFIER)
>>>ADVANCE 193:37 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 193:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 195:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 195:5 [0] 'public'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> ClassDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

195 4(CODE) public class NodeList
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'NodeList'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 195:12 [1] 'class'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'class'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/Document.interface.md:195:6. Adjective: found 'class'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 195:12 [1] 'class'(IDENTIFIER)
        Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
          ClassDeclaration matched OK: class class
>>>ADVANCE 195:18 [2] 'NodeList'(IDENTIFIER)
          ClassDeclaration matched OK: IDENTIFIER NodeList
>>>ADVANCE 196:0 [-1] ' '(NEWLINE)
          ClassDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 196:9 [0] 'properties'(IDENTIFIER)
optFreeFormList [Body] parentname:NodeList parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

196 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 197:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 197:13 [0] 'length'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'length'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER length
>>>ADVANCE 200:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 200:9 [0] 'public'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> ClassDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

200 4(CODE)     public class Node
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'Node'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 200:16 [1] 'class'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'class'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/Document.interface.md:200:10. Adjective: found 'class'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 200:16 [1] 'class'(IDENTIFIER)
        Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
          ClassDeclaration matched OK: class class
>>>ADVANCE 200:22 [2] 'Node'(IDENTIFIER)
          ClassDeclaration matched OK: IDENTIFIER Node
>>>ADVANCE 201:0 [-1] ' '(NEWLINE)
          ClassDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 201:9 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Node parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'constructor'(IDENTIFIER)

201 8(CODE) constructor new Node ()
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Node'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 201:21 [1] 'new'(IDENTIFIER)
                ConstructorDeclaration matched OK: new new
>>>ADVANCE 201:25 [2] 'Node'(IDENTIFIER)
                ConstructorDeclaration matched OK: IDENTIFIER Node
>>>ADVANCE 201:30 [3] '('(LITERAL)
                ConstructorDeclaration matched OK: ( (
>>>ADVANCE 201:31 [4] ')'(LITERAL)
optSeparatedList [ConstructorDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                ConstructorDeclaration matched OK: ) )
>>>ADVANCE 203:0 [-1] ' '(NEWLINE)
                ConstructorDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> ConstructorDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 203:9 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

203 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 204:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 204:13 [0] 'baseURI'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'baseURI'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER baseURI
>>>ADVANCE 205:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 205:13 [0] 'childNodes'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'childNodes'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER childNodes
>>>ADVANCE 206:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 206:13 [0] 'firstChild'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'firstChild'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER firstChild
>>>ADVANCE 206:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 206:24 [2] 'Node'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'Node'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER Node
>>>ADVANCE 207:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 207:13 [0] 'lastChild'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'lastChild'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER lastChild
>>>ADVANCE 207:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 207:23 [2] 'Node'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'Node'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER Node
>>>ADVANCE 208:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 208:13 [0] 'localName'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'localName'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER localName
>>>ADVANCE 209:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 209:13 [0] 'namespaceURI'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'namespaceURI'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER namespaceURI
>>>ADVANCE 210:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 210:13 [0] 'nextSibling'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'nextSibling'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER nextSibling
>>>ADVANCE 210:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 210:25 [2] 'Node'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'Node'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER Node
>>>ADVANCE 211:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 211:13 [0] 'nodeName'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'nodeName'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER nodeName
>>>ADVANCE 211:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 211:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 212:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 212:13 [0] 'nodePrincipal'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'nodePrincipal'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER nodePrincipal
>>>ADVANCE 213:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 213:13 [0] 'nodeType'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'nodeType'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER nodeType
>>>ADVANCE 214:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 214:13 [0] 'nodeValue'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'nodeValue'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER nodeValue
>>>ADVANCE 215:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 215:13 [0] 'ownerDocument'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ownerDocument'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ownerDocument
>>>ADVANCE 216:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 216:13 [0] 'parentElement'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'parentElement'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER parentElement
>>>ADVANCE 217:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 217:13 [0] 'parentNode'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'parentNode'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER parentNode
>>>ADVANCE 217:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 217:24 [2] 'Node'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'Node'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER Node
>>>ADVANCE 218:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 218:13 [0] 'prefix'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'prefix'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER prefix
>>>ADVANCE 219:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 219:13 [0] 'previousSibling'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'previousSibling'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER previousSibling
>>>ADVANCE 220:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 220:13 [0] 'textContent'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textContent'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textContent
>>>ADVANCE 222:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 222:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

222 8(CODE) method appendChild()
    'method'(IDENTIFIER) 'appendChild'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 222:16 [1] 'appendChild'(IDENTIFIER)
>>>ADVANCE 222:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 222:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 223:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 223:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

223 8(CODE) method cloneNode()
    'method'(IDENTIFIER) 'cloneNode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 223:16 [1] 'cloneNode'(IDENTIFIER)
>>>ADVANCE 223:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 223:26 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 224:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 224:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

224 8(CODE) method compareDocumentPosition()
    'method'(IDENTIFIER) 'compareDocumentPosition'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 224:16 [1] 'compareDocumentPosition'(IDENTIFIER)
>>>ADVANCE 224:39 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 224:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 225:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 225:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

225 8(CODE) method contains()
    'method'(IDENTIFIER) 'contains'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 225:16 [1] 'contains'(IDENTIFIER)
>>>ADVANCE 225:24 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 225:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 226:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 226:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

226 8(CODE) method hasChildNodes()
    'method'(IDENTIFIER) 'hasChildNodes'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 226:16 [1] 'hasChildNodes'(IDENTIFIER)
>>>ADVANCE 226:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 226:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 227:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 227:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

227 8(CODE) method insertBefore()
    'method'(IDENTIFIER) 'insertBefore'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 227:16 [1] 'insertBefore'(IDENTIFIER)
>>>ADVANCE 227:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 227:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 228:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 228:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

228 8(CODE) method isDefaultNamespace()
    'method'(IDENTIFIER) 'isDefaultNamespace'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 228:16 [1] 'isDefaultNamespace'(IDENTIFIER)
>>>ADVANCE 228:34 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 228:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 229:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 229:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

229 8(CODE) method isEqualNode()
    'method'(IDENTIFIER) 'isEqualNode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 229:16 [1] 'isEqualNode'(IDENTIFIER)
>>>ADVANCE 229:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 229:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 230:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 230:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

230 8(CODE) method isSameNode()
    'method'(IDENTIFIER) 'isSameNode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 230:16 [1] 'isSameNode'(IDENTIFIER)
>>>ADVANCE 230:26 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 230:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 231:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 231:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

231 8(CODE) method isSupported()
    'method'(IDENTIFIER) 'isSupported'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 231:16 [1] 'isSupported'(IDENTIFIER)
>>>ADVANCE 231:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 231:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 232:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 232:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

232 8(CODE) method lookupNamespaceURI()
    'method'(IDENTIFIER) 'lookupNamespaceURI'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 232:16 [1] 'lookupNamespaceURI'(IDENTIFIER)
>>>ADVANCE 232:34 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 232:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 233:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 233:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

233 8(CODE) method lookupPrefix()
    'method'(IDENTIFIER) 'lookupPrefix'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 233:16 [1] 'lookupPrefix'(IDENTIFIER)
>>>ADVANCE 233:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 233:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 234:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 234:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

234 8(CODE) method normalize()
    'method'(IDENTIFIER) 'normalize'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 234:16 [1] 'normalize'(IDENTIFIER)
>>>ADVANCE 234:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 234:26 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 235:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 235:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

235 8(CODE) method removeChild()
    'method'(IDENTIFIER) 'removeChild'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 235:16 [1] 'removeChild'(IDENTIFIER)
>>>ADVANCE 235:27 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 235:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 236:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 236:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

236 8(CODE) method replaceChild()
    'method'(IDENTIFIER) 'replaceChild'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 236:16 [1] 'replaceChild'(IDENTIFIER)
>>>ADVANCE 236:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 236:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 239:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 239:9 [0] 'public'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> ClassDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

239 4(CODE)     public class Element extends Node
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'Element'(IDENTIFIER) 'extends'(IDENTIFIER) 'Node'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 239:16 [1] 'class'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'class'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/Document.interface.md:239:10. Adjective: found 'class'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 239:16 [1] 'class'(IDENTIFIER)
        Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
          ClassDeclaration matched OK: class class
>>>ADVANCE 239:22 [2] 'Element'(IDENTIFIER)
          ClassDeclaration matched OK: IDENTIFIER Element
>>>ADVANCE 239:30 [3] 'extends'(IDENTIFIER)
          ClassDeclaration matched OK: extends extends
>>>ADVANCE 239:38 [4] 'Node'(IDENTIFIER)
          ClassDeclaration TRY VariableRef on 'Node'(IDENTIFIER)
            VariableRef matched OK: IDENTIFIER Node
>>>ADVANCE 240:0 [-1] ' '(NEWLINE)
          Parsed OK!-> VariableRef
          ClassDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 240:9 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Element parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'constructor'(IDENTIFIER)

240 8(CODE) constructor new Element ()
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Element'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 240:21 [1] 'new'(IDENTIFIER)
                ConstructorDeclaration matched OK: new new
>>>ADVANCE 240:25 [2] 'Element'(IDENTIFIER)
                ConstructorDeclaration matched OK: IDENTIFIER Element
>>>ADVANCE 240:33 [3] '('(LITERAL)
                ConstructorDeclaration matched OK: ( (
>>>ADVANCE 240:34 [4] ')'(LITERAL)
optSeparatedList [ConstructorDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                ConstructorDeclaration matched OK: ) )
>>>ADVANCE 242:0 [-1] ' '(NEWLINE)
                ConstructorDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> ConstructorDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 242:9 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

242 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 244:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 244:13 [0] 'accessKey'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'accessKey'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER accessKey
>>>ADVANCE 244:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 244:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 245:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 245:13 [0] 'align'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'align'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER align
>>>ADVANCE 245:18 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 245:19 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 246:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 246:13 [0] 'attributes'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'attributes'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER attributes
>>>ADVANCE 246:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 246:24 [2] 'array'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'array'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER array
>>>ADVANCE 247:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 247:13 [0] 'baseURI'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'baseURI'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER baseURI
>>>ADVANCE 247:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 247:21 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 248:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 248:13 [0] 'childElementCount'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'childElementCount'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER childElementCount
>>>ADVANCE 248:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 248:31 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 249:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 249:13 [0] 'childNodes'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'childNodes'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER childNodes
>>>ADVANCE 249:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 249:25 [2] 'array'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'array'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER array
>>>ADVANCE 250:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 250:13 [0] 'children'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'children'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER children
>>>ADVANCE 250:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 250:22 [2] 'array'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'array'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER array
>>>ADVANCE 251:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 251:13 [0] 'classList'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'classList'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER classList
>>>ADVANCE 251:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 251:23 [2] 'array'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'array'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER array
>>>ADVANCE 252:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 252:13 [0] 'className'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'className'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER className
>>>ADVANCE 252:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 252:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 253:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 253:13 [0] 'clientHeight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'clientHeight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER clientHeight
>>>ADVANCE 253:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 253:26 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 254:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 254:13 [0] 'clientLeft'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'clientLeft'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER clientLeft
>>>ADVANCE 254:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 254:24 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 255:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 255:13 [0] 'clientTop'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'clientTop'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER clientTop
>>>ADVANCE 255:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 255:23 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 256:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 256:13 [0] 'clientWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'clientWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER clientWidth
>>>ADVANCE 256:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 256:25 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 257:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 257:13 [0] 'contentEditable'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'contentEditable'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER contentEditable
>>>ADVANCE 257:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 257:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 258:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 258:13 [0] 'dataset'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'dataset'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER dataset
>>>ADVANCE 258:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 258:21 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 259:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 259:13 [0] 'dir'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'dir'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER dir
>>>ADVANCE 259:16 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 259:17 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 260:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 260:13 [0] 'draggable'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'draggable'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER draggable
>>>ADVANCE 260:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 260:23 [2] 'boolean'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 261:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 261:13 [0] 'firstChild'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'firstChild'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER firstChild
>>>ADVANCE 261:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 261:24 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 262:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 262:13 [0] 'firstElementChild'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'firstElementChild'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER firstElementChild
>>>ADVANCE 262:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 262:31 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 263:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 263:13 [0] 'hidden'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'hidden'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER hidden
>>>ADVANCE 263:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 263:20 [2] 'boolean'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 264:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 264:13 [0] 'id'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'id'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER id
>>>ADVANCE 264:15 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 264:16 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 265:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 265:13 [0] 'innerHTML'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'innerHTML'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER innerHTML
>>>ADVANCE 265:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 265:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 266:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 266:13 [0] 'innerText'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'innerText'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER innerText
>>>ADVANCE 266:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 266:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 267:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 267:13 [0] 'isContentEditable'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'isContentEditable'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER isContentEditable
>>>ADVANCE 267:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 267:31 [2] 'boolean'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 268:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 268:13 [0] 'lang'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'lang'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER lang
>>>ADVANCE 268:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 268:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 269:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 269:13 [0] 'lastChild'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'lastChild'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER lastChild
>>>ADVANCE 269:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 269:23 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 270:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 270:13 [0] 'lastElementChild'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'lastElementChild'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER lastElementChild
>>>ADVANCE 270:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 270:30 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 271:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 271:13 [0] 'localName'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'localName'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER localName
>>>ADVANCE 271:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 271:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 272:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 272:13 [0] 'namespaceURI'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'namespaceURI'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER namespaceURI
>>>ADVANCE 272:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 272:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 273:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 273:13 [0] 'nextElementSibling'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'nextElementSibling'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER nextElementSibling
>>>ADVANCE 273:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 273:32 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 274:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 274:13 [0] 'nextSibling'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'nextSibling'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER nextSibling
>>>ADVANCE 274:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 274:25 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 275:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 275:13 [0] 'nodeName'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'nodeName'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER nodeName
>>>ADVANCE 275:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 275:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 276:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 276:13 [0] 'nodeType'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'nodeType'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER nodeType
>>>ADVANCE 276:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 276:22 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 277:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 277:13 [0] 'nodeValue'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'nodeValue'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER nodeValue
>>>ADVANCE 277:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 277:23 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 278:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 278:13 [0] 'offsetHeight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'offsetHeight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER offsetHeight
>>>ADVANCE 278:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 278:26 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 279:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 279:13 [0] 'offsetLeft'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'offsetLeft'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER offsetLeft
>>>ADVANCE 279:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 279:24 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 280:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 280:13 [0] 'offsetParent'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'offsetParent'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER offsetParent
>>>ADVANCE 280:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 280:26 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 281:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 281:13 [0] 'offsetTop'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'offsetTop'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER offsetTop
>>>ADVANCE 281:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 281:23 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 282:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 282:13 [0] 'offsetWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'offsetWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER offsetWidth
>>>ADVANCE 282:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 282:25 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 283:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 283:13 [0] 'onabort'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onabort'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onabort
>>>ADVANCE 283:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 283:21 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 284:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 284:13 [0] 'onbeforecopy'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onbeforecopy'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onbeforecopy
>>>ADVANCE 284:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 284:26 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 285:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 285:13 [0] 'onbeforecut'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onbeforecut'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onbeforecut
>>>ADVANCE 285:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 285:25 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 286:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 286:13 [0] 'onbeforepaste'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onbeforepaste'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onbeforepaste
>>>ADVANCE 286:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 286:27 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 287:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 287:13 [0] 'onblur'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onblur'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onblur
>>>ADVANCE 287:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 287:20 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 288:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 288:13 [0] 'oncancel'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'oncancel'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER oncancel
>>>ADVANCE 288:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 288:22 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 289:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 289:13 [0] 'oncanplay'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'oncanplay'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER oncanplay
>>>ADVANCE 289:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 289:23 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 290:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 290:13 [0] 'oncanplaythrough'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'oncanplaythrough'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER oncanplaythrough
>>>ADVANCE 290:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 290:30 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 291:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 291:13 [0] 'onchange'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onchange'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onchange
>>>ADVANCE 291:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 291:22 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 292:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 292:13 [0] 'onclick'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onclick'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onclick
>>>ADVANCE 292:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 292:21 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 293:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 293:13 [0] 'onclose'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onclose'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onclose
>>>ADVANCE 293:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 293:21 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 294:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 294:13 [0] 'oncontextmenu'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'oncontextmenu'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER oncontextmenu
>>>ADVANCE 294:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 294:27 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 295:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 295:13 [0] 'oncopy'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'oncopy'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER oncopy
>>>ADVANCE 295:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 295:20 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 296:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 296:13 [0] 'oncuechange'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'oncuechange'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER oncuechange
>>>ADVANCE 296:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 296:25 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 297:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 297:13 [0] 'oncut'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'oncut'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER oncut
>>>ADVANCE 297:18 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 297:19 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 298:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 298:13 [0] 'ondblclick'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondblclick'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondblclick
>>>ADVANCE 298:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 298:24 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 299:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 299:13 [0] 'ondrag'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondrag'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondrag
>>>ADVANCE 299:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 299:20 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 300:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 300:13 [0] 'ondragend'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondragend'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondragend
>>>ADVANCE 300:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 300:23 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 301:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 301:13 [0] 'ondragenter'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondragenter'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondragenter
>>>ADVANCE 301:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 301:25 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 302:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 302:13 [0] 'ondragleave'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondragleave'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondragleave
>>>ADVANCE 302:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 302:25 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 303:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 303:13 [0] 'ondragover'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondragover'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondragover
>>>ADVANCE 303:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 303:24 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 304:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 304:13 [0] 'ondragstart'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondragstart'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondragstart
>>>ADVANCE 304:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 304:25 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 305:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 305:13 [0] 'ondrop'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondrop'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondrop
>>>ADVANCE 305:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 305:20 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 306:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 306:13 [0] 'ondurationchange'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ondurationchange'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ondurationchange
>>>ADVANCE 306:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 306:30 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 307:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 307:13 [0] 'onemptied'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onemptied'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onemptied
>>>ADVANCE 307:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 307:23 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 308:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 308:13 [0] 'onended'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onended'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onended
>>>ADVANCE 308:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 308:21 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 309:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 309:13 [0] 'onerror'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onerror'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onerror
>>>ADVANCE 309:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 309:21 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 310:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 310:13 [0] 'onfocus'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onfocus'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onfocus
>>>ADVANCE 310:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 310:21 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 311:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 311:13 [0] 'oninput'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'oninput'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER oninput
>>>ADVANCE 311:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 311:21 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 312:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 312:13 [0] 'oninvalid'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'oninvalid'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER oninvalid
>>>ADVANCE 312:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 312:23 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 313:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 313:13 [0] 'onkeydown'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onkeydown'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onkeydown
>>>ADVANCE 313:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 313:23 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 314:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 314:13 [0] 'onkeypress'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onkeypress'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onkeypress
>>>ADVANCE 314:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 314:24 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 315:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 315:13 [0] 'onkeyup'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onkeyup'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onkeyup
>>>ADVANCE 315:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 315:21 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 316:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 316:13 [0] 'onload'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onload'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onload
>>>ADVANCE 316:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 316:20 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 317:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 317:13 [0] 'onloadeddata'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onloadeddata'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onloadeddata
>>>ADVANCE 317:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 317:26 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 318:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 318:13 [0] 'onloadedmetadata'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onloadedmetadata'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onloadedmetadata
>>>ADVANCE 318:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 318:30 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 319:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 319:13 [0] 'onloadstart'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onloadstart'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onloadstart
>>>ADVANCE 319:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 319:25 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 320:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 320:13 [0] 'onmousedown'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onmousedown'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onmousedown
>>>ADVANCE 320:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 320:25 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 321:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 321:13 [0] 'onmouseenter'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onmouseenter'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onmouseenter
>>>ADVANCE 321:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 321:26 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 322:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 322:13 [0] 'onmouseleave'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onmouseleave'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onmouseleave
>>>ADVANCE 322:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 322:26 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 323:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 323:13 [0] 'onmousemove'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onmousemove'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onmousemove
>>>ADVANCE 323:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 323:25 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 324:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 324:13 [0] 'onmouseout'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onmouseout'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onmouseout
>>>ADVANCE 324:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 324:24 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 325:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 325:13 [0] 'onmouseover'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onmouseover'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onmouseover
>>>ADVANCE 325:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 325:25 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 326:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 326:13 [0] 'onmouseup'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onmouseup'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onmouseup
>>>ADVANCE 326:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 326:23 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 327:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 327:13 [0] 'onmousewheel'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onmousewheel'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onmousewheel
>>>ADVANCE 327:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 327:26 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 328:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 328:13 [0] 'onpaste'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onpaste'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onpaste
>>>ADVANCE 328:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 328:21 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 329:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 329:13 [0] 'onpause'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onpause'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onpause
>>>ADVANCE 329:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 329:21 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 330:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 330:13 [0] 'onplay'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onplay'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onplay
>>>ADVANCE 330:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 330:20 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 331:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 331:13 [0] 'onplaying'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onplaying'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onplaying
>>>ADVANCE 331:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 331:23 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 332:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 332:13 [0] 'onprogress'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onprogress'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onprogress
>>>ADVANCE 332:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 332:24 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 333:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 333:13 [0] 'onratechange'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onratechange'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onratechange
>>>ADVANCE 333:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 333:26 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 334:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 334:13 [0] 'onreset'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onreset'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onreset
>>>ADVANCE 334:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 334:21 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 335:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 335:13 [0] 'onscroll'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onscroll'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onscroll
>>>ADVANCE 335:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 335:22 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 336:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 336:13 [0] 'onsearch'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onsearch'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onsearch
>>>ADVANCE 336:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 336:22 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 337:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 337:13 [0] 'onseeked'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onseeked'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onseeked
>>>ADVANCE 337:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 337:22 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 338:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 338:13 [0] 'onseeking'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onseeking'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onseeking
>>>ADVANCE 338:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 338:23 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 339:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 339:13 [0] 'onselect'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onselect'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onselect
>>>ADVANCE 339:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 339:22 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 340:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 340:13 [0] 'onselectstart'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onselectstart'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onselectstart
>>>ADVANCE 340:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 340:27 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 341:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 341:13 [0] 'onshow'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onshow'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onshow
>>>ADVANCE 341:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 341:20 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 342:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 342:13 [0] 'onstalled'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onstalled'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onstalled
>>>ADVANCE 342:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 342:23 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 343:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 343:13 [0] 'onsubmit'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onsubmit'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onsubmit
>>>ADVANCE 343:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 343:22 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 344:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 344:13 [0] 'onsuspend'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onsuspend'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onsuspend
>>>ADVANCE 344:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 344:23 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 345:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 345:13 [0] 'ontimeupdate'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ontimeupdate'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ontimeupdate
>>>ADVANCE 345:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 345:26 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 346:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 346:13 [0] 'onvolumechange'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onvolumechange'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onvolumechange
>>>ADVANCE 346:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 346:28 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 347:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 347:13 [0] 'onwaiting'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onwaiting'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onwaiting
>>>ADVANCE 347:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 347:23 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 348:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 348:13 [0] 'onwebkitfullscreenchange'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onwebkitfullscreenchange'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onwebkitfullscreenchange
>>>ADVANCE 348:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 348:38 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 349:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 349:13 [0] 'onwebkitfullscreenerror'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onwebkitfullscreenerror'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onwebkitfullscreenerror
>>>ADVANCE 349:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 349:37 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 350:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 350:13 [0] 'onwheel'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onwheel'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onwheel
>>>ADVANCE 350:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 350:21 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 351:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 351:13 [0] 'outerHTML'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'outerHTML'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER outerHTML
>>>ADVANCE 351:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 351:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 352:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 352:13 [0] 'outerText'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'outerText'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER outerText
>>>ADVANCE 352:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 352:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 353:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 353:13 [0] 'ownerDocument'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ownerDocument'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ownerDocument
>>>ADVANCE 353:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 353:27 [2] 'Document'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'Document'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER Document
>>>ADVANCE 354:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 354:13 [0] 'parentElement'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'parentElement'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER parentElement
>>>ADVANCE 354:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 354:27 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 355:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 355:13 [0] 'parentNode'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'parentNode'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER parentNode
>>>ADVANCE 355:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 355:24 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 356:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 356:13 [0] 'prefix'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'prefix'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER prefix
>>>ADVANCE 356:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 356:20 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 357:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 357:13 [0] 'previousElementSibling'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'previousElementSibling'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER previousElementSibling
>>>ADVANCE 357:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 357:36 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 358:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 358:13 [0] 'previousSibling'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'previousSibling'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER previousSibling
>>>ADVANCE 358:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 358:29 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 359:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 359:13 [0] 'scrollHeight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'scrollHeight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER scrollHeight
>>>ADVANCE 359:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 359:26 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 360:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 360:13 [0] 'scrollLeft'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'scrollLeft'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER scrollLeft
>>>ADVANCE 360:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 360:24 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 361:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 361:13 [0] 'scrollTop'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'scrollTop'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER scrollTop
>>>ADVANCE 361:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 361:23 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 362:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 362:13 [0] 'scrollWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'scrollWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER scrollWidth
>>>ADVANCE 362:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 362:25 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 363:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 363:13 [0] 'spellcheck'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'spellcheck'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER spellcheck
>>>ADVANCE 363:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 363:24 [2] 'boolean'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 364:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 364:13 [0] 'style'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'style'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER style
>>>ADVANCE 364:18 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 364:19 [2] 'CSSStyle'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'CSSStyle'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER CSSStyle
>>>ADVANCE 365:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 365:13 [0] 'tabIndex'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'tabIndex'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER tabIndex
>>>ADVANCE 365:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 365:22 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 366:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 366:13 [0] 'tagName'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'tagName'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER tagName
>>>ADVANCE 366:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 366:21 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 367:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 367:13 [0] 'textContent'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textContent'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textContent
>>>ADVANCE 367:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 367:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 368:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 368:13 [0] 'title'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'title'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER title
>>>ADVANCE 368:18 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 368:19 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 369:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 369:13 [0] 'translate'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'translate'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER translate
>>>ADVANCE 369:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 369:23 [2] 'boolean'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 370:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 370:13 [0] 'value'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 371:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 371:13 [0] 'webkitdropzone'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitdropzone'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitdropzone
>>>ADVANCE 371:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 371:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 372:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 372:13 [0] 'webkitPseudo'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitPseudo'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitPseudo
>>>ADVANCE 372:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 372:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 373:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 373:13 [0] 'webkitShadowRoot'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitShadowRoot'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitShadowRoot
>>>ADVANCE 373:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 373:30 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 375:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 375:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

375 8(CODE) method blur()
    'method'(IDENTIFIER) 'blur'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 375:16 [1] 'blur'(IDENTIFIER)
>>>ADVANCE 375:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 375:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 376:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 376:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

376 8(CODE) method focus()
    'method'(IDENTIFIER) 'focus'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 376:16 [1] 'focus'(IDENTIFIER)
>>>ADVANCE 376:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 376:22 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 377:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 377:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

377 8(CODE) method getAttribute()
    'method'(IDENTIFIER) 'getAttribute'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 377:16 [1] 'getAttribute'(IDENTIFIER)
>>>ADVANCE 377:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 377:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 378:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 378:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

378 8(CODE) method getAttributeNode()
    'method'(IDENTIFIER) 'getAttributeNode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 378:16 [1] 'getAttributeNode'(IDENTIFIER)
>>>ADVANCE 378:32 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 378:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 379:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 379:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

379 8(CODE) method getAttributeNodeNS()
    'method'(IDENTIFIER) 'getAttributeNodeNS'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 379:16 [1] 'getAttributeNodeNS'(IDENTIFIER)
>>>ADVANCE 379:34 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 379:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 380:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 380:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

380 8(CODE) method getAttributeNS()
    'method'(IDENTIFIER) 'getAttributeNS'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 380:16 [1] 'getAttributeNS'(IDENTIFIER)
>>>ADVANCE 380:30 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 380:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 381:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 381:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

381 8(CODE) method getBoundingClientRect()
    'method'(IDENTIFIER) 'getBoundingClientRect'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 381:16 [1] 'getBoundingClientRect'(IDENTIFIER)
>>>ADVANCE 381:37 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 381:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 382:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 382:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

382 8(CODE) method getClientRects()
    'method'(IDENTIFIER) 'getClientRects'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 382:16 [1] 'getClientRects'(IDENTIFIER)
>>>ADVANCE 382:30 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 382:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 383:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 383:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

383 8(CODE) method getElementsByClassName()
    'method'(IDENTIFIER) 'getElementsByClassName'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 383:16 [1] 'getElementsByClassName'(IDENTIFIER)
>>>ADVANCE 383:38 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 383:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 384:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 384:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

384 8(CODE) method getElementsByTagName()
    'method'(IDENTIFIER) 'getElementsByTagName'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 384:16 [1] 'getElementsByTagName'(IDENTIFIER)
>>>ADVANCE 384:36 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 384:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 385:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 385:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

385 8(CODE) method getElementsByTagNameNS()
    'method'(IDENTIFIER) 'getElementsByTagNameNS'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 385:16 [1] 'getElementsByTagNameNS'(IDENTIFIER)
>>>ADVANCE 385:38 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 385:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 386:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 386:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

386 8(CODE) method hasAttribute()
    'method'(IDENTIFIER) 'hasAttribute'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 386:16 [1] 'hasAttribute'(IDENTIFIER)
>>>ADVANCE 386:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 386:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 387:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 387:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

387 8(CODE) method hasAttributeNS()
    'method'(IDENTIFIER) 'hasAttributeNS'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 387:16 [1] 'hasAttributeNS'(IDENTIFIER)
>>>ADVANCE 387:30 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 387:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 388:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 388:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

388 8(CODE) method hasAttributes()
    'method'(IDENTIFIER) 'hasAttributes'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 388:16 [1] 'hasAttributes'(IDENTIFIER)
>>>ADVANCE 388:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 388:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 389:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 389:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

389 8(CODE) method insertAdjacentHTML()
    'method'(IDENTIFIER) 'insertAdjacentHTML'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 389:16 [1] 'insertAdjacentHTML'(IDENTIFIER)
>>>ADVANCE 389:34 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 389:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 390:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 390:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

390 8(CODE) method querySelector()
    'method'(IDENTIFIER) 'querySelector'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 390:16 [1] 'querySelector'(IDENTIFIER)
>>>ADVANCE 390:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 390:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 391:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 391:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

391 8(CODE) method querySelectorAll()
    'method'(IDENTIFIER) 'querySelectorAll'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 391:16 [1] 'querySelectorAll'(IDENTIFIER)
>>>ADVANCE 391:32 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 391:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 392:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 392:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

392 8(CODE) method remove()
    'method'(IDENTIFIER) 'remove'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 392:16 [1] 'remove'(IDENTIFIER)
>>>ADVANCE 392:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 392:23 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 393:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 393:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

393 8(CODE) method removeAttribute()
    'method'(IDENTIFIER) 'removeAttribute'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 393:16 [1] 'removeAttribute'(IDENTIFIER)
>>>ADVANCE 393:31 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 393:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 394:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 394:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

394 8(CODE) method removeAttributeNode()
    'method'(IDENTIFIER) 'removeAttributeNode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 394:16 [1] 'removeAttributeNode'(IDENTIFIER)
>>>ADVANCE 394:35 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 394:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 395:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 395:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

395 8(CODE) method removeAttributeNS()
    'method'(IDENTIFIER) 'removeAttributeNS'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 395:16 [1] 'removeAttributeNS'(IDENTIFIER)
>>>ADVANCE 395:33 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 395:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 396:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 396:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

396 8(CODE) method scrollByLines()
    'method'(IDENTIFIER) 'scrollByLines'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 396:16 [1] 'scrollByLines'(IDENTIFIER)
>>>ADVANCE 396:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 396:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 397:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 397:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

397 8(CODE) method scrollByPages()
    'method'(IDENTIFIER) 'scrollByPages'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 397:16 [1] 'scrollByPages'(IDENTIFIER)
>>>ADVANCE 397:29 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 397:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 398:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 398:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

398 8(CODE) method scrollIntoView()
    'method'(IDENTIFIER) 'scrollIntoView'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 398:16 [1] 'scrollIntoView'(IDENTIFIER)
>>>ADVANCE 398:30 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 398:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 399:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 399:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

399 8(CODE) method scrollIntoViewIfNeeded()
    'method'(IDENTIFIER) 'scrollIntoViewIfNeeded'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 399:16 [1] 'scrollIntoViewIfNeeded'(IDENTIFIER)
>>>ADVANCE 399:38 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 399:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 400:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 400:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

400 8(CODE) method setAttribute()
    'method'(IDENTIFIER) 'setAttribute'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 400:16 [1] 'setAttribute'(IDENTIFIER)
>>>ADVANCE 400:28 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 400:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 401:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 401:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

401 8(CODE) method setAttributeNode()
    'method'(IDENTIFIER) 'setAttributeNode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 401:16 [1] 'setAttributeNode'(IDENTIFIER)
>>>ADVANCE 401:32 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 401:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 402:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 402:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

402 8(CODE) method setAttributeNodeNS()
    'method'(IDENTIFIER) 'setAttributeNodeNS'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 402:16 [1] 'setAttributeNodeNS'(IDENTIFIER)
>>>ADVANCE 402:34 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 402:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 403:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 403:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

403 8(CODE) method setAttributeNS()
    'method'(IDENTIFIER) 'setAttributeNS'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 403:16 [1] 'setAttributeNS'(IDENTIFIER)
>>>ADVANCE 403:30 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 403:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 404:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 404:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

404 8(CODE) method webkitCreateShadowRoot()
    'method'(IDENTIFIER) 'webkitCreateShadowRoot'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 404:16 [1] 'webkitCreateShadowRoot'(IDENTIFIER)
>>>ADVANCE 404:38 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 404:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 405:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 405:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

405 8(CODE) method webkitMatchesSelector()
    'method'(IDENTIFIER) 'webkitMatchesSelector'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 405:16 [1] 'webkitMatchesSelector'(IDENTIFIER)
>>>ADVANCE 405:37 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 405:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 406:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 406:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

406 8(CODE) method webkitRequestFullScreen()
    'method'(IDENTIFIER) 'webkitRequestFullScreen'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 406:16 [1] 'webkitRequestFullScreen'(IDENTIFIER)
>>>ADVANCE 406:39 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 406:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 407:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 407:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

407 8(CODE) method webkitRequestPointerLock()
    'method'(IDENTIFIER) 'webkitRequestPointerLock'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 407:16 [1] 'webkitRequestPointerLock'(IDENTIFIER)
>>>ADVANCE 407:40 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 407:41 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 410:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 410:9 [0] 'public'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> ClassDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

410 4(CODE)     public class XMLHttpRequest
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'XMLHttpRequest'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 410:16 [1] 'class'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'class'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/Document.interface.md:410:10. Adjective: found 'class'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 410:16 [1] 'class'(IDENTIFIER)
        Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
          ClassDeclaration matched OK: class class
>>>ADVANCE 410:22 [2] 'XMLHttpRequest'(IDENTIFIER)
          ClassDeclaration matched OK: IDENTIFIER XMLHttpRequest
>>>ADVANCE 412:0 [-1] ' '(NEWLINE)
          ClassDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 412:9 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:XMLHttpRequest parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'constructor'(IDENTIFIER)

412 8(CODE) constructor new XMLHttpRequest ()
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'XMLHttpRequest'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 412:21 [1] 'new'(IDENTIFIER)
                ConstructorDeclaration matched OK: new new
>>>ADVANCE 412:25 [2] 'XMLHttpRequest'(IDENTIFIER)
                ConstructorDeclaration matched OK: IDENTIFIER XMLHttpRequest
>>>ADVANCE 412:40 [3] '('(LITERAL)
                ConstructorDeclaration matched OK: ( (
>>>ADVANCE 412:41 [4] ')'(LITERAL)
optSeparatedList [ConstructorDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                ConstructorDeclaration matched OK: ) )
>>>ADVANCE 414:0 [-1] ' '(NEWLINE)
                ConstructorDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> ConstructorDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 414:9 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

414 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 416:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 416:13 [0] 'onload'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onload'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onload
>>>ADVANCE 416:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 416:20 [2] 'function'(IDENTIFIER)
                  VariableDecl matched OK: function function
>>>ADVANCE 417:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 417:13 [0] 'onerror'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'onerror'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER onerror
>>>ADVANCE 417:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 417:21 [2] 'function'(IDENTIFIER)
                  VariableDecl matched OK: function function
>>>ADVANCE 418:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 418:13 [0] 'ontimeout'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'ontimeout'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ontimeout
>>>ADVANCE 418:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 418:23 [2] 'function'(IDENTIFIER)
                  VariableDecl matched OK: function function
>>>ADVANCE 420:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 420:13 [0] 'readyState'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'readyState'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER readyState
>>>ADVANCE 420:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 420:24 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 422:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 422:13 [0] 'response'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'response'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER response
>>>ADVANCE 422:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 422:22 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 423:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 423:13 [0] 'responseText'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'responseText'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER responseText
>>>ADVANCE 423:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 423:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 424:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 424:13 [0] 'responseType'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'responseType'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER responseType
>>>ADVANCE 424:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 424:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 425:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 425:13 [0] 'responseXML'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'responseXML'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER responseXML
>>>ADVANCE 425:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 425:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 427:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 427:13 [0] 'status'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'status'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER status
>>>ADVANCE 427:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 427:20 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 428:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 428:13 [0] 'statusText'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'statusText'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER statusText
>>>ADVANCE 428:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 428:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 430:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 430:13 [0] 'timeout'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'timeout'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER timeout
>>>ADVANCE 430:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 430:21 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 431:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 431:13 [0] 'upload'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'upload'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER upload
>>>ADVANCE 431:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 431:20 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 432:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 432:13 [0] 'withCredentials'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'withCredentials'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER withCredentials
>>>ADVANCE 432:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 432:29 [2] 'boolean'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 435:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 435:13 [0] 'UNSENT'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'UNSENT'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER UNSENT
>>>ADVANCE 435:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 435:20 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 436:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 436:13 [0] 'OPENED'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'OPENED'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER OPENED
>>>ADVANCE 436:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 436:20 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 437:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 437:13 [0] 'HEADERS_RECEIVED'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'HEADERS_RECEIVED'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER HEADERS_RECEIVED
>>>ADVANCE 437:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 437:30 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 438:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 438:13 [0] 'LOADING'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'LOADING'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER LOADING
>>>ADVANCE 438:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 438:21 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 439:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 439:13 [0] 'DONE'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'DONE'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER DONE
>>>ADVANCE 439:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 439:18 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 442:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 442:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

442 8(CODE) method abort()
    'method'(IDENTIFIER) 'abort'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 442:16 [1] 'abort'(IDENTIFIER)
>>>ADVANCE 442:21 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 442:22 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 443:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 443:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

443 8(CODE) method getAllResponseHeaders()
    'method'(IDENTIFIER) 'getAllResponseHeaders'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 443:16 [1] 'getAllResponseHeaders'(IDENTIFIER)
>>>ADVANCE 443:37 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 443:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 444:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 444:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

444 8(CODE) method getResponseHeader()
    'method'(IDENTIFIER) 'getResponseHeader'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 444:16 [1] 'getResponseHeader'(IDENTIFIER)
>>>ADVANCE 444:33 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 444:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 445:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 445:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

445 8(CODE) method open()
    'method'(IDENTIFIER) 'open'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 445:16 [1] 'open'(IDENTIFIER)
>>>ADVANCE 445:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 445:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 446:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 446:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

446 8(CODE) method overrideMimeType()
    'method'(IDENTIFIER) 'overrideMimeType'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 446:16 [1] 'overrideMimeType'(IDENTIFIER)
>>>ADVANCE 446:32 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 446:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 447:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 447:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

447 8(CODE) method send()
    'method'(IDENTIFIER) 'send'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 447:16 [1] 'send'(IDENTIFIER)
>>>ADVANCE 447:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 447:21 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 448:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 448:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

448 8(CODE) method setRequestHeader()
    'method'(IDENTIFIER) 'setRequestHeader'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 448:16 [1] 'setRequestHeader'(IDENTIFIER)
>>>ADVANCE 448:32 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 448:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 452:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 452:9 [0] 'public'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> ClassDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

452 4(CODE)     public class Event
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'Event'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 452:16 [1] 'class'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'class'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/Document.interface.md:452:10. Adjective: found 'class'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 452:16 [1] 'class'(IDENTIFIER)
        Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
          ClassDeclaration matched OK: class class
>>>ADVANCE 452:22 [2] 'Event'(IDENTIFIER)
          ClassDeclaration matched OK: IDENTIFIER Event
>>>ADVANCE 453:0 [-1] ' '(NEWLINE)
          ClassDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 453:9 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Event parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'constructor'(IDENTIFIER)

453 8(CODE) constructor new Event ()
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Event'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 453:21 [1] 'new'(IDENTIFIER)
                ConstructorDeclaration matched OK: new new
>>>ADVANCE 453:25 [2] 'Event'(IDENTIFIER)
                ConstructorDeclaration matched OK: IDENTIFIER Event
>>>ADVANCE 453:31 [3] '('(LITERAL)
                ConstructorDeclaration matched OK: ( (
>>>ADVANCE 453:32 [4] ')'(LITERAL)
optSeparatedList [ConstructorDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                ConstructorDeclaration matched OK: ) )
>>>ADVANCE 455:0 [-1] ' '(NEWLINE)
                ConstructorDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> ConstructorDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 455:9 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

455 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 456:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 456:13 [0] 'bubbles'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'bubbles'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER bubbles
>>>ADVANCE 456:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 456:21 [2] 'boolean'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 457:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 457:13 [0] 'cancelBubble'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'cancelBubble'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER cancelBubble
>>>ADVANCE 457:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 457:26 [2] 'boolean'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 458:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 458:13 [0] 'cancelable'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'cancelable'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER cancelable
>>>ADVANCE 458:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 458:24 [2] 'boolean'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 459:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 459:13 [0] 'currentTarget'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'currentTarget'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER currentTarget
>>>ADVANCE 460:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 460:13 [0] 'defaultPrevented'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'defaultPrevented'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER defaultPrevented
>>>ADVANCE 461:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 461:13 [0] 'eventPhase'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'eventPhase'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER eventPhase
>>>ADVANCE 462:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 462:13 [0] 'explicitOriginalTarget'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'explicitOriginalTarget'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER explicitOriginalTarget
>>>ADVANCE 463:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 463:13 [0] 'originalTarget'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'originalTarget'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER originalTarget
>>>ADVANCE 464:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 464:13 [0] 'target'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'target'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER target
>>>ADVANCE 465:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 465:13 [0] 'timeStamp'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'timeStamp'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER timeStamp
>>>ADVANCE 466:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 466:13 [0] 'type'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'type'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER type
>>>ADVANCE 466:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 466:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 467:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 467:13 [0] 'isTrusted'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'isTrusted'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER isTrusted
>>>ADVANCE 469:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 469:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

469 8(CODE) method initEvent()
    'method'(IDENTIFIER) 'initEvent'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 469:16 [1] 'initEvent'(IDENTIFIER)
>>>ADVANCE 469:25 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 469:26 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 470:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 470:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

470 8(CODE) method preventDefault()
    'method'(IDENTIFIER) 'preventDefault'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 470:16 [1] 'preventDefault'(IDENTIFIER)
>>>ADVANCE 470:30 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 470:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 471:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 471:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

471 8(CODE) method stopImmediatePropagation()
    'method'(IDENTIFIER) 'stopImmediatePropagation'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 471:16 [1] 'stopImmediatePropagation'(IDENTIFIER)
>>>ADVANCE 471:40 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 471:41 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 472:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 472:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

472 8(CODE) method stopPropagation()
    'method'(IDENTIFIER) 'stopPropagation'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 472:16 [1] 'stopPropagation'(IDENTIFIER)
>>>ADVANCE 472:31 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 472:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration matched OK: ) )
>>>ADVANCE 475:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 475:9 [0] 'public'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> ClassDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

475 4(CODE)     public class CSSStyle
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'CSSStyle'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 475:16 [1] 'class'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'class'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/Document.interface.md:475:10. Adjective: found 'class'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 475:16 [1] 'class'(IDENTIFIER)
        Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
          ClassDeclaration matched OK: class class
>>>ADVANCE 475:22 [2] 'CSSStyle'(IDENTIFIER)
          ClassDeclaration matched OK: IDENTIFIER CSSStyle
>>>ADVANCE 476:0 [-1] ' '(NEWLINE)
          ClassDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 476:9 [0] 'properties'(IDENTIFIER)
optFreeFormList [Body] parentname:CSSStyle parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

476 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 477:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 477:13 [0] 'alignContent'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'alignContent'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER alignContent
>>>ADVANCE 477:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 477:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 478:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 478:13 [0] 'alignItems'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'alignItems'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER alignItems
>>>ADVANCE 478:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 478:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 479:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 479:13 [0] 'alignmentBaseline'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'alignmentBaseline'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER alignmentBaseline
>>>ADVANCE 479:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 479:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 480:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 480:13 [0] 'alignSelf'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'alignSelf'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER alignSelf
>>>ADVANCE 480:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 480:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 481:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 481:13 [0] 'background'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'background'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER background
>>>ADVANCE 481:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 481:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 482:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 482:13 [0] 'backgroundAttachment'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'backgroundAttachment'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER backgroundAttachment
>>>ADVANCE 482:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 482:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 483:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 483:13 [0] 'backgroundClip'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'backgroundClip'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER backgroundClip
>>>ADVANCE 483:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 483:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 484:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 484:13 [0] 'backgroundColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'backgroundColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER backgroundColor
>>>ADVANCE 484:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 484:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 485:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 485:13 [0] 'backgroundImage'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'backgroundImage'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER backgroundImage
>>>ADVANCE 485:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 485:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 486:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 486:13 [0] 'backgroundOrigin'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'backgroundOrigin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER backgroundOrigin
>>>ADVANCE 486:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 486:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 487:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 487:13 [0] 'backgroundPosition'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'backgroundPosition'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER backgroundPosition
>>>ADVANCE 487:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 487:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 488:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 488:13 [0] 'backgroundPositionX'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'backgroundPositionX'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER backgroundPositionX
>>>ADVANCE 488:32 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 488:33 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 489:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 489:13 [0] 'backgroundPositionY'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'backgroundPositionY'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER backgroundPositionY
>>>ADVANCE 489:32 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 489:33 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 490:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 490:13 [0] 'backgroundRepeat'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'backgroundRepeat'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER backgroundRepeat
>>>ADVANCE 490:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 490:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 491:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 491:13 [0] 'backgroundRepeatX'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'backgroundRepeatX'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER backgroundRepeatX
>>>ADVANCE 491:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 491:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 492:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 492:13 [0] 'backgroundRepeatY'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'backgroundRepeatY'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER backgroundRepeatY
>>>ADVANCE 492:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 492:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 493:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 493:13 [0] 'backgroundSize'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'backgroundSize'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER backgroundSize
>>>ADVANCE 493:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 493:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 494:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 494:13 [0] 'baselineShift'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'baselineShift'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER baselineShift
>>>ADVANCE 494:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 494:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 495:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 495:13 [0] 'border'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'border'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER border
>>>ADVANCE 495:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 495:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 496:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 496:13 [0] 'borderBottom'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderBottom'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderBottom
>>>ADVANCE 496:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 496:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 497:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 497:13 [0] 'borderBottomColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderBottomColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderBottomColor
>>>ADVANCE 497:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 497:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 498:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 498:13 [0] 'borderBottomLeftRadius'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderBottomLeftRadius'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderBottomLeftRadius
>>>ADVANCE 498:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 498:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 499:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 499:13 [0] 'borderBottomRightRadius'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderBottomRightRadius'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderBottomRightRadius
>>>ADVANCE 499:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 499:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 500:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 500:13 [0] 'borderBottomStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderBottomStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderBottomStyle
>>>ADVANCE 500:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 500:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 501:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 501:13 [0] 'borderBottomWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderBottomWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderBottomWidth
>>>ADVANCE 501:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 501:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 502:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 502:13 [0] 'borderCollapse'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderCollapse'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderCollapse
>>>ADVANCE 502:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 502:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 503:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 503:13 [0] 'borderColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderColor
>>>ADVANCE 503:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 503:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 504:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 504:13 [0] 'borderImage'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderImage'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderImage
>>>ADVANCE 504:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 504:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 505:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 505:13 [0] 'borderImageOutset'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderImageOutset'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderImageOutset
>>>ADVANCE 505:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 505:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 506:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 506:13 [0] 'borderImageRepeat'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderImageRepeat'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderImageRepeat
>>>ADVANCE 506:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 506:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 507:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 507:13 [0] 'borderImageSlice'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderImageSlice'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderImageSlice
>>>ADVANCE 507:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 507:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 508:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 508:13 [0] 'borderImageSource'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderImageSource'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderImageSource
>>>ADVANCE 508:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 508:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 509:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 509:13 [0] 'borderImageWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderImageWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderImageWidth
>>>ADVANCE 509:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 509:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 510:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 510:13 [0] 'borderLeft'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderLeft'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderLeft
>>>ADVANCE 510:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 510:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 511:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 511:13 [0] 'borderLeftColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderLeftColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderLeftColor
>>>ADVANCE 511:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 511:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 512:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 512:13 [0] 'borderLeftStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderLeftStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderLeftStyle
>>>ADVANCE 512:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 512:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 513:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 513:13 [0] 'borderLeftWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderLeftWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderLeftWidth
>>>ADVANCE 513:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 513:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 514:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 514:13 [0] 'borderRadius'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderRadius'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderRadius
>>>ADVANCE 514:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 514:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 515:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 515:13 [0] 'borderRight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderRight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderRight
>>>ADVANCE 515:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 515:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 516:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 516:13 [0] 'borderRightColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderRightColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderRightColor
>>>ADVANCE 516:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 516:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 517:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 517:13 [0] 'borderRightStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderRightStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderRightStyle
>>>ADVANCE 517:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 517:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 518:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 518:13 [0] 'borderRightWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderRightWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderRightWidth
>>>ADVANCE 518:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 518:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 519:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 519:13 [0] 'borderSpacing'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderSpacing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderSpacing
>>>ADVANCE 519:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 519:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 520:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 520:13 [0] 'borderStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderStyle
>>>ADVANCE 520:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 520:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 521:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 521:13 [0] 'borderTop'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderTop'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderTop
>>>ADVANCE 521:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 521:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 522:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 522:13 [0] 'borderTopColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderTopColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderTopColor
>>>ADVANCE 522:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 522:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 523:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 523:13 [0] 'borderTopLeftRadius'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderTopLeftRadius'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderTopLeftRadius
>>>ADVANCE 523:32 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 523:33 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 524:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 524:13 [0] 'borderTopRightRadius'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderTopRightRadius'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderTopRightRadius
>>>ADVANCE 524:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 524:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 525:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 525:13 [0] 'borderTopStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderTopStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderTopStyle
>>>ADVANCE 525:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 525:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 526:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 526:13 [0] 'borderTopWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderTopWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderTopWidth
>>>ADVANCE 526:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 526:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 527:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 527:13 [0] 'borderWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'borderWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER borderWidth
>>>ADVANCE 527:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 527:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 528:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 528:13 [0] 'bottom'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'bottom'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER bottom
>>>ADVANCE 528:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 528:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 529:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 529:13 [0] 'boxShadow'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'boxShadow'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER boxShadow
>>>ADVANCE 529:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 529:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 530:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 530:13 [0] 'boxSizing'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'boxSizing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER boxSizing
>>>ADVANCE 530:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 530:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 531:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 531:13 [0] 'bufferedRendering'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'bufferedRendering'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER bufferedRendering
>>>ADVANCE 531:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 531:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 532:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 532:13 [0] 'captionSide'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'captionSide'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER captionSide
>>>ADVANCE 532:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 532:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 533:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 533:13 [0] 'clear'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'clear'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER clear
>>>ADVANCE 533:18 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 533:19 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 534:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 534:13 [0] 'clip'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'clip'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER clip
>>>ADVANCE 534:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 534:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 535:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 535:13 [0] 'clipPath'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'clipPath'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER clipPath
>>>ADVANCE 535:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 535:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 536:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 536:13 [0] 'clipRule'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'clipRule'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER clipRule
>>>ADVANCE 536:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 536:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 537:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 537:13 [0] 'color'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'color'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER color
>>>ADVANCE 537:18 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 537:19 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 538:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 538:13 [0] 'colorInterpolation'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'colorInterpolation'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER colorInterpolation
>>>ADVANCE 538:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 538:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 539:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 539:13 [0] 'colorInterpolationFilters'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'colorInterpolationFilters'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER colorInterpolationFilters
>>>ADVANCE 539:38 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 539:39 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 540:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 540:13 [0] 'colorProfile'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'colorProfile'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER colorProfile
>>>ADVANCE 540:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 540:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 541:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 541:13 [0] 'colorRendering'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'colorRendering'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER colorRendering
>>>ADVANCE 541:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 541:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 542:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 542:13 [0] 'content'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'content'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER content
>>>ADVANCE 542:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 542:21 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 543:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 543:13 [0] 'counterIncrement'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'counterIncrement'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER counterIncrement
>>>ADVANCE 543:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 543:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 544:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 544:13 [0] 'counterReset'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'counterReset'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER counterReset
>>>ADVANCE 544:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 544:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 545:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 545:13 [0] 'cssText'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'cssText'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER cssText
>>>ADVANCE 545:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 545:21 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 546:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 546:13 [0] 'cursor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'cursor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER cursor
>>>ADVANCE 546:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 546:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 547:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 547:13 [0] 'direction'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'direction'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER direction
>>>ADVANCE 547:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 547:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 548:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 548:13 [0] 'display'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'display'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER display
>>>ADVANCE 548:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 548:21 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 549:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 549:13 [0] 'dominantBaseline'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'dominantBaseline'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER dominantBaseline
>>>ADVANCE 549:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 549:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 550:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 550:13 [0] 'emptyCells'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'emptyCells'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER emptyCells
>>>ADVANCE 550:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 550:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 551:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 551:13 [0] 'enableBackground'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'enableBackground'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER enableBackground
>>>ADVANCE 551:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 551:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 552:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 552:13 [0] 'fill'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'fill'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fill
>>>ADVANCE 552:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 552:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 553:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 553:13 [0] 'fillOpacity'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'fillOpacity'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fillOpacity
>>>ADVANCE 553:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 553:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 554:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 554:13 [0] 'fillRule'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'fillRule'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fillRule
>>>ADVANCE 554:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 554:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 555:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 555:13 [0] 'filter'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'filter'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER filter
>>>ADVANCE 555:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 555:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 556:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 556:13 [0] 'flex'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'flex'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER flex
>>>ADVANCE 556:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 556:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 557:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 557:13 [0] 'flexBasis'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'flexBasis'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER flexBasis
>>>ADVANCE 557:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 557:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 558:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 558:13 [0] 'flexDirection'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'flexDirection'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER flexDirection
>>>ADVANCE 558:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 558:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 559:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 559:13 [0] 'flexFlow'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'flexFlow'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER flexFlow
>>>ADVANCE 559:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 559:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 560:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 560:13 [0] 'flexGrow'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'flexGrow'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER flexGrow
>>>ADVANCE 560:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 560:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 561:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 561:13 [0] 'flexShrink'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'flexShrink'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER flexShrink
>>>ADVANCE 561:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 561:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 562:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 562:13 [0] 'flexWrap'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'flexWrap'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER flexWrap
>>>ADVANCE 562:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 562:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 563:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 563:13 [0] 'float'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'float'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER float
>>>ADVANCE 563:18 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 563:19 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 564:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 564:13 [0] 'floodColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'floodColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER floodColor
>>>ADVANCE 564:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 564:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 565:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 565:13 [0] 'floodOpacity'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'floodOpacity'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER floodOpacity
>>>ADVANCE 565:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 565:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 566:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 566:13 [0] 'font'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'font'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER font
>>>ADVANCE 566:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 566:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 567:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 567:13 [0] 'fontFamily'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'fontFamily'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fontFamily
>>>ADVANCE 567:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 567:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 568:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 568:13 [0] 'fontKerning'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'fontKerning'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fontKerning
>>>ADVANCE 568:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 568:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 569:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 569:13 [0] 'fontSize'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'fontSize'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fontSize
>>>ADVANCE 569:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 569:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 570:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 570:13 [0] 'fontStretch'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'fontStretch'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fontStretch
>>>ADVANCE 570:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 570:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 571:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 571:13 [0] 'fontStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'fontStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fontStyle
>>>ADVANCE 571:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 571:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 572:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 572:13 [0] 'fontVariant'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'fontVariant'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fontVariant
>>>ADVANCE 572:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 572:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 573:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 573:13 [0] 'fontWeight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'fontWeight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER fontWeight
>>>ADVANCE 573:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 573:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 574:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 574:13 [0] 'glyphOrientationHorizontal'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'glyphOrientationHorizontal'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER glyphOrientationHorizontal
>>>ADVANCE 574:39 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 574:40 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 575:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 575:13 [0] 'glyphOrientationVertical'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'glyphOrientationVertical'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER glyphOrientationVertical
>>>ADVANCE 575:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 575:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 576:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 576:13 [0] 'height'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'height'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER height
>>>ADVANCE 576:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 576:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 577:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 577:13 [0] 'imageRendering'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'imageRendering'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER imageRendering
>>>ADVANCE 577:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 577:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 578:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 578:13 [0] 'justifyContent'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'justifyContent'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER justifyContent
>>>ADVANCE 578:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 578:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 579:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 579:13 [0] 'kerning'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'kerning'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER kerning
>>>ADVANCE 579:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 579:21 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 580:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 580:13 [0] 'left'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'left'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER left
>>>ADVANCE 580:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 580:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 581:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 581:13 [0] 'length'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'length'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER length
>>>ADVANCE 581:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 581:20 [2] 'number'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 582:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 582:13 [0] 'letterSpacing'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'letterSpacing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER letterSpacing
>>>ADVANCE 582:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 582:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 583:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 583:13 [0] 'lightingColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'lightingColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER lightingColor
>>>ADVANCE 583:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 583:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 584:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 584:13 [0] 'lineHeight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'lineHeight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER lineHeight
>>>ADVANCE 584:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 584:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 585:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 585:13 [0] 'listStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'listStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER listStyle
>>>ADVANCE 585:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 585:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 586:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 586:13 [0] 'listStyleImage'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'listStyleImage'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER listStyleImage
>>>ADVANCE 586:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 586:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 587:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 587:13 [0] 'listStylePosition'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'listStylePosition'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER listStylePosition
>>>ADVANCE 587:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 587:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 588:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 588:13 [0] 'listStyleType'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'listStyleType'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER listStyleType
>>>ADVANCE 588:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 588:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 589:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 589:13 [0] 'margin'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'margin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER margin
>>>ADVANCE 589:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 589:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 590:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 590:13 [0] 'marginBottom'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'marginBottom'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER marginBottom
>>>ADVANCE 590:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 590:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 591:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 591:13 [0] 'marginLeft'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'marginLeft'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER marginLeft
>>>ADVANCE 591:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 591:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 592:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 592:13 [0] 'marginRight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'marginRight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER marginRight
>>>ADVANCE 592:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 592:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 593:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 593:13 [0] 'marginTop'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'marginTop'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER marginTop
>>>ADVANCE 593:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 593:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 594:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 594:13 [0] 'marker'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'marker'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER marker
>>>ADVANCE 594:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 594:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 595:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 595:13 [0] 'markerEnd'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'markerEnd'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER markerEnd
>>>ADVANCE 595:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 595:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 596:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 596:13 [0] 'markerMid'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'markerMid'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER markerMid
>>>ADVANCE 596:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 596:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 597:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 597:13 [0] 'markerStart'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'markerStart'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER markerStart
>>>ADVANCE 597:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 597:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 598:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 598:13 [0] 'mask'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'mask'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER mask
>>>ADVANCE 598:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 598:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 599:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 599:13 [0] 'maskType'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'maskType'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER maskType
>>>ADVANCE 599:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 599:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 600:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 600:13 [0] 'maxHeight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'maxHeight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER maxHeight
>>>ADVANCE 600:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 600:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 601:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 601:13 [0] 'maxWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'maxWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER maxWidth
>>>ADVANCE 601:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 601:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 602:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 602:13 [0] 'maxZoom'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'maxZoom'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER maxZoom
>>>ADVANCE 602:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 602:21 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 603:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 603:13 [0] 'minHeight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'minHeight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER minHeight
>>>ADVANCE 603:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 603:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 604:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 604:13 [0] 'minWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'minWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER minWidth
>>>ADVANCE 604:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 604:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 605:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 605:13 [0] 'minZoom'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'minZoom'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER minZoom
>>>ADVANCE 605:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 605:21 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 606:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 606:13 [0] 'objectFit'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'objectFit'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER objectFit
>>>ADVANCE 606:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 606:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 607:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 607:13 [0] 'objectPosition'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'objectPosition'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER objectPosition
>>>ADVANCE 607:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 607:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 608:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 608:13 [0] 'opacity'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'opacity'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER opacity
>>>ADVANCE 608:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 608:21 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 609:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 609:13 [0] 'order'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'order'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER order
>>>ADVANCE 609:18 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 609:19 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 610:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 610:13 [0] 'orientation'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'orientation'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER orientation
>>>ADVANCE 610:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 610:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 611:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 611:13 [0] 'orphans'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'orphans'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER orphans
>>>ADVANCE 611:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 611:21 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 612:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 612:13 [0] 'outline'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'outline'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER outline
>>>ADVANCE 612:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 612:21 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 613:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 613:13 [0] 'outlineColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'outlineColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER outlineColor
>>>ADVANCE 613:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 613:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 614:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 614:13 [0] 'outlineOffset'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'outlineOffset'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER outlineOffset
>>>ADVANCE 614:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 614:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 615:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 615:13 [0] 'outlineStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'outlineStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER outlineStyle
>>>ADVANCE 615:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 615:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 616:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 616:13 [0] 'outlineWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'outlineWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER outlineWidth
>>>ADVANCE 616:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 616:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 617:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 617:13 [0] 'overflow'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'overflow'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER overflow
>>>ADVANCE 617:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 617:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 618:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 618:13 [0] 'overflowWrap'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'overflowWrap'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER overflowWrap
>>>ADVANCE 618:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 618:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 619:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 619:13 [0] 'overflowX'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'overflowX'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER overflowX
>>>ADVANCE 619:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 619:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 620:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 620:13 [0] 'overflowY'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'overflowY'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER overflowY
>>>ADVANCE 620:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 620:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 621:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 621:13 [0] 'padding'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'padding'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER padding
>>>ADVANCE 621:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 621:21 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 622:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 622:13 [0] 'paddingBottom'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'paddingBottom'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER paddingBottom
>>>ADVANCE 622:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 622:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 623:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 623:13 [0] 'paddingLeft'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'paddingLeft'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER paddingLeft
>>>ADVANCE 623:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 623:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 624:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 624:13 [0] 'paddingRight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'paddingRight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER paddingRight
>>>ADVANCE 624:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 624:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 625:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 625:13 [0] 'paddingTop'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'paddingTop'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER paddingTop
>>>ADVANCE 625:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 625:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 626:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 626:13 [0] 'page'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'page'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER page
>>>ADVANCE 626:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 626:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 627:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 627:13 [0] 'pageBreakAfter'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'pageBreakAfter'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER pageBreakAfter
>>>ADVANCE 627:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 627:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 628:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 628:13 [0] 'pageBreakBefore'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'pageBreakBefore'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER pageBreakBefore
>>>ADVANCE 628:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 628:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 629:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 629:13 [0] 'pageBreakInside'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'pageBreakInside'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER pageBreakInside
>>>ADVANCE 629:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 629:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 630:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 630:13 [0] 'parentRule'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'parentRule'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER parentRule
>>>ADVANCE 630:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 630:24 [2] 'object'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 631:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 631:13 [0] 'pointerEvents'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'pointerEvents'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER pointerEvents
>>>ADVANCE 631:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 631:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 632:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 632:13 [0] 'position'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'position'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER position
>>>ADVANCE 632:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 632:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 633:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 633:13 [0] 'quotes'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'quotes'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER quotes
>>>ADVANCE 633:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 633:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 634:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 634:13 [0] 'resize'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'resize'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER resize
>>>ADVANCE 634:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 634:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 635:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 635:13 [0] 'right'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'right'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER right
>>>ADVANCE 635:18 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 635:19 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 636:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 636:13 [0] 'shapeRendering'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'shapeRendering'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER shapeRendering
>>>ADVANCE 636:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 636:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 637:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 637:13 [0] 'size'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'size'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER size
>>>ADVANCE 637:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 637:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 638:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 638:13 [0] 'speak'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'speak'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER speak
>>>ADVANCE 638:18 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 638:19 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 639:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 639:13 [0] 'src'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'src'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER src
>>>ADVANCE 639:16 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 639:17 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 640:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 640:13 [0] 'stopColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'stopColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER stopColor
>>>ADVANCE 640:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 640:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 641:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 641:13 [0] 'stopOpacity'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'stopOpacity'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER stopOpacity
>>>ADVANCE 641:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 641:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 642:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 642:13 [0] 'stroke'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'stroke'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER stroke
>>>ADVANCE 642:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 642:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 643:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 643:13 [0] 'strokeDasharray'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'strokeDasharray'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER strokeDasharray
>>>ADVANCE 643:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 643:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 644:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 644:13 [0] 'strokeDashoffset'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'strokeDashoffset'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER strokeDashoffset
>>>ADVANCE 644:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 644:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 645:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 645:13 [0] 'strokeLinecap'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'strokeLinecap'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER strokeLinecap
>>>ADVANCE 645:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 645:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 646:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 646:13 [0] 'strokeLinejoin'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'strokeLinejoin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER strokeLinejoin
>>>ADVANCE 646:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 646:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 647:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 647:13 [0] 'strokeMiterlimit'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'strokeMiterlimit'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER strokeMiterlimit
>>>ADVANCE 647:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 647:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 648:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 648:13 [0] 'strokeOpacity'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'strokeOpacity'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER strokeOpacity
>>>ADVANCE 648:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 648:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 649:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 649:13 [0] 'strokeWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'strokeWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER strokeWidth
>>>ADVANCE 649:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 649:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 650:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 650:13 [0] 'tableLayout'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'tableLayout'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER tableLayout
>>>ADVANCE 650:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 650:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 651:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 651:13 [0] 'tabSize'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'tabSize'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER tabSize
>>>ADVANCE 651:20 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 651:21 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 652:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 652:13 [0] 'textAlign'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textAlign'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textAlign
>>>ADVANCE 652:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 652:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 653:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 653:13 [0] 'textAnchor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textAnchor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textAnchor
>>>ADVANCE 653:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 653:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 654:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 654:13 [0] 'textDecoration'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textDecoration'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textDecoration
>>>ADVANCE 654:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 654:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 655:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 655:13 [0] 'textIndent'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textIndent'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textIndent
>>>ADVANCE 655:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 655:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 656:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 656:13 [0] 'textLineThroughColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textLineThroughColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textLineThroughColor
>>>ADVANCE 656:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 656:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 657:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 657:13 [0] 'textLineThroughMode'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textLineThroughMode'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textLineThroughMode
>>>ADVANCE 657:32 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 657:33 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 658:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 658:13 [0] 'textLineThroughStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textLineThroughStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textLineThroughStyle
>>>ADVANCE 658:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 658:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 659:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 659:13 [0] 'textLineThroughWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textLineThroughWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textLineThroughWidth
>>>ADVANCE 659:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 659:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 660:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 660:13 [0] 'textOverflow'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textOverflow'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textOverflow
>>>ADVANCE 660:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 660:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 661:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 661:13 [0] 'textOverlineColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textOverlineColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textOverlineColor
>>>ADVANCE 661:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 661:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 662:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 662:13 [0] 'textOverlineMode'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textOverlineMode'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textOverlineMode
>>>ADVANCE 662:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 662:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 663:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 663:13 [0] 'textOverlineStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textOverlineStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textOverlineStyle
>>>ADVANCE 663:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 663:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 664:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 664:13 [0] 'textOverlineWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textOverlineWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textOverlineWidth
>>>ADVANCE 664:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 664:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 665:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 665:13 [0] 'textRendering'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textRendering'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textRendering
>>>ADVANCE 665:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 665:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 666:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 666:13 [0] 'textShadow'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textShadow'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textShadow
>>>ADVANCE 666:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 666:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 667:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 667:13 [0] 'textTransform'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textTransform'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textTransform
>>>ADVANCE 667:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 667:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 668:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 668:13 [0] 'textUnderlineColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textUnderlineColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textUnderlineColor
>>>ADVANCE 668:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 668:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 669:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 669:13 [0] 'textUnderlineMode'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textUnderlineMode'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textUnderlineMode
>>>ADVANCE 669:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 669:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 670:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 670:13 [0] 'textUnderlineStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textUnderlineStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textUnderlineStyle
>>>ADVANCE 670:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 670:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 671:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 671:13 [0] 'textUnderlineWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'textUnderlineWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER textUnderlineWidth
>>>ADVANCE 671:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 671:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 672:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 672:13 [0] 'top'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'top'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER top
>>>ADVANCE 672:16 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 672:17 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 673:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 673:13 [0] 'touchActionDelay'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'touchActionDelay'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER touchActionDelay
>>>ADVANCE 673:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 673:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 674:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 674:13 [0] 'transition'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'transition'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER transition
>>>ADVANCE 674:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 674:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 675:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 675:13 [0] 'transitionDelay'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'transitionDelay'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER transitionDelay
>>>ADVANCE 675:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 675:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 676:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 676:13 [0] 'transitionDuration'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'transitionDuration'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER transitionDuration
>>>ADVANCE 676:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 676:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 677:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 677:13 [0] 'transitionProperty'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'transitionProperty'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER transitionProperty
>>>ADVANCE 677:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 677:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 678:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 678:13 [0] 'transitionTimingFunction'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'transitionTimingFunction'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER transitionTimingFunction
>>>ADVANCE 678:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 678:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 679:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 679:13 [0] 'unicodeBidi'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'unicodeBidi'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER unicodeBidi
>>>ADVANCE 679:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 679:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 680:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 680:13 [0] 'unicodeRange'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'unicodeRange'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER unicodeRange
>>>ADVANCE 680:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 680:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 681:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 681:13 [0] 'userZoom'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'userZoom'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER userZoom
>>>ADVANCE 681:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 681:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 682:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 682:13 [0] 'vectorEffect'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'vectorEffect'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER vectorEffect
>>>ADVANCE 682:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 682:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 683:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 683:13 [0] 'verticalAlign'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'verticalAlign'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER verticalAlign
>>>ADVANCE 683:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 683:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 684:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 684:13 [0] 'visibility'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'visibility'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER visibility
>>>ADVANCE 684:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 684:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 685:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 685:13 [0] 'webkitAnimation'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitAnimation'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitAnimation
>>>ADVANCE 685:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 685:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 686:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 686:13 [0] 'webkitAnimationDelay'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitAnimationDelay'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitAnimationDelay
>>>ADVANCE 686:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 686:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 687:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 687:13 [0] 'webkitAnimationDirection'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitAnimationDirection'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitAnimationDirection
>>>ADVANCE 687:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 687:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 688:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 688:13 [0] 'webkitAnimationDuration'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitAnimationDuration'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitAnimationDuration
>>>ADVANCE 688:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 688:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 689:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 689:13 [0] 'webkitAnimationFillMode'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitAnimationFillMode'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitAnimationFillMode
>>>ADVANCE 689:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 689:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 690:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 690:13 [0] 'webkitAnimationIterationCount'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitAnimationIterationCount'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitAnimationIterationCount
>>>ADVANCE 690:42 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 690:43 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 691:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 691:13 [0] 'webkitAnimationName'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitAnimationName'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitAnimationName
>>>ADVANCE 691:32 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 691:33 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 692:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 692:13 [0] 'webkitAnimationPlayState'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitAnimationPlayState'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitAnimationPlayState
>>>ADVANCE 692:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 692:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 693:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 693:13 [0] 'webkitAnimationTimingFunction'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitAnimationTimingFunction'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitAnimationTimingFunction
>>>ADVANCE 693:42 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 693:43 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 694:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 694:13 [0] 'webkitAppearance'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitAppearance'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitAppearance
>>>ADVANCE 694:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 694:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 695:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 695:13 [0] 'webkitAppRegion'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitAppRegion'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitAppRegion
>>>ADVANCE 695:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 695:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 696:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 696:13 [0] 'webkitAspectRatio'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitAspectRatio'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitAspectRatio
>>>ADVANCE 696:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 696:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 697:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 697:13 [0] 'webkitBackfaceVisibility'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBackfaceVisibility'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBackfaceVisibility
>>>ADVANCE 697:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 697:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 698:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 698:13 [0] 'webkitBackgroundClip'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBackgroundClip'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBackgroundClip
>>>ADVANCE 698:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 698:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 699:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 699:13 [0] 'webkitBackgroundComposite'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBackgroundComposite'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBackgroundComposite
>>>ADVANCE 699:38 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 699:39 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 700:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 700:13 [0] 'webkitBackgroundOrigin'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBackgroundOrigin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBackgroundOrigin
>>>ADVANCE 700:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 700:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 701:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 701:13 [0] 'webkitBackgroundSize'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBackgroundSize'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBackgroundSize
>>>ADVANCE 701:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 701:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 702:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 702:13 [0] 'webkitBorderAfter'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderAfter'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderAfter
>>>ADVANCE 702:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 702:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 703:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 703:13 [0] 'webkitBorderAfterColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderAfterColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderAfterColor
>>>ADVANCE 703:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 703:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 704:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 704:13 [0] 'webkitBorderAfterStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderAfterStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderAfterStyle
>>>ADVANCE 704:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 704:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 705:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 705:13 [0] 'webkitBorderAfterWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderAfterWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderAfterWidth
>>>ADVANCE 705:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 705:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 706:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 706:13 [0] 'webkitBorderBefore'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderBefore'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderBefore
>>>ADVANCE 706:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 706:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 707:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 707:13 [0] 'webkitBorderBeforeColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderBeforeColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderBeforeColor
>>>ADVANCE 707:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 707:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 708:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 708:13 [0] 'webkitBorderBeforeStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderBeforeStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderBeforeStyle
>>>ADVANCE 708:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 708:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 709:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 709:13 [0] 'webkitBorderBeforeWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderBeforeWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderBeforeWidth
>>>ADVANCE 709:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 709:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 710:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 710:13 [0] 'webkitBorderEnd'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderEnd'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderEnd
>>>ADVANCE 710:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 710:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 711:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 711:13 [0] 'webkitBorderEndColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderEndColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderEndColor
>>>ADVANCE 711:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 711:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 712:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 712:13 [0] 'webkitBorderEndStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderEndStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderEndStyle
>>>ADVANCE 712:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 712:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 713:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 713:13 [0] 'webkitBorderEndWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderEndWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderEndWidth
>>>ADVANCE 713:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 713:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 714:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 714:13 [0] 'webkitBorderFit'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderFit'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderFit
>>>ADVANCE 714:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 714:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 715:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 715:13 [0] 'webkitBorderHorizontalSpacing'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderHorizontalSpacing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderHorizontalSpacing
>>>ADVANCE 715:42 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 715:43 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 716:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 716:13 [0] 'webkitBorderImage'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderImage'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderImage
>>>ADVANCE 716:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 716:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 717:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 717:13 [0] 'webkitBorderRadius'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderRadius'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderRadius
>>>ADVANCE 717:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 717:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 718:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 718:13 [0] 'webkitBorderStart'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderStart'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderStart
>>>ADVANCE 718:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 718:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 719:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 719:13 [0] 'webkitBorderStartColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderStartColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderStartColor
>>>ADVANCE 719:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 719:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 720:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 720:13 [0] 'webkitBorderStartStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderStartStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderStartStyle
>>>ADVANCE 720:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 720:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 721:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 721:13 [0] 'webkitBorderStartWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderStartWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderStartWidth
>>>ADVANCE 721:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 721:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 722:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 722:13 [0] 'webkitBorderVerticalSpacing'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBorderVerticalSpacing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBorderVerticalSpacing
>>>ADVANCE 722:40 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 722:41 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 723:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 723:13 [0] 'webkitBoxAlign'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBoxAlign'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBoxAlign
>>>ADVANCE 723:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 723:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 724:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 724:13 [0] 'webkitBoxDecorationBreak'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBoxDecorationBreak'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBoxDecorationBreak
>>>ADVANCE 724:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 724:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 725:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 725:13 [0] 'webkitBoxDirection'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBoxDirection'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBoxDirection
>>>ADVANCE 725:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 725:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 726:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 726:13 [0] 'webkitBoxFlex'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBoxFlex'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBoxFlex
>>>ADVANCE 726:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 726:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 727:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 727:13 [0] 'webkitBoxFlexGroup'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBoxFlexGroup'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBoxFlexGroup
>>>ADVANCE 727:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 727:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 728:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 728:13 [0] 'webkitBoxLines'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBoxLines'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBoxLines
>>>ADVANCE 728:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 728:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 729:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 729:13 [0] 'webkitBoxOrdinalGroup'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBoxOrdinalGroup'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBoxOrdinalGroup
>>>ADVANCE 729:34 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 729:35 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 730:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 730:13 [0] 'webkitBoxOrient'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBoxOrient'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBoxOrient
>>>ADVANCE 730:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 730:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 731:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 731:13 [0] 'webkitBoxPack'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBoxPack'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBoxPack
>>>ADVANCE 731:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 731:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 732:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 732:13 [0] 'webkitBoxReflect'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBoxReflect'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBoxReflect
>>>ADVANCE 732:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 732:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 733:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 733:13 [0] 'webkitBoxShadow'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitBoxShadow'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitBoxShadow
>>>ADVANCE 733:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 733:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 734:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 734:13 [0] 'webkitClipPath'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitClipPath'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitClipPath
>>>ADVANCE 734:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 734:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 735:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 735:13 [0] 'webkitColumnAxis'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumnAxis'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumnAxis
>>>ADVANCE 735:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 735:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 736:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 736:13 [0] 'webkitColumnBreakAfter'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumnBreakAfter'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumnBreakAfter
>>>ADVANCE 736:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 736:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 737:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 737:13 [0] 'webkitColumnBreakBefore'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumnBreakBefore'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumnBreakBefore
>>>ADVANCE 737:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 737:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 738:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 738:13 [0] 'webkitColumnBreakInside'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumnBreakInside'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumnBreakInside
>>>ADVANCE 738:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 738:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 739:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 739:13 [0] 'webkitColumnCount'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumnCount'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumnCount
>>>ADVANCE 739:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 739:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 740:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 740:13 [0] 'webkitColumnGap'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumnGap'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumnGap
>>>ADVANCE 740:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 740:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 741:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 741:13 [0] 'webkitColumnProgression'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumnProgression'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumnProgression
>>>ADVANCE 741:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 741:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 742:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 742:13 [0] 'webkitColumnRule'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumnRule'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumnRule
>>>ADVANCE 742:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 742:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 743:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 743:13 [0] 'webkitColumnRuleColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumnRuleColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumnRuleColor
>>>ADVANCE 743:34 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 743:35 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 744:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 744:13 [0] 'webkitColumnRuleStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumnRuleStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumnRuleStyle
>>>ADVANCE 744:34 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 744:35 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 745:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 745:13 [0] 'webkitColumnRuleWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumnRuleWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumnRuleWidth
>>>ADVANCE 745:34 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 745:35 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 746:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 746:13 [0] 'webkitColumns'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumns'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumns
>>>ADVANCE 746:26 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 746:27 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 747:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 747:13 [0] 'webkitColumnSpan'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumnSpan'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumnSpan
>>>ADVANCE 747:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 747:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 748:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 748:13 [0] 'webkitColumnWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitColumnWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitColumnWidth
>>>ADVANCE 748:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 748:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 749:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 749:13 [0] 'webkitFilter'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitFilter'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitFilter
>>>ADVANCE 749:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 749:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 750:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 750:13 [0] 'webkitFontFeatureSettings'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitFontFeatureSettings'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitFontFeatureSettings
>>>ADVANCE 750:38 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 750:39 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 751:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 751:13 [0] 'webkitFontSizeDelta'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitFontSizeDelta'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitFontSizeDelta
>>>ADVANCE 751:32 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 751:33 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 752:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 752:13 [0] 'webkitFontSmoothing'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitFontSmoothing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitFontSmoothing
>>>ADVANCE 752:32 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 752:33 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 753:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 753:13 [0] 'webkitFontVariantLigatures'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitFontVariantLigatures'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitFontVariantLigatures
>>>ADVANCE 753:39 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 753:40 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 754:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 754:13 [0] 'webkitHighlight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitHighlight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitHighlight
>>>ADVANCE 754:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 754:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 755:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 755:13 [0] 'webkitHyphenateCharacter'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitHyphenateCharacter'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitHyphenateCharacter
>>>ADVANCE 755:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 755:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 756:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 756:13 [0] 'webkitLineAlign'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitLineAlign'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitLineAlign
>>>ADVANCE 756:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 756:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 757:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 757:13 [0] 'webkitLineBoxContain'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitLineBoxContain'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitLineBoxContain
>>>ADVANCE 757:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 757:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 758:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 758:13 [0] 'webkitLineBreak'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitLineBreak'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitLineBreak
>>>ADVANCE 758:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 758:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 759:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 759:13 [0] 'webkitLineClamp'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitLineClamp'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitLineClamp
>>>ADVANCE 759:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 759:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 760:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 760:13 [0] 'webkitLineGrid'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitLineGrid'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitLineGrid
>>>ADVANCE 760:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 760:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 761:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 761:13 [0] 'webkitLineSnap'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitLineSnap'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitLineSnap
>>>ADVANCE 761:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 761:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 762:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 762:13 [0] 'webkitLocale'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitLocale'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitLocale
>>>ADVANCE 762:25 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 762:26 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 763:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 763:13 [0] 'webkitLogicalHeight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitLogicalHeight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitLogicalHeight
>>>ADVANCE 763:32 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 763:33 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 764:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 764:13 [0] 'webkitLogicalWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitLogicalWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitLogicalWidth
>>>ADVANCE 764:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 764:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 765:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 765:13 [0] 'webkitMarginAfter'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMarginAfter'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMarginAfter
>>>ADVANCE 765:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 765:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 766:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 766:13 [0] 'webkitMarginAfterCollapse'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMarginAfterCollapse'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMarginAfterCollapse
>>>ADVANCE 766:38 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 766:39 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 767:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 767:13 [0] 'webkitMarginBefore'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMarginBefore'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMarginBefore
>>>ADVANCE 767:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 767:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 768:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 768:13 [0] 'webkitMarginBeforeCollapse'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMarginBeforeCollapse'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMarginBeforeCollapse
>>>ADVANCE 768:39 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 768:40 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 769:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 769:13 [0] 'webkitMarginBottomCollapse'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMarginBottomCollapse'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMarginBottomCollapse
>>>ADVANCE 769:39 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 769:40 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 770:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 770:13 [0] 'webkitMarginCollapse'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMarginCollapse'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMarginCollapse
>>>ADVANCE 770:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 770:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 771:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 771:13 [0] 'webkitMarginEnd'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMarginEnd'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMarginEnd
>>>ADVANCE 771:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 771:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 772:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 772:13 [0] 'webkitMarginStart'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMarginStart'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMarginStart
>>>ADVANCE 772:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 772:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 773:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 773:13 [0] 'webkitMarginTopCollapse'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMarginTopCollapse'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMarginTopCollapse
>>>ADVANCE 773:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 773:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 774:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 774:13 [0] 'webkitMask'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMask'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMask
>>>ADVANCE 774:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 774:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 775:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 775:13 [0] 'webkitMaskBoxImage'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskBoxImage'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskBoxImage
>>>ADVANCE 775:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 775:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 776:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 776:13 [0] 'webkitMaskBoxImageOutset'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskBoxImageOutset'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskBoxImageOutset
>>>ADVANCE 776:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 776:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 777:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 777:13 [0] 'webkitMaskBoxImageRepeat'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskBoxImageRepeat'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskBoxImageRepeat
>>>ADVANCE 777:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 777:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 778:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 778:13 [0] 'webkitMaskBoxImageSlice'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskBoxImageSlice'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskBoxImageSlice
>>>ADVANCE 778:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 778:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 779:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 779:13 [0] 'webkitMaskBoxImageSource'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskBoxImageSource'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskBoxImageSource
>>>ADVANCE 779:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 779:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 780:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 780:13 [0] 'webkitMaskBoxImageWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskBoxImageWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskBoxImageWidth
>>>ADVANCE 780:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 780:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 781:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 781:13 [0] 'webkitMaskClip'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskClip'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskClip
>>>ADVANCE 781:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 781:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 782:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 782:13 [0] 'webkitMaskComposite'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskComposite'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskComposite
>>>ADVANCE 782:32 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 782:33 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 783:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 783:13 [0] 'webkitMaskImage'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskImage'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskImage
>>>ADVANCE 783:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 783:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 784:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 784:13 [0] 'webkitMaskOrigin'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskOrigin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskOrigin
>>>ADVANCE 784:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 784:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 785:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 785:13 [0] 'webkitMaskPosition'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskPosition'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskPosition
>>>ADVANCE 785:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 785:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 786:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 786:13 [0] 'webkitMaskPositionX'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskPositionX'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskPositionX
>>>ADVANCE 786:32 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 786:33 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 787:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 787:13 [0] 'webkitMaskPositionY'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskPositionY'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskPositionY
>>>ADVANCE 787:32 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 787:33 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 788:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 788:13 [0] 'webkitMaskRepeat'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskRepeat'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskRepeat
>>>ADVANCE 788:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 788:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 789:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 789:13 [0] 'webkitMaskRepeatX'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskRepeatX'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskRepeatX
>>>ADVANCE 789:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 789:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 790:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 790:13 [0] 'webkitMaskRepeatY'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskRepeatY'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskRepeatY
>>>ADVANCE 790:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 790:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 791:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 791:13 [0] 'webkitMaskSize'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaskSize'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaskSize
>>>ADVANCE 791:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 791:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 792:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 792:13 [0] 'webkitMaxLogicalHeight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaxLogicalHeight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaxLogicalHeight
>>>ADVANCE 792:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 792:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 793:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 793:13 [0] 'webkitMaxLogicalWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMaxLogicalWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMaxLogicalWidth
>>>ADVANCE 793:34 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 793:35 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 794:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 794:13 [0] 'webkitMinLogicalHeight'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMinLogicalHeight'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMinLogicalHeight
>>>ADVANCE 794:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 794:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 795:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 795:13 [0] 'webkitMinLogicalWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitMinLogicalWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitMinLogicalWidth
>>>ADVANCE 795:34 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 795:35 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 796:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 796:13 [0] 'webkitPaddingAfter'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitPaddingAfter'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitPaddingAfter
>>>ADVANCE 796:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 796:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 797:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 797:13 [0] 'webkitPaddingBefore'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitPaddingBefore'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitPaddingBefore
>>>ADVANCE 797:32 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 797:33 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 798:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 798:13 [0] 'webkitPaddingEnd'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitPaddingEnd'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitPaddingEnd
>>>ADVANCE 798:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 798:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 799:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 799:13 [0] 'webkitPaddingStart'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitPaddingStart'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitPaddingStart
>>>ADVANCE 799:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 799:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 800:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 800:13 [0] 'webkitPerspective'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitPerspective'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitPerspective
>>>ADVANCE 800:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 800:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 801:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 801:13 [0] 'webkitPerspectiveOrigin'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitPerspectiveOrigin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitPerspectiveOrigin
>>>ADVANCE 801:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 801:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 802:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 802:13 [0] 'webkitPerspectiveOriginX'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitPerspectiveOriginX'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitPerspectiveOriginX
>>>ADVANCE 802:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 802:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 803:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 803:13 [0] 'webkitPerspectiveOriginY'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitPerspectiveOriginY'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitPerspectiveOriginY
>>>ADVANCE 803:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 803:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 804:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 804:13 [0] 'webkitPrintColorAdjust'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitPrintColorAdjust'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitPrintColorAdjust
>>>ADVANCE 804:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 804:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 805:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 805:13 [0] 'webkitRtlOrdering'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitRtlOrdering'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitRtlOrdering
>>>ADVANCE 805:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 805:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 806:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 806:13 [0] 'webkitRubyPosition'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitRubyPosition'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitRubyPosition
>>>ADVANCE 806:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 806:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 807:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 807:13 [0] 'webkitTapHighlightColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTapHighlightColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTapHighlightColor
>>>ADVANCE 807:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 807:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 808:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 808:13 [0] 'webkitTextCombine'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTextCombine'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTextCombine
>>>ADVANCE 808:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 808:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 809:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 809:13 [0] 'webkitTextDecorationsInEffect'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTextDecorationsInEffect'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTextDecorationsInEffect
>>>ADVANCE 809:42 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 809:43 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 810:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 810:13 [0] 'webkitTextEmphasis'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTextEmphasis'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTextEmphasis
>>>ADVANCE 810:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 810:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 811:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 811:13 [0] 'webkitTextEmphasisColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTextEmphasisColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTextEmphasisColor
>>>ADVANCE 811:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 811:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 812:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 812:13 [0] 'webkitTextEmphasisPosition'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTextEmphasisPosition'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTextEmphasisPosition
>>>ADVANCE 812:39 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 812:40 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 813:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 813:13 [0] 'webkitTextEmphasisStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTextEmphasisStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTextEmphasisStyle
>>>ADVANCE 813:36 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 813:37 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 814:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 814:13 [0] 'webkitTextFillColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTextFillColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTextFillColor
>>>ADVANCE 814:32 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 814:33 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 815:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 815:13 [0] 'webkitTextOrientation'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTextOrientation'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTextOrientation
>>>ADVANCE 815:34 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 815:35 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 816:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 816:13 [0] 'webkitTextSecurity'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTextSecurity'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTextSecurity
>>>ADVANCE 816:31 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 816:32 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 817:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 817:13 [0] 'webkitTextStroke'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTextStroke'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTextStroke
>>>ADVANCE 817:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 817:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 818:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 818:13 [0] 'webkitTextStrokeColor'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTextStrokeColor'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTextStrokeColor
>>>ADVANCE 818:34 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 818:35 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 819:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 819:13 [0] 'webkitTextStrokeWidth'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTextStrokeWidth'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTextStrokeWidth
>>>ADVANCE 819:34 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 819:35 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 820:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 820:13 [0] 'webkitTransform'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTransform'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTransform
>>>ADVANCE 820:28 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 820:29 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 821:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 821:13 [0] 'webkitTransformOrigin'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTransformOrigin'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTransformOrigin
>>>ADVANCE 821:34 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 821:35 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 822:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 822:13 [0] 'webkitTransformOriginX'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTransformOriginX'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTransformOriginX
>>>ADVANCE 822:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 822:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 823:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 823:13 [0] 'webkitTransformOriginY'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTransformOriginY'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTransformOriginY
>>>ADVANCE 823:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 823:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 824:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 824:13 [0] 'webkitTransformOriginZ'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTransformOriginZ'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTransformOriginZ
>>>ADVANCE 824:35 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 824:36 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 825:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 825:13 [0] 'webkitTransformStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTransformStyle'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTransformStyle
>>>ADVANCE 825:33 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 825:34 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 826:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 826:13 [0] 'webkitTransition'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTransition'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTransition
>>>ADVANCE 826:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 826:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 827:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 827:13 [0] 'webkitTransitionDelay'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTransitionDelay'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTransitionDelay
>>>ADVANCE 827:34 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 827:35 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 828:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 828:13 [0] 'webkitTransitionDuration'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTransitionDuration'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTransitionDuration
>>>ADVANCE 828:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 828:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 829:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 829:13 [0] 'webkitTransitionProperty'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTransitionProperty'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTransitionProperty
>>>ADVANCE 829:37 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 829:38 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 830:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 830:13 [0] 'webkitTransitionTimingFunction'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitTransitionTimingFunction'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitTransitionTimingFunction
>>>ADVANCE 830:43 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 830:44 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 831:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 831:13 [0] 'webkitUserDrag'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitUserDrag'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitUserDrag
>>>ADVANCE 831:27 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 831:28 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 832:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 832:13 [0] 'webkitUserModify'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitUserModify'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitUserModify
>>>ADVANCE 832:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 832:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 833:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 833:13 [0] 'webkitUserSelect'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitUserSelect'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitUserSelect
>>>ADVANCE 833:29 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 833:30 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 834:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 834:13 [0] 'webkitWritingMode'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'webkitWritingMode'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER webkitWritingMode
>>>ADVANCE 834:30 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 834:31 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 835:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 835:13 [0] 'whiteSpace'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'whiteSpace'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER whiteSpace
>>>ADVANCE 835:23 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 835:24 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 836:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 836:13 [0] 'widows'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'widows'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER widows
>>>ADVANCE 836:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 836:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 837:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 837:13 [0] 'width'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'width'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER width
>>>ADVANCE 837:18 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 837:19 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 838:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 838:13 [0] 'wordBreak'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'wordBreak'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER wordBreak
>>>ADVANCE 838:22 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 838:23 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 839:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 839:13 [0] 'wordSpacing'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'wordSpacing'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER wordSpacing
>>>ADVANCE 839:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 839:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 840:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 840:13 [0] 'wordWrap'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'wordWrap'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER wordWrap
>>>ADVANCE 840:21 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 840:22 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 841:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 841:13 [0] 'writingMode'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'writingMode'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER writingMode
>>>ADVANCE 841:24 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 841:25 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 842:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 842:13 [0] 'zIndex'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'zIndex'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER zIndex
>>>ADVANCE 842:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 842:20 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 843:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 843:13 [0] 'zoom'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'zoom'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER zoom
>>>ADVANCE 843:17 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 843:18 [2] 'string'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 843:0 [-1] ' '(EOF)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:-1 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:-1 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> ClassDeclaration
      Parsed OK!-> Statement
      Module matched OK: EOF  
>>>ADVANCE 843:0 [0] ' '(EOF)
END freeFormMode [Module] blockIndent:4, get SeparatedList of [Statement] by ';' closer: EOF

     'online.md' imports './ace'
[object Object]
addToScope: 'module' to '/home/ltato/LiteScript_online_playground/playground/js/ace.interface.md Scope'
addMember: 'exports' to 'module'
addToScope: 'exports' to '/home/ltato/LiteScript_online_playground/playground/js/ace.interface.md Scope'
addMember: 'filename' to 'module'
     compile: 'ace.interface.md'
1 (BLANK)
2 4(CODE) public namespace ace
3 (BLANK)
4 8(CODE) properties
5 (BLANK)
6 12(CODE) config:
7 16(CODE) get:function(key)
8 16(CODE) set:function(key, value)
9 16(CODE) all:function()
10 16(CODE) _dispatchEvent:function(eventName, e)
11 16(CODE) _emit:function(eventName, e)
12 16(CODE) _signal:function(eventName, e)
13 16(CODE) once:function(eventName, callback)
14 16(CODE) setDefaultHandler:function(eventName, callback)
15 16(CODE) removeDefaultHandler:function(eventName, callback)
16 16(CODE) addEventListener:function(eventName, callback, capturing)
17 16(CODE) on:function(eventName, callback, capturing)
18 16(CODE) removeEventListener:function(eventName, callback)
19 16(CODE) removeListener:function(eventName, callback)
20 16(CODE) off:function(eventName, callback)
21 16(CODE) removeAllListeners:function(eventName)
22 16(CODE) moduleUrl:function(name, component)
23 16(CODE) setModuleUrl:function(name, subst)
24 (BLANK)
25 (BLANK)
26 16(CODE) loadModule:function(moduleName, onLoad)
27 16(CODE) init:function()
28 16(CODE) defineOptions:function(obj, path, options)
29 16(CODE) resetOptions:function(obj)
30 16(CODE) setDefaultValue:function(path, name, value)
31 16(CODE) setDefaultValues:function(path, optionHash)
32 16(CODE) _eventRegistry:object
33 16(CODE) _defaultHandlers:object
34 8(CODE) method define(amodule, deps, payload)
35 8(CODE) method require(amodule, callback)
36 8(CODE) method edit(el)
37 8(CODE) method createEditSession(text, mode)
38 (BLANK)
39 8(CODE) class Fold
40 12(CODE) constructor new Fold (range, placeholder)
41 (BLANK)
42 12(CODE) method toString()
43 12(CODE) method setFoldLine(foldLine)
44 12(CODE) method clone()
45 12(CODE) method addSubFold(fold)
46 12(CODE) method restoreRange(range)
47 (BLANK)
48 (BLANK)
49 8(CODE) class TokenIterator
50 12(CODE) constructor new TokenIterator (session, initialRow, initialColumn)
51 (BLANK)
52 12(CODE) method stepBackward()
53 12(CODE) method stepForward()
54 12(CODE) method getCurrentToken()
55 12(CODE) method getCurrentTokenRow()
56 12(CODE) method getCurrentTokenColumn()
57 (BLANK)
58 (BLANK)
59 8(CODE) class EditSession
60 12(CODE) constructor new EditSession (text, mode)
61 (BLANK)
62 12(CODE) properties
63 (BLANK)
64 16(CODE) doc: Document
65 (BLANK)
66 16(CODE) $mode:object
67 16(CODE) $foldStyle:string
68 (BLANK)
69 16(CODE) $wrapLimitRange:
70 20(CODE) min:object
71 20(CODE) max:object
72 (BLANK)
73 16(CODE) $useWorker:boolean
74 16(CODE) $useSoftTabs:boolean
75 16(CODE) $scrollTop:number
76 (BLANK)
77 16(CODE) $options:
78 20(CODE) wrap:
79 24(CODE) set:function(value)
80 24(CODE) get:function()
81 24(CODE) handlesSet:boolean
82 24(CODE) name:string
83 (BLANK)
84 (BLANK)
85 20(CODE) firstLineNumber:
86 24(CODE) set:function()
87 24(CODE) initialValue:number
88 24(CODE) name:string
89 (BLANK)
90 (BLANK)
91 20(CODE) useWorker:
92 24(CODE) set:function(useWorker)
93 24(CODE) initialValue:boolean
94 24(CODE) name:string
95 (BLANK)
96 (BLANK)
97 20(CODE) useSoftTabs:
98 24(CODE) initialValue:boolean
99 24(CODE) name:string
100 (BLANK)
101 (BLANK)
102 20(CODE) tabSize:
103 24(CODE) set:function(tabSize)
104 24(CODE) initialValue:number
105 24(CODE) handlesSet:boolean
106 24(CODE) name:string
107 (BLANK)
108 (BLANK)
109 20(CODE) overwrite:
110 24(CODE) set:function(val)
111 24(CODE) initialValue:boolean
112 24(CODE) name:string
113 (BLANK)
114 (BLANK)
115 20(CODE) newLineMode:
116 24(CODE) set:function(val)
117 24(CODE) get:function()
118 24(CODE) handlesSet:boolean
119 24(CODE) name:string
120 (BLANK)
121 16(CODE) $scrollLeft:number
122 (BLANK)
123 16(CODE) $defaultUndoManager:
124 20(CODE) undo:function()
125 20(CODE) redo:function()
126 20(CODE) reset:function()
127 (BLANK)
128 16(CODE) $modeId:object
129 16(CODE) $tabSize:number
130 16(CODE) $firstLineNumber:number
131 16(CODE) $wrapLimit:number
132 (BLANK)
133 16(CODE) $foldStyles:
134 20(CODE) manual:number
135 20(CODE) markbegin:number
136 20(CODE) markbeginend:number
137 (BLANK)
138 16(CODE) $overwrite:boolean
139 16(CODE) $useWrapMode:boolean
140 12(CODE) method _signal(eventName, e)
141 12(CODE) method getDocumentLastRowColumn(docRow, docColumn)
142 12(CODE) method clearAnnotations()
143 12(CODE) method setTabSize(tabSize)
144 12(CODE) method $findClosingBracket(bracket, position, typeRe)
145 12(CODE) method getRowSplitData(row)
146 12(CODE) method getRowLength(row)
147 12(CODE) method foldAll(startRow, endRow, depth)
148 12(CODE) method getScreenWidth()
149 12(CODE) method setWrapLimitRange(min, max)
150 12(CODE) method _emit(eventName, e)
151 12(CODE) method $cloneFoldData()
152 12(CODE) method getWordRange(row, column)
153 12(CODE) method $getDisplayTokens(str, offset)
154 12(CODE) method unfold(location, expandInner)
155 12(CODE) method getTokenAt(row, column)
156 12(CODE) method $getStringScreenWidth(str, maxScreenColumn, screenColumn)
157 12(CODE) method getScrollTop()
158 12(CODE) method getDocumentLastRowColumnPosition(docRow, docColumn)
159 12(CODE) method $constrainWrapLimit(wrapLimit, min, max)
160 12(CODE) method toggleOverwrite()
161 12(CODE) method getFoldsInRange(range)
162 12(CODE) method getTabString()
163 12(CODE) method off(eventName, callback)
164 12(CODE) method adjustWrapLimit(desiredLimit, $printMargin)
165 12(CODE) method setNewLineMode(newLineMode)
166 12(CODE) method getUndoManager()
167 12(CODE) method moveLinesDown(firstRow, lastRow)
168 12(CODE) method getTabSize()
169 12(CODE) method $computeWidth(force)
170 12(CODE) method setOptions(optList)
171 12(CODE) method setAnnotations(annotations)
172 12(CODE) method $updateRowLengthCache(firstRow, lastRow, b)
173 12(CODE) method getAnnotations()
174 12(CODE) method setValue(text)
175 12(CODE) method getDisplayLine(row, endColumn, startRow, startColumn)
176 12(CODE) method removeAllListeners(eventName)
177 12(CODE) method expandFolds(folds)
178 12(CODE) method getLine(row)
179 12(CODE) method getSelection()
180 12(CODE) method getRowFoldEnd(docRow, startFoldRow)
181 12(CODE) method onReloadTokenizer(e)
182 12(CODE) method getOptions(optionNames)
183 12(CODE) method setUseWrapMode(useWrapMode)
184 12(CODE) method getValue()
185 12(CODE) method addMarker(range, clazz, type, inFront)
186 12(CODE) method $moveLines(firstRow, lastRow, dir)
187 12(CODE) method $findOpeningBracket(bracket, position, typeRe)
188 12(CODE) method $clipRangeToDocument(range)
189 12(CODE) method outdentRows(range)
190 12(CODE) method getNewLineMode()
191 12(CODE) method on(eventName, callback, capturing)
192 12(CODE) method getParentFoldRangeData(row, ignoreCurrent)
193 12(CODE) method $setFolding(foldMode)
194 12(CODE) method getNextFoldLine(docRow, startFoldLine)
195 12(CODE) method getFoldAt(row, column, side)
196 12(CODE) method $clipColumnToRow(row, column)
197 12(CODE) method undoChanges(deltas, dontSelect)
198 12(CODE) method getState(row)
199 12(CODE) method addFold(placeholder, range)
200 12(CODE) method addEventListener(eventName, callback, capturing)
201 12(CODE) method removeListener(eventName, callback)
202 12(CODE) method onChangeFold(e)
203 12(CODE) method $detectNewLine(text)
204 12(CODE) method removeMarker(markerId)
205 12(CODE) method getCommentFoldRange(row, column, dir)
206 12(CODE) method getBreakpoints()
207 12(CODE) method expandFold(fold)
208 12(CODE) method removeDefaultHandler(eventName, callback)
209 12(CODE) method moveText(fromRange, toPosition, copy)
210 12(CODE) method markUndoGroup()
211 12(CODE) method removeEventListener(eventName, callback)
212 12(CODE) method isTabStop(position)
213 12(CODE) method getDocument()
214 12(CODE) method $getUndoSelection(deltas, isUndo, lastUndoRange)
215 12(CODE) method $clipPositionToDocument(row, column)
216 12(CODE) method getAllFolds()
217 12(CODE) method once(eventName, callback)
218 12(CODE) method setDefaultHandler(eventName, callback)
219 12(CODE) method getAWordRange(row, column)
220 12(CODE) method getWrapLimit()
221 12(CODE) method toString()
222 12(CODE) method $clipRowToDocument(row)
223 12(CODE) method screenToDocumentPosition(screenRow, screenColumn)
224 12(CODE) method setBreakpoint(row, className)
225 12(CODE) method getWrapLimitRange()
226 12(CODE) method resetCaches()
227 12(CODE) method getOverwrite()
228 12(CODE) method indentRows(startRow, endRow, indentString)
229 12(CODE) method clearBreakpoints()
230 12(CODE) method addFolds(folds)
231 12(CODE) method remove(range)
232 12(CODE) method documentToScreenColumn(row, docColumn)
233 12(CODE) method getTextRange(range)
234 12(CODE) method $onChangeMode(mode, $isPlaceholder)
235 12(CODE) method screenToDocumentRow(screenRow, screenColumn)
236 12(CODE) method documentToScreenRow(docRow, docColumn)
237 12(CODE) method getScreenLastRowColumn(screenRow)
238 12(CODE) method $addFoldLine(foldLine)
239 12(CODE) method setOverwrite(overwrite)
240 12(CODE) method getMarkers(inFront)
241 12(CODE) method getLength()
242 12(CODE) method $startWorker()
243 12(CODE) method $updateWrapData(firstRow, lastRow)
244 12(CODE) method getBracketRange(pos)
245 12(CODE) method updateFoldWidgets(e)
246 12(CODE) method getScreenTabSize(screenColumn)
247 12(CODE) method setBreakpoints(rows)
248 12(CODE) method clearBreakpoint(row)
249 12(CODE) method $computeWrapSplits(tokens, wrapLimit)
250 12(CODE) method getFoldedRowCount(first, last)
251 12(CODE) method getOption(name)
252 12(CODE) method removeGutterDecoration(row, className)
253 12(CODE) method getFoldDisplayLine(foldLine, endRow, endColumn, startRow, startColumn)
254 12(CODE) method getFoldStringAt(row, column, trim, foldLine)
255 12(CODE) method getLines(firstRow, lastRow)
256 12(CODE) method addGutterDecoration(row, className)
257 12(CODE) method $updateInternalDataOnChange(e)
258 12(CODE) method getFoldLine(docRow, startFoldLine)
259 12(CODE) method highlight(re)
260 12(CODE) method setUndoManager(undoManager)
261 12(CODE) method highlightLines(startRow, endRow, clazz, inFront)
262 12(CODE) method getSelectionMarkers()
263 12(CODE) method redoChanges(deltas, dontSelect)
264 12(CODE) method removeFold(fold)
265 12(CODE) method duplicateLines(firstRow, lastRow)
266 12(CODE) method setDocument(doc)
267 12(CODE) method getTokens(row)
268 12(CODE) method $resetRowCache(docRow)
269 12(CODE) method setOption(name, value)
270 12(CODE) method onChange(e)
271 12(CODE) method setUseWorker(useWorker)
272 12(CODE) method getUseSoftTabs()
273 12(CODE) method getUseWorker()
274 12(CODE) method toggleFold(tryToUnfold)
275 12(CODE) method setScrollTop(scrollTop)
276 12(CODE) method moveLinesUp(firstRow, lastRow)
277 12(CODE) method isRowFolded(docRow, startFoldRow)
278 12(CODE) method setScrollLeft(scrollLeft)
279 12(CODE) method replace(range, text)
280 12(CODE) method $stopWorker()
281 12(CODE) method _dispatchEvent(eventName, e)
282 12(CODE) method onFoldWidgetClick(row, e)
283 12(CODE) method setWrapLimit(limit)
284 12(CODE) method setUseSoftTabs(val)
285 12(CODE) method getMode()
286 12(CODE) method setUndoSelect(enable)
287 12(CODE) method findMatchingBracket(position, chr)
288 12(CODE) method setMode(mode)
289 12(CODE) method getScrollLeft()
290 12(CODE) method addDynamicMarker(marker, inFront)
291 12(CODE) method removeFolds(folds)
292 12(CODE) method setFoldStyle(style)
293 12(CODE) method documentToScreenPosition(docRow, docColumn)
294 12(CODE) method insert(position, text)
295 12(CODE) method getScreenLength()
296 12(CODE) method screenToDocumentColumn(screenRow, screenColumn)
297 12(CODE) method $getRowCacheIndex(cacheArray, val)
298 12(CODE) method getUseWrapMode()
299 12(CODE) method getRowFoldStart(docRow, startFoldRow)
300 (BLANK)
301 (BLANK)
302 8(CODE) class FoldLine
303 12(CODE) constructor new FoldLine (foldData, folds)
304 (BLANK)
305 12(CODE) method shiftRow(shift)
306 12(CODE) method addFold(fold)
307 12(CODE) method containsRow(row)
308 12(CODE) method walk(callback, endRow, endColumn)
309 12(CODE) method getNextFoldTo(row, column)
310 12(CODE) method addRemoveChars(row, column, len)
311 12(CODE) method split(row, column)
312 12(CODE) method merge(foldLineNext)
313 12(CODE) method toString()
314 12(CODE) method idxToPosition(idx)
315 (BLANK)
316 (BLANK)
317 8(CODE) class FoldMode
318 12(CODE) constructor new FoldMode ()
319 (BLANK)
320 12(CODE) properties
321 16(CODE) foldingStartMarker:object
322 16(CODE) foldingStopMarker:object
323 12(CODE) method getFoldWidget(session, foldStyle, row)
324 12(CODE) method getFoldWidgetRange(session, foldStyle, row)
325 12(CODE) method indentationBlock(session, row, column)
326 12(CODE) method openingBracketBlock(session, bracket, row, column, typeRe)
327 12(CODE) method closingBracketBlock(session, bracket, row, column, typeRe)
328 (BLANK)
329 (BLANK)
330 8(CODE) class UndoManager
331 12(CODE) constructor new UndoManager ()
332 (BLANK)
333 12(CODE) method execute(options)
334 12(CODE) method undo(dontSelect)
335 12(CODE) method redo(dontSelect)
336 12(CODE) method reset()
337 12(CODE) method hasUndo()
338 12(CODE) method hasRedo()
339 12(CODE) method markClean()
340 12(CODE) method isClean()
341 (BLANK)
342 (BLANK)
343 8(CODE) class UIWorkerClient
344 12(CODE) constructor new UIWorkerClient (topLevelNamespaces, mod, classname)
345 (BLANK)
346 12(CODE) method _dispatchEvent(eventName, e)
347 12(CODE) method _emit(eventName, e)
348 12(CODE) method _signal(eventName, e)
349 12(CODE) method once(eventName, callback)
350 12(CODE) method setDefaultHandler(eventName, callback)
351 12(CODE) method removeDefaultHandler(eventName, callback)
352 12(CODE) method addEventListener(eventName, callback, capturing)
353 12(CODE) method on(eventName, callback, capturing)
354 12(CODE) method removeEventListener(eventName, callback)
355 12(CODE) method removeListener(eventName, callback)
356 12(CODE) method off(eventName, callback)
357 12(CODE) method removeAllListeners(eventName)
358 12(CODE) method onError(e)
359 12(CODE) method onMessage(e)
360 12(CODE) method $normalizePath(path)
361 12(CODE) method terminate()
362 12(CODE) method send(cmd, args)
363 12(CODE) method call(cmd, args, callback)
364 12(CODE) method emit(event, data)
365 12(CODE) method attachToDocument(doc)
366 12(CODE) method changeListener(e)
367 12(CODE) method $sendDeltaQueue()
368 (BLANK)
369 (BLANK)
370 8(CODE) class WorkerClient
371 12(CODE) constructor new WorkerClient (topLevelNamespaces, mod, classname)
372 (BLANK)
373 12(CODE) method _dispatchEvent(eventName, e)
374 12(CODE) method _emit(eventName, e)
375 12(CODE) method _signal(eventName, e)
376 12(CODE) method once(eventName, callback)
377 12(CODE) method setDefaultHandler(eventName, callback)
378 12(CODE) method removeDefaultHandler(eventName, callback)
379 12(CODE) method addEventListener(eventName, callback, capturing)
380 12(CODE) method on(eventName, callback, capturing)
381 12(CODE) method removeEventListener(eventName, callback)
382 12(CODE) method removeListener(eventName, callback)
383 12(CODE) method off(eventName, callback)
384 12(CODE) method removeAllListeners(eventName)
385 12(CODE) method onError(e)
386 12(CODE) method onMessage(e)
387 12(CODE) method $normalizePath(path)
388 12(CODE) method terminate()
389 12(CODE) method send(cmd, args)
390 12(CODE) method call(cmd, args, callback)
391 12(CODE) method emit(event, data)
392 12(CODE) method attachToDocument(doc)
393 12(CODE) method changeListener(e)
394 12(CODE) method $sendDeltaQueue()
395 (BLANK)
396 (BLANK)
397 8(CODE) class HashHandler
398 12(CODE) constructor new HashHandler (config, platform)
399 (BLANK)
400 12(CODE) method addCommand(command)
401 12(CODE) method removeCommand(command)
402 12(CODE) method bindKey(key, command)
403 12(CODE) method addCommands(commands)
404 12(CODE) method removeCommands(commands)
405 12(CODE) method bindKeys(keyList)
406 12(CODE) method _buildKeyHash(command)
407 12(CODE) method parseKeys(keys)
408 12(CODE) method findKeyCommand(hashId, keyString)
409 12(CODE) method handleKeyboard(data, hashId, keyString, keyCode)
410 (BLANK)
411 (BLANK)
412 8(CODE) class DefaultHandlers
413 12(CODE) constructor new DefaultHandlers (mouseHandler)
414 (BLANK)
415 12(CODE) method onMouseDown(ev)
416 12(CODE) method startSelect(pos)
417 12(CODE) method select()
418 12(CODE) method extendSelectionBy(unitName)
419 12(CODE) method startDrag()
420 12(CODE) method focusWait()
421 12(CODE) method dragWait(e)
422 12(CODE) method dragWaitEnd(e)
423 12(CODE) method drag()
424 12(CODE) method dragEnd(e)
425 12(CODE) method onDoubleClick(ev)
426 12(CODE) method onTripleClick(ev)
427 12(CODE) method onQuadClick(ev)
428 12(CODE) method onMouseWheel(ev)
429 (BLANK)
430 (BLANK)
431 8(CODE) class BackgroundTokenizer
432 12(CODE) constructor new BackgroundTokenizer (tokenizer, editor)
433 (BLANK)
434 12(CODE) method _dispatchEvent(eventName, e)
435 12(CODE) method _emit(eventName, e)
436 12(CODE) method _signal(eventName, e)
437 12(CODE) method once(eventName, callback)
438 12(CODE) method setDefaultHandler(eventName, callback)
439 12(CODE) method removeDefaultHandler(eventName, callback)
440 12(CODE) method addEventListener(eventName, callback, capturing)
441 12(CODE) method on(eventName, callback, capturing)
442 12(CODE) method removeEventListener(eventName, callback)
443 12(CODE) method removeListener(eventName, callback)
444 12(CODE) method off(eventName, callback)
445 12(CODE) method removeAllListeners(eventName)
446 12(CODE) method setTokenizer(tokenizer)
447 12(CODE) method setDocument(doc)
448 12(CODE) method fireUpdateEvent(firstRow, lastRow)
449 12(CODE) method start(startRow)
450 12(CODE) method $updateOnChange(delta)
451 12(CODE) method stop()
452 12(CODE) method getTokens(row)
453 12(CODE) method getState(row)
454 12(CODE) method $tokenizeRow(row)
455 (BLANK)
456 (BLANK)
457 8(CODE) class Mode
458 12(CODE) constructor new Mode ()
459 (BLANK)
460 12(CODE) properties
461 16(CODE) lineCommentStart:string
462 (BLANK)
463 16(CODE) blockComment:
464 20(CODE) start:string
465 20(CODE) end:string
466 12(CODE) method getNextLineIndent(state, line, tab)
467 12(CODE) method checkOutdent(state, line, input)
468 12(CODE) method autoOutdent(state, doc, row)
469 12(CODE) method createWorker(session)
470 (BLANK)
471 (BLANK)
472 8(CODE) class KeyBinding
473 12(CODE) constructor new KeyBinding (editor)
474 (BLANK)
475 12(CODE) method setDefaultHandler(kb)
476 12(CODE) method setKeyboardHandler(kb)
477 12(CODE) method addKeyboardHandler(kb, pos)
478 12(CODE) method removeKeyboardHandler(kb)
479 12(CODE) method getKeyboardHandler()
480 12(CODE) method $callKeyboardHandlers(hashId, keyString, keyCode, e)
481 12(CODE) method onCommandKey(e, hashId, keyCode)
482 12(CODE) method onTextInput(text)
483 (BLANK)
484 (BLANK)
485 8(CODE) class RangeList
486 12(CODE) constructor new RangeList ()
487 (BLANK)
488 12(CODE) method comparePoints(p1, p2)
489 12(CODE) method pointIndex(pos, excludeEdges, startIndex)
490 12(CODE) method add(range)
491 12(CODE) method addList(list)
492 12(CODE) method substractPoint(pos)
493 12(CODE) method merge()
494 12(CODE) method contains(row, column)
495 12(CODE) method containsPoint(pos)
496 12(CODE) method rangeAtPoint(pos)
497 12(CODE) method clipRows(startRow, endRow)
498 12(CODE) method removeAll()
499 12(CODE) method attach(session)
500 12(CODE) method detach()
501 12(CODE) method $onChange(e)
502 (BLANK)
503 (BLANK)
504 8(CODE) class TextHighlightRules
505 12(CODE) constructor new TextHighlightRules ()
506 (BLANK)
507 12(CODE) method addRules(rules, prefix)
508 12(CODE) method getRules()
509 12(CODE) method embedRules(HighlightRules, prefix, escapeRules, states, append)
510 12(CODE) method getEmbeds()
511 12(CODE) method normalizeRules()
512 12(CODE) method createKeywordMapper(map, defaultToken, ignoreCase, splitChar)
513 12(CODE) method getKeywords()
514 (BLANK)
515 (BLANK)
516 8(CODE) class Marker
517 12(CODE) constructor new Marker (parentEl)
518 (BLANK)
519 12(CODE) properties
520 16(CODE) $padding:number
521 12(CODE) method setPadding(padding)
522 12(CODE) method setSession(session)
523 12(CODE) method setMarkers(markers)
524 12(CODE) method update(config)
525 12(CODE) method $getTop(row, layerConfig)
526 12(CODE) method drawTextMarker(stringBuilder, range, clazz, layerConfig, extraStyle)
527 12(CODE) method drawMultiLineMarker(stringBuilder, range, clazz, config, extraStyle)
528 12(CODE) method drawSingleLineMarker(stringBuilder, range, clazz, config, extraLength, extraStyle)
529 12(CODE) method drawFullLineMarker(stringBuilder, range, clazz, config, extraStyle)
530 12(CODE) method drawScreenLineMarker(stringBuilder, range, clazz, config, extraStyle)
531 (BLANK)
532 (BLANK)
533 8(CODE) class Text
534 12(CODE) constructor new Text (parentEl)
535 (BLANK)
536 12(CODE) properties
537 16(CODE) EOF_CHAR:string
538 16(CODE) EOL_CHAR:string
539 16(CODE) TAB_CHAR:string
540 16(CODE) SPACE_CHAR:string
541 16(CODE) $padding:number
542 (BLANK)
543 16(CODE) $fontStyles:
544 20(CODE) fontFamily:number
545 20(CODE) fontSize:number
546 20(CODE) fontWeight:number
547 20(CODE) fontStyle:number
548 20(CODE) lineHeight:number
549 (BLANK)
550 16(CODE) showInvisibles:boolean
551 16(CODE) displayIndentGuides:boolean
552 (BLANK)
553 16(CODE) $tabStrings:
554 20(CODE) length:number
555 (BLANK)
556 16(CODE) $textToken:
557 20(CODE) text:boolean
558 20(CODE) rparen:boolean
559 20(CODE) lparen:boolean
560 12(CODE) method _dispatchEvent(eventName, e)
561 12(CODE) method _emit(eventName, e)
562 12(CODE) method _signal(eventName, e)
563 12(CODE) method once(eventName, callback)
564 12(CODE) method setDefaultHandler(eventName, callback)
565 12(CODE) method removeDefaultHandler(eventName, callback)
566 12(CODE) method addEventListener(eventName, callback, capturing)
567 12(CODE) method on(eventName, callback, capturing)
568 12(CODE) method removeEventListener(eventName, callback)
569 12(CODE) method removeListener(eventName, callback)
570 12(CODE) method off(eventName, callback)
571 12(CODE) method removeAllListeners(eventName)
572 12(CODE) method setPadding(padding)
573 12(CODE) method getLineHeight()
574 12(CODE) method getCharacterWidth()
575 12(CODE) method checkForSizeChanges()
576 12(CODE) method $pollSizeChanges()
577 12(CODE) method $measureSizes()
578 12(CODE) method setSession(session)
579 12(CODE) method setShowInvisibles(showInvisibles)
580 12(CODE) method setDisplayIndentGuides(display)
581 12(CODE) method $computeTabString()
582 12(CODE) method onChangeTabSize()
583 12(CODE) method updateLines(config, firstRow, lastRow)
584 12(CODE) method scrollLines(config)
585 12(CODE) method $renderLinesFragment(config, firstRow, lastRow)
586 12(CODE) method update(config)
587 12(CODE) method $renderToken(stringBuilder, screenColumn, token, value)
588 12(CODE) method renderIndentGuide(stringBuilder, value)
589 12(CODE) method $renderWrappedLine(stringBuilder, tokens, splits, onlyContents)
590 12(CODE) method $renderSimpleLine(stringBuilder, tokens)
591 12(CODE) method $renderLine(stringBuilder, row, onlyContents, foldLine)
592 12(CODE) method $getFoldLineTokens(row, foldLine)
593 12(CODE) method $useLineGroups()
594 12(CODE) method destroy()
595 (BLANK)
596 (BLANK)
597 8(CODE) class Selection
598 12(CODE) constructor new Selection (session)
599 (BLANK)
600 12(CODE) properties
601 16(CODE) ranges:object
602 16(CODE) rangeList:object
603 12(CODE) method _dispatchEvent(eventName, e)
604 12(CODE) method _emit(eventName, e)
605 12(CODE) method _signal(eventName, e)
606 12(CODE) method once(eventName, callback)
607 12(CODE) method setDefaultHandler(eventName, callback)
608 12(CODE) method removeDefaultHandler(eventName, callback)
609 12(CODE) method addEventListener(eventName, callback, capturing)
610 12(CODE) method on(eventName, callback, capturing)
611 12(CODE) method removeEventListener(eventName, callback)
612 12(CODE) method removeListener(eventName, callback)
613 12(CODE) method off(eventName, callback)
614 12(CODE) method removeAllListeners(eventName)
615 12(CODE) method isEmpty()
616 12(CODE) method isMultiLine()
617 12(CODE) method getCursor()
618 12(CODE) method setSelectionAnchor(row, column)
619 12(CODE) method getSelectionAnchor()
620 12(CODE) method getSelectionLead()
621 12(CODE) method shiftSelection(columns)
622 12(CODE) method isBackwards()
623 12(CODE) method getRange()
624 12(CODE) method clearSelection()
625 12(CODE) method selectAll()
626 12(CODE) method setSelectionRange(range, reverse)
627 12(CODE) method setRange(range, reverse)
628 12(CODE) method $moveSelection(mover)
629 12(CODE) method selectTo(row, column)
630 12(CODE) method selectToPosition(pos)
631 12(CODE) method selectUp()
632 12(CODE) method selectDown()
633 12(CODE) method selectRight()
634 12(CODE) method selectLeft()
635 12(CODE) method selectLineStart()
636 12(CODE) method selectLineEnd()
637 12(CODE) method selectFileEnd()
638 12(CODE) method selectFileStart()
639 12(CODE) method selectWordRight()
640 12(CODE) method selectWordLeft()
641 12(CODE) method getWordRange(row, column)
642 12(CODE) method selectWord()
643 12(CODE) method selectAWord()
644 12(CODE) method getLineRange(row, excludeLastChar)
645 12(CODE) method selectLine()
646 12(CODE) method moveCursorUp()
647 12(CODE) method moveCursorDown()
648 12(CODE) method moveCursorLeft()
649 12(CODE) method moveCursorRight()
650 12(CODE) method moveCursorLineStart()
651 12(CODE) method moveCursorLineEnd()
652 12(CODE) method moveCursorFileEnd()
653 12(CODE) method moveCursorFileStart()
654 12(CODE) method moveCursorLongWordRight()
655 12(CODE) method moveCursorLongWordLeft()
656 12(CODE) method $shortWordEndIndex(rightOfCursor)
657 12(CODE) method moveCursorShortWordRight()
658 12(CODE) method moveCursorShortWordLeft()
659 12(CODE) method moveCursorWordRight()
660 12(CODE) method moveCursorWordLeft()
661 12(CODE) method moveCursorBy(rows, chars)
662 12(CODE) method moveCursorToPosition(position)
663 12(CODE) method moveCursorTo(row, column, keepDesiredColumn)
664 12(CODE) method moveCursorToScreen(row, column, keepDesiredColumn)
665 12(CODE) method detach()
666 12(CODE) method fromOrientedRange(range)
667 12(CODE) method toOrientedRange(range)
668 12(CODE) method addRange(range, $blockChangeEvents)
669 12(CODE) method toSingleRange(range)
670 12(CODE) method substractPoint(pos)
671 12(CODE) method mergeOverlappingRanges()
672 12(CODE) method $onAddRange(range)
673 12(CODE) method $onRemoveRange(removed)
674 12(CODE) method $initRangeList()
675 12(CODE) method getAllRanges()
676 12(CODE) method splitIntoLines()
677 12(CODE) method toggleBlockSelection()
678 12(CODE) method rectangularRangeBlock(screenCursor, screenAnchor, includeEmptyLines)
679 (BLANK)
680 (BLANK)
681 8(CODE) class Gutter
682 12(CODE) constructor new Gutter (parentEl)
683 (BLANK)
684 12(CODE) properties
685 16(CODE) $showFoldWidgets:boolean
686 12(CODE) method _dispatchEvent(eventName, e)
687 12(CODE) method _emit(eventName, e)
688 12(CODE) method _signal(eventName, e)
689 12(CODE) method once(eventName, callback)
690 12(CODE) method setDefaultHandler(eventName, callback)
691 12(CODE) method removeDefaultHandler(eventName, callback)
692 12(CODE) method addEventListener(eventName, callback, capturing)
693 12(CODE) method on(eventName, callback, capturing)
694 12(CODE) method removeEventListener(eventName, callback)
695 12(CODE) method removeListener(eventName, callback)
696 12(CODE) method off(eventName, callback)
697 12(CODE) method removeAllListeners(eventName)
698 12(CODE) method setSession(session)
699 12(CODE) method addGutterDecoration(row, className)
700 12(CODE) method removeGutterDecoration(row, className)
701 12(CODE) method setAnnotations(annotations)
702 12(CODE) method $updateAnnotations(e)
703 12(CODE) method update(config)
704 12(CODE) method setShowFoldWidgets(show)
705 12(CODE) method getShowFoldWidgets()
706 12(CODE) method $computePadding()
707 12(CODE) method getRegion(point)
708 (BLANK)
709 (BLANK)
710 8(CODE) class Behaviour
711 12(CODE) constructor new Behaviour ()
712 (BLANK)
713 12(CODE) method add(name, action, callback)
714 12(CODE) method addBehaviours(behaviours)
715 12(CODE) method remove(name)
716 12(CODE) method inherit(mode, filter)
717 12(CODE) method getBehaviours(filter)
718 (BLANK)
719 (BLANK)
720 8(CODE) class VirtualRenderer
721 12(CODE) constructor new VirtualRenderer (container, theme)
722 (BLANK)
723 12(CODE) properties
724 16(CODE) $padding:object
725 16(CODE) STEPS:number
726 16(CODE) CHANGE_FULL:number
727 16(CODE) $highlightGutterLine:boolean
728 16(CODE) CHANGE_MARKER:number
729 16(CODE) $printMarginColumn:number
730 16(CODE) $showInvisibles:boolean
731 16(CODE) $fontSize:number
732 16(CODE) CHANGE_CURSOR:number
733 16(CODE) CHANGE_MARKER_BACK:number
734 16(CODE) CHANGE_H_SCROLL:number
735 16(CODE) $showPrintMargin:boolean
736 16(CODE) CHANGE_LINES:number
737 16(CODE) $showGutter:boolean
738 16(CODE) $animatedScroll:boolean
739 16(CODE) CHANGE_SIZE:number
740 16(CODE) CHANGE_MARKER_FRONT:number
741 16(CODE) $displayIndentGuides:boolean
742 16(CODE) CHANGE_TEXT:number
743 16(CODE) $hScrollBarAlwaysVisible:boolean
744 16(CODE) CHANGE_SCROLL:number
745 16(CODE) $showFoldWidgets:boolean
746 16(CODE) CHANGE_GUTTER:number
747 (BLANK)
748 16(CODE) $options:
749 20(CODE) animatedScroll:
750 24(CODE) initialValue:boolean
751 24(CODE) name:string
752 (BLANK)
753 (BLANK)
754 20(CODE) showInvisibles:
755 24(CODE) set:function(value)
756 24(CODE) initialValue:boolean
757 24(CODE) name:string
758 (BLANK)
759 (BLANK)
760 20(CODE) showPrintMargin:
761 24(CODE) set:function()
762 24(CODE) initialValue:boolean
763 24(CODE) name:string
764 (BLANK)
765 (BLANK)
766 20(CODE) printMarginColumn:
767 24(CODE) set:function()
768 24(CODE) initialValue:number
769 24(CODE) name:string
770 (BLANK)
771 (BLANK)
772 20(CODE) printMargin:
773 24(CODE) set:function(val)
774 24(CODE) get:function()
775 24(CODE) name:string
776 (BLANK)
777 (BLANK)
778 20(CODE) showGutter:
779 24(CODE) set:function(show)
780 24(CODE) initialValue:boolean
781 24(CODE) name:string
782 (BLANK)
783 (BLANK)
784 20(CODE) fadeFoldWidgets:
785 24(CODE) set:function(show)
786 24(CODE) initialValue:boolean
787 24(CODE) name:string
788 (BLANK)
789 (BLANK)
790 20(CODE) showFoldWidgets:
791 24(CODE) set:function(show)
792 24(CODE) initialValue:boolean
793 24(CODE) name:string
794 (BLANK)
795 (BLANK)
796 20(CODE) displayIndentGuides:
797 24(CODE) set:function(show)
798 24(CODE) initialValue:boolean
799 24(CODE) name:string
800 (BLANK)
801 (BLANK)
802 20(CODE) highlightGutterLine:
803 24(CODE) set:function(shouldHighlight)
804 24(CODE) initialValue:boolean
805 24(CODE) value:boolean
806 24(CODE) name:string
807 (BLANK)
808 (BLANK)
809 20(CODE) hScrollBarAlwaysVisible:
810 24(CODE) set:function(alwaysVisible)
811 24(CODE) initialValue:boolean
812 24(CODE) name:string
813 (BLANK)
814 (BLANK)
815 20(CODE) fontSize:
816 24(CODE) set:function(size)
817 24(CODE) initialValue:number
818 24(CODE) name:string
819 (BLANK)
820 (BLANK)
821 20(CODE) fontFamily:
822 24(CODE) set:function(name)
823 24(CODE) name:string
824 (BLANK)
825 16(CODE) $fadeFoldWidgets:boolean
826 12(CODE) method _signal(eventName, e)
827 12(CODE) method updateCharacterSize()
828 12(CODE) method alignCursor(cursor, alignment)
829 12(CODE) method getShowGutter()
830 12(CODE) method isScrollableBy(deltaX, deltaY)
831 12(CODE) method scrollBy(deltaX, deltaY)
832 12(CODE) method getPrintMarginColumn()
833 12(CODE) method setAnimatedScroll(shouldAnimate)
834 12(CODE) method getShowPrintMargin()
835 12(CODE) method $updateGutterLineHighlight()
836 12(CODE) method _emit(eventName, e)
837 12(CODE) method setCompositionText(text)
838 12(CODE) method getLastVisibleRow()
839 12(CODE) method getContainerElement()
840 12(CODE) method destroy()
841 12(CODE) method getHScrollBarAlwaysVisible()
842 12(CODE) method onChangeTabSize()
843 12(CODE) method getFirstFullyVisibleRow()
844 12(CODE) method getScrollBottomRow()
845 12(CODE) method getScrollTop()
846 12(CODE) method onResize(force, gutterWidth, width, height)
847 12(CODE) method screenToTextCoordinates(x, y)
848 12(CODE) method updateText()
849 12(CODE) method showComposition(position)
850 12(CODE) method scrollCursorIntoView(cursor, offset)
851 12(CODE) method $getLongestLine()
852 12(CODE) method updateFull(force)
853 12(CODE) method off(eventName, callback)
854 12(CODE) method scrollToY(scrollTop)
855 12(CODE) method removeGutterDecoration(row, className)
856 12(CODE) method adjustWrapLimit()
857 12(CODE) method getOption(name)
858 12(CODE) method $calcSteps(fromValue, toValue)
859 12(CODE) method addGutterDecoration(row, className)
860 12(CODE) method getLastFullyVisibleRow()
861 12(CODE) method getTheme()
862 12(CODE) method setOptions(optList)
863 12(CODE) method setAnnotations(annotations)
864 12(CODE) method visualizeBlur()
865 12(CODE) method hideComposition()
866 12(CODE) method unsetStyle(style)
867 12(CODE) method $updatePrintMargin()
868 12(CODE) method updateBackMarkers()
869 12(CODE) method removeAllListeners(eventName)
870 12(CODE) method hideCursor()
871 12(CODE) method setStyle(style, include)
872 12(CODE) method getMouseEventTarget()
873 12(CODE) method $updateLines()
874 12(CODE) method getOptions(optionNames)
875 12(CODE) method setOption(name, value)
876 12(CODE) method getShowInvisibles()
877 12(CODE) method setFadeFoldWidgets(show)
878 12(CODE) method scrollToLine(line, center, animate, callback)
879 12(CODE) method getFirstVisibleRow()
880 12(CODE) method scrollToRow(row)
881 12(CODE) method setShowInvisibles(showInvisibles)
882 12(CODE) method setTheme(theme)
883 12(CODE) method on(eventName, callback, capturing)
884 12(CODE) method showCursor()
885 12(CODE) method addEventListener(eventName, callback, capturing)
886 12(CODE) method setDisplayIndentGuides(display)
887 12(CODE) method removeListener(eventName, callback)
888 12(CODE) method setHighlightGutterLine(shouldHighlight)
889 12(CODE) method visualizeFocus()
890 12(CODE) method _dispatchEvent(eventName, e)
891 12(CODE) method getFadeFoldWidgets()
892 12(CODE) method updateFontSize()
893 12(CODE) method removeDefaultHandler(eventName, callback)
894 12(CODE) method getAnimatedScroll()
895 12(CODE) method removeEventListener(eventName, callback)
896 12(CODE) method getTextAreaContainer()
897 12(CODE) method scrollToX(scrollLeft)
898 12(CODE) method $renderChanges(changes, force)
899 12(CODE) method getScrollTopRow()
900 12(CODE) method pixelToScreenCoordinates(x, y)
901 12(CODE) method setSession(session)
902 12(CODE) method getDisplayIndentGuides()
903 12(CODE) method updateLines(firstRow, lastRow)
904 12(CODE) method setShowGutter(show)
905 12(CODE) method getScrollLeft()
906 12(CODE) method $moveTextAreaToCursor()
907 12(CODE) method once(eventName, callback)
908 12(CODE) method setDefaultHandler(eventName, callback)
909 12(CODE) method $updateScrollBar()
910 12(CODE) method updateCursor()
911 12(CODE) method updateBreakpoints(rows)
912 12(CODE) method setPadding(padding)
913 12(CODE) method setShowPrintMargin(showPrintMargin)
914 12(CODE) method setHScrollBarAlwaysVisible(alwaysVisible)
915 12(CODE) method textToScreenCoordinates(row, column)
916 12(CODE) method scrollSelectionIntoView(anchor, lead, offset)
917 12(CODE) method setPrintMarginColumn(showPrintMargin)
918 12(CODE) method animateScrolling(fromValue, callback)
919 12(CODE) method $computeLayerConfig()
920 12(CODE) method onGutterResize()
921 12(CODE) method updateFrontMarkers()
922 12(CODE) method getHighlightGutterLine()
923 (BLANK)
924 (BLANK)
925 8(CODE) class MouseHandler
926 12(CODE) constructor new MouseHandler (editor)
927 (BLANK)
928 12(CODE) properties
929 16(CODE) $options:
930 20(CODE) scrollSpeed:
931 24(CODE) initialValue:number
932 24(CODE) name:string
933 (BLANK)
934 (BLANK)
935 20(CODE) dragDelay:
936 24(CODE) initialValue:number
937 24(CODE) name:string
938 (BLANK)
939 (BLANK)
940 20(CODE) focusTimout:
941 24(CODE) initialValue:number
942 24(CODE) name:string
943 (BLANK)
944 16(CODE) $scrollSpeed:number
945 16(CODE) $dragDelay:number
946 16(CODE) $focusTimout:number
947 12(CODE) method onMouseEvent(name, e)
948 12(CODE) method onMouseMove(name, e)
949 12(CODE) method onMouseWheel(name, e)
950 12(CODE) method setState(state)
951 12(CODE) method captureMouse(ev, state)
952 12(CODE) method setOptions(optList)
953 12(CODE) method getOptions(optionNames)
954 12(CODE) method setOption(name, value)
955 12(CODE) method getOption(name)
956 (BLANK)
957 (BLANK)
958 8(CODE) class PlaceHolder
959 12(CODE) constructor new PlaceHolder (session, length, pos, others, mainClass, othersClass)
960 (BLANK)
961 12(CODE) method _dispatchEvent(eventName, e)
962 12(CODE) method _emit(eventName, e)
963 12(CODE) method _signal(eventName, e)
964 12(CODE) method once(eventName, callback)
965 12(CODE) method setDefaultHandler(eventName, callback)
966 12(CODE) method removeDefaultHandler(eventName, callback)
967 12(CODE) method addEventListener(eventName, callback, capturing)
968 12(CODE) method on(eventName, callback, capturing)
969 12(CODE) method removeEventListener(eventName, callback)
970 12(CODE) method removeListener(eventName, callback)
971 12(CODE) method off(eventName, callback)
972 12(CODE) method removeAllListeners(eventName)
973 12(CODE) method setup()
974 12(CODE) method showOtherMarkers()
975 12(CODE) method hideOtherMarkers()
976 12(CODE) method onUpdate(event)
977 12(CODE) method onCursorChange(event)
978 12(CODE) method detach()
979 12(CODE) method cancel()
980 (BLANK)
981 (BLANK)
982 8(CODE) class Tokenizer
983 12(CODE) constructor new Tokenizer (rules)
984 (BLANK)
985 12(CODE) method $applyToken(str)
986 12(CODE) method $arrayTokens(str)
987 12(CODE) method removeCapturingGroups(src)
988 12(CODE) method createSplitterRegexp(src, flag)
989 12(CODE) method getLineTokens(line, startState)
990 (BLANK)
991 (BLANK)
992 8(CODE) class Document
993 12(CODE) constructor new Document (text)
994 (BLANK)
995 12(CODE) properties
996 16(CODE) $autoNewLine:string
997 16(CODE) $newLineMode:string
998 12(CODE) method _dispatchEvent(eventName, e)
999 12(CODE) method _emit(eventName, e)
1000 12(CODE) method _signal(eventName, e)
1001 12(CODE) method once(eventName, callback)
1002 12(CODE) method setDefaultHandler(eventName, callback)
1003 12(CODE) method removeDefaultHandler(eventName, callback)
1004 12(CODE) method addEventListener(eventName, callback, capturing)
1005 12(CODE) method on(eventName, callback, capturing)
1006 12(CODE) method removeEventListener(eventName, callback)
1007 12(CODE) method removeListener(eventName, callback)
1008 12(CODE) method off(eventName, callback)
1009 12(CODE) method removeAllListeners(eventName)
1010 12(CODE) method setValue(text)
1011 12(CODE) method getValue()
1012 12(CODE) method createAnchor(row, column)
1013 12(CODE) method $split(text)
1014 12(CODE) method $detectNewLine(text)
1015 12(CODE) method getNewLineCharacter()
1016 12(CODE) method setNewLineMode(newLineMode)
1017 12(CODE) method getNewLineMode()
1018 12(CODE) method isNewLine(text)
1019 12(CODE) method getLine(row)
1020 12(CODE) method getLines(firstRow, lastRow)
1021 12(CODE) method getAllLines()
1022 12(CODE) method getLength()
1023 12(CODE) method getTextRange(range)
1024 12(CODE) method $clipPosition(position)
1025 12(CODE) method insert(position, text)
1026 12(CODE) method insertLines(row, lines)
1027 12(CODE) method _insertLines(row, lines)
1028 12(CODE) method insertNewLine(position)
1029 12(CODE) method insertInLine(position, text)
1030 12(CODE) method remove(range)
1031 12(CODE) method removeInLine(row, startColumn, endColumn)
1032 12(CODE) method removeLines(firstRow, lastRow)
1033 12(CODE) method _removeLines(firstRow, lastRow)
1034 12(CODE) method removeNewLine(row)
1035 12(CODE) method replace(range, text)
1036 12(CODE) method applyDeltas(deltas)
1037 12(CODE) method revertDeltas(deltas)
1038 12(CODE) method indexToPosition(index, startRow)
1039 12(CODE) method positionToIndex(pos, startRow)
1040 (BLANK)
1041 (BLANK)
1042 8(CODE) class Editor
1043 12(CODE) constructor new Editor (renderer, session)
1044 (BLANK)
1045 12(CODE) properties
1046 (BLANK)
1047 16(CODE) session: EditSession
1048 (BLANK)
1049 16(CODE) $options:
1050 20(CODE) useSoftTabs:
1051 24(CODE) forwardTo:string
1052 24(CODE) name:string
1053 (BLANK)
1054 (BLANK)
1055 20(CODE) fontFamily:
1056 24(CODE) forwardTo:string
1057 24(CODE) name:string
1058 (BLANK)
1059 (BLANK)
1060 20(CODE) foldStyle:
1061 24(CODE) forwardTo:string
1062 24(CODE) name:string
1063 (BLANK)
1064 (BLANK)
1065 20(CODE) fadeFoldWidgets:
1066 24(CODE) forwardTo:string
1067 24(CODE) name:string
1068 (BLANK)
1069 (BLANK)
1070 20(CODE) readOnly:
1071 24(CODE) set:function(readOnly)
1072 24(CODE) initialValue:boolean
1073 24(CODE) name:string
1074 (BLANK)
1075 (BLANK)
1076 20(CODE) highlightGutterLine:
1077 24(CODE) forwardTo:string
1078 24(CODE) name:string
1079 (BLANK)
1080 (BLANK)
1081 20(CODE) tabSize:
1082 24(CODE) forwardTo:string
1083 24(CODE) name:string
1084 (BLANK)
1085 (BLANK)
1086 20(CODE) displayIndentGuides:
1087 24(CODE) forwardTo:string
1088 24(CODE) name:string
1089 (BLANK)
1090 (BLANK)
1091 20(CODE) overwrite:
1092 24(CODE) forwardTo:string
1093 24(CODE) name:string
1094 (BLANK)
1095 (BLANK)
1096 20(CODE) scrollSpeed:
1097 24(CODE) forwardTo:string
1098 24(CODE) name:string
1099 (BLANK)
1100 (BLANK)
1101 20(CODE) showPrintMargin:
1102 24(CODE) forwardTo:string
1103 24(CODE) name:string
1104 (BLANK)
1105 (BLANK)
1106 20(CODE) behavioursEnabled:
1107 24(CODE) initialValue:boolean
1108 24(CODE) name:string
1109 (BLANK)
1110 (BLANK)
1111 20(CODE) hScrollBarAlwaysVisible:
1112 24(CODE) forwardTo:string
1113 24(CODE) name:string
1114 (BLANK)
1115 (BLANK)
1116 20(CODE) printMarginColumn:
1117 24(CODE) forwardTo:string
1118 24(CODE) name:string
1119 (BLANK)
1120 (BLANK)
1121 20(CODE) fontSize:
1122 24(CODE) forwardTo:string
1123 24(CODE) name:string
1124 (BLANK)
1125 (BLANK)
1126 20(CODE) newLineMode:
1127 24(CODE) forwardTo:string
1128 24(CODE) name:string
1129 (BLANK)
1130 (BLANK)
1131 20(CODE) wrap:
1132 24(CODE) forwardTo:string
1133 24(CODE) name:string
1134 (BLANK)
1135 (BLANK)
1136 20(CODE) animatedScroll:
1137 24(CODE) forwardTo:string
1138 24(CODE) name:string
1139 (BLANK)
1140 (BLANK)
1141 20(CODE) firstLineNumber:
1142 24(CODE) forwardTo:string
1143 24(CODE) name:string
1144 (BLANK)
1145 (BLANK)
1146 20(CODE) cursorStyle:
1147 24(CODE) set:function(val)
1148 (BLANK)
1149 (BLANK)
1150 (BLANK)
1151 24(CODE) values:
1152 28(CODE) length:number
1153 (BLANK)
1154 (BLANK)
1155 (BLANK)
1156 24(CODE) initialValue:string
1157 24(CODE) name:string
1158 (BLANK)
1159 (BLANK)
1160 20(CODE) dragDelay:
1161 24(CODE) forwardTo:string
1162 24(CODE) name:string
1163 (BLANK)
1164 (BLANK)
1165 20(CODE) showInvisibles:
1166 24(CODE) forwardTo:string
1167 24(CODE) name:string
1168 (BLANK)
1169 (BLANK)
1170 20(CODE) useWorker:
1171 24(CODE) forwardTo:string
1172 24(CODE) name:string
1173 (BLANK)
1174 (BLANK)
1175 20(CODE) focusTimout:
1176 24(CODE) forwardTo:string
1177 24(CODE) name:string
1178 (BLANK)
1179 (BLANK)
1180 20(CODE) selectionStyle:
1181 24(CODE) set:function(style)
1182 24(CODE) initialValue:string
1183 24(CODE) name:string
1184 (BLANK)
1185 (BLANK)
1186 20(CODE) wrapBehavioursEnabled:
1187 24(CODE) initialValue:boolean
1188 24(CODE) name:string
1189 (BLANK)
1190 (BLANK)
1191 20(CODE) highlightActiveLine:
1192 24(CODE) set:function()
1193 24(CODE) initialValue:boolean
1194 24(CODE) name:string
1195 (BLANK)
1196 (BLANK)
1197 20(CODE) showFoldWidgets:
1198 24(CODE) forwardTo:string
1199 24(CODE) name:string
1200 (BLANK)
1201 (BLANK)
1202 20(CODE) highlightSelectedWord:
1203 24(CODE) set:function(shouldHighlight)
1204 24(CODE) initialValue:boolean
1205 24(CODE) name:string
1206 (BLANK)
1207 (BLANK)
1208 20(CODE) printMargin:
1209 24(CODE) forwardTo:string
1210 24(CODE) name:string
1211 (BLANK)
1212 (BLANK)
1213 20(CODE) showGutter:
1214 24(CODE) forwardTo:string
1215 24(CODE) name:string
1216 (BLANK)
1217 16(CODE) $selectionStyle:string
1218 16(CODE) $highlightActiveLine:boolean
1219 16(CODE) $highlightSelectedWord:boolean
1220 16(CODE) $readOnly:boolean
1221 16(CODE) $cursorStyle:string
1222 16(CODE) $behavioursEnabled:boolean
1223 16(CODE) $wrapBehavioursEnabled:boolean
1224 12(CODE) method _dispatchEvent(eventName, e)
1225 12(CODE) method _emit(eventName, e)
1226 12(CODE) method _signal(eventName, e)
1227 12(CODE) method once(eventName, callback)
1228 12(CODE) method setDefaultHandler(eventName, callback)
1229 12(CODE) method removeDefaultHandler(eventName, callback)
1230 12(CODE) method addEventListener(eventName, callback, capturing)
1231 12(CODE) method on(eventName, callback, capturing)
1232 12(CODE) method removeEventListener(eventName, callback)
1233 12(CODE) method removeListener(eventName, callback)
1234 12(CODE) method off(eventName, callback)
1235 12(CODE) method removeAllListeners(eventName)
1236 12(CODE) method setKeyboardHandler(keyboardHandler)
1237 12(CODE) method getKeyboardHandler()
1238 12(CODE) method setSession(session)
1239 12(CODE) method getSession() returns EditSession
1240 (BLANK)
1241 12(CODE) method setValue(val, cursorPos)
1242 12(CODE) method getValue()
1243 12(CODE) method getSelection()
1244 12(CODE) method resize(force)
1245 12(CODE) method setTheme(theme)
1246 12(CODE) method getTheme()
1247 12(CODE) method setStyle(style)
1248 12(CODE) method unsetStyle(style)
1249 12(CODE) method getFontSize()
1250 12(CODE) method setFontSize(size)
1251 12(CODE) method $highlightBrackets()
1252 12(CODE) method focus()
1253 12(CODE) method isFocused()
1254 12(CODE) method blur()
1255 12(CODE) method onFocus()
1256 12(CODE) method onBlur()
1257 12(CODE) method $cursorChange()
1258 12(CODE) method onDocumentChange(e)
1259 12(CODE) method onTokenizerUpdate(e)
1260 12(CODE) method onScrollTopChange()
1261 12(CODE) method onScrollLeftChange()
1262 12(CODE) method onCursorChange()
1263 12(CODE) method $updateHighlightActiveLine()
1264 12(CODE) method onSelectionChange(e)
1265 12(CODE) method $getSelectionHighLightRegexp()
1266 12(CODE) method onChangeFrontMarker()
1267 12(CODE) method onChangeBackMarker()
1268 12(CODE) method onChangeBreakpoint()
1269 12(CODE) method onChangeAnnotation()
1270 12(CODE) method onChangeMode(e)
1271 12(CODE) method onChangeWrapLimit()
1272 12(CODE) method onChangeWrapMode()
1273 12(CODE) method onChangeFold()
1274 12(CODE) method getCopyText()
1275 12(CODE) method onCopy()
1276 12(CODE) method onCut()
1277 12(CODE) method onPaste(text)
1278 12(CODE) method execCommand(command, args)
1279 12(CODE) method insert(text)
1280 12(CODE) method onTextInput(text)
1281 12(CODE) method onCommandKey(e, hashId, keyCode)
1282 12(CODE) method setOverwrite(overwrite)
1283 12(CODE) method getOverwrite()
1284 12(CODE) method toggleOverwrite()
1285 12(CODE) method setScrollSpeed(speed)
1286 12(CODE) method getScrollSpeed()
1287 12(CODE) method setDragDelay(dragDelay)
1288 12(CODE) method getDragDelay()
1289 12(CODE) method setSelectionStyle(val)
1290 12(CODE) method getSelectionStyle()
1291 12(CODE) method setHighlightActiveLine(shouldHighlight)
1292 12(CODE) method getHighlightActiveLine()
1293 12(CODE) method setHighlightGutterLine(shouldHighlight)
1294 12(CODE) method getHighlightGutterLine()
1295 12(CODE) method setHighlightSelectedWord(shouldHighlight)
1296 12(CODE) method getHighlightSelectedWord()
1297 12(CODE) method setAnimatedScroll(shouldAnimate)
1298 12(CODE) method getAnimatedScroll()
1299 12(CODE) method setShowInvisibles(showInvisibles)
1300 12(CODE) method getShowInvisibles()
1301 12(CODE) method setDisplayIndentGuides(display)
1302 12(CODE) method getDisplayIndentGuides()
1303 12(CODE) method setShowPrintMargin(showPrintMargin)
1304 12(CODE) method getShowPrintMargin()
1305 12(CODE) method setPrintMarginColumn(showPrintMargin)
1306 12(CODE) method getPrintMarginColumn()
1307 12(CODE) method setReadOnly(readOnly)
1308 12(CODE) method getReadOnly()
1309 12(CODE) method setBehavioursEnabled(enabled)
1310 12(CODE) method getBehavioursEnabled()
1311 12(CODE) method setWrapBehavioursEnabled(enabled)
1312 12(CODE) method getWrapBehavioursEnabled()
1313 12(CODE) method setShowFoldWidgets(show)
1314 12(CODE) method getShowFoldWidgets()
1315 12(CODE) method setFadeFoldWidgets(fade)
1316 12(CODE) method getFadeFoldWidgets()
1317 12(CODE) method remove(dir)
1318 12(CODE) method removeWordRight()
1319 12(CODE) method removeWordLeft()
1320 12(CODE) method removeToLineStart()
1321 12(CODE) method removeToLineEnd()
1322 12(CODE) method splitLine()
1323 12(CODE) method transposeLetters()
1324 12(CODE) method toLowerCase()
1325 12(CODE) method toUpperCase()
1326 12(CODE) method indent()
1327 12(CODE) method blockIndent()
1328 12(CODE) method blockOutdent()
1329 12(CODE) method sortLines()
1330 12(CODE) method toggleCommentLines()
1331 12(CODE) method toggleBlockComment()
1332 12(CODE) method getNumberAt( row, column )
1333 12(CODE) method modifyNumber(amount)
1334 12(CODE) method removeLines()
1335 12(CODE) method duplicateSelection()
1336 12(CODE) method moveLinesDown()
1337 12(CODE) method moveLinesUp()
1338 12(CODE) method moveText(range, toPosition)
1339 12(CODE) method copyLinesUp()
1340 12(CODE) method copyLinesDown()
1341 12(CODE) method $moveLines(mover)
1342 12(CODE) method $getSelectedRows()
1343 12(CODE) method onCompositionStart(text)
1344 12(CODE) method onCompositionUpdate(text)
1345 12(CODE) method onCompositionEnd()
1346 12(CODE) method getFirstVisibleRow()
1347 12(CODE) method getLastVisibleRow()
1348 12(CODE) method isRowVisible(row)
1349 12(CODE) method isRowFullyVisible(row)
1350 12(CODE) method $getVisibleRowCount()
1351 12(CODE) method $moveByPage(dir, select)
1352 12(CODE) method selectPageDown()
1353 12(CODE) method selectPageUp()
1354 12(CODE) method gotoPageDown()
1355 12(CODE) method gotoPageUp()
1356 12(CODE) method scrollPageDown()
1357 12(CODE) method scrollPageUp()
1358 12(CODE) method scrollToRow(row)
1359 12(CODE) method scrollToLine(line, center, animate, callback)
1360 12(CODE) method centerSelection()
1361 12(CODE) method getCursorPosition()
1362 12(CODE) method getCursorPositionScreen()
1363 12(CODE) method getSelectionRange()
1364 12(CODE) method selectAll()
1365 12(CODE) method clearSelection()
1366 12(CODE) method moveCursorTo(row, column)
1367 12(CODE) method moveCursorToPosition(pos)
1368 12(CODE) method jumpToMatching(select)
1369 12(CODE) method gotoLine(lineNumber, column, animate)
1370 12(CODE) method navigateTo(row, column)
1371 12(CODE) method navigateUp(times)
1372 12(CODE) method navigateDown(times)
1373 12(CODE) method navigateLeft(times)
1374 12(CODE) method navigateRight(times)
1375 12(CODE) method navigateLineStart()
1376 12(CODE) method navigateLineEnd()
1377 12(CODE) method navigateFileEnd()
1378 12(CODE) method navigateFileStart()
1379 12(CODE) method navigateWordRight()
1380 12(CODE) method navigateWordLeft()
1381 12(CODE) method replace(replacement, options)
1382 12(CODE) method replaceAll(replacement, options)
1383 12(CODE) method $tryReplace(range, replacement)
1384 12(CODE) method getLastSearchOptions()
1385 12(CODE) method find(needle, options, animate)
1386 12(CODE) method findNext(options, animate)
1387 12(CODE) method findPrevious(options, animate)
1388 12(CODE) method revealRange(range, animate)
1389 12(CODE) method undo()
1390 12(CODE) method redo()
1391 12(CODE) method destroy()
1392 12(CODE) method setAutoScrollEditorIntoView(enable)
1393 12(CODE) method $resetCursorStyle()
1394 12(CODE) method setOptions(optList)
1395 12(CODE) method getOptions(optionNames)
1396 12(CODE) method setOption(name, value)
1397 12(CODE) method getOption(name)
1398 12(CODE) method updateSelectionMarkers()
1399 12(CODE) method addSelectionMarker(orientedRange)
1400 12(CODE) method removeSelectionMarker(range)
1401 12(CODE) method removeSelectionMarkers(ranges)
1402 12(CODE) method $onAddRange(e)
1403 12(CODE) method $onRemoveRange(e)
1404 12(CODE) method $onMultiSelect(e)
1405 12(CODE) method $onSingleSelect(e)
1406 12(CODE) method $onMultiSelectExec(e)
1407 12(CODE) method forEachSelection(cmd, args, $byLines)
1408 12(CODE) method exitMultiSelectMode()
1409 12(CODE) method findAll(needle, options, additive)
1410 12(CODE) method selectMoreLines(dir, skip)
1411 12(CODE) method transposeSelections(dir)
1412 12(CODE) method selectMore(dir, skip)
1413 12(CODE) method alignCursors()
1414 12(CODE) method $reAlignText(lines)
1415 (BLANK)
1416 (BLANK)
1417 8(CODE) class MouseEvent
1418 12(CODE) constructor new MouseEvent (domEvent, editor)
1419 (BLANK)
1420 12(CODE) method stopPropagation()
1421 12(CODE) method preventDefault()
1422 12(CODE) method stop()
1423 12(CODE) method getDocumentPosition()
1424 12(CODE) method inSelection()
1425 12(CODE) method getButton()
1426 12(CODE) method getShiftKey()
1427 12(CODE) method getAccelKey()
1428 (BLANK)
1429 (BLANK)
1430 8(CODE) class Cursor
1431 12(CODE) constructor new Cursor (parentEl)
1432 (BLANK)
1433 12(CODE) properties
1434 16(CODE) $padding:number
1435 12(CODE) method setPadding(padding)
1436 12(CODE) method setSession(session)
1437 12(CODE) method setBlinking(blinking)
1438 12(CODE) method setBlinkInterval(blinkInterval)
1439 12(CODE) method setSmoothBlinking(smoothBlinking)
1440 12(CODE) method addCursor()
1441 12(CODE) method removeCursor()
1442 12(CODE) method hideCursor()
1443 12(CODE) method showCursor()
1444 12(CODE) method restartTimer()
1445 12(CODE) method getPixelPosition(position, onScreen)
1446 12(CODE) method update(config)
1447 12(CODE) method $setOverwrite(overwrite)
1448 12(CODE) method destroy()
1449 (BLANK)
1450 (BLANK)
1451 8(CODE) class Range
1452 12(CODE) constructor new Range (startRow, startColumn, endRow, endColumn)
1453 (BLANK)
1454 12(CODE) method isEqual(range)
1455 12(CODE) method toString()
1456 12(CODE) method contains(row, column)
1457 12(CODE) method compareRange(range)
1458 12(CODE) method comparePoint(p)
1459 12(CODE) method containsRange(range)
1460 12(CODE) method intersects(range)
1461 12(CODE) method isEnd(row, column)
1462 12(CODE) method isStart(row, column)
1463 12(CODE) method setStart(row, column)
1464 12(CODE) method setEnd(row, column)
1465 12(CODE) method inside(row, column)
1466 12(CODE) method insideStart(row, column)
1467 12(CODE) method insideEnd(row, column)
1468 12(CODE) method compare(row, column)
1469 12(CODE) method compareStart(row, column)
1470 12(CODE) method compareEnd(row, column)
1471 12(CODE) method compareInside(row, column)
1472 12(CODE) method clipRows(firstRow, lastRow)
1473 12(CODE) method extend(row, column)
1474 12(CODE) method isEmpty()
1475 12(CODE) method isMultiLine()
1476 12(CODE) method clone()
1477 12(CODE) method collapseRows()
1478 12(CODE) method toScreenRange(session)
1479 12(CODE) method moveBy(row, column)
1480 (BLANK)
1481 (BLANK)
1482 8(CODE) append to namespace Range
1483 12(CODE) method fromPoints(start, end)
1484 12(CODE) method comparePoints(p1, p2)
1485 (BLANK)
1486 8(CODE) class Search
1487 12(CODE) constructor new Search ()
1488 (BLANK)
1489 12(CODE) method set(options)
1490 12(CODE) method getOptions()
1491 12(CODE) method setOptions(options)
1492 12(CODE) method find(session)
1493 12(CODE) method findAll(session)
1494 12(CODE) method replace(input, replacement)
1495 12(CODE) method $matchIterator(session, options)
1496 12(CODE) method $assembleRegExp(options)
1497 12(CODE) method $assembleMultilineRegExp(needle, modifier)
1498 12(CODE) method $lineIterator(session, options)
1499 (BLANK)
1500 (BLANK)
1501 8(CODE) class CommandManager
1502 12(CODE) constructor new CommandManager (platform, commands)
1503 (BLANK)
1504 12(CODE) method _dispatchEvent(eventName, e)
1505 12(CODE) method _emit(eventName, e)
1506 12(CODE) method _signal(eventName, e)
1507 12(CODE) method once(eventName, callback)
1508 12(CODE) method setDefaultHandler(eventName, callback)
1509 12(CODE) method removeDefaultHandler(eventName, callback)
1510 12(CODE) method addEventListener(eventName, callback, capturing)
1511 12(CODE) method on(eventName, callback, capturing)
1512 12(CODE) method removeEventListener(eventName, callback)
1513 12(CODE) method removeListener(eventName, callback)
1514 12(CODE) method off(eventName, callback)
1515 12(CODE) method removeAllListeners(eventName)
1516 12(CODE) method exec(command, editor, args)
1517 12(CODE) method toggleRecording(editor)
1518 12(CODE) method replay(editor)
1519 12(CODE) method trimMacro(m)
1520 (BLANK)
1521 (BLANK)
1522 8(CODE) class Anchor
1523 12(CODE) constructor new Anchor (doc, row, column)
1524 (BLANK)
1525 12(CODE) method _dispatchEvent(eventName, e)
1526 12(CODE) method _emit(eventName, e)
1527 12(CODE) method _signal(eventName, e)
1528 12(CODE) method once(eventName, callback)
1529 12(CODE) method setDefaultHandler(eventName, callback)
1530 12(CODE) method removeDefaultHandler(eventName, callback)
1531 12(CODE) method addEventListener(eventName, callback, capturing)
1532 12(CODE) method on(eventName, callback, capturing)
1533 12(CODE) method removeEventListener(eventName, callback)
1534 12(CODE) method removeListener(eventName, callback)
1535 12(CODE) method off(eventName, callback)
1536 12(CODE) method removeAllListeners(eventName)
1537 12(CODE) method getPosition()
1538 12(CODE) method getDocument()
1539 12(CODE) method onChange(e)
1540 12(CODE) method setPosition(row, column, noClip)
1541 12(CODE) method detach()
1542 12(CODE) method $clipPositionToDocument(row, column)
1543 (BLANK)
1544 (BLANK)
1545 8(CODE) class ScrollBar
1546 12(CODE) constructor new ScrollBar (parent)
1547 (BLANK)
1548 12(CODE) method _dispatchEvent(eventName, e)
1549 12(CODE) method _emit(eventName, e)
1550 12(CODE) method _signal(eventName, e)
1551 12(CODE) method once(eventName, callback)
1552 12(CODE) method setDefaultHandler(eventName, callback)
1553 12(CODE) method removeDefaultHandler(eventName, callback)
1554 12(CODE) method addEventListener(eventName, callback, capturing)
1555 12(CODE) method on(eventName, callback, capturing)
1556 12(CODE) method removeEventListener(eventName, callback)
1557 12(CODE) method removeListener(eventName, callback)
1558 12(CODE) method off(eventName, callback)
1559 12(CODE) method removeAllListeners(eventName)
1560 12(CODE) method onScroll()
1561 12(CODE) method getWidth()
1562 12(CODE) method setHeight(height)
1563 12(CODE) method setInnerHeight(height)
1564 12(CODE) method setScrollTop(scrollTop)
1565 (BLANK)
1566 4(CODE) end namespace ace
1567 (BLANK)
1568 (BLANK)
---- TOKENIZE
1 (BLANK)
2 4(CODE) public namespace ace
3 (BLANK)
4 8(CODE) properties
5 (BLANK)
6 12(CODE) config:
7 16(CODE) get:function(key)
8 16(CODE) set:function(key, value)
9 16(CODE) all:function()
10 16(CODE) _dispatchEvent:function(eventName, e)
11 16(CODE) _emit:function(eventName, e)
12 16(CODE) _signal:function(eventName, e)
13 16(CODE) once:function(eventName, callback)
14 16(CODE) setDefaultHandler:function(eventName, callback)
15 16(CODE) removeDefaultHandler:function(eventName, callback)
16 16(CODE) addEventListener:function(eventName, callback, capturing)
17 16(CODE) on:function(eventName, callback, capturing)
18 16(CODE) removeEventListener:function(eventName, callback)
19 16(CODE) removeListener:function(eventName, callback)
20 16(CODE) off:function(eventName, callback)
21 16(CODE) removeAllListeners:function(eventName)
22 16(CODE) moduleUrl:function(name, component)
23 16(CODE) setModuleUrl:function(name, subst)
24 (BLANK)
25 (BLANK)
26 16(CODE) loadModule:function(moduleName, onLoad)
27 16(CODE) init:function()
28 16(CODE) defineOptions:function(obj, path, options)
29 16(CODE) resetOptions:function(obj)
30 16(CODE) setDefaultValue:function(path, name, value)
31 16(CODE) setDefaultValues:function(path, optionHash)
32 16(CODE) _eventRegistry:object
33 16(CODE) _defaultHandlers:object
34 8(CODE) method define(amodule, deps, payload)
35 8(CODE) method require(amodule, callback)
36 8(CODE) method edit(el)
37 8(CODE) method createEditSession(text, mode)
38 (BLANK)
39 8(CODE) class Fold
40 12(CODE) constructor new Fold (range, placeholder)
41 (BLANK)
42 12(CODE) method toString()
43 12(CODE) method setFoldLine(foldLine)
44 12(CODE) method clone()
45 12(CODE) method addSubFold(fold)
46 12(CODE) method restoreRange(range)
47 (BLANK)
48 (BLANK)
49 8(CODE) class TokenIterator
50 12(CODE) constructor new TokenIterator (session, initialRow, initialColumn)
51 (BLANK)
52 12(CODE) method stepBackward()
53 12(CODE) method stepForward()
54 12(CODE) method getCurrentToken()
55 12(CODE) method getCurrentTokenRow()
56 12(CODE) method getCurrentTokenColumn()
57 (BLANK)
58 (BLANK)
59 8(CODE) class EditSession
60 12(CODE) constructor new EditSession (text, mode)
61 (BLANK)
62 12(CODE) properties
63 (BLANK)
64 16(CODE) doc: Document
65 (BLANK)
66 16(CODE) $mode:object
67 16(CODE) $foldStyle:string
68 (BLANK)
69 16(CODE) $wrapLimitRange:
70 20(CODE) min:object
71 20(CODE) max:object
72 (BLANK)
73 16(CODE) $useWorker:boolean
74 16(CODE) $useSoftTabs:boolean
75 16(CODE) $scrollTop:number
76 (BLANK)
77 16(CODE) $options:
78 20(CODE) wrap:
79 24(CODE) set:function(value)
80 24(CODE) get:function()
81 24(CODE) handlesSet:boolean
82 24(CODE) name:string
83 (BLANK)
84 (BLANK)
85 20(CODE) firstLineNumber:
86 24(CODE) set:function()
87 24(CODE) initialValue:number
88 24(CODE) name:string
89 (BLANK)
90 (BLANK)
91 20(CODE) useWorker:
92 24(CODE) set:function(useWorker)
93 24(CODE) initialValue:boolean
94 24(CODE) name:string
95 (BLANK)
96 (BLANK)
97 20(CODE) useSoftTabs:
98 24(CODE) initialValue:boolean
99 24(CODE) name:string
100 (BLANK)
101 (BLANK)
102 20(CODE) tabSize:
103 24(CODE) set:function(tabSize)
104 24(CODE) initialValue:number
105 24(CODE) handlesSet:boolean
106 24(CODE) name:string
107 (BLANK)
108 (BLANK)
109 20(CODE) overwrite:
110 24(CODE) set:function(val)
111 24(CODE) initialValue:boolean
112 24(CODE) name:string
113 (BLANK)
114 (BLANK)
115 20(CODE) newLineMode:
116 24(CODE) set:function(val)
117 24(CODE) get:function()
118 24(CODE) handlesSet:boolean
119 24(CODE) name:string
120 (BLANK)
121 16(CODE) $scrollLeft:number
122 (BLANK)
123 16(CODE) $defaultUndoManager:
124 20(CODE) undo:function()
125 20(CODE) redo:function()
126 20(CODE) reset:function()
127 (BLANK)
128 16(CODE) $modeId:object
129 16(CODE) $tabSize:number
130 16(CODE) $firstLineNumber:number
131 16(CODE) $wrapLimit:number
132 (BLANK)
133 16(CODE) $foldStyles:
134 20(CODE) manual:number
135 20(CODE) markbegin:number
136 20(CODE) markbeginend:number
137 (BLANK)
138 16(CODE) $overwrite:boolean
139 16(CODE) $useWrapMode:boolean
140 12(CODE) method _signal(eventName, e)
141 12(CODE) method getDocumentLastRowColumn(docRow, docColumn)
142 12(CODE) method clearAnnotations()
143 12(CODE) method setTabSize(tabSize)
144 12(CODE) method $findClosingBracket(bracket, position, typeRe)
145 12(CODE) method getRowSplitData(row)
146 12(CODE) method getRowLength(row)
147 12(CODE) method foldAll(startRow, endRow, depth)
148 12(CODE) method getScreenWidth()
149 12(CODE) method setWrapLimitRange(min, max)
150 12(CODE) method _emit(eventName, e)
151 12(CODE) method $cloneFoldData()
152 12(CODE) method getWordRange(row, column)
153 12(CODE) method $getDisplayTokens(str, offset)
154 12(CODE) method unfold(location, expandInner)
155 12(CODE) method getTokenAt(row, column)
156 12(CODE) method $getStringScreenWidth(str, maxScreenColumn, screenColumn)
157 12(CODE) method getScrollTop()
158 12(CODE) method getDocumentLastRowColumnPosition(docRow, docColumn)
159 12(CODE) method $constrainWrapLimit(wrapLimit, min, max)
160 12(CODE) method toggleOverwrite()
161 12(CODE) method getFoldsInRange(range)
162 12(CODE) method getTabString()
163 12(CODE) method off(eventName, callback)
164 12(CODE) method adjustWrapLimit(desiredLimit, $printMargin)
165 12(CODE) method setNewLineMode(newLineMode)
166 12(CODE) method getUndoManager()
167 12(CODE) method moveLinesDown(firstRow, lastRow)
168 12(CODE) method getTabSize()
169 12(CODE) method $computeWidth(force)
170 12(CODE) method setOptions(optList)
171 12(CODE) method setAnnotations(annotations)
172 12(CODE) method $updateRowLengthCache(firstRow, lastRow, b)
173 12(CODE) method getAnnotations()
174 12(CODE) method setValue(text)
175 12(CODE) method getDisplayLine(row, endColumn, startRow, startColumn)
176 12(CODE) method removeAllListeners(eventName)
177 12(CODE) method expandFolds(folds)
178 12(CODE) method getLine(row)
179 12(CODE) method getSelection()
180 12(CODE) method getRowFoldEnd(docRow, startFoldRow)
181 12(CODE) method onReloadTokenizer(e)
182 12(CODE) method getOptions(optionNames)
183 12(CODE) method setUseWrapMode(useWrapMode)
184 12(CODE) method getValue()
185 12(CODE) method addMarker(range, clazz, type, inFront)
186 12(CODE) method $moveLines(firstRow, lastRow, dir)
187 12(CODE) method $findOpeningBracket(bracket, position, typeRe)
188 12(CODE) method $clipRangeToDocument(range)
189 12(CODE) method outdentRows(range)
190 12(CODE) method getNewLineMode()
191 12(CODE) method on(eventName, callback, capturing)
192 12(CODE) method getParentFoldRangeData(row, ignoreCurrent)
193 12(CODE) method $setFolding(foldMode)
194 12(CODE) method getNextFoldLine(docRow, startFoldLine)
195 12(CODE) method getFoldAt(row, column, side)
196 12(CODE) method $clipColumnToRow(row, column)
197 12(CODE) method undoChanges(deltas, dontSelect)
198 12(CODE) method getState(row)
199 12(CODE) method addFold(placeholder, range)
200 12(CODE) method addEventListener(eventName, callback, capturing)
201 12(CODE) method removeListener(eventName, callback)
202 12(CODE) method onChangeFold(e)
203 12(CODE) method $detectNewLine(text)
204 12(CODE) method removeMarker(markerId)
205 12(CODE) method getCommentFoldRange(row, column, dir)
206 12(CODE) method getBreakpoints()
207 12(CODE) method expandFold(fold)
208 12(CODE) method removeDefaultHandler(eventName, callback)
209 12(CODE) method moveText(fromRange, toPosition, copy)
210 12(CODE) method markUndoGroup()
211 12(CODE) method removeEventListener(eventName, callback)
212 12(CODE) method isTabStop(position)
213 12(CODE) method getDocument()
214 12(CODE) method $getUndoSelection(deltas, isUndo, lastUndoRange)
215 12(CODE) method $clipPositionToDocument(row, column)
216 12(CODE) method getAllFolds()
217 12(CODE) method once(eventName, callback)
218 12(CODE) method setDefaultHandler(eventName, callback)
219 12(CODE) method getAWordRange(row, column)
220 12(CODE) method getWrapLimit()
221 12(CODE) method toString()
222 12(CODE) method $clipRowToDocument(row)
223 12(CODE) method screenToDocumentPosition(screenRow, screenColumn)
224 12(CODE) method setBreakpoint(row, className)
225 12(CODE) method getWrapLimitRange()
226 12(CODE) method resetCaches()
227 12(CODE) method getOverwrite()
228 12(CODE) method indentRows(startRow, endRow, indentString)
229 12(CODE) method clearBreakpoints()
230 12(CODE) method addFolds(folds)
231 12(CODE) method remove(range)
232 12(CODE) method documentToScreenColumn(row, docColumn)
233 12(CODE) method getTextRange(range)
234 12(CODE) method $onChangeMode(mode, $isPlaceholder)
235 12(CODE) method screenToDocumentRow(screenRow, screenColumn)
236 12(CODE) method documentToScreenRow(docRow, docColumn)
237 12(CODE) method getScreenLastRowColumn(screenRow)
238 12(CODE) method $addFoldLine(foldLine)
239 12(CODE) method setOverwrite(overwrite)
240 12(CODE) method getMarkers(inFront)
241 12(CODE) method getLength()
242 12(CODE) method $startWorker()
243 12(CODE) method $updateWrapData(firstRow, lastRow)
244 12(CODE) method getBracketRange(pos)
245 12(CODE) method updateFoldWidgets(e)
246 12(CODE) method getScreenTabSize(screenColumn)
247 12(CODE) method setBreakpoints(rows)
248 12(CODE) method clearBreakpoint(row)
249 12(CODE) method $computeWrapSplits(tokens, wrapLimit)
250 12(CODE) method getFoldedRowCount(first, last)
251 12(CODE) method getOption(name)
252 12(CODE) method removeGutterDecoration(row, className)
253 12(CODE) method getFoldDisplayLine(foldLine, endRow, endColumn, startRow, startColumn)
254 12(CODE) method getFoldStringAt(row, column, trim, foldLine)
255 12(CODE) method getLines(firstRow, lastRow)
256 12(CODE) method addGutterDecoration(row, className)
257 12(CODE) method $updateInternalDataOnChange(e)
258 12(CODE) method getFoldLine(docRow, startFoldLine)
259 12(CODE) method highlight(re)
260 12(CODE) method setUndoManager(undoManager)
261 12(CODE) method highlightLines(startRow, endRow, clazz, inFront)
262 12(CODE) method getSelectionMarkers()
263 12(CODE) method redoChanges(deltas, dontSelect)
264 12(CODE) method removeFold(fold)
265 12(CODE) method duplicateLines(firstRow, lastRow)
266 12(CODE) method setDocument(doc)
267 12(CODE) method getTokens(row)
268 12(CODE) method $resetRowCache(docRow)
269 12(CODE) method setOption(name, value)
270 12(CODE) method onChange(e)
271 12(CODE) method setUseWorker(useWorker)
272 12(CODE) method getUseSoftTabs()
273 12(CODE) method getUseWorker()
274 12(CODE) method toggleFold(tryToUnfold)
275 12(CODE) method setScrollTop(scrollTop)
276 12(CODE) method moveLinesUp(firstRow, lastRow)
277 12(CODE) method isRowFolded(docRow, startFoldRow)
278 12(CODE) method setScrollLeft(scrollLeft)
279 12(CODE) method replace(range, text)
280 12(CODE) method $stopWorker()
281 12(CODE) method _dispatchEvent(eventName, e)
282 12(CODE) method onFoldWidgetClick(row, e)
283 12(CODE) method setWrapLimit(limit)
284 12(CODE) method setUseSoftTabs(val)
285 12(CODE) method getMode()
286 12(CODE) method setUndoSelect(enable)
287 12(CODE) method findMatchingBracket(position, chr)
288 12(CODE) method setMode(mode)
289 12(CODE) method getScrollLeft()
290 12(CODE) method addDynamicMarker(marker, inFront)
291 12(CODE) method removeFolds(folds)
292 12(CODE) method setFoldStyle(style)
293 12(CODE) method documentToScreenPosition(docRow, docColumn)
294 12(CODE) method insert(position, text)
295 12(CODE) method getScreenLength()
296 12(CODE) method screenToDocumentColumn(screenRow, screenColumn)
297 12(CODE) method $getRowCacheIndex(cacheArray, val)
298 12(CODE) method getUseWrapMode()
299 12(CODE) method getRowFoldStart(docRow, startFoldRow)
300 (BLANK)
301 (BLANK)
302 8(CODE) class FoldLine
303 12(CODE) constructor new FoldLine (foldData, folds)
304 (BLANK)
305 12(CODE) method shiftRow(shift)
306 12(CODE) method addFold(fold)
307 12(CODE) method containsRow(row)
308 12(CODE) method walk(callback, endRow, endColumn)
309 12(CODE) method getNextFoldTo(row, column)
310 12(CODE) method addRemoveChars(row, column, len)
311 12(CODE) method split(row, column)
312 12(CODE) method merge(foldLineNext)
313 12(CODE) method toString()
314 12(CODE) method idxToPosition(idx)
315 (BLANK)
316 (BLANK)
317 8(CODE) class FoldMode
318 12(CODE) constructor new FoldMode ()
319 (BLANK)
320 12(CODE) properties
321 16(CODE) foldingStartMarker:object
322 16(CODE) foldingStopMarker:object
323 12(CODE) method getFoldWidget(session, foldStyle, row)
324 12(CODE) method getFoldWidgetRange(session, foldStyle, row)
325 12(CODE) method indentationBlock(session, row, column)
326 12(CODE) method openingBracketBlock(session, bracket, row, column, typeRe)
327 12(CODE) method closingBracketBlock(session, bracket, row, column, typeRe)
328 (BLANK)
329 (BLANK)
330 8(CODE) class UndoManager
331 12(CODE) constructor new UndoManager ()
332 (BLANK)
333 12(CODE) method execute(options)
334 12(CODE) method undo(dontSelect)
335 12(CODE) method redo(dontSelect)
336 12(CODE) method reset()
337 12(CODE) method hasUndo()
338 12(CODE) method hasRedo()
339 12(CODE) method markClean()
340 12(CODE) method isClean()
341 (BLANK)
342 (BLANK)
343 8(CODE) class UIWorkerClient
344 12(CODE) constructor new UIWorkerClient (topLevelNamespaces, mod, classname)
345 (BLANK)
346 12(CODE) method _dispatchEvent(eventName, e)
347 12(CODE) method _emit(eventName, e)
348 12(CODE) method _signal(eventName, e)
349 12(CODE) method once(eventName, callback)
350 12(CODE) method setDefaultHandler(eventName, callback)
351 12(CODE) method removeDefaultHandler(eventName, callback)
352 12(CODE) method addEventListener(eventName, callback, capturing)
353 12(CODE) method on(eventName, callback, capturing)
354 12(CODE) method removeEventListener(eventName, callback)
355 12(CODE) method removeListener(eventName, callback)
356 12(CODE) method off(eventName, callback)
357 12(CODE) method removeAllListeners(eventName)
358 12(CODE) method onError(e)
359 12(CODE) method onMessage(e)
360 12(CODE) method $normalizePath(path)
361 12(CODE) method terminate()
362 12(CODE) method send(cmd, args)
363 12(CODE) method call(cmd, args, callback)
364 12(CODE) method emit(event, data)
365 12(CODE) method attachToDocument(doc)
366 12(CODE) method changeListener(e)
367 12(CODE) method $sendDeltaQueue()
368 (BLANK)
369 (BLANK)
370 8(CODE) class WorkerClient
371 12(CODE) constructor new WorkerClient (topLevelNamespaces, mod, classname)
372 (BLANK)
373 12(CODE) method _dispatchEvent(eventName, e)
374 12(CODE) method _emit(eventName, e)
375 12(CODE) method _signal(eventName, e)
376 12(CODE) method once(eventName, callback)
377 12(CODE) method setDefaultHandler(eventName, callback)
378 12(CODE) method removeDefaultHandler(eventName, callback)
379 12(CODE) method addEventListener(eventName, callback, capturing)
380 12(CODE) method on(eventName, callback, capturing)
381 12(CODE) method removeEventListener(eventName, callback)
382 12(CODE) method removeListener(eventName, callback)
383 12(CODE) method off(eventName, callback)
384 12(CODE) method removeAllListeners(eventName)
385 12(CODE) method onError(e)
386 12(CODE) method onMessage(e)
387 12(CODE) method $normalizePath(path)
388 12(CODE) method terminate()
389 12(CODE) method send(cmd, args)
390 12(CODE) method call(cmd, args, callback)
391 12(CODE) method emit(event, data)
392 12(CODE) method attachToDocument(doc)
393 12(CODE) method changeListener(e)
394 12(CODE) method $sendDeltaQueue()
395 (BLANK)
396 (BLANK)
397 8(CODE) class HashHandler
398 12(CODE) constructor new HashHandler (config, platform)
399 (BLANK)
400 12(CODE) method addCommand(command)
401 12(CODE) method removeCommand(command)
402 12(CODE) method bindKey(key, command)
403 12(CODE) method addCommands(commands)
404 12(CODE) method removeCommands(commands)
405 12(CODE) method bindKeys(keyList)
406 12(CODE) method _buildKeyHash(command)
407 12(CODE) method parseKeys(keys)
408 12(CODE) method findKeyCommand(hashId, keyString)
409 12(CODE) method handleKeyboard(data, hashId, keyString, keyCode)
410 (BLANK)
411 (BLANK)
412 8(CODE) class DefaultHandlers
413 12(CODE) constructor new DefaultHandlers (mouseHandler)
414 (BLANK)
415 12(CODE) method onMouseDown(ev)
416 12(CODE) method startSelect(pos)
417 12(CODE) method select()
418 12(CODE) method extendSelectionBy(unitName)
419 12(CODE) method startDrag()
420 12(CODE) method focusWait()
421 12(CODE) method dragWait(e)
422 12(CODE) method dragWaitEnd(e)
423 12(CODE) method drag()
424 12(CODE) method dragEnd(e)
425 12(CODE) method onDoubleClick(ev)
426 12(CODE) method onTripleClick(ev)
427 12(CODE) method onQuadClick(ev)
428 12(CODE) method onMouseWheel(ev)
429 (BLANK)
430 (BLANK)
431 8(CODE) class BackgroundTokenizer
432 12(CODE) constructor new BackgroundTokenizer (tokenizer, editor)
433 (BLANK)
434 12(CODE) method _dispatchEvent(eventName, e)
435 12(CODE) method _emit(eventName, e)
436 12(CODE) method _signal(eventName, e)
437 12(CODE) method once(eventName, callback)
438 12(CODE) method setDefaultHandler(eventName, callback)
439 12(CODE) method removeDefaultHandler(eventName, callback)
440 12(CODE) method addEventListener(eventName, callback, capturing)
441 12(CODE) method on(eventName, callback, capturing)
442 12(CODE) method removeEventListener(eventName, callback)
443 12(CODE) method removeListener(eventName, callback)
444 12(CODE) method off(eventName, callback)
445 12(CODE) method removeAllListeners(eventName)
446 12(CODE) method setTokenizer(tokenizer)
447 12(CODE) method setDocument(doc)
448 12(CODE) method fireUpdateEvent(firstRow, lastRow)
449 12(CODE) method start(startRow)
450 12(CODE) method $updateOnChange(delta)
451 12(CODE) method stop()
452 12(CODE) method getTokens(row)
453 12(CODE) method getState(row)
454 12(CODE) method $tokenizeRow(row)
455 (BLANK)
456 (BLANK)
457 8(CODE) class Mode
458 12(CODE) constructor new Mode ()
459 (BLANK)
460 12(CODE) properties
461 16(CODE) lineCommentStart:string
462 (BLANK)
463 16(CODE) blockComment:
464 20(CODE) start:string
465 20(CODE) end:string
466 12(CODE) method getNextLineIndent(state, line, tab)
467 12(CODE) method checkOutdent(state, line, input)
468 12(CODE) method autoOutdent(state, doc, row)
469 12(CODE) method createWorker(session)
470 (BLANK)
471 (BLANK)
472 8(CODE) class KeyBinding
473 12(CODE) constructor new KeyBinding (editor)
474 (BLANK)
475 12(CODE) method setDefaultHandler(kb)
476 12(CODE) method setKeyboardHandler(kb)
477 12(CODE) method addKeyboardHandler(kb, pos)
478 12(CODE) method removeKeyboardHandler(kb)
479 12(CODE) method getKeyboardHandler()
480 12(CODE) method $callKeyboardHandlers(hashId, keyString, keyCode, e)
481 12(CODE) method onCommandKey(e, hashId, keyCode)
482 12(CODE) method onTextInput(text)
483 (BLANK)
484 (BLANK)
485 8(CODE) class RangeList
486 12(CODE) constructor new RangeList ()
487 (BLANK)
488 12(CODE) method comparePoints(p1, p2)
489 12(CODE) method pointIndex(pos, excludeEdges, startIndex)
490 12(CODE) method add(range)
491 12(CODE) method addList(list)
492 12(CODE) method substractPoint(pos)
493 12(CODE) method merge()
494 12(CODE) method contains(row, column)
495 12(CODE) method containsPoint(pos)
496 12(CODE) method rangeAtPoint(pos)
497 12(CODE) method clipRows(startRow, endRow)
498 12(CODE) method removeAll()
499 12(CODE) method attach(session)
500 12(CODE) method detach()
501 12(CODE) method $onChange(e)
502 (BLANK)
503 (BLANK)
504 8(CODE) class TextHighlightRules
505 12(CODE) constructor new TextHighlightRules ()
506 (BLANK)
507 12(CODE) method addRules(rules, prefix)
508 12(CODE) method getRules()
509 12(CODE) method embedRules(HighlightRules, prefix, escapeRules, states, append)
510 12(CODE) method getEmbeds()
511 12(CODE) method normalizeRules()
512 12(CODE) method createKeywordMapper(map, defaultToken, ignoreCase, splitChar)
513 12(CODE) method getKeywords()
514 (BLANK)
515 (BLANK)
516 8(CODE) class Marker
517 12(CODE) constructor new Marker (parentEl)
518 (BLANK)
519 12(CODE) properties
520 16(CODE) $padding:number
521 12(CODE) method setPadding(padding)
522 12(CODE) method setSession(session)
523 12(CODE) method setMarkers(markers)
524 12(CODE) method update(config)
525 12(CODE) method $getTop(row, layerConfig)
526 12(CODE) method drawTextMarker(stringBuilder, range, clazz, layerConfig, extraStyle)
527 12(CODE) method drawMultiLineMarker(stringBuilder, range, clazz, config, extraStyle)
528 12(CODE) method drawSingleLineMarker(stringBuilder, range, clazz, config, extraLength, extraStyle)
529 12(CODE) method drawFullLineMarker(stringBuilder, range, clazz, config, extraStyle)
530 12(CODE) method drawScreenLineMarker(stringBuilder, range, clazz, config, extraStyle)
531 (BLANK)
532 (BLANK)
533 8(CODE) class Text
534 12(CODE) constructor new Text (parentEl)
535 (BLANK)
536 12(CODE) properties
537 16(CODE) EOF_CHAR:string
538 16(CODE) EOL_CHAR:string
539 16(CODE) TAB_CHAR:string
540 16(CODE) SPACE_CHAR:string
541 16(CODE) $padding:number
542 (BLANK)
543 16(CODE) $fontStyles:
544 20(CODE) fontFamily:number
545 20(CODE) fontSize:number
546 20(CODE) fontWeight:number
547 20(CODE) fontStyle:number
548 20(CODE) lineHeight:number
549 (BLANK)
550 16(CODE) showInvisibles:boolean
551 16(CODE) displayIndentGuides:boolean
552 (BLANK)
553 16(CODE) $tabStrings:
554 20(CODE) length:number
555 (BLANK)
556 16(CODE) $textToken:
557 20(CODE) text:boolean
558 20(CODE) rparen:boolean
559 20(CODE) lparen:boolean
560 12(CODE) method _dispatchEvent(eventName, e)
561 12(CODE) method _emit(eventName, e)
562 12(CODE) method _signal(eventName, e)
563 12(CODE) method once(eventName, callback)
564 12(CODE) method setDefaultHandler(eventName, callback)
565 12(CODE) method removeDefaultHandler(eventName, callback)
566 12(CODE) method addEventListener(eventName, callback, capturing)
567 12(CODE) method on(eventName, callback, capturing)
568 12(CODE) method removeEventListener(eventName, callback)
569 12(CODE) method removeListener(eventName, callback)
570 12(CODE) method off(eventName, callback)
571 12(CODE) method removeAllListeners(eventName)
572 12(CODE) method setPadding(padding)
573 12(CODE) method getLineHeight()
574 12(CODE) method getCharacterWidth()
575 12(CODE) method checkForSizeChanges()
576 12(CODE) method $pollSizeChanges()
577 12(CODE) method $measureSizes()
578 12(CODE) method setSession(session)
579 12(CODE) method setShowInvisibles(showInvisibles)
580 12(CODE) method setDisplayIndentGuides(display)
581 12(CODE) method $computeTabString()
582 12(CODE) method onChangeTabSize()
583 12(CODE) method updateLines(config, firstRow, lastRow)
584 12(CODE) method scrollLines(config)
585 12(CODE) method $renderLinesFragment(config, firstRow, lastRow)
586 12(CODE) method update(config)
587 12(CODE) method $renderToken(stringBuilder, screenColumn, token, value)
588 12(CODE) method renderIndentGuide(stringBuilder, value)
589 12(CODE) method $renderWrappedLine(stringBuilder, tokens, splits, onlyContents)
590 12(CODE) method $renderSimpleLine(stringBuilder, tokens)
591 12(CODE) method $renderLine(stringBuilder, row, onlyContents, foldLine)
592 12(CODE) method $getFoldLineTokens(row, foldLine)
593 12(CODE) method $useLineGroups()
594 12(CODE) method destroy()
595 (BLANK)
596 (BLANK)
597 8(CODE) class Selection
598 12(CODE) constructor new Selection (session)
599 (BLANK)
600 12(CODE) properties
601 16(CODE) ranges:object
602 16(CODE) rangeList:object
603 12(CODE) method _dispatchEvent(eventName, e)
604 12(CODE) method _emit(eventName, e)
605 12(CODE) method _signal(eventName, e)
606 12(CODE) method once(eventName, callback)
607 12(CODE) method setDefaultHandler(eventName, callback)
608 12(CODE) method removeDefaultHandler(eventName, callback)
609 12(CODE) method addEventListener(eventName, callback, capturing)
610 12(CODE) method on(eventName, callback, capturing)
611 12(CODE) method removeEventListener(eventName, callback)
612 12(CODE) method removeListener(eventName, callback)
613 12(CODE) method off(eventName, callback)
614 12(CODE) method removeAllListeners(eventName)
615 12(CODE) method isEmpty()
616 12(CODE) method isMultiLine()
617 12(CODE) method getCursor()
618 12(CODE) method setSelectionAnchor(row, column)
619 12(CODE) method getSelectionAnchor()
620 12(CODE) method getSelectionLead()
621 12(CODE) method shiftSelection(columns)
622 12(CODE) method isBackwards()
623 12(CODE) method getRange()
624 12(CODE) method clearSelection()
625 12(CODE) method selectAll()
626 12(CODE) method setSelectionRange(range, reverse)
627 12(CODE) method setRange(range, reverse)
628 12(CODE) method $moveSelection(mover)
629 12(CODE) method selectTo(row, column)
630 12(CODE) method selectToPosition(pos)
631 12(CODE) method selectUp()
632 12(CODE) method selectDown()
633 12(CODE) method selectRight()
634 12(CODE) method selectLeft()
635 12(CODE) method selectLineStart()
636 12(CODE) method selectLineEnd()
637 12(CODE) method selectFileEnd()
638 12(CODE) method selectFileStart()
639 12(CODE) method selectWordRight()
640 12(CODE) method selectWordLeft()
641 12(CODE) method getWordRange(row, column)
642 12(CODE) method selectWord()
643 12(CODE) method selectAWord()
644 12(CODE) method getLineRange(row, excludeLastChar)
645 12(CODE) method selectLine()
646 12(CODE) method moveCursorUp()
647 12(CODE) method moveCursorDown()
648 12(CODE) method moveCursorLeft()
649 12(CODE) method moveCursorRight()
650 12(CODE) method moveCursorLineStart()
651 12(CODE) method moveCursorLineEnd()
652 12(CODE) method moveCursorFileEnd()
653 12(CODE) method moveCursorFileStart()
654 12(CODE) method moveCursorLongWordRight()
655 12(CODE) method moveCursorLongWordLeft()
656 12(CODE) method $shortWordEndIndex(rightOfCursor)
657 12(CODE) method moveCursorShortWordRight()
658 12(CODE) method moveCursorShortWordLeft()
659 12(CODE) method moveCursorWordRight()
660 12(CODE) method moveCursorWordLeft()
661 12(CODE) method moveCursorBy(rows, chars)
662 12(CODE) method moveCursorToPosition(position)
663 12(CODE) method moveCursorTo(row, column, keepDesiredColumn)
664 12(CODE) method moveCursorToScreen(row, column, keepDesiredColumn)
665 12(CODE) method detach()
666 12(CODE) method fromOrientedRange(range)
667 12(CODE) method toOrientedRange(range)
668 12(CODE) method addRange(range, $blockChangeEvents)
669 12(CODE) method toSingleRange(range)
670 12(CODE) method substractPoint(pos)
671 12(CODE) method mergeOverlappingRanges()
672 12(CODE) method $onAddRange(range)
673 12(CODE) method $onRemoveRange(removed)
674 12(CODE) method $initRangeList()
675 12(CODE) method getAllRanges()
676 12(CODE) method splitIntoLines()
677 12(CODE) method toggleBlockSelection()
678 12(CODE) method rectangularRangeBlock(screenCursor, screenAnchor, includeEmptyLines)
679 (BLANK)
680 (BLANK)
681 8(CODE) class Gutter
682 12(CODE) constructor new Gutter (parentEl)
683 (BLANK)
684 12(CODE) properties
685 16(CODE) $showFoldWidgets:boolean
686 12(CODE) method _dispatchEvent(eventName, e)
687 12(CODE) method _emit(eventName, e)
688 12(CODE) method _signal(eventName, e)
689 12(CODE) method once(eventName, callback)
690 12(CODE) method setDefaultHandler(eventName, callback)
691 12(CODE) method removeDefaultHandler(eventName, callback)
692 12(CODE) method addEventListener(eventName, callback, capturing)
693 12(CODE) method on(eventName, callback, capturing)
694 12(CODE) method removeEventListener(eventName, callback)
695 12(CODE) method removeListener(eventName, callback)
696 12(CODE) method off(eventName, callback)
697 12(CODE) method removeAllListeners(eventName)
698 12(CODE) method setSession(session)
699 12(CODE) method addGutterDecoration(row, className)
700 12(CODE) method removeGutterDecoration(row, className)
701 12(CODE) method setAnnotations(annotations)
702 12(CODE) method $updateAnnotations(e)
703 12(CODE) method update(config)
704 12(CODE) method setShowFoldWidgets(show)
705 12(CODE) method getShowFoldWidgets()
706 12(CODE) method $computePadding()
707 12(CODE) method getRegion(point)
708 (BLANK)
709 (BLANK)
710 8(CODE) class Behaviour
711 12(CODE) constructor new Behaviour ()
712 (BLANK)
713 12(CODE) method add(name, action, callback)
714 12(CODE) method addBehaviours(behaviours)
715 12(CODE) method remove(name)
716 12(CODE) method inherit(mode, filter)
717 12(CODE) method getBehaviours(filter)
718 (BLANK)
719 (BLANK)
720 8(CODE) class VirtualRenderer
721 12(CODE) constructor new VirtualRenderer (container, theme)
722 (BLANK)
723 12(CODE) properties
724 16(CODE) $padding:object
725 16(CODE) STEPS:number
726 16(CODE) CHANGE_FULL:number
727 16(CODE) $highlightGutterLine:boolean
728 16(CODE) CHANGE_MARKER:number
729 16(CODE) $printMarginColumn:number
730 16(CODE) $showInvisibles:boolean
731 16(CODE) $fontSize:number
732 16(CODE) CHANGE_CURSOR:number
733 16(CODE) CHANGE_MARKER_BACK:number
734 16(CODE) CHANGE_H_SCROLL:number
735 16(CODE) $showPrintMargin:boolean
736 16(CODE) CHANGE_LINES:number
737 16(CODE) $showGutter:boolean
738 16(CODE) $animatedScroll:boolean
739 16(CODE) CHANGE_SIZE:number
740 16(CODE) CHANGE_MARKER_FRONT:number
741 16(CODE) $displayIndentGuides:boolean
742 16(CODE) CHANGE_TEXT:number
743 16(CODE) $hScrollBarAlwaysVisible:boolean
744 16(CODE) CHANGE_SCROLL:number
745 16(CODE) $showFoldWidgets:boolean
746 16(CODE) CHANGE_GUTTER:number
747 (BLANK)
748 16(CODE) $options:
749 20(CODE) animatedScroll:
750 24(CODE) initialValue:boolean
751 24(CODE) name:string
752 (BLANK)
753 (BLANK)
754 20(CODE) showInvisibles:
755 24(CODE) set:function(value)
756 24(CODE) initialValue:boolean
757 24(CODE) name:string
758 (BLANK)
759 (BLANK)
760 20(CODE) showPrintMargin:
761 24(CODE) set:function()
762 24(CODE) initialValue:boolean
763 24(CODE) name:string
764 (BLANK)
765 (BLANK)
766 20(CODE) printMarginColumn:
767 24(CODE) set:function()
768 24(CODE) initialValue:number
769 24(CODE) name:string
770 (BLANK)
771 (BLANK)
772 20(CODE) printMargin:
773 24(CODE) set:function(val)
774 24(CODE) get:function()
775 24(CODE) name:string
776 (BLANK)
777 (BLANK)
778 20(CODE) showGutter:
779 24(CODE) set:function(show)
780 24(CODE) initialValue:boolean
781 24(CODE) name:string
782 (BLANK)
783 (BLANK)
784 20(CODE) fadeFoldWidgets:
785 24(CODE) set:function(show)
786 24(CODE) initialValue:boolean
787 24(CODE) name:string
788 (BLANK)
789 (BLANK)
790 20(CODE) showFoldWidgets:
791 24(CODE) set:function(show)
792 24(CODE) initialValue:boolean
793 24(CODE) name:string
794 (BLANK)
795 (BLANK)
796 20(CODE) displayIndentGuides:
797 24(CODE) set:function(show)
798 24(CODE) initialValue:boolean
799 24(CODE) name:string
800 (BLANK)
801 (BLANK)
802 20(CODE) highlightGutterLine:
803 24(CODE) set:function(shouldHighlight)
804 24(CODE) initialValue:boolean
805 24(CODE) value:boolean
806 24(CODE) name:string
807 (BLANK)
808 (BLANK)
809 20(CODE) hScrollBarAlwaysVisible:
810 24(CODE) set:function(alwaysVisible)
811 24(CODE) initialValue:boolean
812 24(CODE) name:string
813 (BLANK)
814 (BLANK)
815 20(CODE) fontSize:
816 24(CODE) set:function(size)
817 24(CODE) initialValue:number
818 24(CODE) name:string
819 (BLANK)
820 (BLANK)
821 20(CODE) fontFamily:
822 24(CODE) set:function(name)
823 24(CODE) name:string
824 (BLANK)
825 16(CODE) $fadeFoldWidgets:boolean
826 12(CODE) method _signal(eventName, e)
827 12(CODE) method updateCharacterSize()
828 12(CODE) method alignCursor(cursor, alignment)
829 12(CODE) method getShowGutter()
830 12(CODE) method isScrollableBy(deltaX, deltaY)
831 12(CODE) method scrollBy(deltaX, deltaY)
832 12(CODE) method getPrintMarginColumn()
833 12(CODE) method setAnimatedScroll(shouldAnimate)
834 12(CODE) method getShowPrintMargin()
835 12(CODE) method $updateGutterLineHighlight()
836 12(CODE) method _emit(eventName, e)
837 12(CODE) method setCompositionText(text)
838 12(CODE) method getLastVisibleRow()
839 12(CODE) method getContainerElement()
840 12(CODE) method destroy()
841 12(CODE) method getHScrollBarAlwaysVisible()
842 12(CODE) method onChangeTabSize()
843 12(CODE) method getFirstFullyVisibleRow()
844 12(CODE) method getScrollBottomRow()
845 12(CODE) method getScrollTop()
846 12(CODE) method onResize(force, gutterWidth, width, height)
847 12(CODE) method screenToTextCoordinates(x, y)
848 12(CODE) method updateText()
849 12(CODE) method showComposition(position)
850 12(CODE) method scrollCursorIntoView(cursor, offset)
851 12(CODE) method $getLongestLine()
852 12(CODE) method updateFull(force)
853 12(CODE) method off(eventName, callback)
854 12(CODE) method scrollToY(scrollTop)
855 12(CODE) method removeGutterDecoration(row, className)
856 12(CODE) method adjustWrapLimit()
857 12(CODE) method getOption(name)
858 12(CODE) method $calcSteps(fromValue, toValue)
859 12(CODE) method addGutterDecoration(row, className)
860 12(CODE) method getLastFullyVisibleRow()
861 12(CODE) method getTheme()
862 12(CODE) method setOptions(optList)
863 12(CODE) method setAnnotations(annotations)
864 12(CODE) method visualizeBlur()
865 12(CODE) method hideComposition()
866 12(CODE) method unsetStyle(style)
867 12(CODE) method $updatePrintMargin()
868 12(CODE) method updateBackMarkers()
869 12(CODE) method removeAllListeners(eventName)
870 12(CODE) method hideCursor()
871 12(CODE) method setStyle(style, include)
872 12(CODE) method getMouseEventTarget()
873 12(CODE) method $updateLines()
874 12(CODE) method getOptions(optionNames)
875 12(CODE) method setOption(name, value)
876 12(CODE) method getShowInvisibles()
877 12(CODE) method setFadeFoldWidgets(show)
878 12(CODE) method scrollToLine(line, center, animate, callback)
879 12(CODE) method getFirstVisibleRow()
880 12(CODE) method scrollToRow(row)
881 12(CODE) method setShowInvisibles(showInvisibles)
882 12(CODE) method setTheme(theme)
883 12(CODE) method on(eventName, callback, capturing)
884 12(CODE) method showCursor()
885 12(CODE) method addEventListener(eventName, callback, capturing)
886 12(CODE) method setDisplayIndentGuides(display)
887 12(CODE) method removeListener(eventName, callback)
888 12(CODE) method setHighlightGutterLine(shouldHighlight)
889 12(CODE) method visualizeFocus()
890 12(CODE) method _dispatchEvent(eventName, e)
891 12(CODE) method getFadeFoldWidgets()
892 12(CODE) method updateFontSize()
893 12(CODE) method removeDefaultHandler(eventName, callback)
894 12(CODE) method getAnimatedScroll()
895 12(CODE) method removeEventListener(eventName, callback)
896 12(CODE) method getTextAreaContainer()
897 12(CODE) method scrollToX(scrollLeft)
898 12(CODE) method $renderChanges(changes, force)
899 12(CODE) method getScrollTopRow()
900 12(CODE) method pixelToScreenCoordinates(x, y)
901 12(CODE) method setSession(session)
902 12(CODE) method getDisplayIndentGuides()
903 12(CODE) method updateLines(firstRow, lastRow)
904 12(CODE) method setShowGutter(show)
905 12(CODE) method getScrollLeft()
906 12(CODE) method $moveTextAreaToCursor()
907 12(CODE) method once(eventName, callback)
908 12(CODE) method setDefaultHandler(eventName, callback)
909 12(CODE) method $updateScrollBar()
910 12(CODE) method updateCursor()
911 12(CODE) method updateBreakpoints(rows)
912 12(CODE) method setPadding(padding)
913 12(CODE) method setShowPrintMargin(showPrintMargin)
914 12(CODE) method setHScrollBarAlwaysVisible(alwaysVisible)
915 12(CODE) method textToScreenCoordinates(row, column)
916 12(CODE) method scrollSelectionIntoView(anchor, lead, offset)
917 12(CODE) method setPrintMarginColumn(showPrintMargin)
918 12(CODE) method animateScrolling(fromValue, callback)
919 12(CODE) method $computeLayerConfig()
920 12(CODE) method onGutterResize()
921 12(CODE) method updateFrontMarkers()
922 12(CODE) method getHighlightGutterLine()
923 (BLANK)
924 (BLANK)
925 8(CODE) class MouseHandler
926 12(CODE) constructor new MouseHandler (editor)
927 (BLANK)
928 12(CODE) properties
929 16(CODE) $options:
930 20(CODE) scrollSpeed:
931 24(CODE) initialValue:number
932 24(CODE) name:string
933 (BLANK)
934 (BLANK)
935 20(CODE) dragDelay:
936 24(CODE) initialValue:number
937 24(CODE) name:string
938 (BLANK)
939 (BLANK)
940 20(CODE) focusTimout:
941 24(CODE) initialValue:number
942 24(CODE) name:string
943 (BLANK)
944 16(CODE) $scrollSpeed:number
945 16(CODE) $dragDelay:number
946 16(CODE) $focusTimout:number
947 12(CODE) method onMouseEvent(name, e)
948 12(CODE) method onMouseMove(name, e)
949 12(CODE) method onMouseWheel(name, e)
950 12(CODE) method setState(state)
951 12(CODE) method captureMouse(ev, state)
952 12(CODE) method setOptions(optList)
953 12(CODE) method getOptions(optionNames)
954 12(CODE) method setOption(name, value)
955 12(CODE) method getOption(name)
956 (BLANK)
957 (BLANK)
958 8(CODE) class PlaceHolder
959 12(CODE) constructor new PlaceHolder (session, length, pos, others, mainClass, othersClass)
960 (BLANK)
961 12(CODE) method _dispatchEvent(eventName, e)
962 12(CODE) method _emit(eventName, e)
963 12(CODE) method _signal(eventName, e)
964 12(CODE) method once(eventName, callback)
965 12(CODE) method setDefaultHandler(eventName, callback)
966 12(CODE) method removeDefaultHandler(eventName, callback)
967 12(CODE) method addEventListener(eventName, callback, capturing)
968 12(CODE) method on(eventName, callback, capturing)
969 12(CODE) method removeEventListener(eventName, callback)
970 12(CODE) method removeListener(eventName, callback)
971 12(CODE) method off(eventName, callback)
972 12(CODE) method removeAllListeners(eventName)
973 12(CODE) method setup()
974 12(CODE) method showOtherMarkers()
975 12(CODE) method hideOtherMarkers()
976 12(CODE) method onUpdate(event)
977 12(CODE) method onCursorChange(event)
978 12(CODE) method detach()
979 12(CODE) method cancel()
980 (BLANK)
981 (BLANK)
982 8(CODE) class Tokenizer
983 12(CODE) constructor new Tokenizer (rules)
984 (BLANK)
985 12(CODE) method $applyToken(str)
986 12(CODE) method $arrayTokens(str)
987 12(CODE) method removeCapturingGroups(src)
988 12(CODE) method createSplitterRegexp(src, flag)
989 12(CODE) method getLineTokens(line, startState)
990 (BLANK)
991 (BLANK)
992 8(CODE) class Document
993 12(CODE) constructor new Document (text)
994 (BLANK)
995 12(CODE) properties
996 16(CODE) $autoNewLine:string
997 16(CODE) $newLineMode:string
998 12(CODE) method _dispatchEvent(eventName, e)
999 12(CODE) method _emit(eventName, e)
1000 12(CODE) method _signal(eventName, e)
1001 12(CODE) method once(eventName, callback)
1002 12(CODE) method setDefaultHandler(eventName, callback)
1003 12(CODE) method removeDefaultHandler(eventName, callback)
1004 12(CODE) method addEventListener(eventName, callback, capturing)
1005 12(CODE) method on(eventName, callback, capturing)
1006 12(CODE) method removeEventListener(eventName, callback)
1007 12(CODE) method removeListener(eventName, callback)
1008 12(CODE) method off(eventName, callback)
1009 12(CODE) method removeAllListeners(eventName)
1010 12(CODE) method setValue(text)
1011 12(CODE) method getValue()
1012 12(CODE) method createAnchor(row, column)
1013 12(CODE) method $split(text)
1014 12(CODE) method $detectNewLine(text)
1015 12(CODE) method getNewLineCharacter()
1016 12(CODE) method setNewLineMode(newLineMode)
1017 12(CODE) method getNewLineMode()
1018 12(CODE) method isNewLine(text)
1019 12(CODE) method getLine(row)
1020 12(CODE) method getLines(firstRow, lastRow)
1021 12(CODE) method getAllLines()
1022 12(CODE) method getLength()
1023 12(CODE) method getTextRange(range)
1024 12(CODE) method $clipPosition(position)
1025 12(CODE) method insert(position, text)
1026 12(CODE) method insertLines(row, lines)
1027 12(CODE) method _insertLines(row, lines)
1028 12(CODE) method insertNewLine(position)
1029 12(CODE) method insertInLine(position, text)
1030 12(CODE) method remove(range)
1031 12(CODE) method removeInLine(row, startColumn, endColumn)
1032 12(CODE) method removeLines(firstRow, lastRow)
1033 12(CODE) method _removeLines(firstRow, lastRow)
1034 12(CODE) method removeNewLine(row)
1035 12(CODE) method replace(range, text)
1036 12(CODE) method applyDeltas(deltas)
1037 12(CODE) method revertDeltas(deltas)
1038 12(CODE) method indexToPosition(index, startRow)
1039 12(CODE) method positionToIndex(pos, startRow)
1040 (BLANK)
1041 (BLANK)
1042 8(CODE) class Editor
1043 12(CODE) constructor new Editor (renderer, session)
1044 (BLANK)
1045 12(CODE) properties
1046 (BLANK)
1047 16(CODE) session: EditSession
1048 (BLANK)
1049 16(CODE) $options:
1050 20(CODE) useSoftTabs:
1051 24(CODE) forwardTo:string
1052 24(CODE) name:string
1053 (BLANK)
1054 (BLANK)
1055 20(CODE) fontFamily:
1056 24(CODE) forwardTo:string
1057 24(CODE) name:string
1058 (BLANK)
1059 (BLANK)
1060 20(CODE) foldStyle:
1061 24(CODE) forwardTo:string
1062 24(CODE) name:string
1063 (BLANK)
1064 (BLANK)
1065 20(CODE) fadeFoldWidgets:
1066 24(CODE) forwardTo:string
1067 24(CODE) name:string
1068 (BLANK)
1069 (BLANK)
1070 20(CODE) readOnly:
1071 24(CODE) set:function(readOnly)
1072 24(CODE) initialValue:boolean
1073 24(CODE) name:string
1074 (BLANK)
1075 (BLANK)
1076 20(CODE) highlightGutterLine:
1077 24(CODE) forwardTo:string
1078 24(CODE) name:string
1079 (BLANK)
1080 (BLANK)
1081 20(CODE) tabSize:
1082 24(CODE) forwardTo:string
1083 24(CODE) name:string
1084 (BLANK)
1085 (BLANK)
1086 20(CODE) displayIndentGuides:
1087 24(CODE) forwardTo:string
1088 24(CODE) name:string
1089 (BLANK)
1090 (BLANK)
1091 20(CODE) overwrite:
1092 24(CODE) forwardTo:string
1093 24(CODE) name:string
1094 (BLANK)
1095 (BLANK)
1096 20(CODE) scrollSpeed:
1097 24(CODE) forwardTo:string
1098 24(CODE) name:string
1099 (BLANK)
1100 (BLANK)
1101 20(CODE) showPrintMargin:
1102 24(CODE) forwardTo:string
1103 24(CODE) name:string
1104 (BLANK)
1105 (BLANK)
1106 20(CODE) behavioursEnabled:
1107 24(CODE) initialValue:boolean
1108 24(CODE) name:string
1109 (BLANK)
1110 (BLANK)
1111 20(CODE) hScrollBarAlwaysVisible:
1112 24(CODE) forwardTo:string
1113 24(CODE) name:string
1114 (BLANK)
1115 (BLANK)
1116 20(CODE) printMarginColumn:
1117 24(CODE) forwardTo:string
1118 24(CODE) name:string
1119 (BLANK)
1120 (BLANK)
1121 20(CODE) fontSize:
1122 24(CODE) forwardTo:string
1123 24(CODE) name:string
1124 (BLANK)
1125 (BLANK)
1126 20(CODE) newLineMode:
1127 24(CODE) forwardTo:string
1128 24(CODE) name:string
1129 (BLANK)
1130 (BLANK)
1131 20(CODE) wrap:
1132 24(CODE) forwardTo:string
1133 24(CODE) name:string
1134 (BLANK)
1135 (BLANK)
1136 20(CODE) animatedScroll:
1137 24(CODE) forwardTo:string
1138 24(CODE) name:string
1139 (BLANK)
1140 (BLANK)
1141 20(CODE) firstLineNumber:
1142 24(CODE) forwardTo:string
1143 24(CODE) name:string
1144 (BLANK)
1145 (BLANK)
1146 20(CODE) cursorStyle:
1147 24(CODE) set:function(val)
1148 (BLANK)
1149 (BLANK)
1150 (BLANK)
1151 24(CODE) values:
1152 28(CODE) length:number
1153 (BLANK)
1154 (BLANK)
1155 (BLANK)
1156 24(CODE) initialValue:string
1157 24(CODE) name:string
1158 (BLANK)
1159 (BLANK)
1160 20(CODE) dragDelay:
1161 24(CODE) forwardTo:string
1162 24(CODE) name:string
1163 (BLANK)
1164 (BLANK)
1165 20(CODE) showInvisibles:
1166 24(CODE) forwardTo:string
1167 24(CODE) name:string
1168 (BLANK)
1169 (BLANK)
1170 20(CODE) useWorker:
1171 24(CODE) forwardTo:string
1172 24(CODE) name:string
1173 (BLANK)
1174 (BLANK)
1175 20(CODE) focusTimout:
1176 24(CODE) forwardTo:string
1177 24(CODE) name:string
1178 (BLANK)
1179 (BLANK)
1180 20(CODE) selectionStyle:
1181 24(CODE) set:function(style)
1182 24(CODE) initialValue:string
1183 24(CODE) name:string
1184 (BLANK)
1185 (BLANK)
1186 20(CODE) wrapBehavioursEnabled:
1187 24(CODE) initialValue:boolean
1188 24(CODE) name:string
1189 (BLANK)
1190 (BLANK)
1191 20(CODE) highlightActiveLine:
1192 24(CODE) set:function()
1193 24(CODE) initialValue:boolean
1194 24(CODE) name:string
1195 (BLANK)
1196 (BLANK)
1197 20(CODE) showFoldWidgets:
1198 24(CODE) forwardTo:string
1199 24(CODE) name:string
1200 (BLANK)
1201 (BLANK)
1202 20(CODE) highlightSelectedWord:
1203 24(CODE) set:function(shouldHighlight)
1204 24(CODE) initialValue:boolean
1205 24(CODE) name:string
1206 (BLANK)
1207 (BLANK)
1208 20(CODE) printMargin:
1209 24(CODE) forwardTo:string
1210 24(CODE) name:string
1211 (BLANK)
1212 (BLANK)
1213 20(CODE) showGutter:
1214 24(CODE) forwardTo:string
1215 24(CODE) name:string
1216 (BLANK)
1217 16(CODE) $selectionStyle:string
1218 16(CODE) $highlightActiveLine:boolean
1219 16(CODE) $highlightSelectedWord:boolean
1220 16(CODE) $readOnly:boolean
1221 16(CODE) $cursorStyle:string
1222 16(CODE) $behavioursEnabled:boolean
1223 16(CODE) $wrapBehavioursEnabled:boolean
1224 12(CODE) method _dispatchEvent(eventName, e)
1225 12(CODE) method _emit(eventName, e)
1226 12(CODE) method _signal(eventName, e)
1227 12(CODE) method once(eventName, callback)
1228 12(CODE) method setDefaultHandler(eventName, callback)
1229 12(CODE) method removeDefaultHandler(eventName, callback)
1230 12(CODE) method addEventListener(eventName, callback, capturing)
1231 12(CODE) method on(eventName, callback, capturing)
1232 12(CODE) method removeEventListener(eventName, callback)
1233 12(CODE) method removeListener(eventName, callback)
1234 12(CODE) method off(eventName, callback)
1235 12(CODE) method removeAllListeners(eventName)
1236 12(CODE) method setKeyboardHandler(keyboardHandler)
1237 12(CODE) method getKeyboardHandler()
1238 12(CODE) method setSession(session)
1239 12(CODE) method getSession() returns EditSession
1240 (BLANK)
1241 12(CODE) method setValue(val, cursorPos)
1242 12(CODE) method getValue()
1243 12(CODE) method getSelection()
1244 12(CODE) method resize(force)
1245 12(CODE) method setTheme(theme)
1246 12(CODE) method getTheme()
1247 12(CODE) method setStyle(style)
1248 12(CODE) method unsetStyle(style)
1249 12(CODE) method getFontSize()
1250 12(CODE) method setFontSize(size)
1251 12(CODE) method $highlightBrackets()
1252 12(CODE) method focus()
1253 12(CODE) method isFocused()
1254 12(CODE) method blur()
1255 12(CODE) method onFocus()
1256 12(CODE) method onBlur()
1257 12(CODE) method $cursorChange()
1258 12(CODE) method onDocumentChange(e)
1259 12(CODE) method onTokenizerUpdate(e)
1260 12(CODE) method onScrollTopChange()
1261 12(CODE) method onScrollLeftChange()
1262 12(CODE) method onCursorChange()
1263 12(CODE) method $updateHighlightActiveLine()
1264 12(CODE) method onSelectionChange(e)
1265 12(CODE) method $getSelectionHighLightRegexp()
1266 12(CODE) method onChangeFrontMarker()
1267 12(CODE) method onChangeBackMarker()
1268 12(CODE) method onChangeBreakpoint()
1269 12(CODE) method onChangeAnnotation()
1270 12(CODE) method onChangeMode(e)
1271 12(CODE) method onChangeWrapLimit()
1272 12(CODE) method onChangeWrapMode()
1273 12(CODE) method onChangeFold()
1274 12(CODE) method getCopyText()
1275 12(CODE) method onCopy()
1276 12(CODE) method onCut()
1277 12(CODE) method onPaste(text)
1278 12(CODE) method execCommand(command, args)
1279 12(CODE) method insert(text)
1280 12(CODE) method onTextInput(text)
1281 12(CODE) method onCommandKey(e, hashId, keyCode)
1282 12(CODE) method setOverwrite(overwrite)
1283 12(CODE) method getOverwrite()
1284 12(CODE) method toggleOverwrite()
1285 12(CODE) method setScrollSpeed(speed)
1286 12(CODE) method getScrollSpeed()
1287 12(CODE) method setDragDelay(dragDelay)
1288 12(CODE) method getDragDelay()
1289 12(CODE) method setSelectionStyle(val)
1290 12(CODE) method getSelectionStyle()
1291 12(CODE) method setHighlightActiveLine(shouldHighlight)
1292 12(CODE) method getHighlightActiveLine()
1293 12(CODE) method setHighlightGutterLine(shouldHighlight)
1294 12(CODE) method getHighlightGutterLine()
1295 12(CODE) method setHighlightSelectedWord(shouldHighlight)
1296 12(CODE) method getHighlightSelectedWord()
1297 12(CODE) method setAnimatedScroll(shouldAnimate)
1298 12(CODE) method getAnimatedScroll()
1299 12(CODE) method setShowInvisibles(showInvisibles)
1300 12(CODE) method getShowInvisibles()
1301 12(CODE) method setDisplayIndentGuides(display)
1302 12(CODE) method getDisplayIndentGuides()
1303 12(CODE) method setShowPrintMargin(showPrintMargin)
1304 12(CODE) method getShowPrintMargin()
1305 12(CODE) method setPrintMarginColumn(showPrintMargin)
1306 12(CODE) method getPrintMarginColumn()
1307 12(CODE) method setReadOnly(readOnly)
1308 12(CODE) method getReadOnly()
1309 12(CODE) method setBehavioursEnabled(enabled)
1310 12(CODE) method getBehavioursEnabled()
1311 12(CODE) method setWrapBehavioursEnabled(enabled)
1312 12(CODE) method getWrapBehavioursEnabled()
1313 12(CODE) method setShowFoldWidgets(show)
1314 12(CODE) method getShowFoldWidgets()
1315 12(CODE) method setFadeFoldWidgets(fade)
1316 12(CODE) method getFadeFoldWidgets()
1317 12(CODE) method remove(dir)
1318 12(CODE) method removeWordRight()
1319 12(CODE) method removeWordLeft()
1320 12(CODE) method removeToLineStart()
1321 12(CODE) method removeToLineEnd()
1322 12(CODE) method splitLine()
1323 12(CODE) method transposeLetters()
1324 12(CODE) method toLowerCase()
1325 12(CODE) method toUpperCase()
1326 12(CODE) method indent()
1327 12(CODE) method blockIndent()
1328 12(CODE) method blockOutdent()
1329 12(CODE) method sortLines()
1330 12(CODE) method toggleCommentLines()
1331 12(CODE) method toggleBlockComment()
1332 12(CODE) method getNumberAt( row, column )
1333 12(CODE) method modifyNumber(amount)
1334 12(CODE) method removeLines()
1335 12(CODE) method duplicateSelection()
1336 12(CODE) method moveLinesDown()
1337 12(CODE) method moveLinesUp()
1338 12(CODE) method moveText(range, toPosition)
1339 12(CODE) method copyLinesUp()
1340 12(CODE) method copyLinesDown()
1341 12(CODE) method $moveLines(mover)
1342 12(CODE) method $getSelectedRows()
1343 12(CODE) method onCompositionStart(text)
1344 12(CODE) method onCompositionUpdate(text)
1345 12(CODE) method onCompositionEnd()
1346 12(CODE) method getFirstVisibleRow()
1347 12(CODE) method getLastVisibleRow()
1348 12(CODE) method isRowVisible(row)
1349 12(CODE) method isRowFullyVisible(row)
1350 12(CODE) method $getVisibleRowCount()
1351 12(CODE) method $moveByPage(dir, select)
1352 12(CODE) method selectPageDown()
1353 12(CODE) method selectPageUp()
1354 12(CODE) method gotoPageDown()
1355 12(CODE) method gotoPageUp()
1356 12(CODE) method scrollPageDown()
1357 12(CODE) method scrollPageUp()
1358 12(CODE) method scrollToRow(row)
1359 12(CODE) method scrollToLine(line, center, animate, callback)
1360 12(CODE) method centerSelection()
1361 12(CODE) method getCursorPosition()
1362 12(CODE) method getCursorPositionScreen()
1363 12(CODE) method getSelectionRange()
1364 12(CODE) method selectAll()
1365 12(CODE) method clearSelection()
1366 12(CODE) method moveCursorTo(row, column)
1367 12(CODE) method moveCursorToPosition(pos)
1368 12(CODE) method jumpToMatching(select)
1369 12(CODE) method gotoLine(lineNumber, column, animate)
1370 12(CODE) method navigateTo(row, column)
1371 12(CODE) method navigateUp(times)
1372 12(CODE) method navigateDown(times)
1373 12(CODE) method navigateLeft(times)
1374 12(CODE) method navigateRight(times)
1375 12(CODE) method navigateLineStart()
1376 12(CODE) method navigateLineEnd()
1377 12(CODE) method navigateFileEnd()
1378 12(CODE) method navigateFileStart()
1379 12(CODE) method navigateWordRight()
1380 12(CODE) method navigateWordLeft()
1381 12(CODE) method replace(replacement, options)
1382 12(CODE) method replaceAll(replacement, options)
1383 12(CODE) method $tryReplace(range, replacement)
1384 12(CODE) method getLastSearchOptions()
1385 12(CODE) method find(needle, options, animate)
1386 12(CODE) method findNext(options, animate)
1387 12(CODE) method findPrevious(options, animate)
1388 12(CODE) method revealRange(range, animate)
1389 12(CODE) method undo()
1390 12(CODE) method redo()
1391 12(CODE) method destroy()
1392 12(CODE) method setAutoScrollEditorIntoView(enable)
1393 12(CODE) method $resetCursorStyle()
1394 12(CODE) method setOptions(optList)
1395 12(CODE) method getOptions(optionNames)
1396 12(CODE) method setOption(name, value)
1397 12(CODE) method getOption(name)
1398 12(CODE) method updateSelectionMarkers()
1399 12(CODE) method addSelectionMarker(orientedRange)
1400 12(CODE) method removeSelectionMarker(range)
1401 12(CODE) method removeSelectionMarkers(ranges)
1402 12(CODE) method $onAddRange(e)
1403 12(CODE) method $onRemoveRange(e)
1404 12(CODE) method $onMultiSelect(e)
1405 12(CODE) method $onSingleSelect(e)
1406 12(CODE) method $onMultiSelectExec(e)
1407 12(CODE) method forEachSelection(cmd, args, $byLines)
1408 12(CODE) method exitMultiSelectMode()
1409 12(CODE) method findAll(needle, options, additive)
1410 12(CODE) method selectMoreLines(dir, skip)
1411 12(CODE) method transposeSelections(dir)
1412 12(CODE) method selectMore(dir, skip)
1413 12(CODE) method alignCursors()
1414 12(CODE) method $reAlignText(lines)
1415 (BLANK)
1416 (BLANK)
1417 8(CODE) class MouseEvent
1418 12(CODE) constructor new MouseEvent (domEvent, editor)
1419 (BLANK)
1420 12(CODE) method stopPropagation()
1421 12(CODE) method preventDefault()
1422 12(CODE) method stop()
1423 12(CODE) method getDocumentPosition()
1424 12(CODE) method inSelection()
1425 12(CODE) method getButton()
1426 12(CODE) method getShiftKey()
1427 12(CODE) method getAccelKey()
1428 (BLANK)
1429 (BLANK)
1430 8(CODE) class Cursor
1431 12(CODE) constructor new Cursor (parentEl)
1432 (BLANK)
1433 12(CODE) properties
1434 16(CODE) $padding:number
1435 12(CODE) method setPadding(padding)
1436 12(CODE) method setSession(session)
1437 12(CODE) method setBlinking(blinking)
1438 12(CODE) method setBlinkInterval(blinkInterval)
1439 12(CODE) method setSmoothBlinking(smoothBlinking)
1440 12(CODE) method addCursor()
1441 12(CODE) method removeCursor()
1442 12(CODE) method hideCursor()
1443 12(CODE) method showCursor()
1444 12(CODE) method restartTimer()
1445 12(CODE) method getPixelPosition(position, onScreen)
1446 12(CODE) method update(config)
1447 12(CODE) method $setOverwrite(overwrite)
1448 12(CODE) method destroy()
1449 (BLANK)
1450 (BLANK)
1451 8(CODE) class Range
1452 12(CODE) constructor new Range (startRow, startColumn, endRow, endColumn)
1453 (BLANK)
1454 12(CODE) method isEqual(range)
1455 12(CODE) method toString()
1456 12(CODE) method contains(row, column)
1457 12(CODE) method compareRange(range)
1458 12(CODE) method comparePoint(p)
1459 12(CODE) method containsRange(range)
1460 12(CODE) method intersects(range)
1461 12(CODE) method isEnd(row, column)
1462 12(CODE) method isStart(row, column)
1463 12(CODE) method setStart(row, column)
1464 12(CODE) method setEnd(row, column)
1465 12(CODE) method inside(row, column)
1466 12(CODE) method insideStart(row, column)
1467 12(CODE) method insideEnd(row, column)
1468 12(CODE) method compare(row, column)
1469 12(CODE) method compareStart(row, column)
1470 12(CODE) method compareEnd(row, column)
1471 12(CODE) method compareInside(row, column)
1472 12(CODE) method clipRows(firstRow, lastRow)
1473 12(CODE) method extend(row, column)
1474 12(CODE) method isEmpty()
1475 12(CODE) method isMultiLine()
1476 12(CODE) method clone()
1477 12(CODE) method collapseRows()
1478 12(CODE) method toScreenRange(session)
1479 12(CODE) method moveBy(row, column)
1480 (BLANK)
1481 (BLANK)
1482 8(CODE) append to namespace Range
1483 12(CODE) method fromPoints(start, end)
1484 12(CODE) method comparePoints(p1, p2)
1485 (BLANK)
1486 8(CODE) class Search
1487 12(CODE) constructor new Search ()
1488 (BLANK)
1489 12(CODE) method set(options)
1490 12(CODE) method getOptions()
1491 12(CODE) method setOptions(options)
1492 12(CODE) method find(session)
1493 12(CODE) method findAll(session)
1494 12(CODE) method replace(input, replacement)
1495 12(CODE) method $matchIterator(session, options)
1496 12(CODE) method $assembleRegExp(options)
1497 12(CODE) method $assembleMultilineRegExp(needle, modifier)
1498 12(CODE) method $lineIterator(session, options)
1499 (BLANK)
1500 (BLANK)
1501 8(CODE) class CommandManager
1502 12(CODE) constructor new CommandManager (platform, commands)
1503 (BLANK)
1504 12(CODE) method _dispatchEvent(eventName, e)
1505 12(CODE) method _emit(eventName, e)
1506 12(CODE) method _signal(eventName, e)
1507 12(CODE) method once(eventName, callback)
1508 12(CODE) method setDefaultHandler(eventName, callback)
1509 12(CODE) method removeDefaultHandler(eventName, callback)
1510 12(CODE) method addEventListener(eventName, callback, capturing)
1511 12(CODE) method on(eventName, callback, capturing)
1512 12(CODE) method removeEventListener(eventName, callback)
1513 12(CODE) method removeListener(eventName, callback)
1514 12(CODE) method off(eventName, callback)
1515 12(CODE) method removeAllListeners(eventName)
1516 12(CODE) method exec(command, editor, args)
1517 12(CODE) method toggleRecording(editor)
1518 12(CODE) method replay(editor)
1519 12(CODE) method trimMacro(m)
1520 (BLANK)
1521 (BLANK)
1522 8(CODE) class Anchor
1523 12(CODE) constructor new Anchor (doc, row, column)
1524 (BLANK)
1525 12(CODE) method _dispatchEvent(eventName, e)
1526 12(CODE) method _emit(eventName, e)
1527 12(CODE) method _signal(eventName, e)
1528 12(CODE) method once(eventName, callback)
1529 12(CODE) method setDefaultHandler(eventName, callback)
1530 12(CODE) method removeDefaultHandler(eventName, callback)
1531 12(CODE) method addEventListener(eventName, callback, capturing)
1532 12(CODE) method on(eventName, callback, capturing)
1533 12(CODE) method removeEventListener(eventName, callback)
1534 12(CODE) method removeListener(eventName, callback)
1535 12(CODE) method off(eventName, callback)
1536 12(CODE) method removeAllListeners(eventName)
1537 12(CODE) method getPosition()
1538 12(CODE) method getDocument()
1539 12(CODE) method onChange(e)
1540 12(CODE) method setPosition(row, column, noClip)
1541 12(CODE) method detach()
1542 12(CODE) method $clipPositionToDocument(row, column)
1543 (BLANK)
1544 (BLANK)
1545 8(CODE) class ScrollBar
1546 12(CODE) constructor new ScrollBar (parent)
1547 (BLANK)
1548 12(CODE) method _dispatchEvent(eventName, e)
1549 12(CODE) method _emit(eventName, e)
1550 12(CODE) method _signal(eventName, e)
1551 12(CODE) method once(eventName, callback)
1552 12(CODE) method setDefaultHandler(eventName, callback)
1553 12(CODE) method removeDefaultHandler(eventName, callback)
1554 12(CODE) method addEventListener(eventName, callback, capturing)
1555 12(CODE) method on(eventName, callback, capturing)
1556 12(CODE) method removeEventListener(eventName, callback)
1557 12(CODE) method removeListener(eventName, callback)
1558 12(CODE) method off(eventName, callback)
1559 12(CODE) method removeAllListeners(eventName)
1560 12(CODE) method onScroll()
1561 12(CODE) method getWidth()
1562 12(CODE) method setHeight(height)
1563 12(CODE) method setInnerHeight(height)
1564 12(CODE) method setScrollTop(scrollTop)
1565 (BLANK)
1566 4(CODE) end namespace ace
1567 (BLANK)
1568 (BLANK)
>>>ADVANCE 2:0 [-1] ' '(NEWLINE)
      Module matched OK: NEWLINE  
>>>ADVANCE 2:5 [0] 'public'(IDENTIFIER)
optFreeFormList [Module] parentname:Project Root parentIndent:undefined, blockIndent:4, get SeparatedList of [Statement] by ';' closer: EOF
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

2 4(CODE) public namespace ace
    'public'(IDENTIFIER) 'namespace'(IDENTIFIER) 'ace'(IDENTIFIER)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 2:12 [1] 'namespace'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'namespace'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/ace.interface.md:2:6. Adjective: found 'namespace'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 2:12 [1] 'namespace'(IDENTIFIER)
        Statement TRY NamespaceDeclaration on 'namespace'(IDENTIFIER)
          NamespaceDeclaration matched OK: namespace namespace
>>>ADVANCE 2:22 [2] 'ace'(IDENTIFIER)
          NamespaceDeclaration TRY VariableRef on 'ace'(IDENTIFIER)
            VariableRef matched OK: IDENTIFIER ace
>>>ADVANCE 4:0 [-1] ' '(NEWLINE)
          Parsed OK!-> VariableRef
          NamespaceDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 4:9 [0] 'properties'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

4 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 6:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 6:13 [0] 'config'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'config'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER config
>>>ADVANCE 6:19 [1] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 7:0 [-1] ' '(NEWLINE)
                  VariableDecl TRY FreeObjectLiteral on ' '(NEWLINE)
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 7:17 [0] 'get'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:config parentIndent:12, blockIndent:16, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'get'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER get
>>>ADVANCE 7:20 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 7:21 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 7:29 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 7:30 [4] 'key'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'key'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER key
>>>ADVANCE 7:33 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 8:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 8:17 [0] 'set'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 8:20 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 8:21 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 8:29 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 8:30 [4] 'key'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'key'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER key
>>>ADVANCE 8:33 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 8:35 [6] 'value'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'value'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 8:40 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 9:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 9:17 [0] 'all'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'all'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER all
>>>ADVANCE 9:20 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 9:21 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 9:29 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 9:30 [4] ')'(LITERAL)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair matched OK: ) )
>>>ADVANCE 10:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 10:17 [0] '_dispatchEvent'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on '_dispatchEvent'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER _dispatchEvent
>>>ADVANCE 10:31 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 10:32 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 10:40 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 10:41 [4] 'eventName'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 10:50 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 10:52 [6] 'e'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 10:53 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 11:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 11:17 [0] '_emit'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on '_emit'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER _emit
>>>ADVANCE 11:22 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 11:23 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 11:31 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 11:32 [4] 'eventName'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 11:41 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 11:43 [6] 'e'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 11:44 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 12:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 12:17 [0] '_signal'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on '_signal'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER _signal
>>>ADVANCE 12:24 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 12:25 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 12:33 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 12:34 [4] 'eventName'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 12:43 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 12:45 [6] 'e'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 12:46 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 13:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 13:17 [0] 'once'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'once'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER once
>>>ADVANCE 13:21 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 13:22 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 13:30 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 13:31 [4] 'eventName'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 13:40 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 13:42 [6] 'callback'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 13:50 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 14:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 14:17 [0] 'setDefaultHandler'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'setDefaultHandler'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER setDefaultHandler
>>>ADVANCE 14:34 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 14:35 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 14:43 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 14:44 [4] 'eventName'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 14:53 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 14:55 [6] 'callback'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 14:63 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 15:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 15:17 [0] 'removeDefaultHandler'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'removeDefaultHandler'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER removeDefaultHandler
>>>ADVANCE 15:37 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 15:38 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 15:46 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 15:47 [4] 'eventName'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 15:56 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 15:58 [6] 'callback'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 15:66 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 16:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 16:17 [0] 'addEventListener'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'addEventListener'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER addEventListener
>>>ADVANCE 16:33 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 16:34 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 16:42 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 16:43 [4] 'eventName'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 16:52 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 16:54 [6] 'callback'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 16:62 [7] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 16:64 [8] 'capturing'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 16:73 [9] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 17:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 17:17 [0] 'on'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'on'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER on
>>>ADVANCE 17:19 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 17:20 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 17:28 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 17:29 [4] 'eventName'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 17:38 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 17:40 [6] 'callback'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 17:48 [7] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 17:50 [8] 'capturing'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 17:59 [9] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 18:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 18:17 [0] 'removeEventListener'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'removeEventListener'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER removeEventListener
>>>ADVANCE 18:36 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 18:37 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 18:45 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 18:46 [4] 'eventName'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 18:55 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 18:57 [6] 'callback'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 18:65 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 19:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 19:17 [0] 'removeListener'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'removeListener'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER removeListener
>>>ADVANCE 19:31 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 19:32 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 19:40 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 19:41 [4] 'eventName'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 19:50 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 19:52 [6] 'callback'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 19:60 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 20:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 20:17 [0] 'off'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'off'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER off
>>>ADVANCE 20:20 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 20:21 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 20:29 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 20:30 [4] 'eventName'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 20:39 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 20:41 [6] 'callback'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 20:49 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 21:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 21:17 [0] 'removeAllListeners'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'removeAllListeners'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER removeAllListeners
>>>ADVANCE 21:35 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 21:36 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 21:44 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 21:45 [4] 'eventName'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 21:54 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 22:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 22:17 [0] 'moduleUrl'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'moduleUrl'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER moduleUrl
>>>ADVANCE 22:26 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 22:27 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 22:35 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 22:36 [4] 'name'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 22:40 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 22:42 [6] 'component'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'component'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER component
>>>ADVANCE 22:51 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 23:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 23:17 [0] 'setModuleUrl'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'setModuleUrl'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER setModuleUrl
>>>ADVANCE 23:29 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 23:30 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 23:38 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 23:39 [4] 'name'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 23:43 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 23:45 [6] 'subst'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'subst'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER subst
>>>ADVANCE 23:50 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 26:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 26:17 [0] 'loadModule'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'loadModule'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER loadModule
>>>ADVANCE 26:27 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 26:28 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 26:36 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 26:37 [4] 'moduleName'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'moduleName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER moduleName
>>>ADVANCE 26:47 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 26:49 [6] 'onLoad'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'onLoad'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER onLoad
>>>ADVANCE 26:55 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 27:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 27:17 [0] 'init'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'init'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER init
>>>ADVANCE 27:21 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 27:22 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 27:30 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 27:31 [4] ')'(LITERAL)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair matched OK: ) )
>>>ADVANCE 28:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 28:17 [0] 'defineOptions'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'defineOptions'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER defineOptions
>>>ADVANCE 28:30 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 28:31 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 28:39 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 28:40 [4] 'obj'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'obj'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER obj
>>>ADVANCE 28:43 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 28:45 [6] 'path'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'path'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER path
>>>ADVANCE 28:49 [7] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 28:51 [8] 'options'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 28:58 [9] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 29:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 29:17 [0] 'resetOptions'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'resetOptions'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER resetOptions
>>>ADVANCE 29:29 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 29:30 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 29:38 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 29:39 [4] 'obj'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'obj'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER obj
>>>ADVANCE 29:42 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 30:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 30:17 [0] 'setDefaultValue'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'setDefaultValue'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER setDefaultValue
>>>ADVANCE 30:32 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 30:33 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 30:41 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 30:42 [4] 'path'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'path'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER path
>>>ADVANCE 30:46 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 30:48 [6] 'name'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 30:52 [7] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 30:54 [8] 'value'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'value'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 30:59 [9] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 31:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 31:17 [0] 'setDefaultValues'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on 'setDefaultValues'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER setDefaultValues
>>>ADVANCE 31:33 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 31:34 [2] 'function'(IDENTIFIER)
                      NameValuePair matched OK: function function
>>>ADVANCE 31:42 [3] '('(LITERAL)
                      NameValuePair matched OK: ( (
>>>ADVANCE 31:43 [4] 'path'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:16, get SeparatedList of [VariableDecl] by ',' closer: )
                      NameValuePair TRY VariableDecl on 'path'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER path
>>>ADVANCE 31:47 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: , ,
>>>ADVANCE 31:49 [6] 'optionHash'(IDENTIFIER)
                      NameValuePair TRY VariableDecl on 'optionHash'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER optionHash
>>>ADVANCE 31:59 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      NameValuePair matched OK: ) )
>>>ADVANCE 32:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 32:17 [0] '_eventRegistry'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on '_eventRegistry'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER _eventRegistry
>>>ADVANCE 32:31 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 32:32 [2] 'object'(IDENTIFIER)
                      NameValuePair TRY VariableRef on 'object'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 33:0 [-1] ' '(NEWLINE)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 33:17 [0] '_defaultHandlers'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                    FreeObjectLiteral TRY NameValuePair on '_defaultHandlers'(IDENTIFIER)
                      NameValuePair matched OK: IDENTIFIER _defaultHandlers
>>>ADVANCE 33:33 [1] ':'(OPER)
                      NameValuePair matched OK: : :
>>>ADVANCE 33:34 [2] 'object'(IDENTIFIER)
                      NameValuePair TRY VariableRef on 'object'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 34:0 [-1] ' '(NEWLINE)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> NameValuePair
                    FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 34:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:16 parentIndent:12
END freeFormMode [FreeObjectLiteral] blockIndent:16, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                  Parsed OK!-> FreeObjectLiteral
                Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

34 8(CODE) method define(amodule, deps, payload)
    'method'(IDENTIFIER) 'define'(IDENTIFIER) '('(LITERAL) 'amodule'(IDENTIFIER) ','(LITERAL) 'deps'(IDENTIFIER) ','(LITERAL) 'payload'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 34:16 [1] 'define'(IDENTIFIER)
>>>ADVANCE 34:22 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 34:23 [3] 'amodule'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'amodule'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER amodule
>>>ADVANCE 34:30 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 34:32 [5] 'deps'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'deps'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER deps
>>>ADVANCE 34:36 [6] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 34:38 [7] 'payload'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'payload'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER payload
>>>ADVANCE 34:45 [8] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 35:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 35:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

35 8(CODE) method require(amodule, callback)
    'method'(IDENTIFIER) 'require'(IDENTIFIER) '('(LITERAL) 'amodule'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 35:16 [1] 'require'(IDENTIFIER)
>>>ADVANCE 35:23 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 35:24 [3] 'amodule'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'amodule'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER amodule
>>>ADVANCE 35:31 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 35:33 [5] 'callback'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 35:41 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 36:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 36:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

36 8(CODE) method edit(el)
    'method'(IDENTIFIER) 'edit'(IDENTIFIER) '('(LITERAL) 'el'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 36:16 [1] 'edit'(IDENTIFIER)
>>>ADVANCE 36:20 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 36:21 [3] 'el'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'el'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER el
>>>ADVANCE 36:23 [4] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 37:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 37:9 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'method'(IDENTIFIER)

37 8(CODE) method createEditSession(text, mode)
    'method'(IDENTIFIER) 'createEditSession'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ','(LITERAL) 'mode'(IDENTIFIER) ')'(LITERAL)

              Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                MethodDeclaration matched OK: method method
>>>ADVANCE 37:16 [1] 'createEditSession'(IDENTIFIER)
>>>ADVANCE 37:33 [2] '('(LITERAL)
                MethodDeclaration matched OK: ( (
>>>ADVANCE 37:34 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:8, get SeparatedList of [VariableDecl] by ',' closer: )
                MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 37:38 [4] ','(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: , ,
>>>ADVANCE 37:40 [5] 'mode'(IDENTIFIER)
                MethodDeclaration TRY VariableDecl on 'mode'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER mode
>>>ADVANCE 37:44 [6] ')'(LITERAL)
                Parsed OK!-> VariableDecl
                MethodDeclaration matched OK: ) )
>>>ADVANCE 39:0 [-1] ' '(NEWLINE)
                MethodDeclaration TRY Body on ' '(NEWLINE)
                Parsed OK!-> Body
              Parsed OK!-> MethodDeclaration
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 39:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

39 8(CODE) class Fold
    'class'(IDENTIFIER) 'Fold'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 39:15 [1] 'Fold'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Fold
>>>ADVANCE 40:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 40:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Fold parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

40 12(CODE) constructor new Fold (range, placeholder)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Fold'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'placeholder'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 40:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 40:29 [2] 'Fold'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Fold
>>>ADVANCE 40:34 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 40:35 [4] 'range'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 40:40 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 40:42 [6] 'placeholder'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'placeholder'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER placeholder
>>>ADVANCE 40:53 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 42:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 42:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

42 12(CODE) method toString()
    'method'(IDENTIFIER) 'toString'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 42:20 [1] 'toString'(IDENTIFIER)
>>>ADVANCE 42:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 42:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 43:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 43:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

43 12(CODE) method setFoldLine(foldLine)
    'method'(IDENTIFIER) 'setFoldLine'(IDENTIFIER) '('(LITERAL) 'foldLine'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 43:20 [1] 'setFoldLine'(IDENTIFIER)
>>>ADVANCE 43:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 43:32 [3] 'foldLine'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'foldLine'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER foldLine
>>>ADVANCE 43:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 44:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 44:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

44 12(CODE) method clone()
    'method'(IDENTIFIER) 'clone'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 44:20 [1] 'clone'(IDENTIFIER)
>>>ADVANCE 44:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 44:26 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 45:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 45:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

45 12(CODE) method addSubFold(fold)
    'method'(IDENTIFIER) 'addSubFold'(IDENTIFIER) '('(LITERAL) 'fold'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 45:20 [1] 'addSubFold'(IDENTIFIER)
>>>ADVANCE 45:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 45:31 [3] 'fold'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'fold'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER fold
>>>ADVANCE 45:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 46:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 46:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

46 12(CODE) method restoreRange(range)
    'method'(IDENTIFIER) 'restoreRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 46:20 [1] 'restoreRange'(IDENTIFIER)
>>>ADVANCE 46:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 46:33 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 46:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 49:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 49:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

49 8(CODE) class TokenIterator
    'class'(IDENTIFIER) 'TokenIterator'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 49:15 [1] 'TokenIterator'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER TokenIterator
>>>ADVANCE 50:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 50:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:TokenIterator parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

50 12(CODE) constructor new TokenIterator (session, initialRow, initialColumn)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'TokenIterator'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ','(LITERAL) 'initialRow'(IDENTIFIER) ','(LITERAL) 'initialColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 50:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 50:29 [2] 'TokenIterator'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER TokenIterator
>>>ADVANCE 50:43 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 50:44 [4] 'session'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 50:51 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 50:53 [6] 'initialRow'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'initialRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER initialRow
>>>ADVANCE 50:63 [7] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 50:65 [8] 'initialColumn'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'initialColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER initialColumn
>>>ADVANCE 50:78 [9] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 52:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 52:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

52 12(CODE) method stepBackward()
    'method'(IDENTIFIER) 'stepBackward'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 52:20 [1] 'stepBackward'(IDENTIFIER)
>>>ADVANCE 52:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 52:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 53:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 53:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

53 12(CODE) method stepForward()
    'method'(IDENTIFIER) 'stepForward'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 53:20 [1] 'stepForward'(IDENTIFIER)
>>>ADVANCE 53:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 53:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 54:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 54:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

54 12(CODE) method getCurrentToken()
    'method'(IDENTIFIER) 'getCurrentToken'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 54:20 [1] 'getCurrentToken'(IDENTIFIER)
>>>ADVANCE 54:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 54:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 55:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 55:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

55 12(CODE) method getCurrentTokenRow()
    'method'(IDENTIFIER) 'getCurrentTokenRow'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 55:20 [1] 'getCurrentTokenRow'(IDENTIFIER)
>>>ADVANCE 55:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 55:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 56:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 56:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

56 12(CODE) method getCurrentTokenColumn()
    'method'(IDENTIFIER) 'getCurrentTokenColumn'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 56:20 [1] 'getCurrentTokenColumn'(IDENTIFIER)
>>>ADVANCE 56:41 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 56:42 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 59:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 59:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

59 8(CODE) class EditSession
    'class'(IDENTIFIER) 'EditSession'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 59:15 [1] 'EditSession'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER EditSession
>>>ADVANCE 60:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 60:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:EditSession parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

60 12(CODE) constructor new EditSession (text, mode)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'EditSession'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ','(LITERAL) 'mode'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 60:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 60:29 [2] 'EditSession'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER EditSession
>>>ADVANCE 60:41 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 60:42 [4] 'text'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 60:46 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 60:48 [6] 'mode'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'mode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER mode
>>>ADVANCE 60:52 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 62:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 62:13 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'properties'(IDENTIFIER)

62 12(CODE) properties
    'properties'(IDENTIFIER)

                    Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                      PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 64:0 [-1] ' '(NEWLINE)
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 64:17 [0] 'doc'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'doc'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER doc
>>>ADVANCE 64:20 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 64:22 [2] 'Document'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'Document'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER Document
>>>ADVANCE 66:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 66:17 [0] '$mode'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$mode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $mode
>>>ADVANCE 66:22 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 66:23 [2] 'object'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 67:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 67:17 [0] '$foldStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$foldStyle'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $foldStyle
>>>ADVANCE 67:27 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 67:28 [2] 'string'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 69:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 69:17 [0] '$wrapLimitRange'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$wrapLimitRange'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $wrapLimitRange
>>>ADVANCE 69:32 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 70:0 [-1] ' '(NEWLINE)
                        VariableDecl TRY FreeObjectLiteral on ' '(NEWLINE)
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 70:21 [0] 'min'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:$wrapLimitRange parentIndent:16, blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'min'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER min
>>>ADVANCE 70:24 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 70:25 [2] 'object'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'object'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 71:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 71:21 [0] 'max'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'max'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER max
>>>ADVANCE 71:24 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 71:25 [2] 'object'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'object'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 73:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 73:17 [0] '$useWorker'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:20 parentIndent:16
END freeFormMode [FreeObjectLiteral] blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                        Parsed OK!-> FreeObjectLiteral
                      Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$useWorker'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $useWorker
>>>ADVANCE 73:27 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 73:28 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 74:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 74:17 [0] '$useSoftTabs'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$useSoftTabs'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $useSoftTabs
>>>ADVANCE 74:29 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 74:30 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 75:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 75:17 [0] '$scrollTop'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$scrollTop'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $scrollTop
>>>ADVANCE 75:27 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 75:28 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 77:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 77:17 [0] '$options'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $options
>>>ADVANCE 77:25 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 78:0 [-1] ' '(NEWLINE)
                        VariableDecl TRY FreeObjectLiteral on ' '(NEWLINE)
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 78:21 [0] 'wrap'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:$options parentIndent:16, blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'wrap'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER wrap
>>>ADVANCE 78:25 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 79:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 79:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:wrap parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 79:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 79:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 79:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 79:38 [4] 'value'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'value'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 79:43 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 80:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 80:25 [0] 'get'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'get'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER get
>>>ADVANCE 80:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 80:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 80:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 80:38 [4] ')'(LITERAL)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair matched OK: ) )
>>>ADVANCE 81:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 81:25 [0] 'handlesSet'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'handlesSet'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER handlesSet
>>>ADVANCE 81:35 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 81:36 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 82:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 82:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 82:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 82:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 85:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 85:21 [0] 'firstLineNumber'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'firstLineNumber'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER firstLineNumber
>>>ADVANCE 85:36 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 86:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 86:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:firstLineNumber parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 86:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 86:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 86:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 86:38 [4] ')'(LITERAL)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair matched OK: ) )
>>>ADVANCE 87:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 87:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 87:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 87:38 [2] 'number'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 88:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 88:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 88:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 88:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 91:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 91:21 [0] 'useWorker'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'useWorker'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER useWorker
>>>ADVANCE 91:30 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 92:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 92:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:useWorker parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 92:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 92:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 92:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 92:38 [4] 'useWorker'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'useWorker'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER useWorker
>>>ADVANCE 92:47 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 93:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 93:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 93:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 93:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 94:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 94:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 94:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 94:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 97:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 97:21 [0] 'useSoftTabs'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'useSoftTabs'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER useSoftTabs
>>>ADVANCE 97:32 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 98:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 98:25 [0] 'initialValue'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:useSoftTabs parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 98:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 98:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 99:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 99:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 99:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 99:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 102:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 102:21 [0] 'tabSize'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'tabSize'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER tabSize
>>>ADVANCE 102:28 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 103:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 103:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:tabSize parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 103:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 103:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 103:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 103:38 [4] 'tabSize'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'tabSize'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER tabSize
>>>ADVANCE 103:45 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 104:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 104:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 104:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 104:38 [2] 'number'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 105:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 105:25 [0] 'handlesSet'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'handlesSet'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER handlesSet
>>>ADVANCE 105:35 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 105:36 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 106:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 106:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 106:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 106:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 109:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 109:21 [0] 'overwrite'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'overwrite'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER overwrite
>>>ADVANCE 109:30 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 110:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 110:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:overwrite parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 110:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 110:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 110:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 110:38 [4] 'val'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'val'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER val
>>>ADVANCE 110:41 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 111:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 111:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 111:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 111:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 112:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 112:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 112:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 112:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 115:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 115:21 [0] 'newLineMode'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'newLineMode'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER newLineMode
>>>ADVANCE 115:32 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 116:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 116:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:newLineMode parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 116:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 116:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 116:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 116:38 [4] 'val'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'val'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER val
>>>ADVANCE 116:41 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 117:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 117:25 [0] 'get'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'get'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER get
>>>ADVANCE 117:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 117:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 117:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 117:38 [4] ')'(LITERAL)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair matched OK: ) )
>>>ADVANCE 118:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 118:25 [0] 'handlesSet'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'handlesSet'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER handlesSet
>>>ADVANCE 118:35 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 118:36 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 119:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 119:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 119:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 119:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 121:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 121:17 [0] '$scrollLeft'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:16 block indent:20 parentIndent:16
END freeFormMode [FreeObjectLiteral] blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                        Parsed OK!-> FreeObjectLiteral
                      Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$scrollLeft'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $scrollLeft
>>>ADVANCE 121:28 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 121:29 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 123:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 123:17 [0] '$defaultUndoManager'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$defaultUndoManager'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $defaultUndoManager
>>>ADVANCE 123:36 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 124:0 [-1] ' '(NEWLINE)
                        VariableDecl TRY FreeObjectLiteral on ' '(NEWLINE)
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 124:21 [0] 'undo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:$defaultUndoManager parentIndent:16, blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'undo'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER undo
>>>ADVANCE 124:25 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 124:26 [2] 'function'(IDENTIFIER)
                            NameValuePair matched OK: function function
>>>ADVANCE 124:34 [3] '('(LITERAL)
                            NameValuePair matched OK: ( (
>>>ADVANCE 124:35 [4] ')'(LITERAL)
optSeparatedList [NameValuePair] indent:20, get SeparatedList of [VariableDecl] by ',' closer: )
                            NameValuePair matched OK: ) )
>>>ADVANCE 125:0 [-1] ' '(NEWLINE)
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 125:21 [0] 'redo'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'redo'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER redo
>>>ADVANCE 125:25 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 125:26 [2] 'function'(IDENTIFIER)
                            NameValuePair matched OK: function function
>>>ADVANCE 125:34 [3] '('(LITERAL)
                            NameValuePair matched OK: ( (
>>>ADVANCE 125:35 [4] ')'(LITERAL)
optSeparatedList [NameValuePair] indent:20, get SeparatedList of [VariableDecl] by ',' closer: )
                            NameValuePair matched OK: ) )
>>>ADVANCE 126:0 [-1] ' '(NEWLINE)
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 126:21 [0] 'reset'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'reset'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER reset
>>>ADVANCE 126:26 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 126:27 [2] 'function'(IDENTIFIER)
                            NameValuePair matched OK: function function
>>>ADVANCE 126:35 [3] '('(LITERAL)
                            NameValuePair matched OK: ( (
>>>ADVANCE 126:36 [4] ')'(LITERAL)
optSeparatedList [NameValuePair] indent:20, get SeparatedList of [VariableDecl] by ',' closer: )
                            NameValuePair matched OK: ) )
>>>ADVANCE 128:0 [-1] ' '(NEWLINE)
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 128:17 [0] '$modeId'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:20 parentIndent:16
END freeFormMode [FreeObjectLiteral] blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                        Parsed OK!-> FreeObjectLiteral
                      Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$modeId'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $modeId
>>>ADVANCE 128:24 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 128:25 [2] 'object'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 129:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 129:17 [0] '$tabSize'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$tabSize'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $tabSize
>>>ADVANCE 129:25 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 129:26 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 130:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 130:17 [0] '$firstLineNumber'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$firstLineNumber'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $firstLineNumber
>>>ADVANCE 130:33 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 130:34 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 131:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 131:17 [0] '$wrapLimit'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$wrapLimit'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $wrapLimit
>>>ADVANCE 131:27 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 131:28 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 133:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 133:17 [0] '$foldStyles'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$foldStyles'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $foldStyles
>>>ADVANCE 133:28 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 134:0 [-1] ' '(NEWLINE)
                        VariableDecl TRY FreeObjectLiteral on ' '(NEWLINE)
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 134:21 [0] 'manual'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:$foldStyles parentIndent:16, blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'manual'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER manual
>>>ADVANCE 134:27 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 134:28 [2] 'number'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 135:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 135:21 [0] 'markbegin'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'markbegin'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER markbegin
>>>ADVANCE 135:30 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 135:31 [2] 'number'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 136:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 136:21 [0] 'markbeginend'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'markbeginend'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER markbeginend
>>>ADVANCE 136:33 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 136:34 [2] 'number'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 138:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 138:17 [0] '$overwrite'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:20 parentIndent:16
END freeFormMode [FreeObjectLiteral] blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                        Parsed OK!-> FreeObjectLiteral
                      Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$overwrite'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $overwrite
>>>ADVANCE 138:27 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 138:28 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 139:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 139:17 [0] '$useWrapMode'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$useWrapMode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $useWrapMode
>>>ADVANCE 139:29 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 139:30 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 140:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 140:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [PropertiesDeclaration] blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                    Parsed OK!-> PropertiesDeclaration
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

140 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 140:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 140:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 140:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 140:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 140:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 140:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 141:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 141:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

141 12(CODE) method getDocumentLastRowColumn(docRow, docColumn)
    'method'(IDENTIFIER) 'getDocumentLastRowColumn'(IDENTIFIER) '('(LITERAL) 'docRow'(IDENTIFIER) ','(LITERAL) 'docColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 141:20 [1] 'getDocumentLastRowColumn'(IDENTIFIER)
>>>ADVANCE 141:44 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 141:45 [3] 'docRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'docRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docRow
>>>ADVANCE 141:51 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 141:53 [5] 'docColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'docColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docColumn
>>>ADVANCE 141:62 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 142:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 142:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

142 12(CODE) method clearAnnotations()
    'method'(IDENTIFIER) 'clearAnnotations'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 142:20 [1] 'clearAnnotations'(IDENTIFIER)
>>>ADVANCE 142:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 142:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 143:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 143:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

143 12(CODE) method setTabSize(tabSize)
    'method'(IDENTIFIER) 'setTabSize'(IDENTIFIER) '('(LITERAL) 'tabSize'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 143:20 [1] 'setTabSize'(IDENTIFIER)
>>>ADVANCE 143:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 143:31 [3] 'tabSize'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'tabSize'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER tabSize
>>>ADVANCE 143:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 144:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 144:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

144 12(CODE) method $findClosingBracket(bracket, position, typeRe)
    'method'(IDENTIFIER) '$findClosingBracket'(IDENTIFIER) '('(LITERAL) 'bracket'(IDENTIFIER) ','(LITERAL) 'position'(IDENTIFIER) ','(LITERAL) 'typeRe'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 144:20 [1] '$findClosingBracket'(IDENTIFIER)
>>>ADVANCE 144:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 144:40 [3] 'bracket'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'bracket'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER bracket
>>>ADVANCE 144:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 144:49 [5] 'position'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'position'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER position
>>>ADVANCE 144:57 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 144:59 [7] 'typeRe'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'typeRe'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER typeRe
>>>ADVANCE 144:65 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 145:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 145:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

145 12(CODE) method getRowSplitData(row)
    'method'(IDENTIFIER) 'getRowSplitData'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 145:20 [1] 'getRowSplitData'(IDENTIFIER)
>>>ADVANCE 145:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 145:36 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 145:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 146:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 146:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

146 12(CODE) method getRowLength(row)
    'method'(IDENTIFIER) 'getRowLength'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 146:20 [1] 'getRowLength'(IDENTIFIER)
>>>ADVANCE 146:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 146:33 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 146:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 147:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 147:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

147 12(CODE) method foldAll(startRow, endRow, depth)
    'method'(IDENTIFIER) 'foldAll'(IDENTIFIER) '('(LITERAL) 'startRow'(IDENTIFIER) ','(LITERAL) 'endRow'(IDENTIFIER) ','(LITERAL) 'depth'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 147:20 [1] 'foldAll'(IDENTIFIER)
>>>ADVANCE 147:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 147:28 [3] 'startRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'startRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startRow
>>>ADVANCE 147:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 147:38 [5] 'endRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'endRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER endRow
>>>ADVANCE 147:44 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 147:46 [7] 'depth'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'depth'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER depth
>>>ADVANCE 147:51 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 148:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 148:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

148 12(CODE) method getScreenWidth()
    'method'(IDENTIFIER) 'getScreenWidth'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 148:20 [1] 'getScreenWidth'(IDENTIFIER)
>>>ADVANCE 148:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 148:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 149:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 149:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

149 12(CODE) method setWrapLimitRange(min, max)
    'method'(IDENTIFIER) 'setWrapLimitRange'(IDENTIFIER) '('(LITERAL) 'min'(IDENTIFIER) ','(LITERAL) 'max'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 149:20 [1] 'setWrapLimitRange'(IDENTIFIER)
>>>ADVANCE 149:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 149:38 [3] 'min'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'min'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER min
>>>ADVANCE 149:41 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 149:43 [5] 'max'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'max'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER max
>>>ADVANCE 149:46 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 150:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 150:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

150 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 150:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 150:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 150:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 150:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 150:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 150:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 151:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 151:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

151 12(CODE) method $cloneFoldData()
    'method'(IDENTIFIER) '$cloneFoldData'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 151:20 [1] '$cloneFoldData'(IDENTIFIER)
>>>ADVANCE 151:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 151:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 152:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 152:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

152 12(CODE) method getWordRange(row, column)
    'method'(IDENTIFIER) 'getWordRange'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 152:20 [1] 'getWordRange'(IDENTIFIER)
>>>ADVANCE 152:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 152:33 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 152:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 152:38 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 152:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 153:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 153:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

153 12(CODE) method $getDisplayTokens(str, offset)
    'method'(IDENTIFIER) '$getDisplayTokens'(IDENTIFIER) '('(LITERAL) 'str'(IDENTIFIER) ','(LITERAL) 'offset'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 153:20 [1] '$getDisplayTokens'(IDENTIFIER)
>>>ADVANCE 153:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 153:38 [3] 'str'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'str'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER str
>>>ADVANCE 153:41 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 153:43 [5] 'offset'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'offset'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER offset
>>>ADVANCE 153:49 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 154:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 154:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

154 12(CODE) method unfold(location, expandInner)
    'method'(IDENTIFIER) 'unfold'(IDENTIFIER) '('(LITERAL) 'location'(IDENTIFIER) ','(LITERAL) 'expandInner'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 154:20 [1] 'unfold'(IDENTIFIER)
>>>ADVANCE 154:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 154:27 [3] 'location'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'location'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER location
>>>ADVANCE 154:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 154:37 [5] 'expandInner'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'expandInner'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER expandInner
>>>ADVANCE 154:48 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 155:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 155:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

155 12(CODE) method getTokenAt(row, column)
    'method'(IDENTIFIER) 'getTokenAt'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 155:20 [1] 'getTokenAt'(IDENTIFIER)
>>>ADVANCE 155:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 155:31 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 155:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 155:36 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 155:42 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 156:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 156:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

156 12(CODE) method $getStringScreenWidth(str, maxScreenColumn, screenColumn)
    'method'(IDENTIFIER) '$getStringScreenWidth'(IDENTIFIER) '('(LITERAL) 'str'(IDENTIFIER) ','(LITERAL) 'maxScreenColumn'(IDENTIFIER) ','(LITERAL) 'screenColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 156:20 [1] '$getStringScreenWidth'(IDENTIFIER)
>>>ADVANCE 156:41 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 156:42 [3] 'str'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'str'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER str
>>>ADVANCE 156:45 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 156:47 [5] 'maxScreenColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'maxScreenColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER maxScreenColumn
>>>ADVANCE 156:62 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 156:64 [7] 'screenColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'screenColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER screenColumn
>>>ADVANCE 156:76 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 157:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 157:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

157 12(CODE) method getScrollTop()
    'method'(IDENTIFIER) 'getScrollTop'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 157:20 [1] 'getScrollTop'(IDENTIFIER)
>>>ADVANCE 157:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 157:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 158:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 158:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

158 12(CODE) method getDocumentLastRowColumnPosition(docRow, docColumn)
    'method'(IDENTIFIER) 'getDocumentLastRowColumnPosition'(IDENTIFIER) '('(LITERAL) 'docRow'(IDENTIFIER) ','(LITERAL) 'docColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 158:20 [1] 'getDocumentLastRowColumnPosition'(IDENTIFIER)
>>>ADVANCE 158:52 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 158:53 [3] 'docRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'docRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docRow
>>>ADVANCE 158:59 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 158:61 [5] 'docColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'docColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docColumn
>>>ADVANCE 158:70 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 159:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 159:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

159 12(CODE) method $constrainWrapLimit(wrapLimit, min, max)
    'method'(IDENTIFIER) '$constrainWrapLimit'(IDENTIFIER) '('(LITERAL) 'wrapLimit'(IDENTIFIER) ','(LITERAL) 'min'(IDENTIFIER) ','(LITERAL) 'max'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 159:20 [1] '$constrainWrapLimit'(IDENTIFIER)
>>>ADVANCE 159:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 159:40 [3] 'wrapLimit'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'wrapLimit'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER wrapLimit
>>>ADVANCE 159:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 159:51 [5] 'min'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'min'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER min
>>>ADVANCE 159:54 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 159:56 [7] 'max'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'max'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER max
>>>ADVANCE 159:59 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 160:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 160:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

160 12(CODE) method toggleOverwrite()
    'method'(IDENTIFIER) 'toggleOverwrite'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 160:20 [1] 'toggleOverwrite'(IDENTIFIER)
>>>ADVANCE 160:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 160:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 161:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 161:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

161 12(CODE) method getFoldsInRange(range)
    'method'(IDENTIFIER) 'getFoldsInRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 161:20 [1] 'getFoldsInRange'(IDENTIFIER)
>>>ADVANCE 161:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 161:36 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 161:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 162:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 162:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

162 12(CODE) method getTabString()
    'method'(IDENTIFIER) 'getTabString'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 162:20 [1] 'getTabString'(IDENTIFIER)
>>>ADVANCE 162:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 162:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 163:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 163:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

163 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 163:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 163:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 163:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 163:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 163:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 163:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 164:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 164:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

164 12(CODE) method adjustWrapLimit(desiredLimit, $printMargin)
    'method'(IDENTIFIER) 'adjustWrapLimit'(IDENTIFIER) '('(LITERAL) 'desiredLimit'(IDENTIFIER) ','(LITERAL) '$printMargin'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 164:20 [1] 'adjustWrapLimit'(IDENTIFIER)
>>>ADVANCE 164:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 164:36 [3] 'desiredLimit'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'desiredLimit'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER desiredLimit
>>>ADVANCE 164:48 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 164:50 [5] '$printMargin'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on '$printMargin'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $printMargin
>>>ADVANCE 164:62 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 165:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 165:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

165 12(CODE) method setNewLineMode(newLineMode)
    'method'(IDENTIFIER) 'setNewLineMode'(IDENTIFIER) '('(LITERAL) 'newLineMode'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 165:20 [1] 'setNewLineMode'(IDENTIFIER)
>>>ADVANCE 165:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 165:35 [3] 'newLineMode'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'newLineMode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER newLineMode
>>>ADVANCE 165:46 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 166:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 166:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

166 12(CODE) method getUndoManager()
    'method'(IDENTIFIER) 'getUndoManager'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 166:20 [1] 'getUndoManager'(IDENTIFIER)
>>>ADVANCE 166:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 166:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 167:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 167:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

167 12(CODE) method moveLinesDown(firstRow, lastRow)
    'method'(IDENTIFIER) 'moveLinesDown'(IDENTIFIER) '('(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 167:20 [1] 'moveLinesDown'(IDENTIFIER)
>>>ADVANCE 167:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 167:34 [3] 'firstRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 167:42 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 167:44 [5] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 167:51 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 168:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 168:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

168 12(CODE) method getTabSize()
    'method'(IDENTIFIER) 'getTabSize'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 168:20 [1] 'getTabSize'(IDENTIFIER)
>>>ADVANCE 168:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 168:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 169:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 169:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

169 12(CODE) method $computeWidth(force)
    'method'(IDENTIFIER) '$computeWidth'(IDENTIFIER) '('(LITERAL) 'force'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 169:20 [1] '$computeWidth'(IDENTIFIER)
>>>ADVANCE 169:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 169:34 [3] 'force'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'force'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER force
>>>ADVANCE 169:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 170:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 170:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

170 12(CODE) method setOptions(optList)
    'method'(IDENTIFIER) 'setOptions'(IDENTIFIER) '('(LITERAL) 'optList'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 170:20 [1] 'setOptions'(IDENTIFIER)
>>>ADVANCE 170:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 170:31 [3] 'optList'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'optList'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER optList
>>>ADVANCE 170:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 171:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 171:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

171 12(CODE) method setAnnotations(annotations)
    'method'(IDENTIFIER) 'setAnnotations'(IDENTIFIER) '('(LITERAL) 'annotations'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 171:20 [1] 'setAnnotations'(IDENTIFIER)
>>>ADVANCE 171:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 171:35 [3] 'annotations'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'annotations'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER annotations
>>>ADVANCE 171:46 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 172:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 172:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

172 12(CODE) method $updateRowLengthCache(firstRow, lastRow, b)
    'method'(IDENTIFIER) '$updateRowLengthCache'(IDENTIFIER) '('(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ','(LITERAL) 'b'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 172:20 [1] '$updateRowLengthCache'(IDENTIFIER)
>>>ADVANCE 172:41 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 172:42 [3] 'firstRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 172:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 172:52 [5] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 172:59 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 172:61 [7] 'b'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'b'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER b
>>>ADVANCE 172:62 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 173:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 173:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

173 12(CODE) method getAnnotations()
    'method'(IDENTIFIER) 'getAnnotations'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 173:20 [1] 'getAnnotations'(IDENTIFIER)
>>>ADVANCE 173:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 173:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 174:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 174:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

174 12(CODE) method setValue(text)
    'method'(IDENTIFIER) 'setValue'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 174:20 [1] 'setValue'(IDENTIFIER)
>>>ADVANCE 174:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 174:29 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 174:33 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 175:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 175:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

175 12(CODE) method getDisplayLine(row, endColumn, startRow, startColumn)
    'method'(IDENTIFIER) 'getDisplayLine'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'endColumn'(IDENTIFIER) ','(LITERAL) 'startRow'(IDENTIFIER) ','(LITERAL) 'startColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 175:20 [1] 'getDisplayLine'(IDENTIFIER)
>>>ADVANCE 175:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 175:35 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 175:38 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 175:40 [5] 'endColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'endColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER endColumn
>>>ADVANCE 175:49 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 175:51 [7] 'startRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startRow
>>>ADVANCE 175:59 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 175:61 [9] 'startColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startColumn
>>>ADVANCE 175:72 [10] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 176:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 176:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

176 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 176:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 176:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 176:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 176:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 177:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 177:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

177 12(CODE) method expandFolds(folds)
    'method'(IDENTIFIER) 'expandFolds'(IDENTIFIER) '('(LITERAL) 'folds'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 177:20 [1] 'expandFolds'(IDENTIFIER)
>>>ADVANCE 177:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 177:32 [3] 'folds'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'folds'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER folds
>>>ADVANCE 177:37 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 178:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 178:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

178 12(CODE) method getLine(row)
    'method'(IDENTIFIER) 'getLine'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 178:20 [1] 'getLine'(IDENTIFIER)
>>>ADVANCE 178:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 178:28 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 178:31 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 179:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 179:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

179 12(CODE) method getSelection()
    'method'(IDENTIFIER) 'getSelection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 179:20 [1] 'getSelection'(IDENTIFIER)
>>>ADVANCE 179:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 179:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 180:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 180:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

180 12(CODE) method getRowFoldEnd(docRow, startFoldRow)
    'method'(IDENTIFIER) 'getRowFoldEnd'(IDENTIFIER) '('(LITERAL) 'docRow'(IDENTIFIER) ','(LITERAL) 'startFoldRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 180:20 [1] 'getRowFoldEnd'(IDENTIFIER)
>>>ADVANCE 180:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 180:34 [3] 'docRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'docRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docRow
>>>ADVANCE 180:40 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 180:42 [5] 'startFoldRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startFoldRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startFoldRow
>>>ADVANCE 180:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 181:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 181:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

181 12(CODE) method onReloadTokenizer(e)
    'method'(IDENTIFIER) 'onReloadTokenizer'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 181:20 [1] 'onReloadTokenizer'(IDENTIFIER)
>>>ADVANCE 181:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 181:38 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 181:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 182:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 182:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

182 12(CODE) method getOptions(optionNames)
    'method'(IDENTIFIER) 'getOptions'(IDENTIFIER) '('(LITERAL) 'optionNames'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 182:20 [1] 'getOptions'(IDENTIFIER)
>>>ADVANCE 182:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 182:31 [3] 'optionNames'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'optionNames'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER optionNames
>>>ADVANCE 182:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 183:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 183:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

183 12(CODE) method setUseWrapMode(useWrapMode)
    'method'(IDENTIFIER) 'setUseWrapMode'(IDENTIFIER) '('(LITERAL) 'useWrapMode'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 183:20 [1] 'setUseWrapMode'(IDENTIFIER)
>>>ADVANCE 183:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 183:35 [3] 'useWrapMode'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'useWrapMode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER useWrapMode
>>>ADVANCE 183:46 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 184:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 184:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

184 12(CODE) method getValue()
    'method'(IDENTIFIER) 'getValue'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 184:20 [1] 'getValue'(IDENTIFIER)
>>>ADVANCE 184:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 184:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 185:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 185:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

185 12(CODE) method addMarker(range, clazz, type, inFront)
    'method'(IDENTIFIER) 'addMarker'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'clazz'(IDENTIFIER) ','(LITERAL) 'type'(IDENTIFIER) ','(LITERAL) 'inFront'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 185:20 [1] 'addMarker'(IDENTIFIER)
>>>ADVANCE 185:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 185:30 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 185:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 185:37 [5] 'clazz'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'clazz'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER clazz
>>>ADVANCE 185:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 185:44 [7] 'type'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'type'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER type
>>>ADVANCE 185:48 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 185:50 [9] 'inFront'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'inFront'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER inFront
>>>ADVANCE 185:57 [10] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 186:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 186:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

186 12(CODE) method $moveLines(firstRow, lastRow, dir)
    'method'(IDENTIFIER) '$moveLines'(IDENTIFIER) '('(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ','(LITERAL) 'dir'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 186:20 [1] '$moveLines'(IDENTIFIER)
>>>ADVANCE 186:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 186:31 [3] 'firstRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 186:39 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 186:41 [5] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 186:48 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 186:50 [7] 'dir'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'dir'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER dir
>>>ADVANCE 186:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 187:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 187:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

187 12(CODE) method $findOpeningBracket(bracket, position, typeRe)
    'method'(IDENTIFIER) '$findOpeningBracket'(IDENTIFIER) '('(LITERAL) 'bracket'(IDENTIFIER) ','(LITERAL) 'position'(IDENTIFIER) ','(LITERAL) 'typeRe'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 187:20 [1] '$findOpeningBracket'(IDENTIFIER)
>>>ADVANCE 187:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 187:40 [3] 'bracket'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'bracket'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER bracket
>>>ADVANCE 187:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 187:49 [5] 'position'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'position'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER position
>>>ADVANCE 187:57 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 187:59 [7] 'typeRe'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'typeRe'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER typeRe
>>>ADVANCE 187:65 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 188:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 188:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

188 12(CODE) method $clipRangeToDocument(range)
    'method'(IDENTIFIER) '$clipRangeToDocument'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 188:20 [1] '$clipRangeToDocument'(IDENTIFIER)
>>>ADVANCE 188:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 188:41 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 188:46 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 189:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 189:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

189 12(CODE) method outdentRows(range)
    'method'(IDENTIFIER) 'outdentRows'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 189:20 [1] 'outdentRows'(IDENTIFIER)
>>>ADVANCE 189:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 189:32 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 189:37 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 190:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 190:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

190 12(CODE) method getNewLineMode()
    'method'(IDENTIFIER) 'getNewLineMode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 190:20 [1] 'getNewLineMode'(IDENTIFIER)
>>>ADVANCE 190:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 190:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 191:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 191:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

191 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 191:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 191:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 191:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 191:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 191:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 191:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 191:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 191:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 192:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 192:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

192 12(CODE) method getParentFoldRangeData(row, ignoreCurrent)
    'method'(IDENTIFIER) 'getParentFoldRangeData'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'ignoreCurrent'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 192:20 [1] 'getParentFoldRangeData'(IDENTIFIER)
>>>ADVANCE 192:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 192:43 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 192:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 192:48 [5] 'ignoreCurrent'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'ignoreCurrent'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER ignoreCurrent
>>>ADVANCE 192:61 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 193:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 193:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

193 12(CODE) method $setFolding(foldMode)
    'method'(IDENTIFIER) '$setFolding'(IDENTIFIER) '('(LITERAL) 'foldMode'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 193:20 [1] '$setFolding'(IDENTIFIER)
>>>ADVANCE 193:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 193:32 [3] 'foldMode'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'foldMode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER foldMode
>>>ADVANCE 193:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 194:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 194:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

194 12(CODE) method getNextFoldLine(docRow, startFoldLine)
    'method'(IDENTIFIER) 'getNextFoldLine'(IDENTIFIER) '('(LITERAL) 'docRow'(IDENTIFIER) ','(LITERAL) 'startFoldLine'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 194:20 [1] 'getNextFoldLine'(IDENTIFIER)
>>>ADVANCE 194:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 194:36 [3] 'docRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'docRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docRow
>>>ADVANCE 194:42 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 194:44 [5] 'startFoldLine'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startFoldLine'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startFoldLine
>>>ADVANCE 194:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 195:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 195:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

195 12(CODE) method getFoldAt(row, column, side)
    'method'(IDENTIFIER) 'getFoldAt'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ','(LITERAL) 'side'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 195:20 [1] 'getFoldAt'(IDENTIFIER)
>>>ADVANCE 195:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 195:30 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 195:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 195:35 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 195:41 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 195:43 [7] 'side'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'side'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER side
>>>ADVANCE 195:47 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 196:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 196:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

196 12(CODE) method $clipColumnToRow(row, column)
    'method'(IDENTIFIER) '$clipColumnToRow'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 196:20 [1] '$clipColumnToRow'(IDENTIFIER)
>>>ADVANCE 196:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 196:37 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 196:40 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 196:42 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 196:48 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 197:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 197:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

197 12(CODE) method undoChanges(deltas, dontSelect)
    'method'(IDENTIFIER) 'undoChanges'(IDENTIFIER) '('(LITERAL) 'deltas'(IDENTIFIER) ','(LITERAL) 'dontSelect'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 197:20 [1] 'undoChanges'(IDENTIFIER)
>>>ADVANCE 197:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 197:32 [3] 'deltas'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'deltas'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER deltas
>>>ADVANCE 197:38 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 197:40 [5] 'dontSelect'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'dontSelect'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER dontSelect
>>>ADVANCE 197:50 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 198:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 198:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

198 12(CODE) method getState(row)
    'method'(IDENTIFIER) 'getState'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 198:20 [1] 'getState'(IDENTIFIER)
>>>ADVANCE 198:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 198:29 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 198:32 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 199:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 199:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

199 12(CODE) method addFold(placeholder, range)
    'method'(IDENTIFIER) 'addFold'(IDENTIFIER) '('(LITERAL) 'placeholder'(IDENTIFIER) ','(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 199:20 [1] 'addFold'(IDENTIFIER)
>>>ADVANCE 199:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 199:28 [3] 'placeholder'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'placeholder'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER placeholder
>>>ADVANCE 199:39 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 199:41 [5] 'range'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 199:46 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 200:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 200:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

200 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 200:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 200:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 200:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 200:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 200:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 200:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 200:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 200:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 201:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 201:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

201 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 201:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 201:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 201:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 201:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 201:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 201:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 202:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 202:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

202 12(CODE) method onChangeFold(e)
    'method'(IDENTIFIER) 'onChangeFold'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 202:20 [1] 'onChangeFold'(IDENTIFIER)
>>>ADVANCE 202:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 202:33 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 202:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 203:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 203:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

203 12(CODE) method $detectNewLine(text)
    'method'(IDENTIFIER) '$detectNewLine'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 203:20 [1] '$detectNewLine'(IDENTIFIER)
>>>ADVANCE 203:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 203:35 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 203:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 204:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 204:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

204 12(CODE) method removeMarker(markerId)
    'method'(IDENTIFIER) 'removeMarker'(IDENTIFIER) '('(LITERAL) 'markerId'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 204:20 [1] 'removeMarker'(IDENTIFIER)
>>>ADVANCE 204:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 204:33 [3] 'markerId'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'markerId'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER markerId
>>>ADVANCE 204:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 205:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 205:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

205 12(CODE) method getCommentFoldRange(row, column, dir)
    'method'(IDENTIFIER) 'getCommentFoldRange'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ','(LITERAL) 'dir'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 205:20 [1] 'getCommentFoldRange'(IDENTIFIER)
>>>ADVANCE 205:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 205:40 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 205:43 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 205:45 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 205:51 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 205:53 [7] 'dir'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'dir'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER dir
>>>ADVANCE 205:56 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 206:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 206:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

206 12(CODE) method getBreakpoints()
    'method'(IDENTIFIER) 'getBreakpoints'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 206:20 [1] 'getBreakpoints'(IDENTIFIER)
>>>ADVANCE 206:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 206:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 207:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 207:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

207 12(CODE) method expandFold(fold)
    'method'(IDENTIFIER) 'expandFold'(IDENTIFIER) '('(LITERAL) 'fold'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 207:20 [1] 'expandFold'(IDENTIFIER)
>>>ADVANCE 207:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 207:31 [3] 'fold'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'fold'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER fold
>>>ADVANCE 207:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 208:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 208:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

208 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 208:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 208:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 208:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 208:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 208:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 208:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 209:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 209:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

209 12(CODE) method moveText(fromRange, toPosition, copy)
    'method'(IDENTIFIER) 'moveText'(IDENTIFIER) '('(LITERAL) 'fromRange'(IDENTIFIER) ','(LITERAL) 'toPosition'(IDENTIFIER) ','(LITERAL) 'copy'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 209:20 [1] 'moveText'(IDENTIFIER)
>>>ADVANCE 209:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 209:29 [3] 'fromRange'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'fromRange'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER fromRange
>>>ADVANCE 209:38 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 209:40 [5] 'toPosition'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'toPosition'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER toPosition
>>>ADVANCE 209:50 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 209:52 [7] 'copy'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'copy'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER copy
>>>ADVANCE 209:56 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 210:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 210:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

210 12(CODE) method markUndoGroup()
    'method'(IDENTIFIER) 'markUndoGroup'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 210:20 [1] 'markUndoGroup'(IDENTIFIER)
>>>ADVANCE 210:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 210:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 211:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 211:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

211 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 211:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 211:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 211:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 211:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 211:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 211:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 212:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 212:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

212 12(CODE) method isTabStop(position)
    'method'(IDENTIFIER) 'isTabStop'(IDENTIFIER) '('(LITERAL) 'position'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 212:20 [1] 'isTabStop'(IDENTIFIER)
>>>ADVANCE 212:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 212:30 [3] 'position'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'position'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER position
>>>ADVANCE 212:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 213:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 213:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

213 12(CODE) method getDocument()
    'method'(IDENTIFIER) 'getDocument'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 213:20 [1] 'getDocument'(IDENTIFIER)
>>>ADVANCE 213:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 213:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 214:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 214:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

214 12(CODE) method $getUndoSelection(deltas, isUndo, lastUndoRange)
    'method'(IDENTIFIER) '$getUndoSelection'(IDENTIFIER) '('(LITERAL) 'deltas'(IDENTIFIER) ','(LITERAL) 'isUndo'(IDENTIFIER) ','(LITERAL) 'lastUndoRange'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 214:20 [1] '$getUndoSelection'(IDENTIFIER)
>>>ADVANCE 214:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 214:38 [3] 'deltas'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'deltas'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER deltas
>>>ADVANCE 214:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 214:46 [5] 'isUndo'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'isUndo'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER isUndo
>>>ADVANCE 214:52 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 214:54 [7] 'lastUndoRange'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastUndoRange'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastUndoRange
>>>ADVANCE 214:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 215:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 215:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

215 12(CODE) method $clipPositionToDocument(row, column)
    'method'(IDENTIFIER) '$clipPositionToDocument'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 215:20 [1] '$clipPositionToDocument'(IDENTIFIER)
>>>ADVANCE 215:43 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 215:44 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 215:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 215:49 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 215:55 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 216:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 216:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

216 12(CODE) method getAllFolds()
    'method'(IDENTIFIER) 'getAllFolds'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 216:20 [1] 'getAllFolds'(IDENTIFIER)
>>>ADVANCE 216:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 216:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 217:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 217:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

217 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 217:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 217:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 217:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 217:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 217:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 217:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 218:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 218:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

218 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 218:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 218:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 218:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 218:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 218:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 218:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 219:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 219:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

219 12(CODE) method getAWordRange(row, column)
    'method'(IDENTIFIER) 'getAWordRange'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 219:20 [1] 'getAWordRange'(IDENTIFIER)
>>>ADVANCE 219:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 219:34 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 219:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 219:39 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 219:45 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 220:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 220:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

220 12(CODE) method getWrapLimit()
    'method'(IDENTIFIER) 'getWrapLimit'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 220:20 [1] 'getWrapLimit'(IDENTIFIER)
>>>ADVANCE 220:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 220:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 221:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 221:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

221 12(CODE) method toString()
    'method'(IDENTIFIER) 'toString'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 221:20 [1] 'toString'(IDENTIFIER)
>>>ADVANCE 221:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 221:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 222:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 222:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

222 12(CODE) method $clipRowToDocument(row)
    'method'(IDENTIFIER) '$clipRowToDocument'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 222:20 [1] '$clipRowToDocument'(IDENTIFIER)
>>>ADVANCE 222:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 222:39 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 222:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 223:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 223:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

223 12(CODE) method screenToDocumentPosition(screenRow, screenColumn)
    'method'(IDENTIFIER) 'screenToDocumentPosition'(IDENTIFIER) '('(LITERAL) 'screenRow'(IDENTIFIER) ','(LITERAL) 'screenColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 223:20 [1] 'screenToDocumentPosition'(IDENTIFIER)
>>>ADVANCE 223:44 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 223:45 [3] 'screenRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'screenRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER screenRow
>>>ADVANCE 223:54 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 223:56 [5] 'screenColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'screenColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER screenColumn
>>>ADVANCE 223:68 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 224:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 224:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

224 12(CODE) method setBreakpoint(row, className)
    'method'(IDENTIFIER) 'setBreakpoint'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'className'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 224:20 [1] 'setBreakpoint'(IDENTIFIER)
>>>ADVANCE 224:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 224:34 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 224:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 224:39 [5] 'className'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'className'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER className
>>>ADVANCE 224:48 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 225:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 225:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

225 12(CODE) method getWrapLimitRange()
    'method'(IDENTIFIER) 'getWrapLimitRange'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 225:20 [1] 'getWrapLimitRange'(IDENTIFIER)
>>>ADVANCE 225:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 225:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 226:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 226:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

226 12(CODE) method resetCaches()
    'method'(IDENTIFIER) 'resetCaches'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 226:20 [1] 'resetCaches'(IDENTIFIER)
>>>ADVANCE 226:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 226:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 227:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 227:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

227 12(CODE) method getOverwrite()
    'method'(IDENTIFIER) 'getOverwrite'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 227:20 [1] 'getOverwrite'(IDENTIFIER)
>>>ADVANCE 227:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 227:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 228:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 228:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

228 12(CODE) method indentRows(startRow, endRow, indentString)
    'method'(IDENTIFIER) 'indentRows'(IDENTIFIER) '('(LITERAL) 'startRow'(IDENTIFIER) ','(LITERAL) 'endRow'(IDENTIFIER) ','(LITERAL) 'indentString'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 228:20 [1] 'indentRows'(IDENTIFIER)
>>>ADVANCE 228:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 228:31 [3] 'startRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'startRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startRow
>>>ADVANCE 228:39 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 228:41 [5] 'endRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'endRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER endRow
>>>ADVANCE 228:47 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 228:49 [7] 'indentString'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'indentString'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER indentString
>>>ADVANCE 228:61 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 229:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 229:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

229 12(CODE) method clearBreakpoints()
    'method'(IDENTIFIER) 'clearBreakpoints'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 229:20 [1] 'clearBreakpoints'(IDENTIFIER)
>>>ADVANCE 229:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 229:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 230:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 230:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

230 12(CODE) method addFolds(folds)
    'method'(IDENTIFIER) 'addFolds'(IDENTIFIER) '('(LITERAL) 'folds'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 230:20 [1] 'addFolds'(IDENTIFIER)
>>>ADVANCE 230:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 230:29 [3] 'folds'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'folds'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER folds
>>>ADVANCE 230:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 231:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 231:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

231 12(CODE) method remove(range)
    'method'(IDENTIFIER) 'remove'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 231:20 [1] 'remove'(IDENTIFIER)
>>>ADVANCE 231:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 231:27 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 231:32 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 232:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 232:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

232 12(CODE) method documentToScreenColumn(row, docColumn)
    'method'(IDENTIFIER) 'documentToScreenColumn'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'docColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 232:20 [1] 'documentToScreenColumn'(IDENTIFIER)
>>>ADVANCE 232:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 232:43 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 232:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 232:48 [5] 'docColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'docColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docColumn
>>>ADVANCE 232:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 233:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 233:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

233 12(CODE) method getTextRange(range)
    'method'(IDENTIFIER) 'getTextRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 233:20 [1] 'getTextRange'(IDENTIFIER)
>>>ADVANCE 233:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 233:33 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 233:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 234:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 234:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

234 12(CODE) method $onChangeMode(mode, $isPlaceholder)
    'method'(IDENTIFIER) '$onChangeMode'(IDENTIFIER) '('(LITERAL) 'mode'(IDENTIFIER) ','(LITERAL) '$isPlaceholder'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 234:20 [1] '$onChangeMode'(IDENTIFIER)
>>>ADVANCE 234:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 234:34 [3] 'mode'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'mode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER mode
>>>ADVANCE 234:38 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 234:40 [5] '$isPlaceholder'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on '$isPlaceholder'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $isPlaceholder
>>>ADVANCE 234:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 235:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 235:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

235 12(CODE) method screenToDocumentRow(screenRow, screenColumn)
    'method'(IDENTIFIER) 'screenToDocumentRow'(IDENTIFIER) '('(LITERAL) 'screenRow'(IDENTIFIER) ','(LITERAL) 'screenColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 235:20 [1] 'screenToDocumentRow'(IDENTIFIER)
>>>ADVANCE 235:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 235:40 [3] 'screenRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'screenRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER screenRow
>>>ADVANCE 235:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 235:51 [5] 'screenColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'screenColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER screenColumn
>>>ADVANCE 235:63 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 236:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 236:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

236 12(CODE) method documentToScreenRow(docRow, docColumn)
    'method'(IDENTIFIER) 'documentToScreenRow'(IDENTIFIER) '('(LITERAL) 'docRow'(IDENTIFIER) ','(LITERAL) 'docColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 236:20 [1] 'documentToScreenRow'(IDENTIFIER)
>>>ADVANCE 236:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 236:40 [3] 'docRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'docRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docRow
>>>ADVANCE 236:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 236:48 [5] 'docColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'docColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docColumn
>>>ADVANCE 236:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 237:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 237:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

237 12(CODE) method getScreenLastRowColumn(screenRow)
    'method'(IDENTIFIER) 'getScreenLastRowColumn'(IDENTIFIER) '('(LITERAL) 'screenRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 237:20 [1] 'getScreenLastRowColumn'(IDENTIFIER)
>>>ADVANCE 237:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 237:43 [3] 'screenRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'screenRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER screenRow
>>>ADVANCE 237:52 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 238:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 238:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

238 12(CODE) method $addFoldLine(foldLine)
    'method'(IDENTIFIER) '$addFoldLine'(IDENTIFIER) '('(LITERAL) 'foldLine'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 238:20 [1] '$addFoldLine'(IDENTIFIER)
>>>ADVANCE 238:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 238:33 [3] 'foldLine'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'foldLine'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER foldLine
>>>ADVANCE 238:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 239:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 239:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

239 12(CODE) method setOverwrite(overwrite)
    'method'(IDENTIFIER) 'setOverwrite'(IDENTIFIER) '('(LITERAL) 'overwrite'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 239:20 [1] 'setOverwrite'(IDENTIFIER)
>>>ADVANCE 239:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 239:33 [3] 'overwrite'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'overwrite'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER overwrite
>>>ADVANCE 239:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 240:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 240:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

240 12(CODE) method getMarkers(inFront)
    'method'(IDENTIFIER) 'getMarkers'(IDENTIFIER) '('(LITERAL) 'inFront'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 240:20 [1] 'getMarkers'(IDENTIFIER)
>>>ADVANCE 240:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 240:31 [3] 'inFront'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'inFront'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER inFront
>>>ADVANCE 240:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 241:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 241:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

241 12(CODE) method getLength()
    'method'(IDENTIFIER) 'getLength'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 241:20 [1] 'getLength'(IDENTIFIER)
>>>ADVANCE 241:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 241:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 242:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 242:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

242 12(CODE) method $startWorker()
    'method'(IDENTIFIER) '$startWorker'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 242:20 [1] '$startWorker'(IDENTIFIER)
>>>ADVANCE 242:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 242:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 243:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 243:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

243 12(CODE) method $updateWrapData(firstRow, lastRow)
    'method'(IDENTIFIER) '$updateWrapData'(IDENTIFIER) '('(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 243:20 [1] '$updateWrapData'(IDENTIFIER)
>>>ADVANCE 243:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 243:36 [3] 'firstRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 243:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 243:46 [5] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 243:53 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 244:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 244:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

244 12(CODE) method getBracketRange(pos)
    'method'(IDENTIFIER) 'getBracketRange'(IDENTIFIER) '('(LITERAL) 'pos'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 244:20 [1] 'getBracketRange'(IDENTIFIER)
>>>ADVANCE 244:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 244:36 [3] 'pos'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'pos'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER pos
>>>ADVANCE 244:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 245:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 245:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

245 12(CODE) method updateFoldWidgets(e)
    'method'(IDENTIFIER) 'updateFoldWidgets'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 245:20 [1] 'updateFoldWidgets'(IDENTIFIER)
>>>ADVANCE 245:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 245:38 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 245:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 246:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 246:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

246 12(CODE) method getScreenTabSize(screenColumn)
    'method'(IDENTIFIER) 'getScreenTabSize'(IDENTIFIER) '('(LITERAL) 'screenColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 246:20 [1] 'getScreenTabSize'(IDENTIFIER)
>>>ADVANCE 246:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 246:37 [3] 'screenColumn'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'screenColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER screenColumn
>>>ADVANCE 246:49 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 247:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 247:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

247 12(CODE) method setBreakpoints(rows)
    'method'(IDENTIFIER) 'setBreakpoints'(IDENTIFIER) '('(LITERAL) 'rows'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 247:20 [1] 'setBreakpoints'(IDENTIFIER)
>>>ADVANCE 247:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 247:35 [3] 'rows'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'rows'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER rows
>>>ADVANCE 247:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 248:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 248:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

248 12(CODE) method clearBreakpoint(row)
    'method'(IDENTIFIER) 'clearBreakpoint'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 248:20 [1] 'clearBreakpoint'(IDENTIFIER)
>>>ADVANCE 248:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 248:36 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 248:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 249:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 249:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

249 12(CODE) method $computeWrapSplits(tokens, wrapLimit)
    'method'(IDENTIFIER) '$computeWrapSplits'(IDENTIFIER) '('(LITERAL) 'tokens'(IDENTIFIER) ','(LITERAL) 'wrapLimit'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 249:20 [1] '$computeWrapSplits'(IDENTIFIER)
>>>ADVANCE 249:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 249:39 [3] 'tokens'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'tokens'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER tokens
>>>ADVANCE 249:45 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 249:47 [5] 'wrapLimit'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'wrapLimit'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER wrapLimit
>>>ADVANCE 249:56 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 250:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 250:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

250 12(CODE) method getFoldedRowCount(first, last)
    'method'(IDENTIFIER) 'getFoldedRowCount'(IDENTIFIER) '('(LITERAL) 'first'(IDENTIFIER) ','(LITERAL) 'last'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 250:20 [1] 'getFoldedRowCount'(IDENTIFIER)
>>>ADVANCE 250:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 250:38 [3] 'first'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'first'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER first
>>>ADVANCE 250:43 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 250:45 [5] 'last'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'last'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER last
>>>ADVANCE 250:49 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 251:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 251:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

251 12(CODE) method getOption(name)
    'method'(IDENTIFIER) 'getOption'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 251:20 [1] 'getOption'(IDENTIFIER)
>>>ADVANCE 251:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 251:30 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 251:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 252:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 252:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

252 12(CODE) method removeGutterDecoration(row, className)
    'method'(IDENTIFIER) 'removeGutterDecoration'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'className'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 252:20 [1] 'removeGutterDecoration'(IDENTIFIER)
>>>ADVANCE 252:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 252:43 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 252:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 252:48 [5] 'className'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'className'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER className
>>>ADVANCE 252:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 253:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 253:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

253 12(CODE) method getFoldDisplayLine(foldLine, endRow, endColumn, startRow, startColumn)
    'method'(IDENTIFIER) 'getFoldDisplayLine'(IDENTIFIER) '('(LITERAL) 'foldLine'(IDENTIFIER) ','(LITERAL) 'endRow'(IDENTIFIER) ','(LITERAL) 'endColumn'(IDENTIFIER) ','(LITERAL) 'startRow'(IDENTIFIER) ','(LITERAL) 'startColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 253:20 [1] 'getFoldDisplayLine'(IDENTIFIER)
>>>ADVANCE 253:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 253:39 [3] 'foldLine'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'foldLine'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER foldLine
>>>ADVANCE 253:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 253:49 [5] 'endRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'endRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER endRow
>>>ADVANCE 253:55 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 253:57 [7] 'endColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'endColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER endColumn
>>>ADVANCE 253:66 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 253:68 [9] 'startRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startRow
>>>ADVANCE 253:76 [10] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 253:78 [11] 'startColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startColumn
>>>ADVANCE 253:89 [12] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 254:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 254:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

254 12(CODE) method getFoldStringAt(row, column, trim, foldLine)
    'method'(IDENTIFIER) 'getFoldStringAt'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ','(LITERAL) 'trim'(IDENTIFIER) ','(LITERAL) 'foldLine'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 254:20 [1] 'getFoldStringAt'(IDENTIFIER)
>>>ADVANCE 254:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 254:36 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 254:39 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 254:41 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 254:47 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 254:49 [7] 'trim'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'trim'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER trim
>>>ADVANCE 254:53 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 254:55 [9] 'foldLine'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'foldLine'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER foldLine
>>>ADVANCE 254:63 [10] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 255:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 255:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

255 12(CODE) method getLines(firstRow, lastRow)
    'method'(IDENTIFIER) 'getLines'(IDENTIFIER) '('(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 255:20 [1] 'getLines'(IDENTIFIER)
>>>ADVANCE 255:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 255:29 [3] 'firstRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 255:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 255:39 [5] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 255:46 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 256:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 256:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

256 12(CODE) method addGutterDecoration(row, className)
    'method'(IDENTIFIER) 'addGutterDecoration'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'className'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 256:20 [1] 'addGutterDecoration'(IDENTIFIER)
>>>ADVANCE 256:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 256:40 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 256:43 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 256:45 [5] 'className'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'className'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER className
>>>ADVANCE 256:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 257:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 257:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

257 12(CODE) method $updateInternalDataOnChange(e)
    'method'(IDENTIFIER) '$updateInternalDataOnChange'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 257:20 [1] '$updateInternalDataOnChange'(IDENTIFIER)
>>>ADVANCE 257:47 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 257:48 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 257:49 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 258:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 258:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

258 12(CODE) method getFoldLine(docRow, startFoldLine)
    'method'(IDENTIFIER) 'getFoldLine'(IDENTIFIER) '('(LITERAL) 'docRow'(IDENTIFIER) ','(LITERAL) 'startFoldLine'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 258:20 [1] 'getFoldLine'(IDENTIFIER)
>>>ADVANCE 258:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 258:32 [3] 'docRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'docRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docRow
>>>ADVANCE 258:38 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 258:40 [5] 'startFoldLine'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startFoldLine'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startFoldLine
>>>ADVANCE 258:53 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 259:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 259:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

259 12(CODE) method highlight(re)
    'method'(IDENTIFIER) 'highlight'(IDENTIFIER) '('(LITERAL) 're'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 259:20 [1] 'highlight'(IDENTIFIER)
>>>ADVANCE 259:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 259:30 [3] 're'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 're'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER re
>>>ADVANCE 259:32 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 260:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 260:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

260 12(CODE) method setUndoManager(undoManager)
    'method'(IDENTIFIER) 'setUndoManager'(IDENTIFIER) '('(LITERAL) 'undoManager'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 260:20 [1] 'setUndoManager'(IDENTIFIER)
>>>ADVANCE 260:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 260:35 [3] 'undoManager'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'undoManager'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER undoManager
>>>ADVANCE 260:46 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 261:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 261:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

261 12(CODE) method highlightLines(startRow, endRow, clazz, inFront)
    'method'(IDENTIFIER) 'highlightLines'(IDENTIFIER) '('(LITERAL) 'startRow'(IDENTIFIER) ','(LITERAL) 'endRow'(IDENTIFIER) ','(LITERAL) 'clazz'(IDENTIFIER) ','(LITERAL) 'inFront'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 261:20 [1] 'highlightLines'(IDENTIFIER)
>>>ADVANCE 261:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 261:35 [3] 'startRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'startRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startRow
>>>ADVANCE 261:43 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 261:45 [5] 'endRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'endRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER endRow
>>>ADVANCE 261:51 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 261:53 [7] 'clazz'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'clazz'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER clazz
>>>ADVANCE 261:58 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 261:60 [9] 'inFront'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'inFront'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER inFront
>>>ADVANCE 261:67 [10] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 262:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 262:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

262 12(CODE) method getSelectionMarkers()
    'method'(IDENTIFIER) 'getSelectionMarkers'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 262:20 [1] 'getSelectionMarkers'(IDENTIFIER)
>>>ADVANCE 262:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 262:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 263:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 263:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

263 12(CODE) method redoChanges(deltas, dontSelect)
    'method'(IDENTIFIER) 'redoChanges'(IDENTIFIER) '('(LITERAL) 'deltas'(IDENTIFIER) ','(LITERAL) 'dontSelect'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 263:20 [1] 'redoChanges'(IDENTIFIER)
>>>ADVANCE 263:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 263:32 [3] 'deltas'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'deltas'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER deltas
>>>ADVANCE 263:38 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 263:40 [5] 'dontSelect'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'dontSelect'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER dontSelect
>>>ADVANCE 263:50 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 264:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 264:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

264 12(CODE) method removeFold(fold)
    'method'(IDENTIFIER) 'removeFold'(IDENTIFIER) '('(LITERAL) 'fold'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 264:20 [1] 'removeFold'(IDENTIFIER)
>>>ADVANCE 264:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 264:31 [3] 'fold'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'fold'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER fold
>>>ADVANCE 264:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 265:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 265:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

265 12(CODE) method duplicateLines(firstRow, lastRow)
    'method'(IDENTIFIER) 'duplicateLines'(IDENTIFIER) '('(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 265:20 [1] 'duplicateLines'(IDENTIFIER)
>>>ADVANCE 265:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 265:35 [3] 'firstRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 265:43 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 265:45 [5] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 265:52 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 266:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 266:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

266 12(CODE) method setDocument(doc)
    'method'(IDENTIFIER) 'setDocument'(IDENTIFIER) '('(LITERAL) 'doc'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 266:20 [1] 'setDocument'(IDENTIFIER)
>>>ADVANCE 266:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 266:32 [3] 'doc'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'doc'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER doc
>>>ADVANCE 266:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 267:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 267:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

267 12(CODE) method getTokens(row)
    'method'(IDENTIFIER) 'getTokens'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 267:20 [1] 'getTokens'(IDENTIFIER)
>>>ADVANCE 267:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 267:30 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 267:33 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 268:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 268:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

268 12(CODE) method $resetRowCache(docRow)
    'method'(IDENTIFIER) '$resetRowCache'(IDENTIFIER) '('(LITERAL) 'docRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 268:20 [1] '$resetRowCache'(IDENTIFIER)
>>>ADVANCE 268:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 268:35 [3] 'docRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'docRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docRow
>>>ADVANCE 268:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 269:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 269:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

269 12(CODE) method setOption(name, value)
    'method'(IDENTIFIER) 'setOption'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 269:20 [1] 'setOption'(IDENTIFIER)
>>>ADVANCE 269:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 269:30 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 269:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 269:36 [5] 'value'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 269:41 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 270:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 270:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

270 12(CODE) method onChange(e)
    'method'(IDENTIFIER) 'onChange'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 270:20 [1] 'onChange'(IDENTIFIER)
>>>ADVANCE 270:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 270:29 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 270:30 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 271:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 271:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

271 12(CODE) method setUseWorker(useWorker)
    'method'(IDENTIFIER) 'setUseWorker'(IDENTIFIER) '('(LITERAL) 'useWorker'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 271:20 [1] 'setUseWorker'(IDENTIFIER)
>>>ADVANCE 271:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 271:33 [3] 'useWorker'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'useWorker'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER useWorker
>>>ADVANCE 271:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 272:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 272:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

272 12(CODE) method getUseSoftTabs()
    'method'(IDENTIFIER) 'getUseSoftTabs'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 272:20 [1] 'getUseSoftTabs'(IDENTIFIER)
>>>ADVANCE 272:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 272:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 273:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 273:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

273 12(CODE) method getUseWorker()
    'method'(IDENTIFIER) 'getUseWorker'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 273:20 [1] 'getUseWorker'(IDENTIFIER)
>>>ADVANCE 273:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 273:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 274:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 274:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

274 12(CODE) method toggleFold(tryToUnfold)
    'method'(IDENTIFIER) 'toggleFold'(IDENTIFIER) '('(LITERAL) 'tryToUnfold'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 274:20 [1] 'toggleFold'(IDENTIFIER)
>>>ADVANCE 274:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 274:31 [3] 'tryToUnfold'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'tryToUnfold'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER tryToUnfold
>>>ADVANCE 274:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 275:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 275:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

275 12(CODE) method setScrollTop(scrollTop)
    'method'(IDENTIFIER) 'setScrollTop'(IDENTIFIER) '('(LITERAL) 'scrollTop'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 275:20 [1] 'setScrollTop'(IDENTIFIER)
>>>ADVANCE 275:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 275:33 [3] 'scrollTop'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'scrollTop'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER scrollTop
>>>ADVANCE 275:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 276:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 276:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

276 12(CODE) method moveLinesUp(firstRow, lastRow)
    'method'(IDENTIFIER) 'moveLinesUp'(IDENTIFIER) '('(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 276:20 [1] 'moveLinesUp'(IDENTIFIER)
>>>ADVANCE 276:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 276:32 [3] 'firstRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 276:40 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 276:42 [5] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 276:49 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 277:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 277:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

277 12(CODE) method isRowFolded(docRow, startFoldRow)
    'method'(IDENTIFIER) 'isRowFolded'(IDENTIFIER) '('(LITERAL) 'docRow'(IDENTIFIER) ','(LITERAL) 'startFoldRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 277:20 [1] 'isRowFolded'(IDENTIFIER)
>>>ADVANCE 277:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 277:32 [3] 'docRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'docRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docRow
>>>ADVANCE 277:38 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 277:40 [5] 'startFoldRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startFoldRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startFoldRow
>>>ADVANCE 277:52 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 278:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 278:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

278 12(CODE) method setScrollLeft(scrollLeft)
    'method'(IDENTIFIER) 'setScrollLeft'(IDENTIFIER) '('(LITERAL) 'scrollLeft'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 278:20 [1] 'setScrollLeft'(IDENTIFIER)
>>>ADVANCE 278:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 278:34 [3] 'scrollLeft'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'scrollLeft'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER scrollLeft
>>>ADVANCE 278:44 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 279:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 279:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

279 12(CODE) method replace(range, text)
    'method'(IDENTIFIER) 'replace'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 279:20 [1] 'replace'(IDENTIFIER)
>>>ADVANCE 279:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 279:28 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 279:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 279:35 [5] 'text'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 279:39 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 280:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 280:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

280 12(CODE) method $stopWorker()
    'method'(IDENTIFIER) '$stopWorker'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 280:20 [1] '$stopWorker'(IDENTIFIER)
>>>ADVANCE 280:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 280:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 281:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 281:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

281 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 281:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 281:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 281:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 281:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 281:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 281:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 282:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 282:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

282 12(CODE) method onFoldWidgetClick(row, e)
    'method'(IDENTIFIER) 'onFoldWidgetClick'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 282:20 [1] 'onFoldWidgetClick'(IDENTIFIER)
>>>ADVANCE 282:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 282:38 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 282:41 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 282:43 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 282:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 283:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 283:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

283 12(CODE) method setWrapLimit(limit)
    'method'(IDENTIFIER) 'setWrapLimit'(IDENTIFIER) '('(LITERAL) 'limit'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 283:20 [1] 'setWrapLimit'(IDENTIFIER)
>>>ADVANCE 283:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 283:33 [3] 'limit'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'limit'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER limit
>>>ADVANCE 283:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 284:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 284:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

284 12(CODE) method setUseSoftTabs(val)
    'method'(IDENTIFIER) 'setUseSoftTabs'(IDENTIFIER) '('(LITERAL) 'val'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 284:20 [1] 'setUseSoftTabs'(IDENTIFIER)
>>>ADVANCE 284:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 284:35 [3] 'val'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'val'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER val
>>>ADVANCE 284:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 285:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 285:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

285 12(CODE) method getMode()
    'method'(IDENTIFIER) 'getMode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 285:20 [1] 'getMode'(IDENTIFIER)
>>>ADVANCE 285:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 285:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 286:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 286:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

286 12(CODE) method setUndoSelect(enable)
    'method'(IDENTIFIER) 'setUndoSelect'(IDENTIFIER) '('(LITERAL) 'enable'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 286:20 [1] 'setUndoSelect'(IDENTIFIER)
>>>ADVANCE 286:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 286:34 [3] 'enable'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'enable'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER enable
>>>ADVANCE 286:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 287:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 287:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

287 12(CODE) method findMatchingBracket(position, chr)
    'method'(IDENTIFIER) 'findMatchingBracket'(IDENTIFIER) '('(LITERAL) 'position'(IDENTIFIER) ','(LITERAL) 'chr'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 287:20 [1] 'findMatchingBracket'(IDENTIFIER)
>>>ADVANCE 287:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 287:40 [3] 'position'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'position'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER position
>>>ADVANCE 287:48 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 287:50 [5] 'chr'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'chr'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER chr
>>>ADVANCE 287:53 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 288:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 288:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

288 12(CODE) method setMode(mode)
    'method'(IDENTIFIER) 'setMode'(IDENTIFIER) '('(LITERAL) 'mode'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 288:20 [1] 'setMode'(IDENTIFIER)
>>>ADVANCE 288:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 288:28 [3] 'mode'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'mode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER mode
>>>ADVANCE 288:32 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 289:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 289:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

289 12(CODE) method getScrollLeft()
    'method'(IDENTIFIER) 'getScrollLeft'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 289:20 [1] 'getScrollLeft'(IDENTIFIER)
>>>ADVANCE 289:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 289:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 290:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 290:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

290 12(CODE) method addDynamicMarker(marker, inFront)
    'method'(IDENTIFIER) 'addDynamicMarker'(IDENTIFIER) '('(LITERAL) 'marker'(IDENTIFIER) ','(LITERAL) 'inFront'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 290:20 [1] 'addDynamicMarker'(IDENTIFIER)
>>>ADVANCE 290:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 290:37 [3] 'marker'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'marker'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER marker
>>>ADVANCE 290:43 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 290:45 [5] 'inFront'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'inFront'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER inFront
>>>ADVANCE 290:52 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 291:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 291:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

291 12(CODE) method removeFolds(folds)
    'method'(IDENTIFIER) 'removeFolds'(IDENTIFIER) '('(LITERAL) 'folds'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 291:20 [1] 'removeFolds'(IDENTIFIER)
>>>ADVANCE 291:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 291:32 [3] 'folds'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'folds'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER folds
>>>ADVANCE 291:37 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 292:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 292:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

292 12(CODE) method setFoldStyle(style)
    'method'(IDENTIFIER) 'setFoldStyle'(IDENTIFIER) '('(LITERAL) 'style'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 292:20 [1] 'setFoldStyle'(IDENTIFIER)
>>>ADVANCE 292:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 292:33 [3] 'style'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'style'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER style
>>>ADVANCE 292:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 293:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 293:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

293 12(CODE) method documentToScreenPosition(docRow, docColumn)
    'method'(IDENTIFIER) 'documentToScreenPosition'(IDENTIFIER) '('(LITERAL) 'docRow'(IDENTIFIER) ','(LITERAL) 'docColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 293:20 [1] 'documentToScreenPosition'(IDENTIFIER)
>>>ADVANCE 293:44 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 293:45 [3] 'docRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'docRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docRow
>>>ADVANCE 293:51 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 293:53 [5] 'docColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'docColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docColumn
>>>ADVANCE 293:62 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 294:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 294:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

294 12(CODE) method insert(position, text)
    'method'(IDENTIFIER) 'insert'(IDENTIFIER) '('(LITERAL) 'position'(IDENTIFIER) ','(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 294:20 [1] 'insert'(IDENTIFIER)
>>>ADVANCE 294:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 294:27 [3] 'position'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'position'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER position
>>>ADVANCE 294:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 294:37 [5] 'text'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 294:41 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 295:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 295:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

295 12(CODE) method getScreenLength()
    'method'(IDENTIFIER) 'getScreenLength'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 295:20 [1] 'getScreenLength'(IDENTIFIER)
>>>ADVANCE 295:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 295:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 296:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 296:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

296 12(CODE) method screenToDocumentColumn(screenRow, screenColumn)
    'method'(IDENTIFIER) 'screenToDocumentColumn'(IDENTIFIER) '('(LITERAL) 'screenRow'(IDENTIFIER) ','(LITERAL) 'screenColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 296:20 [1] 'screenToDocumentColumn'(IDENTIFIER)
>>>ADVANCE 296:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 296:43 [3] 'screenRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'screenRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER screenRow
>>>ADVANCE 296:52 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 296:54 [5] 'screenColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'screenColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER screenColumn
>>>ADVANCE 296:66 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 297:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 297:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

297 12(CODE) method $getRowCacheIndex(cacheArray, val)
    'method'(IDENTIFIER) '$getRowCacheIndex'(IDENTIFIER) '('(LITERAL) 'cacheArray'(IDENTIFIER) ','(LITERAL) 'val'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 297:20 [1] '$getRowCacheIndex'(IDENTIFIER)
>>>ADVANCE 297:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 297:38 [3] 'cacheArray'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'cacheArray'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER cacheArray
>>>ADVANCE 297:48 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 297:50 [5] 'val'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'val'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER val
>>>ADVANCE 297:53 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 298:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 298:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

298 12(CODE) method getUseWrapMode()
    'method'(IDENTIFIER) 'getUseWrapMode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 298:20 [1] 'getUseWrapMode'(IDENTIFIER)
>>>ADVANCE 298:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 298:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 299:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 299:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

299 12(CODE) method getRowFoldStart(docRow, startFoldRow)
    'method'(IDENTIFIER) 'getRowFoldStart'(IDENTIFIER) '('(LITERAL) 'docRow'(IDENTIFIER) ','(LITERAL) 'startFoldRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 299:20 [1] 'getRowFoldStart'(IDENTIFIER)
>>>ADVANCE 299:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 299:36 [3] 'docRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'docRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER docRow
>>>ADVANCE 299:42 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 299:44 [5] 'startFoldRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startFoldRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startFoldRow
>>>ADVANCE 299:56 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 302:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 302:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

302 8(CODE) class FoldLine
    'class'(IDENTIFIER) 'FoldLine'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 302:15 [1] 'FoldLine'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER FoldLine
>>>ADVANCE 303:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 303:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:FoldLine parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

303 12(CODE) constructor new FoldLine (foldData, folds)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'FoldLine'(IDENTIFIER) '('(LITERAL) 'foldData'(IDENTIFIER) ','(LITERAL) 'folds'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 303:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 303:29 [2] 'FoldLine'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER FoldLine
>>>ADVANCE 303:38 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 303:39 [4] 'foldData'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'foldData'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER foldData
>>>ADVANCE 303:47 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 303:49 [6] 'folds'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'folds'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER folds
>>>ADVANCE 303:54 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 305:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 305:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

305 12(CODE) method shiftRow(shift)
    'method'(IDENTIFIER) 'shiftRow'(IDENTIFIER) '('(LITERAL) 'shift'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 305:20 [1] 'shiftRow'(IDENTIFIER)
>>>ADVANCE 305:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 305:29 [3] 'shift'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'shift'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER shift
>>>ADVANCE 305:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 306:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 306:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

306 12(CODE) method addFold(fold)
    'method'(IDENTIFIER) 'addFold'(IDENTIFIER) '('(LITERAL) 'fold'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 306:20 [1] 'addFold'(IDENTIFIER)
>>>ADVANCE 306:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 306:28 [3] 'fold'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'fold'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER fold
>>>ADVANCE 306:32 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 307:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 307:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

307 12(CODE) method containsRow(row)
    'method'(IDENTIFIER) 'containsRow'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 307:20 [1] 'containsRow'(IDENTIFIER)
>>>ADVANCE 307:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 307:32 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 307:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 308:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 308:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

308 12(CODE) method walk(callback, endRow, endColumn)
    'method'(IDENTIFIER) 'walk'(IDENTIFIER) '('(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'endRow'(IDENTIFIER) ','(LITERAL) 'endColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 308:20 [1] 'walk'(IDENTIFIER)
>>>ADVANCE 308:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 308:25 [3] 'callback'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 308:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 308:35 [5] 'endRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'endRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER endRow
>>>ADVANCE 308:41 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 308:43 [7] 'endColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'endColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER endColumn
>>>ADVANCE 308:52 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 309:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 309:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

309 12(CODE) method getNextFoldTo(row, column)
    'method'(IDENTIFIER) 'getNextFoldTo'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 309:20 [1] 'getNextFoldTo'(IDENTIFIER)
>>>ADVANCE 309:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 309:34 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 309:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 309:39 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 309:45 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 310:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 310:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

310 12(CODE) method addRemoveChars(row, column, len)
    'method'(IDENTIFIER) 'addRemoveChars'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ','(LITERAL) 'len'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 310:20 [1] 'addRemoveChars'(IDENTIFIER)
>>>ADVANCE 310:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 310:35 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 310:38 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 310:40 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 310:46 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 310:48 [7] 'len'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'len'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER len
>>>ADVANCE 310:51 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 311:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 311:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

311 12(CODE) method split(row, column)
    'method'(IDENTIFIER) 'split'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 311:20 [1] 'split'(IDENTIFIER)
>>>ADVANCE 311:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 311:26 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 311:29 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 311:31 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 311:37 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 312:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 312:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

312 12(CODE) method merge(foldLineNext)
    'method'(IDENTIFIER) 'merge'(IDENTIFIER) '('(LITERAL) 'foldLineNext'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 312:20 [1] 'merge'(IDENTIFIER)
>>>ADVANCE 312:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 312:26 [3] 'foldLineNext'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'foldLineNext'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER foldLineNext
>>>ADVANCE 312:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 313:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 313:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

313 12(CODE) method toString()
    'method'(IDENTIFIER) 'toString'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 313:20 [1] 'toString'(IDENTIFIER)
>>>ADVANCE 313:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 313:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 314:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 314:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

314 12(CODE) method idxToPosition(idx)
    'method'(IDENTIFIER) 'idxToPosition'(IDENTIFIER) '('(LITERAL) 'idx'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 314:20 [1] 'idxToPosition'(IDENTIFIER)
>>>ADVANCE 314:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 314:34 [3] 'idx'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'idx'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER idx
>>>ADVANCE 314:37 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 317:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 317:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

317 8(CODE) class FoldMode
    'class'(IDENTIFIER) 'FoldMode'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 317:15 [1] 'FoldMode'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER FoldMode
>>>ADVANCE 318:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 318:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:FoldMode parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

318 12(CODE) constructor new FoldMode ()
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'FoldMode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 318:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 318:29 [2] 'FoldMode'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER FoldMode
>>>ADVANCE 318:38 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 318:39 [4] ')'(LITERAL)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 320:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 320:13 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'properties'(IDENTIFIER)

320 12(CODE) properties
    'properties'(IDENTIFIER)

                    Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                      PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 321:0 [-1] ' '(NEWLINE)
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 321:17 [0] 'foldingStartMarker'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'foldingStartMarker'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER foldingStartMarker
>>>ADVANCE 321:35 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 321:36 [2] 'object'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 322:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 322:17 [0] 'foldingStopMarker'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'foldingStopMarker'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER foldingStopMarker
>>>ADVANCE 322:34 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 322:35 [2] 'object'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 323:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 323:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [PropertiesDeclaration] blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                    Parsed OK!-> PropertiesDeclaration
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

323 12(CODE) method getFoldWidget(session, foldStyle, row)
    'method'(IDENTIFIER) 'getFoldWidget'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ','(LITERAL) 'foldStyle'(IDENTIFIER) ','(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 323:20 [1] 'getFoldWidget'(IDENTIFIER)
>>>ADVANCE 323:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 323:34 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 323:41 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 323:43 [5] 'foldStyle'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'foldStyle'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER foldStyle
>>>ADVANCE 323:52 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 323:54 [7] 'row'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 323:57 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 324:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 324:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

324 12(CODE) method getFoldWidgetRange(session, foldStyle, row)
    'method'(IDENTIFIER) 'getFoldWidgetRange'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ','(LITERAL) 'foldStyle'(IDENTIFIER) ','(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 324:20 [1] 'getFoldWidgetRange'(IDENTIFIER)
>>>ADVANCE 324:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 324:39 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 324:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 324:48 [5] 'foldStyle'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'foldStyle'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER foldStyle
>>>ADVANCE 324:57 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 324:59 [7] 'row'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 324:62 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 325:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 325:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

325 12(CODE) method indentationBlock(session, row, column)
    'method'(IDENTIFIER) 'indentationBlock'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ','(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 325:20 [1] 'indentationBlock'(IDENTIFIER)
>>>ADVANCE 325:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 325:37 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 325:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 325:46 [5] 'row'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 325:49 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 325:51 [7] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 325:57 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 326:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 326:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

326 12(CODE) method openingBracketBlock(session, bracket, row, column, typeRe)
    'method'(IDENTIFIER) 'openingBracketBlock'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ','(LITERAL) 'bracket'(IDENTIFIER) ','(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ','(LITERAL) 'typeRe'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 326:20 [1] 'openingBracketBlock'(IDENTIFIER)
>>>ADVANCE 326:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 326:40 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 326:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 326:49 [5] 'bracket'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'bracket'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER bracket
>>>ADVANCE 326:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 326:58 [7] 'row'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 326:61 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 326:63 [9] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 326:69 [10] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 326:71 [11] 'typeRe'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'typeRe'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER typeRe
>>>ADVANCE 326:77 [12] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 327:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 327:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

327 12(CODE) method closingBracketBlock(session, bracket, row, column, typeRe)
    'method'(IDENTIFIER) 'closingBracketBlock'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ','(LITERAL) 'bracket'(IDENTIFIER) ','(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ','(LITERAL) 'typeRe'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 327:20 [1] 'closingBracketBlock'(IDENTIFIER)
>>>ADVANCE 327:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 327:40 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 327:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 327:49 [5] 'bracket'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'bracket'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER bracket
>>>ADVANCE 327:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 327:58 [7] 'row'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 327:61 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 327:63 [9] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 327:69 [10] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 327:71 [11] 'typeRe'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'typeRe'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER typeRe
>>>ADVANCE 327:77 [12] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 330:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 330:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

330 8(CODE) class UndoManager
    'class'(IDENTIFIER) 'UndoManager'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 330:15 [1] 'UndoManager'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER UndoManager
>>>ADVANCE 331:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 331:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:UndoManager parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

331 12(CODE) constructor new UndoManager ()
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'UndoManager'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 331:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 331:29 [2] 'UndoManager'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER UndoManager
>>>ADVANCE 331:41 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 331:42 [4] ')'(LITERAL)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 333:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 333:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

333 12(CODE) method execute(options)
    'method'(IDENTIFIER) 'execute'(IDENTIFIER) '('(LITERAL) 'options'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 333:20 [1] 'execute'(IDENTIFIER)
>>>ADVANCE 333:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 333:28 [3] 'options'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 333:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 334:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 334:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

334 12(CODE) method undo(dontSelect)
    'method'(IDENTIFIER) 'undo'(IDENTIFIER) '('(LITERAL) 'dontSelect'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 334:20 [1] 'undo'(IDENTIFIER)
>>>ADVANCE 334:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 334:25 [3] 'dontSelect'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'dontSelect'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER dontSelect
>>>ADVANCE 334:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 335:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 335:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

335 12(CODE) method redo(dontSelect)
    'method'(IDENTIFIER) 'redo'(IDENTIFIER) '('(LITERAL) 'dontSelect'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 335:20 [1] 'redo'(IDENTIFIER)
>>>ADVANCE 335:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 335:25 [3] 'dontSelect'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'dontSelect'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER dontSelect
>>>ADVANCE 335:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 336:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 336:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

336 12(CODE) method reset()
    'method'(IDENTIFIER) 'reset'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 336:20 [1] 'reset'(IDENTIFIER)
>>>ADVANCE 336:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 336:26 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 337:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 337:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

337 12(CODE) method hasUndo()
    'method'(IDENTIFIER) 'hasUndo'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 337:20 [1] 'hasUndo'(IDENTIFIER)
>>>ADVANCE 337:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 337:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 338:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 338:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

338 12(CODE) method hasRedo()
    'method'(IDENTIFIER) 'hasRedo'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 338:20 [1] 'hasRedo'(IDENTIFIER)
>>>ADVANCE 338:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 338:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 339:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 339:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

339 12(CODE) method markClean()
    'method'(IDENTIFIER) 'markClean'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 339:20 [1] 'markClean'(IDENTIFIER)
>>>ADVANCE 339:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 339:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 340:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 340:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

340 12(CODE) method isClean()
    'method'(IDENTIFIER) 'isClean'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 340:20 [1] 'isClean'(IDENTIFIER)
>>>ADVANCE 340:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 340:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 343:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 343:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

343 8(CODE) class UIWorkerClient
    'class'(IDENTIFIER) 'UIWorkerClient'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 343:15 [1] 'UIWorkerClient'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER UIWorkerClient
>>>ADVANCE 344:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 344:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:UIWorkerClient parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

344 12(CODE) constructor new UIWorkerClient (topLevelNamespaces, mod, classname)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'UIWorkerClient'(IDENTIFIER) '('(LITERAL) 'topLevelNamespaces'(IDENTIFIER) ','(LITERAL) 'mod'(IDENTIFIER) ','(LITERAL) 'classname'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 344:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 344:29 [2] 'UIWorkerClient'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER UIWorkerClient
>>>ADVANCE 344:44 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 344:45 [4] 'topLevelNamespaces'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'topLevelNamespaces'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER topLevelNamespaces
>>>ADVANCE 344:63 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 344:65 [6] 'mod'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'mod'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER mod
>>>ADVANCE 344:68 [7] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 344:70 [8] 'classname'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'classname'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER classname
>>>ADVANCE 344:79 [9] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 346:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 346:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

346 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 346:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 346:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 346:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 346:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 346:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 346:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 347:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 347:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

347 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 347:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 347:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 347:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 347:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 347:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 347:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 348:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 348:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

348 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 348:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 348:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 348:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 348:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 348:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 348:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 349:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 349:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

349 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 349:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 349:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 349:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 349:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 349:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 349:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 350:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 350:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

350 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 350:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 350:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 350:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 350:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 350:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 350:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 351:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 351:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

351 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 351:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 351:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 351:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 351:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 351:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 351:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 352:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 352:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

352 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 352:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 352:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 352:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 352:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 352:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 352:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 352:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 352:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 353:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 353:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

353 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 353:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 353:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 353:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 353:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 353:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 353:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 353:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 353:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 354:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 354:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

354 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 354:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 354:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 354:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 354:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 354:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 354:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 355:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 355:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

355 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 355:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 355:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 355:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 355:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 355:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 355:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 356:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 356:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

356 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 356:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 356:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 356:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 356:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 356:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 356:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 357:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 357:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

357 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 357:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 357:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 357:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 357:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 358:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 358:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

358 12(CODE) method onError(e)
    'method'(IDENTIFIER) 'onError'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 358:20 [1] 'onError'(IDENTIFIER)
>>>ADVANCE 358:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 358:28 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 358:29 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 359:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 359:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

359 12(CODE) method onMessage(e)
    'method'(IDENTIFIER) 'onMessage'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 359:20 [1] 'onMessage'(IDENTIFIER)
>>>ADVANCE 359:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 359:30 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 359:31 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 360:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 360:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

360 12(CODE) method $normalizePath(path)
    'method'(IDENTIFIER) '$normalizePath'(IDENTIFIER) '('(LITERAL) 'path'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 360:20 [1] '$normalizePath'(IDENTIFIER)
>>>ADVANCE 360:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 360:35 [3] 'path'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'path'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER path
>>>ADVANCE 360:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 361:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 361:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

361 12(CODE) method terminate()
    'method'(IDENTIFIER) 'terminate'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 361:20 [1] 'terminate'(IDENTIFIER)
>>>ADVANCE 361:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 361:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 362:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 362:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

362 12(CODE) method send(cmd, args)
    'method'(IDENTIFIER) 'send'(IDENTIFIER) '('(LITERAL) 'cmd'(IDENTIFIER) ','(LITERAL) 'args'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 362:20 [1] 'send'(IDENTIFIER)
>>>ADVANCE 362:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 362:25 [3] 'cmd'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'cmd'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER cmd
>>>ADVANCE 362:28 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 362:30 [5] 'args'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'args'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER args
>>>ADVANCE 362:34 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 363:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 363:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

363 12(CODE) method call(cmd, args, callback)
    'method'(IDENTIFIER) 'call'(IDENTIFIER) '('(LITERAL) 'cmd'(IDENTIFIER) ','(LITERAL) 'args'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 363:20 [1] 'call'(IDENTIFIER)
>>>ADVANCE 363:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 363:25 [3] 'cmd'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'cmd'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER cmd
>>>ADVANCE 363:28 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 363:30 [5] 'args'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'args'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER args
>>>ADVANCE 363:34 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 363:36 [7] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 363:44 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 364:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 364:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

364 12(CODE) method emit(event, data)
    'method'(IDENTIFIER) 'emit'(IDENTIFIER) '('(LITERAL) 'event'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 364:20 [1] 'emit'(IDENTIFIER)
>>>ADVANCE 364:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 364:25 [3] 'event'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'event'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER event
>>>ADVANCE 364:30 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 364:32 [5] 'data'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 364:36 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 365:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 365:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

365 12(CODE) method attachToDocument(doc)
    'method'(IDENTIFIER) 'attachToDocument'(IDENTIFIER) '('(LITERAL) 'doc'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 365:20 [1] 'attachToDocument'(IDENTIFIER)
>>>ADVANCE 365:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 365:37 [3] 'doc'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'doc'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER doc
>>>ADVANCE 365:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 366:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 366:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

366 12(CODE) method changeListener(e)
    'method'(IDENTIFIER) 'changeListener'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 366:20 [1] 'changeListener'(IDENTIFIER)
>>>ADVANCE 366:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 366:35 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 366:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 367:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 367:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

367 12(CODE) method $sendDeltaQueue()
    'method'(IDENTIFIER) '$sendDeltaQueue'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 367:20 [1] '$sendDeltaQueue'(IDENTIFIER)
>>>ADVANCE 367:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 367:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 370:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 370:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

370 8(CODE) class WorkerClient
    'class'(IDENTIFIER) 'WorkerClient'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 370:15 [1] 'WorkerClient'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER WorkerClient
>>>ADVANCE 371:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 371:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:WorkerClient parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

371 12(CODE) constructor new WorkerClient (topLevelNamespaces, mod, classname)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'WorkerClient'(IDENTIFIER) '('(LITERAL) 'topLevelNamespaces'(IDENTIFIER) ','(LITERAL) 'mod'(IDENTIFIER) ','(LITERAL) 'classname'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 371:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 371:29 [2] 'WorkerClient'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER WorkerClient
>>>ADVANCE 371:42 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 371:43 [4] 'topLevelNamespaces'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'topLevelNamespaces'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER topLevelNamespaces
>>>ADVANCE 371:61 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 371:63 [6] 'mod'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'mod'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER mod
>>>ADVANCE 371:66 [7] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 371:68 [8] 'classname'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'classname'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER classname
>>>ADVANCE 371:77 [9] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 373:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 373:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

373 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 373:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 373:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 373:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 373:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 373:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 373:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 374:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 374:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

374 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 374:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 374:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 374:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 374:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 374:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 374:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 375:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 375:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

375 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 375:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 375:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 375:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 375:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 375:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 375:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 376:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 376:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

376 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 376:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 376:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 376:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 376:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 376:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 376:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 377:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 377:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

377 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 377:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 377:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 377:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 377:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 377:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 377:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 378:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 378:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

378 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 378:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 378:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 378:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 378:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 378:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 378:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 379:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 379:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

379 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 379:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 379:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 379:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 379:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 379:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 379:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 379:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 379:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 380:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 380:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

380 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 380:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 380:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 380:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 380:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 380:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 380:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 380:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 380:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 381:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 381:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

381 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 381:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 381:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 381:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 381:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 381:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 381:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 382:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 382:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

382 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 382:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 382:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 382:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 382:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 382:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 382:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 383:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 383:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

383 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 383:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 383:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 383:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 383:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 383:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 383:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 384:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 384:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

384 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 384:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 384:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 384:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 384:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 385:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 385:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

385 12(CODE) method onError(e)
    'method'(IDENTIFIER) 'onError'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 385:20 [1] 'onError'(IDENTIFIER)
>>>ADVANCE 385:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 385:28 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 385:29 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 386:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 386:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

386 12(CODE) method onMessage(e)
    'method'(IDENTIFIER) 'onMessage'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 386:20 [1] 'onMessage'(IDENTIFIER)
>>>ADVANCE 386:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 386:30 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 386:31 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 387:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 387:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

387 12(CODE) method $normalizePath(path)
    'method'(IDENTIFIER) '$normalizePath'(IDENTIFIER) '('(LITERAL) 'path'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 387:20 [1] '$normalizePath'(IDENTIFIER)
>>>ADVANCE 387:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 387:35 [3] 'path'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'path'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER path
>>>ADVANCE 387:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 388:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 388:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

388 12(CODE) method terminate()
    'method'(IDENTIFIER) 'terminate'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 388:20 [1] 'terminate'(IDENTIFIER)
>>>ADVANCE 388:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 388:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 389:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 389:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

389 12(CODE) method send(cmd, args)
    'method'(IDENTIFIER) 'send'(IDENTIFIER) '('(LITERAL) 'cmd'(IDENTIFIER) ','(LITERAL) 'args'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 389:20 [1] 'send'(IDENTIFIER)
>>>ADVANCE 389:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 389:25 [3] 'cmd'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'cmd'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER cmd
>>>ADVANCE 389:28 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 389:30 [5] 'args'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'args'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER args
>>>ADVANCE 389:34 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 390:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 390:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

390 12(CODE) method call(cmd, args, callback)
    'method'(IDENTIFIER) 'call'(IDENTIFIER) '('(LITERAL) 'cmd'(IDENTIFIER) ','(LITERAL) 'args'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 390:20 [1] 'call'(IDENTIFIER)
>>>ADVANCE 390:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 390:25 [3] 'cmd'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'cmd'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER cmd
>>>ADVANCE 390:28 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 390:30 [5] 'args'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'args'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER args
>>>ADVANCE 390:34 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 390:36 [7] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 390:44 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 391:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 391:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

391 12(CODE) method emit(event, data)
    'method'(IDENTIFIER) 'emit'(IDENTIFIER) '('(LITERAL) 'event'(IDENTIFIER) ','(LITERAL) 'data'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 391:20 [1] 'emit'(IDENTIFIER)
>>>ADVANCE 391:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 391:25 [3] 'event'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'event'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER event
>>>ADVANCE 391:30 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 391:32 [5] 'data'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 391:36 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 392:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 392:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

392 12(CODE) method attachToDocument(doc)
    'method'(IDENTIFIER) 'attachToDocument'(IDENTIFIER) '('(LITERAL) 'doc'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 392:20 [1] 'attachToDocument'(IDENTIFIER)
>>>ADVANCE 392:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 392:37 [3] 'doc'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'doc'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER doc
>>>ADVANCE 392:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 393:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 393:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

393 12(CODE) method changeListener(e)
    'method'(IDENTIFIER) 'changeListener'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 393:20 [1] 'changeListener'(IDENTIFIER)
>>>ADVANCE 393:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 393:35 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 393:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 394:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 394:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

394 12(CODE) method $sendDeltaQueue()
    'method'(IDENTIFIER) '$sendDeltaQueue'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 394:20 [1] '$sendDeltaQueue'(IDENTIFIER)
>>>ADVANCE 394:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 394:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 397:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 397:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

397 8(CODE) class HashHandler
    'class'(IDENTIFIER) 'HashHandler'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 397:15 [1] 'HashHandler'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER HashHandler
>>>ADVANCE 398:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 398:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:HashHandler parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

398 12(CODE) constructor new HashHandler (config, platform)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'HashHandler'(IDENTIFIER) '('(LITERAL) 'config'(IDENTIFIER) ','(LITERAL) 'platform'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 398:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 398:29 [2] 'HashHandler'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER HashHandler
>>>ADVANCE 398:41 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 398:42 [4] 'config'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'config'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER config
>>>ADVANCE 398:48 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 398:50 [6] 'platform'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'platform'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER platform
>>>ADVANCE 398:58 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 400:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 400:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

400 12(CODE) method addCommand(command)
    'method'(IDENTIFIER) 'addCommand'(IDENTIFIER) '('(LITERAL) 'command'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 400:20 [1] 'addCommand'(IDENTIFIER)
>>>ADVANCE 400:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 400:31 [3] 'command'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'command'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER command
>>>ADVANCE 400:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 401:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 401:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

401 12(CODE) method removeCommand(command)
    'method'(IDENTIFIER) 'removeCommand'(IDENTIFIER) '('(LITERAL) 'command'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 401:20 [1] 'removeCommand'(IDENTIFIER)
>>>ADVANCE 401:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 401:34 [3] 'command'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'command'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER command
>>>ADVANCE 401:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 402:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 402:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

402 12(CODE) method bindKey(key, command)
    'method'(IDENTIFIER) 'bindKey'(IDENTIFIER) '('(LITERAL) 'key'(IDENTIFIER) ','(LITERAL) 'command'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 402:20 [1] 'bindKey'(IDENTIFIER)
>>>ADVANCE 402:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 402:28 [3] 'key'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'key'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER key
>>>ADVANCE 402:31 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 402:33 [5] 'command'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'command'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER command
>>>ADVANCE 402:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 403:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 403:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

403 12(CODE) method addCommands(commands)
    'method'(IDENTIFIER) 'addCommands'(IDENTIFIER) '('(LITERAL) 'commands'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 403:20 [1] 'addCommands'(IDENTIFIER)
>>>ADVANCE 403:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 403:32 [3] 'commands'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'commands'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER commands
>>>ADVANCE 403:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 404:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 404:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

404 12(CODE) method removeCommands(commands)
    'method'(IDENTIFIER) 'removeCommands'(IDENTIFIER) '('(LITERAL) 'commands'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 404:20 [1] 'removeCommands'(IDENTIFIER)
>>>ADVANCE 404:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 404:35 [3] 'commands'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'commands'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER commands
>>>ADVANCE 404:43 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 405:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 405:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

405 12(CODE) method bindKeys(keyList)
    'method'(IDENTIFIER) 'bindKeys'(IDENTIFIER) '('(LITERAL) 'keyList'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 405:20 [1] 'bindKeys'(IDENTIFIER)
>>>ADVANCE 405:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 405:29 [3] 'keyList'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'keyList'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER keyList
>>>ADVANCE 405:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 406:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 406:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

406 12(CODE) method _buildKeyHash(command)
    'method'(IDENTIFIER) '_buildKeyHash'(IDENTIFIER) '('(LITERAL) 'command'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 406:20 [1] '_buildKeyHash'(IDENTIFIER)
>>>ADVANCE 406:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 406:34 [3] 'command'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'command'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER command
>>>ADVANCE 406:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 407:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 407:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

407 12(CODE) method parseKeys(keys)
    'method'(IDENTIFIER) 'parseKeys'(IDENTIFIER) '('(LITERAL) 'keys'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 407:20 [1] 'parseKeys'(IDENTIFIER)
>>>ADVANCE 407:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 407:30 [3] 'keys'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'keys'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER keys
>>>ADVANCE 407:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 408:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 408:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

408 12(CODE) method findKeyCommand(hashId, keyString)
    'method'(IDENTIFIER) 'findKeyCommand'(IDENTIFIER) '('(LITERAL) 'hashId'(IDENTIFIER) ','(LITERAL) 'keyString'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 408:20 [1] 'findKeyCommand'(IDENTIFIER)
>>>ADVANCE 408:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 408:35 [3] 'hashId'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'hashId'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER hashId
>>>ADVANCE 408:41 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 408:43 [5] 'keyString'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'keyString'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER keyString
>>>ADVANCE 408:52 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 409:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 409:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

409 12(CODE) method handleKeyboard(data, hashId, keyString, keyCode)
    'method'(IDENTIFIER) 'handleKeyboard'(IDENTIFIER) '('(LITERAL) 'data'(IDENTIFIER) ','(LITERAL) 'hashId'(IDENTIFIER) ','(LITERAL) 'keyString'(IDENTIFIER) ','(LITERAL) 'keyCode'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 409:20 [1] 'handleKeyboard'(IDENTIFIER)
>>>ADVANCE 409:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 409:35 [3] 'data'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'data'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER data
>>>ADVANCE 409:39 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 409:41 [5] 'hashId'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'hashId'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER hashId
>>>ADVANCE 409:47 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 409:49 [7] 'keyString'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'keyString'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER keyString
>>>ADVANCE 409:58 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 409:60 [9] 'keyCode'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'keyCode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER keyCode
>>>ADVANCE 409:67 [10] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 412:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 412:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

412 8(CODE) class DefaultHandlers
    'class'(IDENTIFIER) 'DefaultHandlers'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 412:15 [1] 'DefaultHandlers'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER DefaultHandlers
>>>ADVANCE 413:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 413:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:DefaultHandlers parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

413 12(CODE) constructor new DefaultHandlers (mouseHandler)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'DefaultHandlers'(IDENTIFIER) '('(LITERAL) 'mouseHandler'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 413:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 413:29 [2] 'DefaultHandlers'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER DefaultHandlers
>>>ADVANCE 413:45 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 413:46 [4] 'mouseHandler'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'mouseHandler'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER mouseHandler
>>>ADVANCE 413:58 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 415:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 415:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

415 12(CODE) method onMouseDown(ev)
    'method'(IDENTIFIER) 'onMouseDown'(IDENTIFIER) '('(LITERAL) 'ev'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 415:20 [1] 'onMouseDown'(IDENTIFIER)
>>>ADVANCE 415:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 415:32 [3] 'ev'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'ev'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER ev
>>>ADVANCE 415:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 416:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 416:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

416 12(CODE) method startSelect(pos)
    'method'(IDENTIFIER) 'startSelect'(IDENTIFIER) '('(LITERAL) 'pos'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 416:20 [1] 'startSelect'(IDENTIFIER)
>>>ADVANCE 416:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 416:32 [3] 'pos'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'pos'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER pos
>>>ADVANCE 416:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 417:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 417:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

417 12(CODE) method select()
    'method'(IDENTIFIER) 'select'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 417:20 [1] 'select'(IDENTIFIER)
>>>ADVANCE 417:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 417:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 418:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 418:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

418 12(CODE) method extendSelectionBy(unitName)
    'method'(IDENTIFIER) 'extendSelectionBy'(IDENTIFIER) '('(LITERAL) 'unitName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 418:20 [1] 'extendSelectionBy'(IDENTIFIER)
>>>ADVANCE 418:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 418:38 [3] 'unitName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'unitName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER unitName
>>>ADVANCE 418:46 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 419:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 419:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

419 12(CODE) method startDrag()
    'method'(IDENTIFIER) 'startDrag'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 419:20 [1] 'startDrag'(IDENTIFIER)
>>>ADVANCE 419:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 419:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 420:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 420:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

420 12(CODE) method focusWait()
    'method'(IDENTIFIER) 'focusWait'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 420:20 [1] 'focusWait'(IDENTIFIER)
>>>ADVANCE 420:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 420:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 421:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 421:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

421 12(CODE) method dragWait(e)
    'method'(IDENTIFIER) 'dragWait'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 421:20 [1] 'dragWait'(IDENTIFIER)
>>>ADVANCE 421:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 421:29 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 421:30 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 422:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 422:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

422 12(CODE) method dragWaitEnd(e)
    'method'(IDENTIFIER) 'dragWaitEnd'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 422:20 [1] 'dragWaitEnd'(IDENTIFIER)
>>>ADVANCE 422:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 422:32 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 422:33 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 423:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 423:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

423 12(CODE) method drag()
    'method'(IDENTIFIER) 'drag'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 423:20 [1] 'drag'(IDENTIFIER)
>>>ADVANCE 423:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 423:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 424:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 424:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

424 12(CODE) method dragEnd(e)
    'method'(IDENTIFIER) 'dragEnd'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 424:20 [1] 'dragEnd'(IDENTIFIER)
>>>ADVANCE 424:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 424:28 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 424:29 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 425:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 425:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

425 12(CODE) method onDoubleClick(ev)
    'method'(IDENTIFIER) 'onDoubleClick'(IDENTIFIER) '('(LITERAL) 'ev'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 425:20 [1] 'onDoubleClick'(IDENTIFIER)
>>>ADVANCE 425:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 425:34 [3] 'ev'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'ev'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER ev
>>>ADVANCE 425:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 426:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 426:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

426 12(CODE) method onTripleClick(ev)
    'method'(IDENTIFIER) 'onTripleClick'(IDENTIFIER) '('(LITERAL) 'ev'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 426:20 [1] 'onTripleClick'(IDENTIFIER)
>>>ADVANCE 426:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 426:34 [3] 'ev'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'ev'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER ev
>>>ADVANCE 426:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 427:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 427:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

427 12(CODE) method onQuadClick(ev)
    'method'(IDENTIFIER) 'onQuadClick'(IDENTIFIER) '('(LITERAL) 'ev'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 427:20 [1] 'onQuadClick'(IDENTIFIER)
>>>ADVANCE 427:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 427:32 [3] 'ev'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'ev'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER ev
>>>ADVANCE 427:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 428:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 428:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

428 12(CODE) method onMouseWheel(ev)
    'method'(IDENTIFIER) 'onMouseWheel'(IDENTIFIER) '('(LITERAL) 'ev'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 428:20 [1] 'onMouseWheel'(IDENTIFIER)
>>>ADVANCE 428:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 428:33 [3] 'ev'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'ev'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER ev
>>>ADVANCE 428:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 431:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 431:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

431 8(CODE) class BackgroundTokenizer
    'class'(IDENTIFIER) 'BackgroundTokenizer'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 431:15 [1] 'BackgroundTokenizer'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER BackgroundTokenizer
>>>ADVANCE 432:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 432:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:BackgroundTokenizer parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

432 12(CODE) constructor new BackgroundTokenizer (tokenizer, editor)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'BackgroundTokenizer'(IDENTIFIER) '('(LITERAL) 'tokenizer'(IDENTIFIER) ','(LITERAL) 'editor'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 432:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 432:29 [2] 'BackgroundTokenizer'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER BackgroundTokenizer
>>>ADVANCE 432:49 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 432:50 [4] 'tokenizer'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'tokenizer'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER tokenizer
>>>ADVANCE 432:59 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 432:61 [6] 'editor'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'editor'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER editor
>>>ADVANCE 432:67 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 434:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 434:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

434 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 434:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 434:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 434:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 434:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 434:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 434:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 435:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 435:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

435 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 435:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 435:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 435:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 435:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 435:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 435:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 436:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 436:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

436 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 436:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 436:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 436:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 436:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 436:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 436:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 437:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 437:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

437 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 437:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 437:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 437:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 437:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 437:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 437:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 438:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 438:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

438 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 438:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 438:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 438:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 438:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 438:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 438:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 439:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 439:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

439 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 439:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 439:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 439:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 439:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 439:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 439:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 440:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 440:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

440 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 440:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 440:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 440:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 440:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 440:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 440:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 440:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 440:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 441:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 441:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

441 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 441:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 441:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 441:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 441:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 441:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 441:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 441:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 441:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 442:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 442:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

442 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 442:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 442:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 442:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 442:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 442:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 442:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 443:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 443:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

443 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 443:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 443:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 443:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 443:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 443:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 443:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 444:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 444:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

444 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 444:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 444:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 444:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 444:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 444:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 444:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 445:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 445:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

445 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 445:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 445:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 445:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 445:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 446:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 446:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

446 12(CODE) method setTokenizer(tokenizer)
    'method'(IDENTIFIER) 'setTokenizer'(IDENTIFIER) '('(LITERAL) 'tokenizer'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 446:20 [1] 'setTokenizer'(IDENTIFIER)
>>>ADVANCE 446:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 446:33 [3] 'tokenizer'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'tokenizer'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER tokenizer
>>>ADVANCE 446:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 447:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 447:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

447 12(CODE) method setDocument(doc)
    'method'(IDENTIFIER) 'setDocument'(IDENTIFIER) '('(LITERAL) 'doc'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 447:20 [1] 'setDocument'(IDENTIFIER)
>>>ADVANCE 447:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 447:32 [3] 'doc'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'doc'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER doc
>>>ADVANCE 447:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 448:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 448:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

448 12(CODE) method fireUpdateEvent(firstRow, lastRow)
    'method'(IDENTIFIER) 'fireUpdateEvent'(IDENTIFIER) '('(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 448:20 [1] 'fireUpdateEvent'(IDENTIFIER)
>>>ADVANCE 448:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 448:36 [3] 'firstRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 448:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 448:46 [5] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 448:53 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 449:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 449:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

449 12(CODE) method start(startRow)
    'method'(IDENTIFIER) 'start'(IDENTIFIER) '('(LITERAL) 'startRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 449:20 [1] 'start'(IDENTIFIER)
>>>ADVANCE 449:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 449:26 [3] 'startRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'startRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startRow
>>>ADVANCE 449:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 450:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 450:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

450 12(CODE) method $updateOnChange(delta)
    'method'(IDENTIFIER) '$updateOnChange'(IDENTIFIER) '('(LITERAL) 'delta'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 450:20 [1] '$updateOnChange'(IDENTIFIER)
>>>ADVANCE 450:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 450:36 [3] 'delta'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'delta'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER delta
>>>ADVANCE 450:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 451:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 451:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

451 12(CODE) method stop()
    'method'(IDENTIFIER) 'stop'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 451:20 [1] 'stop'(IDENTIFIER)
>>>ADVANCE 451:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 451:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 452:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 452:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

452 12(CODE) method getTokens(row)
    'method'(IDENTIFIER) 'getTokens'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 452:20 [1] 'getTokens'(IDENTIFIER)
>>>ADVANCE 452:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 452:30 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 452:33 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 453:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 453:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

453 12(CODE) method getState(row)
    'method'(IDENTIFIER) 'getState'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 453:20 [1] 'getState'(IDENTIFIER)
>>>ADVANCE 453:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 453:29 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 453:32 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 454:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 454:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

454 12(CODE) method $tokenizeRow(row)
    'method'(IDENTIFIER) '$tokenizeRow'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 454:20 [1] '$tokenizeRow'(IDENTIFIER)
>>>ADVANCE 454:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 454:33 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 454:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 457:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 457:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

457 8(CODE) class Mode
    'class'(IDENTIFIER) 'Mode'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 457:15 [1] 'Mode'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Mode
>>>ADVANCE 458:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 458:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Mode parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

458 12(CODE) constructor new Mode ()
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Mode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 458:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 458:29 [2] 'Mode'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Mode
>>>ADVANCE 458:34 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 458:35 [4] ')'(LITERAL)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 460:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 460:13 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'properties'(IDENTIFIER)

460 12(CODE) properties
    'properties'(IDENTIFIER)

                    Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                      PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 461:0 [-1] ' '(NEWLINE)
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 461:17 [0] 'lineCommentStart'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'lineCommentStart'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lineCommentStart
>>>ADVANCE 461:33 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 461:34 [2] 'string'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 463:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 463:17 [0] 'blockComment'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'blockComment'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER blockComment
>>>ADVANCE 463:29 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 464:0 [-1] ' '(NEWLINE)
                        VariableDecl TRY FreeObjectLiteral on ' '(NEWLINE)
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 464:21 [0] 'start'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:blockComment parentIndent:16, blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'start'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER start
>>>ADVANCE 464:26 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 464:27 [2] 'string'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 465:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 465:21 [0] 'end'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'end'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER end
>>>ADVANCE 465:24 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 465:25 [2] 'string'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 466:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 466:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:20 parentIndent:16
END freeFormMode [FreeObjectLiteral] blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                        Parsed OK!-> FreeObjectLiteral
                      Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [PropertiesDeclaration] blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                    Parsed OK!-> PropertiesDeclaration
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

466 12(CODE) method getNextLineIndent(state, line, tab)
    'method'(IDENTIFIER) 'getNextLineIndent'(IDENTIFIER) '('(LITERAL) 'state'(IDENTIFIER) ','(LITERAL) 'line'(IDENTIFIER) ','(LITERAL) 'tab'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 466:20 [1] 'getNextLineIndent'(IDENTIFIER)
>>>ADVANCE 466:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 466:38 [3] 'state'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'state'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER state
>>>ADVANCE 466:43 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 466:45 [5] 'line'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'line'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER line
>>>ADVANCE 466:49 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 466:51 [7] 'tab'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'tab'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER tab
>>>ADVANCE 466:54 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 467:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 467:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

467 12(CODE) method checkOutdent(state, line, input)
    'method'(IDENTIFIER) 'checkOutdent'(IDENTIFIER) '('(LITERAL) 'state'(IDENTIFIER) ','(LITERAL) 'line'(IDENTIFIER) ','(LITERAL) 'input'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 467:20 [1] 'checkOutdent'(IDENTIFIER)
>>>ADVANCE 467:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 467:33 [3] 'state'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'state'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER state
>>>ADVANCE 467:38 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 467:40 [5] 'line'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'line'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER line
>>>ADVANCE 467:44 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 467:46 [7] 'input'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'input'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER input
>>>ADVANCE 467:51 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 468:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 468:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

468 12(CODE) method autoOutdent(state, doc, row)
    'method'(IDENTIFIER) 'autoOutdent'(IDENTIFIER) '('(LITERAL) 'state'(IDENTIFIER) ','(LITERAL) 'doc'(IDENTIFIER) ','(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 468:20 [1] 'autoOutdent'(IDENTIFIER)
>>>ADVANCE 468:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 468:32 [3] 'state'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'state'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER state
>>>ADVANCE 468:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 468:39 [5] 'doc'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'doc'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER doc
>>>ADVANCE 468:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 468:44 [7] 'row'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 468:47 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 469:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 469:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

469 12(CODE) method createWorker(session)
    'method'(IDENTIFIER) 'createWorker'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 469:20 [1] 'createWorker'(IDENTIFIER)
>>>ADVANCE 469:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 469:33 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 469:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 472:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 472:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

472 8(CODE) class KeyBinding
    'class'(IDENTIFIER) 'KeyBinding'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 472:15 [1] 'KeyBinding'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER KeyBinding
>>>ADVANCE 473:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 473:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:KeyBinding parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

473 12(CODE) constructor new KeyBinding (editor)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'KeyBinding'(IDENTIFIER) '('(LITERAL) 'editor'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 473:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 473:29 [2] 'KeyBinding'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER KeyBinding
>>>ADVANCE 473:40 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 473:41 [4] 'editor'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'editor'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER editor
>>>ADVANCE 473:47 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 475:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 475:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

475 12(CODE) method setDefaultHandler(kb)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'kb'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 475:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 475:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 475:38 [3] 'kb'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'kb'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER kb
>>>ADVANCE 475:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 476:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 476:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

476 12(CODE) method setKeyboardHandler(kb)
    'method'(IDENTIFIER) 'setKeyboardHandler'(IDENTIFIER) '('(LITERAL) 'kb'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 476:20 [1] 'setKeyboardHandler'(IDENTIFIER)
>>>ADVANCE 476:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 476:39 [3] 'kb'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'kb'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER kb
>>>ADVANCE 476:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 477:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 477:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

477 12(CODE) method addKeyboardHandler(kb, pos)
    'method'(IDENTIFIER) 'addKeyboardHandler'(IDENTIFIER) '('(LITERAL) 'kb'(IDENTIFIER) ','(LITERAL) 'pos'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 477:20 [1] 'addKeyboardHandler'(IDENTIFIER)
>>>ADVANCE 477:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 477:39 [3] 'kb'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'kb'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER kb
>>>ADVANCE 477:41 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 477:43 [5] 'pos'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'pos'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER pos
>>>ADVANCE 477:46 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 478:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 478:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

478 12(CODE) method removeKeyboardHandler(kb)
    'method'(IDENTIFIER) 'removeKeyboardHandler'(IDENTIFIER) '('(LITERAL) 'kb'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 478:20 [1] 'removeKeyboardHandler'(IDENTIFIER)
>>>ADVANCE 478:41 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 478:42 [3] 'kb'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'kb'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER kb
>>>ADVANCE 478:44 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 479:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 479:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

479 12(CODE) method getKeyboardHandler()
    'method'(IDENTIFIER) 'getKeyboardHandler'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 479:20 [1] 'getKeyboardHandler'(IDENTIFIER)
>>>ADVANCE 479:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 479:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 480:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 480:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

480 12(CODE) method $callKeyboardHandlers(hashId, keyString, keyCode, e)
    'method'(IDENTIFIER) '$callKeyboardHandlers'(IDENTIFIER) '('(LITERAL) 'hashId'(IDENTIFIER) ','(LITERAL) 'keyString'(IDENTIFIER) ','(LITERAL) 'keyCode'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 480:20 [1] '$callKeyboardHandlers'(IDENTIFIER)
>>>ADVANCE 480:41 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 480:42 [3] 'hashId'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'hashId'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER hashId
>>>ADVANCE 480:48 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 480:50 [5] 'keyString'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'keyString'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER keyString
>>>ADVANCE 480:59 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 480:61 [7] 'keyCode'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'keyCode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER keyCode
>>>ADVANCE 480:68 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 480:70 [9] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 480:71 [10] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 481:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 481:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

481 12(CODE) method onCommandKey(e, hashId, keyCode)
    'method'(IDENTIFIER) 'onCommandKey'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ','(LITERAL) 'hashId'(IDENTIFIER) ','(LITERAL) 'keyCode'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 481:20 [1] 'onCommandKey'(IDENTIFIER)
>>>ADVANCE 481:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 481:33 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 481:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 481:36 [5] 'hashId'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'hashId'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER hashId
>>>ADVANCE 481:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 481:44 [7] 'keyCode'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'keyCode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER keyCode
>>>ADVANCE 481:51 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 482:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 482:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

482 12(CODE) method onTextInput(text)
    'method'(IDENTIFIER) 'onTextInput'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 482:20 [1] 'onTextInput'(IDENTIFIER)
>>>ADVANCE 482:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 482:32 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 482:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 485:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 485:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

485 8(CODE) class RangeList
    'class'(IDENTIFIER) 'RangeList'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 485:15 [1] 'RangeList'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER RangeList
>>>ADVANCE 486:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 486:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:RangeList parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

486 12(CODE) constructor new RangeList ()
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'RangeList'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 486:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 486:29 [2] 'RangeList'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER RangeList
>>>ADVANCE 486:39 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 486:40 [4] ')'(LITERAL)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 488:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 488:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

488 12(CODE) method comparePoints(p1, p2)
    'method'(IDENTIFIER) 'comparePoints'(IDENTIFIER) '('(LITERAL) 'p1'(IDENTIFIER) ','(LITERAL) 'p2'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 488:20 [1] 'comparePoints'(IDENTIFIER)
>>>ADVANCE 488:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 488:34 [3] 'p1'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'p1'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER p1
>>>ADVANCE 488:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 488:38 [5] 'p2'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'p2'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER p2
>>>ADVANCE 488:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 489:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 489:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

489 12(CODE) method pointIndex(pos, excludeEdges, startIndex)
    'method'(IDENTIFIER) 'pointIndex'(IDENTIFIER) '('(LITERAL) 'pos'(IDENTIFIER) ','(LITERAL) 'excludeEdges'(IDENTIFIER) ','(LITERAL) 'startIndex'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 489:20 [1] 'pointIndex'(IDENTIFIER)
>>>ADVANCE 489:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 489:31 [3] 'pos'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'pos'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER pos
>>>ADVANCE 489:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 489:36 [5] 'excludeEdges'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'excludeEdges'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER excludeEdges
>>>ADVANCE 489:48 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 489:50 [7] 'startIndex'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startIndex'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startIndex
>>>ADVANCE 489:60 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 490:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 490:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

490 12(CODE) method add(range)
    'method'(IDENTIFIER) 'add'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 490:20 [1] 'add'(IDENTIFIER)
>>>ADVANCE 490:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 490:24 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 490:29 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 491:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 491:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

491 12(CODE) method addList(list)
    'method'(IDENTIFIER) 'addList'(IDENTIFIER) '('(LITERAL) 'list'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 491:20 [1] 'addList'(IDENTIFIER)
>>>ADVANCE 491:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 491:28 [3] 'list'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'list'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER list
>>>ADVANCE 491:32 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 492:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 492:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

492 12(CODE) method substractPoint(pos)
    'method'(IDENTIFIER) 'substractPoint'(IDENTIFIER) '('(LITERAL) 'pos'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 492:20 [1] 'substractPoint'(IDENTIFIER)
>>>ADVANCE 492:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 492:35 [3] 'pos'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'pos'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER pos
>>>ADVANCE 492:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 493:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 493:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

493 12(CODE) method merge()
    'method'(IDENTIFIER) 'merge'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 493:20 [1] 'merge'(IDENTIFIER)
>>>ADVANCE 493:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 493:26 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 494:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 494:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

494 12(CODE) method contains(row, column)
    'method'(IDENTIFIER) 'contains'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 494:20 [1] 'contains'(IDENTIFIER)
>>>ADVANCE 494:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 494:29 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 494:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 494:34 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 494:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 495:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 495:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

495 12(CODE) method containsPoint(pos)
    'method'(IDENTIFIER) 'containsPoint'(IDENTIFIER) '('(LITERAL) 'pos'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 495:20 [1] 'containsPoint'(IDENTIFIER)
>>>ADVANCE 495:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 495:34 [3] 'pos'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'pos'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER pos
>>>ADVANCE 495:37 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 496:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 496:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

496 12(CODE) method rangeAtPoint(pos)
    'method'(IDENTIFIER) 'rangeAtPoint'(IDENTIFIER) '('(LITERAL) 'pos'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 496:20 [1] 'rangeAtPoint'(IDENTIFIER)
>>>ADVANCE 496:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 496:33 [3] 'pos'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'pos'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER pos
>>>ADVANCE 496:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 497:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 497:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

497 12(CODE) method clipRows(startRow, endRow)
    'method'(IDENTIFIER) 'clipRows'(IDENTIFIER) '('(LITERAL) 'startRow'(IDENTIFIER) ','(LITERAL) 'endRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 497:20 [1] 'clipRows'(IDENTIFIER)
>>>ADVANCE 497:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 497:29 [3] 'startRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'startRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startRow
>>>ADVANCE 497:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 497:39 [5] 'endRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'endRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER endRow
>>>ADVANCE 497:45 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 498:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 498:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

498 12(CODE) method removeAll()
    'method'(IDENTIFIER) 'removeAll'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 498:20 [1] 'removeAll'(IDENTIFIER)
>>>ADVANCE 498:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 498:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 499:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 499:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

499 12(CODE) method attach(session)
    'method'(IDENTIFIER) 'attach'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 499:20 [1] 'attach'(IDENTIFIER)
>>>ADVANCE 499:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 499:27 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 499:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 500:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 500:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

500 12(CODE) method detach()
    'method'(IDENTIFIER) 'detach'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 500:20 [1] 'detach'(IDENTIFIER)
>>>ADVANCE 500:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 500:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 501:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 501:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

501 12(CODE) method $onChange(e)
    'method'(IDENTIFIER) '$onChange'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 501:20 [1] '$onChange'(IDENTIFIER)
>>>ADVANCE 501:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 501:30 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 501:31 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 504:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 504:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

504 8(CODE) class TextHighlightRules
    'class'(IDENTIFIER) 'TextHighlightRules'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 504:15 [1] 'TextHighlightRules'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER TextHighlightRules
>>>ADVANCE 505:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 505:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:TextHighlightRules parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

505 12(CODE) constructor new TextHighlightRules ()
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'TextHighlightRules'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 505:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 505:29 [2] 'TextHighlightRules'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER TextHighlightRules
>>>ADVANCE 505:48 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 505:49 [4] ')'(LITERAL)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 507:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 507:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

507 12(CODE) method addRules(rules, prefix)
    'method'(IDENTIFIER) 'addRules'(IDENTIFIER) '('(LITERAL) 'rules'(IDENTIFIER) ','(LITERAL) 'prefix'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 507:20 [1] 'addRules'(IDENTIFIER)
>>>ADVANCE 507:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 507:29 [3] 'rules'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'rules'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER rules
>>>ADVANCE 507:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 507:36 [5] 'prefix'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'prefix'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER prefix
>>>ADVANCE 507:42 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 508:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 508:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

508 12(CODE) method getRules()
    'method'(IDENTIFIER) 'getRules'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 508:20 [1] 'getRules'(IDENTIFIER)
>>>ADVANCE 508:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 508:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 509:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 509:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

509 12(CODE) method embedRules(HighlightRules, prefix, escapeRules, states, append)
    'method'(IDENTIFIER) 'embedRules'(IDENTIFIER) '('(LITERAL) 'HighlightRules'(IDENTIFIER) ','(LITERAL) 'prefix'(IDENTIFIER) ','(LITERAL) 'escapeRules'(IDENTIFIER) ','(LITERAL) 'states'(IDENTIFIER) ','(LITERAL) 'append'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 509:20 [1] 'embedRules'(IDENTIFIER)
>>>ADVANCE 509:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 509:31 [3] 'HighlightRules'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'HighlightRules'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER HighlightRules
>>>ADVANCE 509:45 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 509:47 [5] 'prefix'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'prefix'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER prefix
>>>ADVANCE 509:53 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 509:55 [7] 'escapeRules'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'escapeRules'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER escapeRules
>>>ADVANCE 509:66 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 509:68 [9] 'states'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'states'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER states
>>>ADVANCE 509:74 [10] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 509:76 [11] 'append'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'append'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER append
>>>ADVANCE 509:82 [12] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 510:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 510:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

510 12(CODE) method getEmbeds()
    'method'(IDENTIFIER) 'getEmbeds'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 510:20 [1] 'getEmbeds'(IDENTIFIER)
>>>ADVANCE 510:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 510:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 511:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 511:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

511 12(CODE) method normalizeRules()
    'method'(IDENTIFIER) 'normalizeRules'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 511:20 [1] 'normalizeRules'(IDENTIFIER)
>>>ADVANCE 511:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 511:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 512:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 512:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

512 12(CODE) method createKeywordMapper(map, defaultToken, ignoreCase, splitChar)
    'method'(IDENTIFIER) 'createKeywordMapper'(IDENTIFIER) '('(LITERAL) 'map'(IDENTIFIER) ','(LITERAL) 'defaultToken'(IDENTIFIER) ','(LITERAL) 'ignoreCase'(IDENTIFIER) ','(LITERAL) 'splitChar'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 512:20 [1] 'createKeywordMapper'(IDENTIFIER)
>>>ADVANCE 512:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 512:40 [3] 'map'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'map'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER map
>>>ADVANCE 512:43 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 512:45 [5] 'defaultToken'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'defaultToken'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER defaultToken
>>>ADVANCE 512:57 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 512:59 [7] 'ignoreCase'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'ignoreCase'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER ignoreCase
>>>ADVANCE 512:69 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 512:71 [9] 'splitChar'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'splitChar'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER splitChar
>>>ADVANCE 512:80 [10] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 513:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 513:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

513 12(CODE) method getKeywords()
    'method'(IDENTIFIER) 'getKeywords'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 513:20 [1] 'getKeywords'(IDENTIFIER)
>>>ADVANCE 513:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 513:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 516:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 516:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

516 8(CODE) class Marker
    'class'(IDENTIFIER) 'Marker'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 516:15 [1] 'Marker'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Marker
>>>ADVANCE 517:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 517:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Marker parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

517 12(CODE) constructor new Marker (parentEl)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Marker'(IDENTIFIER) '('(LITERAL) 'parentEl'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 517:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 517:29 [2] 'Marker'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Marker
>>>ADVANCE 517:36 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 517:37 [4] 'parentEl'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'parentEl'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER parentEl
>>>ADVANCE 517:45 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 519:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 519:13 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'properties'(IDENTIFIER)

519 12(CODE) properties
    'properties'(IDENTIFIER)

                    Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                      PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 520:0 [-1] ' '(NEWLINE)
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 520:17 [0] '$padding'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$padding'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $padding
>>>ADVANCE 520:25 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 520:26 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 521:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 521:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [PropertiesDeclaration] blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                    Parsed OK!-> PropertiesDeclaration
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

521 12(CODE) method setPadding(padding)
    'method'(IDENTIFIER) 'setPadding'(IDENTIFIER) '('(LITERAL) 'padding'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 521:20 [1] 'setPadding'(IDENTIFIER)
>>>ADVANCE 521:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 521:31 [3] 'padding'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'padding'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER padding
>>>ADVANCE 521:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 522:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 522:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

522 12(CODE) method setSession(session)
    'method'(IDENTIFIER) 'setSession'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 522:20 [1] 'setSession'(IDENTIFIER)
>>>ADVANCE 522:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 522:31 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 522:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 523:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 523:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

523 12(CODE) method setMarkers(markers)
    'method'(IDENTIFIER) 'setMarkers'(IDENTIFIER) '('(LITERAL) 'markers'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 523:20 [1] 'setMarkers'(IDENTIFIER)
>>>ADVANCE 523:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 523:31 [3] 'markers'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'markers'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER markers
>>>ADVANCE 523:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 524:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 524:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

524 12(CODE) method update(config)
    'method'(IDENTIFIER) 'update'(IDENTIFIER) '('(LITERAL) 'config'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 524:20 [1] 'update'(IDENTIFIER)
>>>ADVANCE 524:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 524:27 [3] 'config'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'config'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER config
>>>ADVANCE 524:33 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 525:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 525:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

525 12(CODE) method $getTop(row, layerConfig)
    'method'(IDENTIFIER) '$getTop'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'layerConfig'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 525:20 [1] '$getTop'(IDENTIFIER)
>>>ADVANCE 525:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 525:28 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 525:31 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 525:33 [5] 'layerConfig'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'layerConfig'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER layerConfig
>>>ADVANCE 525:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 526:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 526:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

526 12(CODE) method drawTextMarker(stringBuilder, range, clazz, layerConfig, extraStyle)
    'method'(IDENTIFIER) 'drawTextMarker'(IDENTIFIER) '('(LITERAL) 'stringBuilder'(IDENTIFIER) ','(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'clazz'(IDENTIFIER) ','(LITERAL) 'layerConfig'(IDENTIFIER) ','(LITERAL) 'extraStyle'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 526:20 [1] 'drawTextMarker'(IDENTIFIER)
>>>ADVANCE 526:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 526:35 [3] 'stringBuilder'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'stringBuilder'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER stringBuilder
>>>ADVANCE 526:48 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 526:50 [5] 'range'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 526:55 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 526:57 [7] 'clazz'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'clazz'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER clazz
>>>ADVANCE 526:62 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 526:64 [9] 'layerConfig'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'layerConfig'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER layerConfig
>>>ADVANCE 526:75 [10] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 526:77 [11] 'extraStyle'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'extraStyle'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER extraStyle
>>>ADVANCE 526:87 [12] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 527:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 527:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

527 12(CODE) method drawMultiLineMarker(stringBuilder, range, clazz, config, extraStyle)
    'method'(IDENTIFIER) 'drawMultiLineMarker'(IDENTIFIER) '('(LITERAL) 'stringBuilder'(IDENTIFIER) ','(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'clazz'(IDENTIFIER) ','(LITERAL) 'config'(IDENTIFIER) ','(LITERAL) 'extraStyle'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 527:20 [1] 'drawMultiLineMarker'(IDENTIFIER)
>>>ADVANCE 527:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 527:40 [3] 'stringBuilder'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'stringBuilder'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER stringBuilder
>>>ADVANCE 527:53 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 527:55 [5] 'range'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 527:60 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 527:62 [7] 'clazz'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'clazz'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER clazz
>>>ADVANCE 527:67 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 527:69 [9] 'config'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'config'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER config
>>>ADVANCE 527:75 [10] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 527:77 [11] 'extraStyle'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'extraStyle'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER extraStyle
>>>ADVANCE 527:87 [12] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 528:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 528:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

528 12(CODE) method drawSingleLineMarker(stringBuilder, range, clazz, config, extraLength, extraStyle)
    'method'(IDENTIFIER) 'drawSingleLineMarker'(IDENTIFIER) '('(LITERAL) 'stringBuilder'(IDENTIFIER) ','(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'clazz'(IDENTIFIER) ','(LITERAL) 'config'(IDENTIFIER) ','(LITERAL) 'extraLength'(IDENTIFIER) ','(LITERAL) 'extraStyle'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 528:20 [1] 'drawSingleLineMarker'(IDENTIFIER)
>>>ADVANCE 528:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 528:41 [3] 'stringBuilder'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'stringBuilder'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER stringBuilder
>>>ADVANCE 528:54 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 528:56 [5] 'range'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 528:61 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 528:63 [7] 'clazz'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'clazz'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER clazz
>>>ADVANCE 528:68 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 528:70 [9] 'config'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'config'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER config
>>>ADVANCE 528:76 [10] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 528:78 [11] 'extraLength'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'extraLength'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER extraLength
>>>ADVANCE 528:89 [12] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 528:91 [13] 'extraStyle'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'extraStyle'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER extraStyle
>>>ADVANCE 528:101 [14] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 529:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 529:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

529 12(CODE) method drawFullLineMarker(stringBuilder, range, clazz, config, extraStyle)
    'method'(IDENTIFIER) 'drawFullLineMarker'(IDENTIFIER) '('(LITERAL) 'stringBuilder'(IDENTIFIER) ','(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'clazz'(IDENTIFIER) ','(LITERAL) 'config'(IDENTIFIER) ','(LITERAL) 'extraStyle'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 529:20 [1] 'drawFullLineMarker'(IDENTIFIER)
>>>ADVANCE 529:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 529:39 [3] 'stringBuilder'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'stringBuilder'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER stringBuilder
>>>ADVANCE 529:52 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 529:54 [5] 'range'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 529:59 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 529:61 [7] 'clazz'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'clazz'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER clazz
>>>ADVANCE 529:66 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 529:68 [9] 'config'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'config'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER config
>>>ADVANCE 529:74 [10] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 529:76 [11] 'extraStyle'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'extraStyle'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER extraStyle
>>>ADVANCE 529:86 [12] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 530:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 530:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

530 12(CODE) method drawScreenLineMarker(stringBuilder, range, clazz, config, extraStyle)
    'method'(IDENTIFIER) 'drawScreenLineMarker'(IDENTIFIER) '('(LITERAL) 'stringBuilder'(IDENTIFIER) ','(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'clazz'(IDENTIFIER) ','(LITERAL) 'config'(IDENTIFIER) ','(LITERAL) 'extraStyle'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 530:20 [1] 'drawScreenLineMarker'(IDENTIFIER)
>>>ADVANCE 530:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 530:41 [3] 'stringBuilder'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'stringBuilder'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER stringBuilder
>>>ADVANCE 530:54 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 530:56 [5] 'range'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 530:61 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 530:63 [7] 'clazz'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'clazz'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER clazz
>>>ADVANCE 530:68 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 530:70 [9] 'config'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'config'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER config
>>>ADVANCE 530:76 [10] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 530:78 [11] 'extraStyle'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'extraStyle'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER extraStyle
>>>ADVANCE 530:88 [12] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 533:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 533:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

533 8(CODE) class Text
    'class'(IDENTIFIER) 'Text'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 533:15 [1] 'Text'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Text
>>>ADVANCE 534:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 534:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Text parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

534 12(CODE) constructor new Text (parentEl)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Text'(IDENTIFIER) '('(LITERAL) 'parentEl'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 534:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 534:29 [2] 'Text'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Text
>>>ADVANCE 534:34 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 534:35 [4] 'parentEl'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'parentEl'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER parentEl
>>>ADVANCE 534:43 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 536:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 536:13 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'properties'(IDENTIFIER)

536 12(CODE) properties
    'properties'(IDENTIFIER)

                    Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                      PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 537:0 [-1] ' '(NEWLINE)
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 537:17 [0] 'EOF_CHAR'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'EOF_CHAR'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER EOF_CHAR
>>>ADVANCE 537:25 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 537:26 [2] 'string'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 538:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 538:17 [0] 'EOL_CHAR'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'EOL_CHAR'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER EOL_CHAR
>>>ADVANCE 538:25 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 538:26 [2] 'string'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 539:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 539:17 [0] 'TAB_CHAR'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'TAB_CHAR'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER TAB_CHAR
>>>ADVANCE 539:25 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 539:26 [2] 'string'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 540:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 540:17 [0] 'SPACE_CHAR'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'SPACE_CHAR'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER SPACE_CHAR
>>>ADVANCE 540:27 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 540:28 [2] 'string'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 541:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 541:17 [0] '$padding'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$padding'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $padding
>>>ADVANCE 541:25 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 541:26 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 543:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 543:17 [0] '$fontStyles'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$fontStyles'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $fontStyles
>>>ADVANCE 543:28 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 544:0 [-1] ' '(NEWLINE)
                        VariableDecl TRY FreeObjectLiteral on ' '(NEWLINE)
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 544:21 [0] 'fontFamily'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:$fontStyles parentIndent:16, blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'fontFamily'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER fontFamily
>>>ADVANCE 544:31 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 544:32 [2] 'number'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 545:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 545:21 [0] 'fontSize'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'fontSize'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER fontSize
>>>ADVANCE 545:29 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 545:30 [2] 'number'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 546:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 546:21 [0] 'fontWeight'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'fontWeight'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER fontWeight
>>>ADVANCE 546:31 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 546:32 [2] 'number'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 547:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 547:21 [0] 'fontStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'fontStyle'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER fontStyle
>>>ADVANCE 547:30 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 547:31 [2] 'number'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 548:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 548:21 [0] 'lineHeight'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'lineHeight'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER lineHeight
>>>ADVANCE 548:31 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 548:32 [2] 'number'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 550:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 550:17 [0] 'showInvisibles'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:20 parentIndent:16
END freeFormMode [FreeObjectLiteral] blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                        Parsed OK!-> FreeObjectLiteral
                      Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'showInvisibles'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER showInvisibles
>>>ADVANCE 550:31 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 550:32 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 551:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 551:17 [0] 'displayIndentGuides'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'displayIndentGuides'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER displayIndentGuides
>>>ADVANCE 551:36 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 551:37 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 553:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 553:17 [0] '$tabStrings'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$tabStrings'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $tabStrings
>>>ADVANCE 553:28 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 554:0 [-1] ' '(NEWLINE)
                        VariableDecl TRY FreeObjectLiteral on ' '(NEWLINE)
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 554:21 [0] 'length'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:$tabStrings parentIndent:16, blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'length'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER length
>>>ADVANCE 554:27 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 554:28 [2] 'number'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 556:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 556:17 [0] '$textToken'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:20 parentIndent:16
END freeFormMode [FreeObjectLiteral] blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                        Parsed OK!-> FreeObjectLiteral
                      Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$textToken'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $textToken
>>>ADVANCE 556:27 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 557:0 [-1] ' '(NEWLINE)
                        VariableDecl TRY FreeObjectLiteral on ' '(NEWLINE)
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 557:21 [0] 'text'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:$textToken parentIndent:16, blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'text'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER text
>>>ADVANCE 557:25 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 557:26 [2] 'boolean'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 558:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 558:21 [0] 'rparen'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'rparen'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER rparen
>>>ADVANCE 558:27 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 558:28 [2] 'boolean'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 559:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 559:21 [0] 'lparen'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'lparen'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER lparen
>>>ADVANCE 559:27 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 559:28 [2] 'boolean'(IDENTIFIER)
                            NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 560:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> VariableRef
                          Parsed OK!-> NameValuePair
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 560:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:20 parentIndent:16
END freeFormMode [FreeObjectLiteral] blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                        Parsed OK!-> FreeObjectLiteral
                      Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [PropertiesDeclaration] blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                    Parsed OK!-> PropertiesDeclaration
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

560 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 560:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 560:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 560:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 560:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 560:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 560:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 561:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 561:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

561 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 561:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 561:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 561:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 561:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 561:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 561:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 562:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 562:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

562 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 562:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 562:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 562:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 562:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 562:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 562:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 563:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 563:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

563 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 563:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 563:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 563:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 563:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 563:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 563:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 564:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 564:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

564 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 564:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 564:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 564:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 564:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 564:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 564:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 565:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 565:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

565 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 565:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 565:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 565:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 565:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 565:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 565:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 566:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 566:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

566 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 566:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 566:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 566:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 566:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 566:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 566:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 566:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 566:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 567:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 567:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

567 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 567:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 567:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 567:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 567:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 567:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 567:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 567:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 567:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 568:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 568:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

568 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 568:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 568:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 568:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 568:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 568:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 568:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 569:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 569:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

569 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 569:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 569:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 569:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 569:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 569:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 569:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 570:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 570:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

570 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 570:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 570:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 570:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 570:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 570:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 570:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 571:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 571:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

571 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 571:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 571:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 571:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 571:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 572:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 572:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

572 12(CODE) method setPadding(padding)
    'method'(IDENTIFIER) 'setPadding'(IDENTIFIER) '('(LITERAL) 'padding'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 572:20 [1] 'setPadding'(IDENTIFIER)
>>>ADVANCE 572:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 572:31 [3] 'padding'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'padding'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER padding
>>>ADVANCE 572:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 573:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 573:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

573 12(CODE) method getLineHeight()
    'method'(IDENTIFIER) 'getLineHeight'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 573:20 [1] 'getLineHeight'(IDENTIFIER)
>>>ADVANCE 573:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 573:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 574:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 574:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

574 12(CODE) method getCharacterWidth()
    'method'(IDENTIFIER) 'getCharacterWidth'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 574:20 [1] 'getCharacterWidth'(IDENTIFIER)
>>>ADVANCE 574:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 574:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 575:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 575:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

575 12(CODE) method checkForSizeChanges()
    'method'(IDENTIFIER) 'checkForSizeChanges'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 575:20 [1] 'checkForSizeChanges'(IDENTIFIER)
>>>ADVANCE 575:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 575:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 576:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 576:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

576 12(CODE) method $pollSizeChanges()
    'method'(IDENTIFIER) '$pollSizeChanges'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 576:20 [1] '$pollSizeChanges'(IDENTIFIER)
>>>ADVANCE 576:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 576:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 577:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 577:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

577 12(CODE) method $measureSizes()
    'method'(IDENTIFIER) '$measureSizes'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 577:20 [1] '$measureSizes'(IDENTIFIER)
>>>ADVANCE 577:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 577:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 578:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 578:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

578 12(CODE) method setSession(session)
    'method'(IDENTIFIER) 'setSession'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 578:20 [1] 'setSession'(IDENTIFIER)
>>>ADVANCE 578:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 578:31 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 578:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 579:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 579:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

579 12(CODE) method setShowInvisibles(showInvisibles)
    'method'(IDENTIFIER) 'setShowInvisibles'(IDENTIFIER) '('(LITERAL) 'showInvisibles'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 579:20 [1] 'setShowInvisibles'(IDENTIFIER)
>>>ADVANCE 579:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 579:38 [3] 'showInvisibles'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'showInvisibles'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER showInvisibles
>>>ADVANCE 579:52 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 580:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 580:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

580 12(CODE) method setDisplayIndentGuides(display)
    'method'(IDENTIFIER) 'setDisplayIndentGuides'(IDENTIFIER) '('(LITERAL) 'display'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 580:20 [1] 'setDisplayIndentGuides'(IDENTIFIER)
>>>ADVANCE 580:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 580:43 [3] 'display'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'display'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER display
>>>ADVANCE 580:50 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 581:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 581:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

581 12(CODE) method $computeTabString()
    'method'(IDENTIFIER) '$computeTabString'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 581:20 [1] '$computeTabString'(IDENTIFIER)
>>>ADVANCE 581:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 581:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 582:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 582:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

582 12(CODE) method onChangeTabSize()
    'method'(IDENTIFIER) 'onChangeTabSize'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 582:20 [1] 'onChangeTabSize'(IDENTIFIER)
>>>ADVANCE 582:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 582:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 583:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 583:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

583 12(CODE) method updateLines(config, firstRow, lastRow)
    'method'(IDENTIFIER) 'updateLines'(IDENTIFIER) '('(LITERAL) 'config'(IDENTIFIER) ','(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 583:20 [1] 'updateLines'(IDENTIFIER)
>>>ADVANCE 583:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 583:32 [3] 'config'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'config'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER config
>>>ADVANCE 583:38 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 583:40 [5] 'firstRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 583:48 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 583:50 [7] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 583:57 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 584:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 584:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

584 12(CODE) method scrollLines(config)
    'method'(IDENTIFIER) 'scrollLines'(IDENTIFIER) '('(LITERAL) 'config'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 584:20 [1] 'scrollLines'(IDENTIFIER)
>>>ADVANCE 584:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 584:32 [3] 'config'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'config'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER config
>>>ADVANCE 584:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 585:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 585:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

585 12(CODE) method $renderLinesFragment(config, firstRow, lastRow)
    'method'(IDENTIFIER) '$renderLinesFragment'(IDENTIFIER) '('(LITERAL) 'config'(IDENTIFIER) ','(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 585:20 [1] '$renderLinesFragment'(IDENTIFIER)
>>>ADVANCE 585:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 585:41 [3] 'config'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'config'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER config
>>>ADVANCE 585:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 585:49 [5] 'firstRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 585:57 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 585:59 [7] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 585:66 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 586:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 586:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

586 12(CODE) method update(config)
    'method'(IDENTIFIER) 'update'(IDENTIFIER) '('(LITERAL) 'config'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 586:20 [1] 'update'(IDENTIFIER)
>>>ADVANCE 586:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 586:27 [3] 'config'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'config'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER config
>>>ADVANCE 586:33 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 587:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 587:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

587 12(CODE) method $renderToken(stringBuilder, screenColumn, token, value)
    'method'(IDENTIFIER) '$renderToken'(IDENTIFIER) '('(LITERAL) 'stringBuilder'(IDENTIFIER) ','(LITERAL) 'screenColumn'(IDENTIFIER) ','(LITERAL) 'token'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 587:20 [1] '$renderToken'(IDENTIFIER)
>>>ADVANCE 587:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 587:33 [3] 'stringBuilder'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'stringBuilder'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER stringBuilder
>>>ADVANCE 587:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 587:48 [5] 'screenColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'screenColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER screenColumn
>>>ADVANCE 587:60 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 587:62 [7] 'token'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'token'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER token
>>>ADVANCE 587:67 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 587:69 [9] 'value'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 587:74 [10] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 588:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 588:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

588 12(CODE) method renderIndentGuide(stringBuilder, value)
    'method'(IDENTIFIER) 'renderIndentGuide'(IDENTIFIER) '('(LITERAL) 'stringBuilder'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 588:20 [1] 'renderIndentGuide'(IDENTIFIER)
>>>ADVANCE 588:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 588:38 [3] 'stringBuilder'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'stringBuilder'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER stringBuilder
>>>ADVANCE 588:51 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 588:53 [5] 'value'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 588:58 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 589:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 589:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

589 12(CODE) method $renderWrappedLine(stringBuilder, tokens, splits, onlyContents)
    'method'(IDENTIFIER) '$renderWrappedLine'(IDENTIFIER) '('(LITERAL) 'stringBuilder'(IDENTIFIER) ','(LITERAL) 'tokens'(IDENTIFIER) ','(LITERAL) 'splits'(IDENTIFIER) ','(LITERAL) 'onlyContents'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 589:20 [1] '$renderWrappedLine'(IDENTIFIER)
>>>ADVANCE 589:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 589:39 [3] 'stringBuilder'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'stringBuilder'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER stringBuilder
>>>ADVANCE 589:52 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 589:54 [5] 'tokens'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'tokens'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER tokens
>>>ADVANCE 589:60 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 589:62 [7] 'splits'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'splits'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER splits
>>>ADVANCE 589:68 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 589:70 [9] 'onlyContents'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'onlyContents'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER onlyContents
>>>ADVANCE 589:82 [10] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 590:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 590:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

590 12(CODE) method $renderSimpleLine(stringBuilder, tokens)
    'method'(IDENTIFIER) '$renderSimpleLine'(IDENTIFIER) '('(LITERAL) 'stringBuilder'(IDENTIFIER) ','(LITERAL) 'tokens'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 590:20 [1] '$renderSimpleLine'(IDENTIFIER)
>>>ADVANCE 590:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 590:38 [3] 'stringBuilder'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'stringBuilder'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER stringBuilder
>>>ADVANCE 590:51 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 590:53 [5] 'tokens'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'tokens'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER tokens
>>>ADVANCE 590:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 591:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 591:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

591 12(CODE) method $renderLine(stringBuilder, row, onlyContents, foldLine)
    'method'(IDENTIFIER) '$renderLine'(IDENTIFIER) '('(LITERAL) 'stringBuilder'(IDENTIFIER) ','(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'onlyContents'(IDENTIFIER) ','(LITERAL) 'foldLine'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 591:20 [1] '$renderLine'(IDENTIFIER)
>>>ADVANCE 591:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 591:32 [3] 'stringBuilder'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'stringBuilder'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER stringBuilder
>>>ADVANCE 591:45 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 591:47 [5] 'row'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 591:50 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 591:52 [7] 'onlyContents'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'onlyContents'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER onlyContents
>>>ADVANCE 591:64 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 591:66 [9] 'foldLine'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'foldLine'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER foldLine
>>>ADVANCE 591:74 [10] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 592:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 592:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

592 12(CODE) method $getFoldLineTokens(row, foldLine)
    'method'(IDENTIFIER) '$getFoldLineTokens'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'foldLine'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 592:20 [1] '$getFoldLineTokens'(IDENTIFIER)
>>>ADVANCE 592:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 592:39 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 592:42 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 592:44 [5] 'foldLine'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'foldLine'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER foldLine
>>>ADVANCE 592:52 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 593:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 593:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

593 12(CODE) method $useLineGroups()
    'method'(IDENTIFIER) '$useLineGroups'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 593:20 [1] '$useLineGroups'(IDENTIFIER)
>>>ADVANCE 593:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 593:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 594:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 594:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

594 12(CODE) method destroy()
    'method'(IDENTIFIER) 'destroy'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 594:20 [1] 'destroy'(IDENTIFIER)
>>>ADVANCE 594:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 594:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 597:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 597:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

597 8(CODE) class Selection
    'class'(IDENTIFIER) 'Selection'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 597:15 [1] 'Selection'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Selection
>>>ADVANCE 598:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 598:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Selection parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

598 12(CODE) constructor new Selection (session)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Selection'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 598:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 598:29 [2] 'Selection'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Selection
>>>ADVANCE 598:39 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 598:40 [4] 'session'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 598:47 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 600:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 600:13 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'properties'(IDENTIFIER)

600 12(CODE) properties
    'properties'(IDENTIFIER)

                    Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                      PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 601:0 [-1] ' '(NEWLINE)
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 601:17 [0] 'ranges'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'ranges'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER ranges
>>>ADVANCE 601:23 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 601:24 [2] 'object'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 602:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 602:17 [0] 'rangeList'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'rangeList'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER rangeList
>>>ADVANCE 602:26 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 602:27 [2] 'object'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 603:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 603:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [PropertiesDeclaration] blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                    Parsed OK!-> PropertiesDeclaration
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

603 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 603:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 603:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 603:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 603:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 603:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 603:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 604:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 604:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

604 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 604:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 604:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 604:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 604:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 604:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 604:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 605:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 605:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

605 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 605:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 605:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 605:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 605:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 605:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 605:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 606:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 606:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

606 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 606:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 606:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 606:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 606:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 606:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 606:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 607:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 607:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

607 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 607:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 607:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 607:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 607:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 607:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 607:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 608:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 608:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

608 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 608:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 608:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 608:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 608:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 608:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 608:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 609:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 609:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

609 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 609:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 609:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 609:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 609:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 609:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 609:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 609:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 609:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 610:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 610:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

610 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 610:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 610:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 610:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 610:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 610:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 610:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 610:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 610:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 611:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 611:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

611 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 611:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 611:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 611:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 611:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 611:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 611:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 612:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 612:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

612 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 612:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 612:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 612:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 612:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 612:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 612:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 613:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 613:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

613 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 613:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 613:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 613:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 613:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 613:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 613:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 614:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 614:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

614 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 614:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 614:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 614:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 614:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 615:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 615:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

615 12(CODE) method isEmpty()
    'method'(IDENTIFIER) 'isEmpty'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 615:20 [1] 'isEmpty'(IDENTIFIER)
>>>ADVANCE 615:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 615:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 616:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 616:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

616 12(CODE) method isMultiLine()
    'method'(IDENTIFIER) 'isMultiLine'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 616:20 [1] 'isMultiLine'(IDENTIFIER)
>>>ADVANCE 616:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 616:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 617:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 617:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

617 12(CODE) method getCursor()
    'method'(IDENTIFIER) 'getCursor'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 617:20 [1] 'getCursor'(IDENTIFIER)
>>>ADVANCE 617:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 617:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 618:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 618:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

618 12(CODE) method setSelectionAnchor(row, column)
    'method'(IDENTIFIER) 'setSelectionAnchor'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 618:20 [1] 'setSelectionAnchor'(IDENTIFIER)
>>>ADVANCE 618:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 618:39 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 618:42 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 618:44 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 618:50 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 619:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 619:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

619 12(CODE) method getSelectionAnchor()
    'method'(IDENTIFIER) 'getSelectionAnchor'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 619:20 [1] 'getSelectionAnchor'(IDENTIFIER)
>>>ADVANCE 619:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 619:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 620:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 620:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

620 12(CODE) method getSelectionLead()
    'method'(IDENTIFIER) 'getSelectionLead'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 620:20 [1] 'getSelectionLead'(IDENTIFIER)
>>>ADVANCE 620:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 620:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 621:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 621:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

621 12(CODE) method shiftSelection(columns)
    'method'(IDENTIFIER) 'shiftSelection'(IDENTIFIER) '('(LITERAL) 'columns'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 621:20 [1] 'shiftSelection'(IDENTIFIER)
>>>ADVANCE 621:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 621:35 [3] 'columns'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'columns'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER columns
>>>ADVANCE 621:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 622:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 622:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

622 12(CODE) method isBackwards()
    'method'(IDENTIFIER) 'isBackwards'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 622:20 [1] 'isBackwards'(IDENTIFIER)
>>>ADVANCE 622:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 622:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 623:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 623:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

623 12(CODE) method getRange()
    'method'(IDENTIFIER) 'getRange'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 623:20 [1] 'getRange'(IDENTIFIER)
>>>ADVANCE 623:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 623:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 624:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 624:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

624 12(CODE) method clearSelection()
    'method'(IDENTIFIER) 'clearSelection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 624:20 [1] 'clearSelection'(IDENTIFIER)
>>>ADVANCE 624:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 624:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 625:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 625:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

625 12(CODE) method selectAll()
    'method'(IDENTIFIER) 'selectAll'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 625:20 [1] 'selectAll'(IDENTIFIER)
>>>ADVANCE 625:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 625:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 626:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 626:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

626 12(CODE) method setSelectionRange(range, reverse)
    'method'(IDENTIFIER) 'setSelectionRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'reverse'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 626:20 [1] 'setSelectionRange'(IDENTIFIER)
>>>ADVANCE 626:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 626:38 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 626:43 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 626:45 [5] 'reverse'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'reverse'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER reverse
>>>ADVANCE 626:52 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 627:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 627:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

627 12(CODE) method setRange(range, reverse)
    'method'(IDENTIFIER) 'setRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'reverse'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 627:20 [1] 'setRange'(IDENTIFIER)
>>>ADVANCE 627:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 627:29 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 627:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 627:36 [5] 'reverse'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'reverse'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER reverse
>>>ADVANCE 627:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 628:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 628:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

628 12(CODE) method $moveSelection(mover)
    'method'(IDENTIFIER) '$moveSelection'(IDENTIFIER) '('(LITERAL) 'mover'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 628:20 [1] '$moveSelection'(IDENTIFIER)
>>>ADVANCE 628:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 628:35 [3] 'mover'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'mover'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER mover
>>>ADVANCE 628:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 629:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 629:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

629 12(CODE) method selectTo(row, column)
    'method'(IDENTIFIER) 'selectTo'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 629:20 [1] 'selectTo'(IDENTIFIER)
>>>ADVANCE 629:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 629:29 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 629:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 629:34 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 629:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 630:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 630:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

630 12(CODE) method selectToPosition(pos)
    'method'(IDENTIFIER) 'selectToPosition'(IDENTIFIER) '('(LITERAL) 'pos'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 630:20 [1] 'selectToPosition'(IDENTIFIER)
>>>ADVANCE 630:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 630:37 [3] 'pos'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'pos'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER pos
>>>ADVANCE 630:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 631:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 631:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

631 12(CODE) method selectUp()
    'method'(IDENTIFIER) 'selectUp'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 631:20 [1] 'selectUp'(IDENTIFIER)
>>>ADVANCE 631:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 631:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 632:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 632:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

632 12(CODE) method selectDown()
    'method'(IDENTIFIER) 'selectDown'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 632:20 [1] 'selectDown'(IDENTIFIER)
>>>ADVANCE 632:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 632:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 633:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 633:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

633 12(CODE) method selectRight()
    'method'(IDENTIFIER) 'selectRight'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 633:20 [1] 'selectRight'(IDENTIFIER)
>>>ADVANCE 633:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 633:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 634:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 634:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

634 12(CODE) method selectLeft()
    'method'(IDENTIFIER) 'selectLeft'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 634:20 [1] 'selectLeft'(IDENTIFIER)
>>>ADVANCE 634:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 634:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 635:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 635:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

635 12(CODE) method selectLineStart()
    'method'(IDENTIFIER) 'selectLineStart'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 635:20 [1] 'selectLineStart'(IDENTIFIER)
>>>ADVANCE 635:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 635:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 636:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 636:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

636 12(CODE) method selectLineEnd()
    'method'(IDENTIFIER) 'selectLineEnd'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 636:20 [1] 'selectLineEnd'(IDENTIFIER)
>>>ADVANCE 636:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 636:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 637:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 637:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

637 12(CODE) method selectFileEnd()
    'method'(IDENTIFIER) 'selectFileEnd'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 637:20 [1] 'selectFileEnd'(IDENTIFIER)
>>>ADVANCE 637:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 637:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 638:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 638:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

638 12(CODE) method selectFileStart()
    'method'(IDENTIFIER) 'selectFileStart'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 638:20 [1] 'selectFileStart'(IDENTIFIER)
>>>ADVANCE 638:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 638:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 639:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 639:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

639 12(CODE) method selectWordRight()
    'method'(IDENTIFIER) 'selectWordRight'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 639:20 [1] 'selectWordRight'(IDENTIFIER)
>>>ADVANCE 639:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 639:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 640:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 640:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

640 12(CODE) method selectWordLeft()
    'method'(IDENTIFIER) 'selectWordLeft'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 640:20 [1] 'selectWordLeft'(IDENTIFIER)
>>>ADVANCE 640:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 640:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 641:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 641:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

641 12(CODE) method getWordRange(row, column)
    'method'(IDENTIFIER) 'getWordRange'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 641:20 [1] 'getWordRange'(IDENTIFIER)
>>>ADVANCE 641:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 641:33 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 641:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 641:38 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 641:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 642:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 642:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

642 12(CODE) method selectWord()
    'method'(IDENTIFIER) 'selectWord'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 642:20 [1] 'selectWord'(IDENTIFIER)
>>>ADVANCE 642:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 642:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 643:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 643:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

643 12(CODE) method selectAWord()
    'method'(IDENTIFIER) 'selectAWord'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 643:20 [1] 'selectAWord'(IDENTIFIER)
>>>ADVANCE 643:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 643:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 644:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 644:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

644 12(CODE) method getLineRange(row, excludeLastChar)
    'method'(IDENTIFIER) 'getLineRange'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'excludeLastChar'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 644:20 [1] 'getLineRange'(IDENTIFIER)
>>>ADVANCE 644:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 644:33 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 644:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 644:38 [5] 'excludeLastChar'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'excludeLastChar'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER excludeLastChar
>>>ADVANCE 644:53 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 645:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 645:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

645 12(CODE) method selectLine()
    'method'(IDENTIFIER) 'selectLine'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 645:20 [1] 'selectLine'(IDENTIFIER)
>>>ADVANCE 645:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 645:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 646:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 646:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

646 12(CODE) method moveCursorUp()
    'method'(IDENTIFIER) 'moveCursorUp'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 646:20 [1] 'moveCursorUp'(IDENTIFIER)
>>>ADVANCE 646:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 646:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 647:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 647:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

647 12(CODE) method moveCursorDown()
    'method'(IDENTIFIER) 'moveCursorDown'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 647:20 [1] 'moveCursorDown'(IDENTIFIER)
>>>ADVANCE 647:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 647:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 648:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 648:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

648 12(CODE) method moveCursorLeft()
    'method'(IDENTIFIER) 'moveCursorLeft'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 648:20 [1] 'moveCursorLeft'(IDENTIFIER)
>>>ADVANCE 648:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 648:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 649:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 649:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

649 12(CODE) method moveCursorRight()
    'method'(IDENTIFIER) 'moveCursorRight'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 649:20 [1] 'moveCursorRight'(IDENTIFIER)
>>>ADVANCE 649:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 649:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 650:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 650:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

650 12(CODE) method moveCursorLineStart()
    'method'(IDENTIFIER) 'moveCursorLineStart'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 650:20 [1] 'moveCursorLineStart'(IDENTIFIER)
>>>ADVANCE 650:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 650:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 651:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 651:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

651 12(CODE) method moveCursorLineEnd()
    'method'(IDENTIFIER) 'moveCursorLineEnd'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 651:20 [1] 'moveCursorLineEnd'(IDENTIFIER)
>>>ADVANCE 651:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 651:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 652:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 652:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

652 12(CODE) method moveCursorFileEnd()
    'method'(IDENTIFIER) 'moveCursorFileEnd'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 652:20 [1] 'moveCursorFileEnd'(IDENTIFIER)
>>>ADVANCE 652:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 652:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 653:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 653:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

653 12(CODE) method moveCursorFileStart()
    'method'(IDENTIFIER) 'moveCursorFileStart'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 653:20 [1] 'moveCursorFileStart'(IDENTIFIER)
>>>ADVANCE 653:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 653:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 654:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 654:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

654 12(CODE) method moveCursorLongWordRight()
    'method'(IDENTIFIER) 'moveCursorLongWordRight'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 654:20 [1] 'moveCursorLongWordRight'(IDENTIFIER)
>>>ADVANCE 654:43 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 654:44 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 655:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 655:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

655 12(CODE) method moveCursorLongWordLeft()
    'method'(IDENTIFIER) 'moveCursorLongWordLeft'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 655:20 [1] 'moveCursorLongWordLeft'(IDENTIFIER)
>>>ADVANCE 655:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 655:43 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 656:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 656:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

656 12(CODE) method $shortWordEndIndex(rightOfCursor)
    'method'(IDENTIFIER) '$shortWordEndIndex'(IDENTIFIER) '('(LITERAL) 'rightOfCursor'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 656:20 [1] '$shortWordEndIndex'(IDENTIFIER)
>>>ADVANCE 656:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 656:39 [3] 'rightOfCursor'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'rightOfCursor'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER rightOfCursor
>>>ADVANCE 656:52 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 657:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 657:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

657 12(CODE) method moveCursorShortWordRight()
    'method'(IDENTIFIER) 'moveCursorShortWordRight'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 657:20 [1] 'moveCursorShortWordRight'(IDENTIFIER)
>>>ADVANCE 657:44 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 657:45 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 658:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 658:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

658 12(CODE) method moveCursorShortWordLeft()
    'method'(IDENTIFIER) 'moveCursorShortWordLeft'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 658:20 [1] 'moveCursorShortWordLeft'(IDENTIFIER)
>>>ADVANCE 658:43 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 658:44 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 659:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 659:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

659 12(CODE) method moveCursorWordRight()
    'method'(IDENTIFIER) 'moveCursorWordRight'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 659:20 [1] 'moveCursorWordRight'(IDENTIFIER)
>>>ADVANCE 659:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 659:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 660:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 660:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

660 12(CODE) method moveCursorWordLeft()
    'method'(IDENTIFIER) 'moveCursorWordLeft'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 660:20 [1] 'moveCursorWordLeft'(IDENTIFIER)
>>>ADVANCE 660:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 660:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 661:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 661:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

661 12(CODE) method moveCursorBy(rows, chars)
    'method'(IDENTIFIER) 'moveCursorBy'(IDENTIFIER) '('(LITERAL) 'rows'(IDENTIFIER) ','(LITERAL) 'chars'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 661:20 [1] 'moveCursorBy'(IDENTIFIER)
>>>ADVANCE 661:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 661:33 [3] 'rows'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'rows'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER rows
>>>ADVANCE 661:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 661:39 [5] 'chars'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'chars'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER chars
>>>ADVANCE 661:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 662:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 662:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

662 12(CODE) method moveCursorToPosition(position)
    'method'(IDENTIFIER) 'moveCursorToPosition'(IDENTIFIER) '('(LITERAL) 'position'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 662:20 [1] 'moveCursorToPosition'(IDENTIFIER)
>>>ADVANCE 662:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 662:41 [3] 'position'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'position'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER position
>>>ADVANCE 662:49 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 663:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 663:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

663 12(CODE) method moveCursorTo(row, column, keepDesiredColumn)
    'method'(IDENTIFIER) 'moveCursorTo'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ','(LITERAL) 'keepDesiredColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 663:20 [1] 'moveCursorTo'(IDENTIFIER)
>>>ADVANCE 663:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 663:33 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 663:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 663:38 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 663:44 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 663:46 [7] 'keepDesiredColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'keepDesiredColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER keepDesiredColumn
>>>ADVANCE 663:63 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 664:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 664:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

664 12(CODE) method moveCursorToScreen(row, column, keepDesiredColumn)
    'method'(IDENTIFIER) 'moveCursorToScreen'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ','(LITERAL) 'keepDesiredColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 664:20 [1] 'moveCursorToScreen'(IDENTIFIER)
>>>ADVANCE 664:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 664:39 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 664:42 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 664:44 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 664:50 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 664:52 [7] 'keepDesiredColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'keepDesiredColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER keepDesiredColumn
>>>ADVANCE 664:69 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 665:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 665:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

665 12(CODE) method detach()
    'method'(IDENTIFIER) 'detach'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 665:20 [1] 'detach'(IDENTIFIER)
>>>ADVANCE 665:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 665:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 666:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 666:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

666 12(CODE) method fromOrientedRange(range)
    'method'(IDENTIFIER) 'fromOrientedRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 666:20 [1] 'fromOrientedRange'(IDENTIFIER)
>>>ADVANCE 666:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 666:38 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 666:43 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 667:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 667:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

667 12(CODE) method toOrientedRange(range)
    'method'(IDENTIFIER) 'toOrientedRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 667:20 [1] 'toOrientedRange'(IDENTIFIER)
>>>ADVANCE 667:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 667:36 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 667:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 668:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 668:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

668 12(CODE) method addRange(range, $blockChangeEvents)
    'method'(IDENTIFIER) 'addRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) '$blockChangeEvents'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 668:20 [1] 'addRange'(IDENTIFIER)
>>>ADVANCE 668:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 668:29 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 668:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 668:36 [5] '$blockChangeEvents'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on '$blockChangeEvents'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $blockChangeEvents
>>>ADVANCE 668:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 669:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 669:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

669 12(CODE) method toSingleRange(range)
    'method'(IDENTIFIER) 'toSingleRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 669:20 [1] 'toSingleRange'(IDENTIFIER)
>>>ADVANCE 669:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 669:34 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 669:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 670:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 670:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

670 12(CODE) method substractPoint(pos)
    'method'(IDENTIFIER) 'substractPoint'(IDENTIFIER) '('(LITERAL) 'pos'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 670:20 [1] 'substractPoint'(IDENTIFIER)
>>>ADVANCE 670:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 670:35 [3] 'pos'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'pos'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER pos
>>>ADVANCE 670:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 671:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 671:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

671 12(CODE) method mergeOverlappingRanges()
    'method'(IDENTIFIER) 'mergeOverlappingRanges'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 671:20 [1] 'mergeOverlappingRanges'(IDENTIFIER)
>>>ADVANCE 671:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 671:43 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 672:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 672:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

672 12(CODE) method $onAddRange(range)
    'method'(IDENTIFIER) '$onAddRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 672:20 [1] '$onAddRange'(IDENTIFIER)
>>>ADVANCE 672:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 672:32 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 672:37 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 673:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 673:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

673 12(CODE) method $onRemoveRange(removed)
    'method'(IDENTIFIER) '$onRemoveRange'(IDENTIFIER) '('(LITERAL) 'removed'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 673:20 [1] '$onRemoveRange'(IDENTIFIER)
>>>ADVANCE 673:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 673:35 [3] 'removed'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'removed'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER removed
>>>ADVANCE 673:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 674:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 674:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

674 12(CODE) method $initRangeList()
    'method'(IDENTIFIER) '$initRangeList'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 674:20 [1] '$initRangeList'(IDENTIFIER)
>>>ADVANCE 674:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 674:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 675:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 675:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

675 12(CODE) method getAllRanges()
    'method'(IDENTIFIER) 'getAllRanges'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 675:20 [1] 'getAllRanges'(IDENTIFIER)
>>>ADVANCE 675:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 675:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 676:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 676:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

676 12(CODE) method splitIntoLines()
    'method'(IDENTIFIER) 'splitIntoLines'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 676:20 [1] 'splitIntoLines'(IDENTIFIER)
>>>ADVANCE 676:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 676:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 677:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 677:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

677 12(CODE) method toggleBlockSelection()
    'method'(IDENTIFIER) 'toggleBlockSelection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 677:20 [1] 'toggleBlockSelection'(IDENTIFIER)
>>>ADVANCE 677:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 677:41 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 678:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 678:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

678 12(CODE) method rectangularRangeBlock(screenCursor, screenAnchor, includeEmptyLines)
    'method'(IDENTIFIER) 'rectangularRangeBlock'(IDENTIFIER) '('(LITERAL) 'screenCursor'(IDENTIFIER) ','(LITERAL) 'screenAnchor'(IDENTIFIER) ','(LITERAL) 'includeEmptyLines'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 678:20 [1] 'rectangularRangeBlock'(IDENTIFIER)
>>>ADVANCE 678:41 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 678:42 [3] 'screenCursor'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'screenCursor'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER screenCursor
>>>ADVANCE 678:54 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 678:56 [5] 'screenAnchor'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'screenAnchor'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER screenAnchor
>>>ADVANCE 678:68 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 678:70 [7] 'includeEmptyLines'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'includeEmptyLines'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER includeEmptyLines
>>>ADVANCE 678:87 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 681:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 681:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

681 8(CODE) class Gutter
    'class'(IDENTIFIER) 'Gutter'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 681:15 [1] 'Gutter'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Gutter
>>>ADVANCE 682:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 682:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Gutter parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

682 12(CODE) constructor new Gutter (parentEl)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Gutter'(IDENTIFIER) '('(LITERAL) 'parentEl'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 682:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 682:29 [2] 'Gutter'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Gutter
>>>ADVANCE 682:36 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 682:37 [4] 'parentEl'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'parentEl'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER parentEl
>>>ADVANCE 682:45 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 684:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 684:13 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'properties'(IDENTIFIER)

684 12(CODE) properties
    'properties'(IDENTIFIER)

                    Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                      PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 685:0 [-1] ' '(NEWLINE)
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 685:17 [0] '$showFoldWidgets'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$showFoldWidgets'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $showFoldWidgets
>>>ADVANCE 685:33 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 685:34 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 686:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 686:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [PropertiesDeclaration] blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                    Parsed OK!-> PropertiesDeclaration
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

686 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 686:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 686:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 686:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 686:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 686:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 686:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 687:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 687:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

687 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 687:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 687:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 687:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 687:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 687:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 687:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 688:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 688:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

688 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 688:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 688:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 688:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 688:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 688:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 688:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 689:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 689:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

689 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 689:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 689:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 689:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 689:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 689:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 689:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 690:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 690:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

690 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 690:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 690:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 690:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 690:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 690:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 690:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 691:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 691:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

691 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 691:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 691:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 691:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 691:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 691:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 691:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 692:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 692:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

692 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 692:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 692:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 692:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 692:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 692:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 692:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 692:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 692:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 693:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 693:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

693 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 693:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 693:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 693:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 693:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 693:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 693:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 693:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 693:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 694:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 694:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

694 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 694:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 694:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 694:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 694:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 694:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 694:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 695:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 695:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

695 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 695:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 695:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 695:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 695:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 695:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 695:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 696:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 696:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

696 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 696:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 696:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 696:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 696:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 696:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 696:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 697:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 697:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

697 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 697:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 697:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 697:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 697:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 698:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 698:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

698 12(CODE) method setSession(session)
    'method'(IDENTIFIER) 'setSession'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 698:20 [1] 'setSession'(IDENTIFIER)
>>>ADVANCE 698:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 698:31 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 698:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 699:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 699:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

699 12(CODE) method addGutterDecoration(row, className)
    'method'(IDENTIFIER) 'addGutterDecoration'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'className'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 699:20 [1] 'addGutterDecoration'(IDENTIFIER)
>>>ADVANCE 699:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 699:40 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 699:43 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 699:45 [5] 'className'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'className'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER className
>>>ADVANCE 699:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 700:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 700:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

700 12(CODE) method removeGutterDecoration(row, className)
    'method'(IDENTIFIER) 'removeGutterDecoration'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'className'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 700:20 [1] 'removeGutterDecoration'(IDENTIFIER)
>>>ADVANCE 700:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 700:43 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 700:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 700:48 [5] 'className'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'className'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER className
>>>ADVANCE 700:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 701:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 701:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

701 12(CODE) method setAnnotations(annotations)
    'method'(IDENTIFIER) 'setAnnotations'(IDENTIFIER) '('(LITERAL) 'annotations'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 701:20 [1] 'setAnnotations'(IDENTIFIER)
>>>ADVANCE 701:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 701:35 [3] 'annotations'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'annotations'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER annotations
>>>ADVANCE 701:46 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 702:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 702:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

702 12(CODE) method $updateAnnotations(e)
    'method'(IDENTIFIER) '$updateAnnotations'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 702:20 [1] '$updateAnnotations'(IDENTIFIER)
>>>ADVANCE 702:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 702:39 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 702:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 703:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 703:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

703 12(CODE) method update(config)
    'method'(IDENTIFIER) 'update'(IDENTIFIER) '('(LITERAL) 'config'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 703:20 [1] 'update'(IDENTIFIER)
>>>ADVANCE 703:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 703:27 [3] 'config'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'config'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER config
>>>ADVANCE 703:33 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 704:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 704:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

704 12(CODE) method setShowFoldWidgets(show)
    'method'(IDENTIFIER) 'setShowFoldWidgets'(IDENTIFIER) '('(LITERAL) 'show'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 704:20 [1] 'setShowFoldWidgets'(IDENTIFIER)
>>>ADVANCE 704:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 704:39 [3] 'show'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'show'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER show
>>>ADVANCE 704:43 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 705:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 705:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

705 12(CODE) method getShowFoldWidgets()
    'method'(IDENTIFIER) 'getShowFoldWidgets'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 705:20 [1] 'getShowFoldWidgets'(IDENTIFIER)
>>>ADVANCE 705:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 705:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 706:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 706:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

706 12(CODE) method $computePadding()
    'method'(IDENTIFIER) '$computePadding'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 706:20 [1] '$computePadding'(IDENTIFIER)
>>>ADVANCE 706:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 706:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 707:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 707:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

707 12(CODE) method getRegion(point)
    'method'(IDENTIFIER) 'getRegion'(IDENTIFIER) '('(LITERAL) 'point'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 707:20 [1] 'getRegion'(IDENTIFIER)
>>>ADVANCE 707:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 707:30 [3] 'point'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'point'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER point
>>>ADVANCE 707:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 710:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 710:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

710 8(CODE) class Behaviour
    'class'(IDENTIFIER) 'Behaviour'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 710:15 [1] 'Behaviour'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Behaviour
>>>ADVANCE 711:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 711:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Behaviour parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

711 12(CODE) constructor new Behaviour ()
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Behaviour'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 711:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 711:29 [2] 'Behaviour'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Behaviour
>>>ADVANCE 711:39 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 711:40 [4] ')'(LITERAL)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 713:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 713:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

713 12(CODE) method add(name, action, callback)
    'method'(IDENTIFIER) 'add'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ','(LITERAL) 'action'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 713:20 [1] 'add'(IDENTIFIER)
>>>ADVANCE 713:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 713:24 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 713:28 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 713:30 [5] 'action'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'action'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER action
>>>ADVANCE 713:36 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 713:38 [7] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 713:46 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 714:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 714:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

714 12(CODE) method addBehaviours(behaviours)
    'method'(IDENTIFIER) 'addBehaviours'(IDENTIFIER) '('(LITERAL) 'behaviours'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 714:20 [1] 'addBehaviours'(IDENTIFIER)
>>>ADVANCE 714:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 714:34 [3] 'behaviours'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'behaviours'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER behaviours
>>>ADVANCE 714:44 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 715:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 715:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

715 12(CODE) method remove(name)
    'method'(IDENTIFIER) 'remove'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 715:20 [1] 'remove'(IDENTIFIER)
>>>ADVANCE 715:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 715:27 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 715:31 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 716:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 716:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

716 12(CODE) method inherit(mode, filter)
    'method'(IDENTIFIER) 'inherit'(IDENTIFIER) '('(LITERAL) 'mode'(IDENTIFIER) ','(LITERAL) 'filter'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 716:20 [1] 'inherit'(IDENTIFIER)
>>>ADVANCE 716:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 716:28 [3] 'mode'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'mode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER mode
>>>ADVANCE 716:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 716:34 [5] 'filter'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'filter'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER filter
>>>ADVANCE 716:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 717:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 717:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

717 12(CODE) method getBehaviours(filter)
    'method'(IDENTIFIER) 'getBehaviours'(IDENTIFIER) '('(LITERAL) 'filter'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 717:20 [1] 'getBehaviours'(IDENTIFIER)
>>>ADVANCE 717:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 717:34 [3] 'filter'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'filter'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER filter
>>>ADVANCE 717:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 720:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 720:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

720 8(CODE) class VirtualRenderer
    'class'(IDENTIFIER) 'VirtualRenderer'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 720:15 [1] 'VirtualRenderer'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER VirtualRenderer
>>>ADVANCE 721:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 721:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:VirtualRenderer parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

721 12(CODE) constructor new VirtualRenderer (container, theme)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'VirtualRenderer'(IDENTIFIER) '('(LITERAL) 'container'(IDENTIFIER) ','(LITERAL) 'theme'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 721:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 721:29 [2] 'VirtualRenderer'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER VirtualRenderer
>>>ADVANCE 721:45 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 721:46 [4] 'container'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'container'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER container
>>>ADVANCE 721:55 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 721:57 [6] 'theme'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'theme'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER theme
>>>ADVANCE 721:62 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 723:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 723:13 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'properties'(IDENTIFIER)

723 12(CODE) properties
    'properties'(IDENTIFIER)

                    Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                      PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 724:0 [-1] ' '(NEWLINE)
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 724:17 [0] '$padding'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$padding'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $padding
>>>ADVANCE 724:25 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 724:26 [2] 'object'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'object'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER object
>>>ADVANCE 725:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 725:17 [0] 'STEPS'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'STEPS'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER STEPS
>>>ADVANCE 725:22 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 725:23 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 726:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 726:17 [0] 'CHANGE_FULL'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'CHANGE_FULL'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER CHANGE_FULL
>>>ADVANCE 726:28 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 726:29 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 727:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 727:17 [0] '$highlightGutterLine'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$highlightGutterLine'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $highlightGutterLine
>>>ADVANCE 727:37 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 727:38 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 728:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 728:17 [0] 'CHANGE_MARKER'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'CHANGE_MARKER'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER CHANGE_MARKER
>>>ADVANCE 728:30 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 728:31 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 729:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 729:17 [0] '$printMarginColumn'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$printMarginColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $printMarginColumn
>>>ADVANCE 729:35 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 729:36 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 730:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 730:17 [0] '$showInvisibles'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$showInvisibles'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $showInvisibles
>>>ADVANCE 730:32 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 730:33 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 731:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 731:17 [0] '$fontSize'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$fontSize'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $fontSize
>>>ADVANCE 731:26 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 731:27 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 732:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 732:17 [0] 'CHANGE_CURSOR'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'CHANGE_CURSOR'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER CHANGE_CURSOR
>>>ADVANCE 732:30 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 732:31 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 733:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 733:17 [0] 'CHANGE_MARKER_BACK'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'CHANGE_MARKER_BACK'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER CHANGE_MARKER_BACK
>>>ADVANCE 733:35 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 733:36 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 734:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 734:17 [0] 'CHANGE_H_SCROLL'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'CHANGE_H_SCROLL'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER CHANGE_H_SCROLL
>>>ADVANCE 734:32 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 734:33 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 735:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 735:17 [0] '$showPrintMargin'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$showPrintMargin'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $showPrintMargin
>>>ADVANCE 735:33 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 735:34 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 736:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 736:17 [0] 'CHANGE_LINES'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'CHANGE_LINES'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER CHANGE_LINES
>>>ADVANCE 736:29 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 736:30 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 737:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 737:17 [0] '$showGutter'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$showGutter'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $showGutter
>>>ADVANCE 737:28 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 737:29 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 738:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 738:17 [0] '$animatedScroll'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$animatedScroll'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $animatedScroll
>>>ADVANCE 738:32 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 738:33 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 739:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 739:17 [0] 'CHANGE_SIZE'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'CHANGE_SIZE'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER CHANGE_SIZE
>>>ADVANCE 739:28 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 739:29 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 740:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 740:17 [0] 'CHANGE_MARKER_FRONT'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'CHANGE_MARKER_FRONT'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER CHANGE_MARKER_FRONT
>>>ADVANCE 740:36 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 740:37 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 741:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 741:17 [0] '$displayIndentGuides'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$displayIndentGuides'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $displayIndentGuides
>>>ADVANCE 741:37 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 741:38 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 742:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 742:17 [0] 'CHANGE_TEXT'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'CHANGE_TEXT'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER CHANGE_TEXT
>>>ADVANCE 742:28 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 742:29 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 743:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 743:17 [0] '$hScrollBarAlwaysVisible'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$hScrollBarAlwaysVisible'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $hScrollBarAlwaysVisible
>>>ADVANCE 743:41 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 743:42 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 744:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 744:17 [0] 'CHANGE_SCROLL'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'CHANGE_SCROLL'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER CHANGE_SCROLL
>>>ADVANCE 744:30 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 744:31 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 745:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 745:17 [0] '$showFoldWidgets'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$showFoldWidgets'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $showFoldWidgets
>>>ADVANCE 745:33 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 745:34 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 746:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 746:17 [0] 'CHANGE_GUTTER'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'CHANGE_GUTTER'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER CHANGE_GUTTER
>>>ADVANCE 746:30 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 746:31 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 748:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 748:17 [0] '$options'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $options
>>>ADVANCE 748:25 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 749:0 [-1] ' '(NEWLINE)
                        VariableDecl TRY FreeObjectLiteral on ' '(NEWLINE)
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 749:21 [0] 'animatedScroll'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:$options parentIndent:16, blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'animatedScroll'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER animatedScroll
>>>ADVANCE 749:35 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 750:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 750:25 [0] 'initialValue'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:animatedScroll parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 750:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 750:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 751:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 751:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 751:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 751:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 754:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 754:21 [0] 'showInvisibles'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'showInvisibles'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER showInvisibles
>>>ADVANCE 754:35 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 755:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 755:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:showInvisibles parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 755:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 755:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 755:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 755:38 [4] 'value'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'value'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 755:43 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 756:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 756:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 756:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 756:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 757:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 757:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 757:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 757:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 760:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 760:21 [0] 'showPrintMargin'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'showPrintMargin'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER showPrintMargin
>>>ADVANCE 760:36 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 761:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 761:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:showPrintMargin parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 761:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 761:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 761:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 761:38 [4] ')'(LITERAL)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair matched OK: ) )
>>>ADVANCE 762:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 762:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 762:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 762:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 763:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 763:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 763:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 763:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 766:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 766:21 [0] 'printMarginColumn'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'printMarginColumn'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER printMarginColumn
>>>ADVANCE 766:38 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 767:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 767:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:printMarginColumn parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 767:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 767:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 767:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 767:38 [4] ')'(LITERAL)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair matched OK: ) )
>>>ADVANCE 768:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 768:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 768:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 768:38 [2] 'number'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 769:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 769:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 769:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 769:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 772:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 772:21 [0] 'printMargin'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'printMargin'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER printMargin
>>>ADVANCE 772:32 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 773:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 773:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:printMargin parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 773:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 773:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 773:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 773:38 [4] 'val'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'val'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER val
>>>ADVANCE 773:41 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 774:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 774:25 [0] 'get'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'get'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER get
>>>ADVANCE 774:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 774:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 774:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 774:38 [4] ')'(LITERAL)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair matched OK: ) )
>>>ADVANCE 775:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 775:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 775:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 775:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 778:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 778:21 [0] 'showGutter'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'showGutter'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER showGutter
>>>ADVANCE 778:31 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 779:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 779:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:showGutter parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 779:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 779:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 779:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 779:38 [4] 'show'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'show'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER show
>>>ADVANCE 779:42 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 780:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 780:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 780:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 780:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 781:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 781:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 781:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 781:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 784:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 784:21 [0] 'fadeFoldWidgets'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'fadeFoldWidgets'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER fadeFoldWidgets
>>>ADVANCE 784:36 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 785:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 785:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:fadeFoldWidgets parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 785:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 785:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 785:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 785:38 [4] 'show'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'show'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER show
>>>ADVANCE 785:42 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 786:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 786:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 786:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 786:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 787:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 787:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 787:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 787:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 790:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 790:21 [0] 'showFoldWidgets'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'showFoldWidgets'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER showFoldWidgets
>>>ADVANCE 790:36 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 791:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 791:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:showFoldWidgets parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 791:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 791:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 791:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 791:38 [4] 'show'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'show'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER show
>>>ADVANCE 791:42 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 792:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 792:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 792:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 792:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 793:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 793:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 793:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 793:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 796:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 796:21 [0] 'displayIndentGuides'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'displayIndentGuides'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER displayIndentGuides
>>>ADVANCE 796:40 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 797:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 797:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:displayIndentGuides parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 797:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 797:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 797:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 797:38 [4] 'show'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'show'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER show
>>>ADVANCE 797:42 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 798:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 798:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 798:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 798:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 799:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 799:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 799:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 799:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 802:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 802:21 [0] 'highlightGutterLine'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'highlightGutterLine'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER highlightGutterLine
>>>ADVANCE 802:40 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 803:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 803:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:highlightGutterLine parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 803:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 803:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 803:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 803:38 [4] 'shouldHighlight'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'shouldHighlight'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER shouldHighlight
>>>ADVANCE 803:53 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 804:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 804:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 804:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 804:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 805:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 805:25 [0] 'value'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'value'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER value
>>>ADVANCE 805:30 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 805:31 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 806:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 806:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 806:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 806:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 809:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 809:21 [0] 'hScrollBarAlwaysVisible'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'hScrollBarAlwaysVisible'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER hScrollBarAlwaysVisible
>>>ADVANCE 809:44 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 810:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 810:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:hScrollBarAlwaysVisible parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 810:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 810:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 810:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 810:38 [4] 'alwaysVisible'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'alwaysVisible'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER alwaysVisible
>>>ADVANCE 810:51 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 811:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 811:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 811:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 811:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 812:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 812:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 812:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 812:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 815:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 815:21 [0] 'fontSize'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'fontSize'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER fontSize
>>>ADVANCE 815:29 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 816:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 816:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:fontSize parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 816:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 816:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 816:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 816:38 [4] 'size'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'size'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER size
>>>ADVANCE 816:42 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 817:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 817:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 817:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 817:38 [2] 'number'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 818:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 818:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 818:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 818:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 821:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 821:21 [0] 'fontFamily'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'fontFamily'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER fontFamily
>>>ADVANCE 821:31 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 822:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 822:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:fontFamily parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 822:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 822:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 822:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 822:38 [4] 'name'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'name'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 822:42 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 823:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 823:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 823:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 823:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 825:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 825:17 [0] '$fadeFoldWidgets'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:16 block indent:20 parentIndent:16
END freeFormMode [FreeObjectLiteral] blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                        Parsed OK!-> FreeObjectLiteral
                      Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$fadeFoldWidgets'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $fadeFoldWidgets
>>>ADVANCE 825:33 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 825:34 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 826:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 826:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [PropertiesDeclaration] blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                    Parsed OK!-> PropertiesDeclaration
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

826 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 826:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 826:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 826:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 826:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 826:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 826:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 827:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 827:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

827 12(CODE) method updateCharacterSize()
    'method'(IDENTIFIER) 'updateCharacterSize'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 827:20 [1] 'updateCharacterSize'(IDENTIFIER)
>>>ADVANCE 827:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 827:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 828:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 828:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

828 12(CODE) method alignCursor(cursor, alignment)
    'method'(IDENTIFIER) 'alignCursor'(IDENTIFIER) '('(LITERAL) 'cursor'(IDENTIFIER) ','(LITERAL) 'alignment'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 828:20 [1] 'alignCursor'(IDENTIFIER)
>>>ADVANCE 828:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 828:32 [3] 'cursor'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'cursor'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER cursor
>>>ADVANCE 828:38 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 828:40 [5] 'alignment'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'alignment'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER alignment
>>>ADVANCE 828:49 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 829:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 829:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

829 12(CODE) method getShowGutter()
    'method'(IDENTIFIER) 'getShowGutter'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 829:20 [1] 'getShowGutter'(IDENTIFIER)
>>>ADVANCE 829:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 829:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 830:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 830:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

830 12(CODE) method isScrollableBy(deltaX, deltaY)
    'method'(IDENTIFIER) 'isScrollableBy'(IDENTIFIER) '('(LITERAL) 'deltaX'(IDENTIFIER) ','(LITERAL) 'deltaY'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 830:20 [1] 'isScrollableBy'(IDENTIFIER)
>>>ADVANCE 830:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 830:35 [3] 'deltaX'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'deltaX'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER deltaX
>>>ADVANCE 830:41 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 830:43 [5] 'deltaY'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'deltaY'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER deltaY
>>>ADVANCE 830:49 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 831:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 831:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

831 12(CODE) method scrollBy(deltaX, deltaY)
    'method'(IDENTIFIER) 'scrollBy'(IDENTIFIER) '('(LITERAL) 'deltaX'(IDENTIFIER) ','(LITERAL) 'deltaY'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 831:20 [1] 'scrollBy'(IDENTIFIER)
>>>ADVANCE 831:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 831:29 [3] 'deltaX'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'deltaX'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER deltaX
>>>ADVANCE 831:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 831:37 [5] 'deltaY'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'deltaY'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER deltaY
>>>ADVANCE 831:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 832:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 832:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

832 12(CODE) method getPrintMarginColumn()
    'method'(IDENTIFIER) 'getPrintMarginColumn'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 832:20 [1] 'getPrintMarginColumn'(IDENTIFIER)
>>>ADVANCE 832:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 832:41 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 833:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 833:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

833 12(CODE) method setAnimatedScroll(shouldAnimate)
    'method'(IDENTIFIER) 'setAnimatedScroll'(IDENTIFIER) '('(LITERAL) 'shouldAnimate'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 833:20 [1] 'setAnimatedScroll'(IDENTIFIER)
>>>ADVANCE 833:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 833:38 [3] 'shouldAnimate'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'shouldAnimate'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER shouldAnimate
>>>ADVANCE 833:51 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 834:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 834:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

834 12(CODE) method getShowPrintMargin()
    'method'(IDENTIFIER) 'getShowPrintMargin'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 834:20 [1] 'getShowPrintMargin'(IDENTIFIER)
>>>ADVANCE 834:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 834:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 835:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 835:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

835 12(CODE) method $updateGutterLineHighlight()
    'method'(IDENTIFIER) '$updateGutterLineHighlight'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 835:20 [1] '$updateGutterLineHighlight'(IDENTIFIER)
>>>ADVANCE 835:46 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 835:47 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 836:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 836:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

836 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 836:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 836:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 836:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 836:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 836:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 836:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 837:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 837:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

837 12(CODE) method setCompositionText(text)
    'method'(IDENTIFIER) 'setCompositionText'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 837:20 [1] 'setCompositionText'(IDENTIFIER)
>>>ADVANCE 837:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 837:39 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 837:43 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 838:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 838:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

838 12(CODE) method getLastVisibleRow()
    'method'(IDENTIFIER) 'getLastVisibleRow'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 838:20 [1] 'getLastVisibleRow'(IDENTIFIER)
>>>ADVANCE 838:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 838:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 839:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 839:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

839 12(CODE) method getContainerElement()
    'method'(IDENTIFIER) 'getContainerElement'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 839:20 [1] 'getContainerElement'(IDENTIFIER)
>>>ADVANCE 839:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 839:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 840:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 840:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

840 12(CODE) method destroy()
    'method'(IDENTIFIER) 'destroy'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 840:20 [1] 'destroy'(IDENTIFIER)
>>>ADVANCE 840:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 840:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 841:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 841:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

841 12(CODE) method getHScrollBarAlwaysVisible()
    'method'(IDENTIFIER) 'getHScrollBarAlwaysVisible'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 841:20 [1] 'getHScrollBarAlwaysVisible'(IDENTIFIER)
>>>ADVANCE 841:46 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 841:47 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 842:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 842:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

842 12(CODE) method onChangeTabSize()
    'method'(IDENTIFIER) 'onChangeTabSize'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 842:20 [1] 'onChangeTabSize'(IDENTIFIER)
>>>ADVANCE 842:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 842:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 843:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 843:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

843 12(CODE) method getFirstFullyVisibleRow()
    'method'(IDENTIFIER) 'getFirstFullyVisibleRow'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 843:20 [1] 'getFirstFullyVisibleRow'(IDENTIFIER)
>>>ADVANCE 843:43 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 843:44 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 844:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 844:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

844 12(CODE) method getScrollBottomRow()
    'method'(IDENTIFIER) 'getScrollBottomRow'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 844:20 [1] 'getScrollBottomRow'(IDENTIFIER)
>>>ADVANCE 844:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 844:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 845:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 845:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

845 12(CODE) method getScrollTop()
    'method'(IDENTIFIER) 'getScrollTop'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 845:20 [1] 'getScrollTop'(IDENTIFIER)
>>>ADVANCE 845:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 845:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 846:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 846:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

846 12(CODE) method onResize(force, gutterWidth, width, height)
    'method'(IDENTIFIER) 'onResize'(IDENTIFIER) '('(LITERAL) 'force'(IDENTIFIER) ','(LITERAL) 'gutterWidth'(IDENTIFIER) ','(LITERAL) 'width'(IDENTIFIER) ','(LITERAL) 'height'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 846:20 [1] 'onResize'(IDENTIFIER)
>>>ADVANCE 846:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 846:29 [3] 'force'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'force'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER force
>>>ADVANCE 846:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 846:36 [5] 'gutterWidth'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'gutterWidth'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER gutterWidth
>>>ADVANCE 846:47 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 846:49 [7] 'width'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'width'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER width
>>>ADVANCE 846:54 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 846:56 [9] 'height'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'height'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER height
>>>ADVANCE 846:62 [10] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 847:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 847:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

847 12(CODE) method screenToTextCoordinates(x, y)
    'method'(IDENTIFIER) 'screenToTextCoordinates'(IDENTIFIER) '('(LITERAL) 'x'(IDENTIFIER) ','(LITERAL) 'y'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 847:20 [1] 'screenToTextCoordinates'(IDENTIFIER)
>>>ADVANCE 847:43 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 847:44 [3] 'x'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'x'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER x
>>>ADVANCE 847:45 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 847:47 [5] 'y'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'y'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER y
>>>ADVANCE 847:48 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 848:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 848:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

848 12(CODE) method updateText()
    'method'(IDENTIFIER) 'updateText'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 848:20 [1] 'updateText'(IDENTIFIER)
>>>ADVANCE 848:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 848:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 849:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 849:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

849 12(CODE) method showComposition(position)
    'method'(IDENTIFIER) 'showComposition'(IDENTIFIER) '('(LITERAL) 'position'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 849:20 [1] 'showComposition'(IDENTIFIER)
>>>ADVANCE 849:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 849:36 [3] 'position'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'position'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER position
>>>ADVANCE 849:44 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 850:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 850:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

850 12(CODE) method scrollCursorIntoView(cursor, offset)
    'method'(IDENTIFIER) 'scrollCursorIntoView'(IDENTIFIER) '('(LITERAL) 'cursor'(IDENTIFIER) ','(LITERAL) 'offset'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 850:20 [1] 'scrollCursorIntoView'(IDENTIFIER)
>>>ADVANCE 850:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 850:41 [3] 'cursor'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'cursor'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER cursor
>>>ADVANCE 850:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 850:49 [5] 'offset'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'offset'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER offset
>>>ADVANCE 850:55 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 851:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 851:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

851 12(CODE) method $getLongestLine()
    'method'(IDENTIFIER) '$getLongestLine'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 851:20 [1] '$getLongestLine'(IDENTIFIER)
>>>ADVANCE 851:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 851:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 852:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 852:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

852 12(CODE) method updateFull(force)
    'method'(IDENTIFIER) 'updateFull'(IDENTIFIER) '('(LITERAL) 'force'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 852:20 [1] 'updateFull'(IDENTIFIER)
>>>ADVANCE 852:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 852:31 [3] 'force'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'force'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER force
>>>ADVANCE 852:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 853:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 853:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

853 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 853:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 853:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 853:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 853:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 853:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 853:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 854:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 854:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

854 12(CODE) method scrollToY(scrollTop)
    'method'(IDENTIFIER) 'scrollToY'(IDENTIFIER) '('(LITERAL) 'scrollTop'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 854:20 [1] 'scrollToY'(IDENTIFIER)
>>>ADVANCE 854:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 854:30 [3] 'scrollTop'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'scrollTop'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER scrollTop
>>>ADVANCE 854:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 855:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 855:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

855 12(CODE) method removeGutterDecoration(row, className)
    'method'(IDENTIFIER) 'removeGutterDecoration'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'className'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 855:20 [1] 'removeGutterDecoration'(IDENTIFIER)
>>>ADVANCE 855:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 855:43 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 855:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 855:48 [5] 'className'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'className'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER className
>>>ADVANCE 855:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 856:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 856:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

856 12(CODE) method adjustWrapLimit()
    'method'(IDENTIFIER) 'adjustWrapLimit'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 856:20 [1] 'adjustWrapLimit'(IDENTIFIER)
>>>ADVANCE 856:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 856:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 857:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 857:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

857 12(CODE) method getOption(name)
    'method'(IDENTIFIER) 'getOption'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 857:20 [1] 'getOption'(IDENTIFIER)
>>>ADVANCE 857:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 857:30 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 857:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 858:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 858:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

858 12(CODE) method $calcSteps(fromValue, toValue)
    'method'(IDENTIFIER) '$calcSteps'(IDENTIFIER) '('(LITERAL) 'fromValue'(IDENTIFIER) ','(LITERAL) 'toValue'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 858:20 [1] '$calcSteps'(IDENTIFIER)
>>>ADVANCE 858:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 858:31 [3] 'fromValue'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'fromValue'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER fromValue
>>>ADVANCE 858:40 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 858:42 [5] 'toValue'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'toValue'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER toValue
>>>ADVANCE 858:49 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 859:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 859:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

859 12(CODE) method addGutterDecoration(row, className)
    'method'(IDENTIFIER) 'addGutterDecoration'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'className'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 859:20 [1] 'addGutterDecoration'(IDENTIFIER)
>>>ADVANCE 859:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 859:40 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 859:43 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 859:45 [5] 'className'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'className'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER className
>>>ADVANCE 859:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 860:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 860:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

860 12(CODE) method getLastFullyVisibleRow()
    'method'(IDENTIFIER) 'getLastFullyVisibleRow'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 860:20 [1] 'getLastFullyVisibleRow'(IDENTIFIER)
>>>ADVANCE 860:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 860:43 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 861:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 861:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

861 12(CODE) method getTheme()
    'method'(IDENTIFIER) 'getTheme'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 861:20 [1] 'getTheme'(IDENTIFIER)
>>>ADVANCE 861:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 861:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 862:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 862:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

862 12(CODE) method setOptions(optList)
    'method'(IDENTIFIER) 'setOptions'(IDENTIFIER) '('(LITERAL) 'optList'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 862:20 [1] 'setOptions'(IDENTIFIER)
>>>ADVANCE 862:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 862:31 [3] 'optList'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'optList'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER optList
>>>ADVANCE 862:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 863:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 863:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

863 12(CODE) method setAnnotations(annotations)
    'method'(IDENTIFIER) 'setAnnotations'(IDENTIFIER) '('(LITERAL) 'annotations'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 863:20 [1] 'setAnnotations'(IDENTIFIER)
>>>ADVANCE 863:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 863:35 [3] 'annotations'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'annotations'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER annotations
>>>ADVANCE 863:46 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 864:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 864:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

864 12(CODE) method visualizeBlur()
    'method'(IDENTIFIER) 'visualizeBlur'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 864:20 [1] 'visualizeBlur'(IDENTIFIER)
>>>ADVANCE 864:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 864:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 865:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 865:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

865 12(CODE) method hideComposition()
    'method'(IDENTIFIER) 'hideComposition'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 865:20 [1] 'hideComposition'(IDENTIFIER)
>>>ADVANCE 865:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 865:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 866:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 866:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

866 12(CODE) method unsetStyle(style)
    'method'(IDENTIFIER) 'unsetStyle'(IDENTIFIER) '('(LITERAL) 'style'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 866:20 [1] 'unsetStyle'(IDENTIFIER)
>>>ADVANCE 866:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 866:31 [3] 'style'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'style'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER style
>>>ADVANCE 866:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 867:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 867:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

867 12(CODE) method $updatePrintMargin()
    'method'(IDENTIFIER) '$updatePrintMargin'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 867:20 [1] '$updatePrintMargin'(IDENTIFIER)
>>>ADVANCE 867:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 867:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 868:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 868:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

868 12(CODE) method updateBackMarkers()
    'method'(IDENTIFIER) 'updateBackMarkers'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 868:20 [1] 'updateBackMarkers'(IDENTIFIER)
>>>ADVANCE 868:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 868:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 869:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 869:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

869 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 869:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 869:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 869:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 869:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 870:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 870:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

870 12(CODE) method hideCursor()
    'method'(IDENTIFIER) 'hideCursor'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 870:20 [1] 'hideCursor'(IDENTIFIER)
>>>ADVANCE 870:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 870:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 871:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 871:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

871 12(CODE) method setStyle(style, include)
    'method'(IDENTIFIER) 'setStyle'(IDENTIFIER) '('(LITERAL) 'style'(IDENTIFIER) ','(LITERAL) 'include'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 871:20 [1] 'setStyle'(IDENTIFIER)
>>>ADVANCE 871:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 871:29 [3] 'style'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'style'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER style
>>>ADVANCE 871:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 871:36 [5] 'include'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'include'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER include
>>>ADVANCE 871:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 872:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 872:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

872 12(CODE) method getMouseEventTarget()
    'method'(IDENTIFIER) 'getMouseEventTarget'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 872:20 [1] 'getMouseEventTarget'(IDENTIFIER)
>>>ADVANCE 872:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 872:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 873:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 873:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

873 12(CODE) method $updateLines()
    'method'(IDENTIFIER) '$updateLines'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 873:20 [1] '$updateLines'(IDENTIFIER)
>>>ADVANCE 873:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 873:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 874:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 874:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

874 12(CODE) method getOptions(optionNames)
    'method'(IDENTIFIER) 'getOptions'(IDENTIFIER) '('(LITERAL) 'optionNames'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 874:20 [1] 'getOptions'(IDENTIFIER)
>>>ADVANCE 874:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 874:31 [3] 'optionNames'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'optionNames'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER optionNames
>>>ADVANCE 874:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 875:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 875:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

875 12(CODE) method setOption(name, value)
    'method'(IDENTIFIER) 'setOption'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 875:20 [1] 'setOption'(IDENTIFIER)
>>>ADVANCE 875:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 875:30 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 875:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 875:36 [5] 'value'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 875:41 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 876:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 876:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

876 12(CODE) method getShowInvisibles()
    'method'(IDENTIFIER) 'getShowInvisibles'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 876:20 [1] 'getShowInvisibles'(IDENTIFIER)
>>>ADVANCE 876:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 876:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 877:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 877:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

877 12(CODE) method setFadeFoldWidgets(show)
    'method'(IDENTIFIER) 'setFadeFoldWidgets'(IDENTIFIER) '('(LITERAL) 'show'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 877:20 [1] 'setFadeFoldWidgets'(IDENTIFIER)
>>>ADVANCE 877:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 877:39 [3] 'show'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'show'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER show
>>>ADVANCE 877:43 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 878:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 878:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

878 12(CODE) method scrollToLine(line, center, animate, callback)
    'method'(IDENTIFIER) 'scrollToLine'(IDENTIFIER) '('(LITERAL) 'line'(IDENTIFIER) ','(LITERAL) 'center'(IDENTIFIER) ','(LITERAL) 'animate'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 878:20 [1] 'scrollToLine'(IDENTIFIER)
>>>ADVANCE 878:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 878:33 [3] 'line'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'line'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER line
>>>ADVANCE 878:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 878:39 [5] 'center'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'center'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER center
>>>ADVANCE 878:45 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 878:47 [7] 'animate'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'animate'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER animate
>>>ADVANCE 878:54 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 878:56 [9] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 878:64 [10] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 879:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 879:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

879 12(CODE) method getFirstVisibleRow()
    'method'(IDENTIFIER) 'getFirstVisibleRow'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 879:20 [1] 'getFirstVisibleRow'(IDENTIFIER)
>>>ADVANCE 879:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 879:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 880:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 880:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

880 12(CODE) method scrollToRow(row)
    'method'(IDENTIFIER) 'scrollToRow'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 880:20 [1] 'scrollToRow'(IDENTIFIER)
>>>ADVANCE 880:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 880:32 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 880:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 881:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 881:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

881 12(CODE) method setShowInvisibles(showInvisibles)
    'method'(IDENTIFIER) 'setShowInvisibles'(IDENTIFIER) '('(LITERAL) 'showInvisibles'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 881:20 [1] 'setShowInvisibles'(IDENTIFIER)
>>>ADVANCE 881:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 881:38 [3] 'showInvisibles'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'showInvisibles'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER showInvisibles
>>>ADVANCE 881:52 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 882:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 882:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

882 12(CODE) method setTheme(theme)
    'method'(IDENTIFIER) 'setTheme'(IDENTIFIER) '('(LITERAL) 'theme'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 882:20 [1] 'setTheme'(IDENTIFIER)
>>>ADVANCE 882:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 882:29 [3] 'theme'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'theme'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER theme
>>>ADVANCE 882:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 883:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 883:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

883 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 883:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 883:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 883:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 883:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 883:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 883:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 883:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 883:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 884:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 884:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

884 12(CODE) method showCursor()
    'method'(IDENTIFIER) 'showCursor'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 884:20 [1] 'showCursor'(IDENTIFIER)
>>>ADVANCE 884:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 884:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 885:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 885:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

885 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 885:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 885:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 885:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 885:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 885:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 885:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 885:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 885:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 886:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 886:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

886 12(CODE) method setDisplayIndentGuides(display)
    'method'(IDENTIFIER) 'setDisplayIndentGuides'(IDENTIFIER) '('(LITERAL) 'display'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 886:20 [1] 'setDisplayIndentGuides'(IDENTIFIER)
>>>ADVANCE 886:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 886:43 [3] 'display'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'display'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER display
>>>ADVANCE 886:50 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 887:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 887:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

887 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 887:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 887:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 887:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 887:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 887:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 887:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 888:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 888:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

888 12(CODE) method setHighlightGutterLine(shouldHighlight)
    'method'(IDENTIFIER) 'setHighlightGutterLine'(IDENTIFIER) '('(LITERAL) 'shouldHighlight'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 888:20 [1] 'setHighlightGutterLine'(IDENTIFIER)
>>>ADVANCE 888:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 888:43 [3] 'shouldHighlight'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'shouldHighlight'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER shouldHighlight
>>>ADVANCE 888:58 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 889:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 889:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

889 12(CODE) method visualizeFocus()
    'method'(IDENTIFIER) 'visualizeFocus'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 889:20 [1] 'visualizeFocus'(IDENTIFIER)
>>>ADVANCE 889:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 889:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 890:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 890:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

890 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 890:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 890:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 890:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 890:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 890:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 890:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 891:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 891:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

891 12(CODE) method getFadeFoldWidgets()
    'method'(IDENTIFIER) 'getFadeFoldWidgets'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 891:20 [1] 'getFadeFoldWidgets'(IDENTIFIER)
>>>ADVANCE 891:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 891:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 892:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 892:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

892 12(CODE) method updateFontSize()
    'method'(IDENTIFIER) 'updateFontSize'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 892:20 [1] 'updateFontSize'(IDENTIFIER)
>>>ADVANCE 892:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 892:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 893:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 893:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

893 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 893:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 893:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 893:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 893:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 893:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 893:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 894:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 894:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

894 12(CODE) method getAnimatedScroll()
    'method'(IDENTIFIER) 'getAnimatedScroll'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 894:20 [1] 'getAnimatedScroll'(IDENTIFIER)
>>>ADVANCE 894:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 894:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 895:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 895:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

895 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 895:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 895:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 895:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 895:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 895:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 895:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 896:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 896:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

896 12(CODE) method getTextAreaContainer()
    'method'(IDENTIFIER) 'getTextAreaContainer'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 896:20 [1] 'getTextAreaContainer'(IDENTIFIER)
>>>ADVANCE 896:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 896:41 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 897:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 897:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

897 12(CODE) method scrollToX(scrollLeft)
    'method'(IDENTIFIER) 'scrollToX'(IDENTIFIER) '('(LITERAL) 'scrollLeft'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 897:20 [1] 'scrollToX'(IDENTIFIER)
>>>ADVANCE 897:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 897:30 [3] 'scrollLeft'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'scrollLeft'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER scrollLeft
>>>ADVANCE 897:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 898:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 898:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

898 12(CODE) method $renderChanges(changes, force)
    'method'(IDENTIFIER) '$renderChanges'(IDENTIFIER) '('(LITERAL) 'changes'(IDENTIFIER) ','(LITERAL) 'force'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 898:20 [1] '$renderChanges'(IDENTIFIER)
>>>ADVANCE 898:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 898:35 [3] 'changes'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'changes'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER changes
>>>ADVANCE 898:42 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 898:44 [5] 'force'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'force'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER force
>>>ADVANCE 898:49 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 899:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 899:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

899 12(CODE) method getScrollTopRow()
    'method'(IDENTIFIER) 'getScrollTopRow'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 899:20 [1] 'getScrollTopRow'(IDENTIFIER)
>>>ADVANCE 899:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 899:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 900:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 900:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

900 12(CODE) method pixelToScreenCoordinates(x, y)
    'method'(IDENTIFIER) 'pixelToScreenCoordinates'(IDENTIFIER) '('(LITERAL) 'x'(IDENTIFIER) ','(LITERAL) 'y'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 900:20 [1] 'pixelToScreenCoordinates'(IDENTIFIER)
>>>ADVANCE 900:44 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 900:45 [3] 'x'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'x'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER x
>>>ADVANCE 900:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 900:48 [5] 'y'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'y'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER y
>>>ADVANCE 900:49 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 901:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 901:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

901 12(CODE) method setSession(session)
    'method'(IDENTIFIER) 'setSession'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 901:20 [1] 'setSession'(IDENTIFIER)
>>>ADVANCE 901:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 901:31 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 901:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 902:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 902:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

902 12(CODE) method getDisplayIndentGuides()
    'method'(IDENTIFIER) 'getDisplayIndentGuides'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 902:20 [1] 'getDisplayIndentGuides'(IDENTIFIER)
>>>ADVANCE 902:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 902:43 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 903:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 903:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

903 12(CODE) method updateLines(firstRow, lastRow)
    'method'(IDENTIFIER) 'updateLines'(IDENTIFIER) '('(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 903:20 [1] 'updateLines'(IDENTIFIER)
>>>ADVANCE 903:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 903:32 [3] 'firstRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 903:40 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 903:42 [5] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 903:49 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 904:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 904:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

904 12(CODE) method setShowGutter(show)
    'method'(IDENTIFIER) 'setShowGutter'(IDENTIFIER) '('(LITERAL) 'show'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 904:20 [1] 'setShowGutter'(IDENTIFIER)
>>>ADVANCE 904:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 904:34 [3] 'show'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'show'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER show
>>>ADVANCE 904:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 905:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 905:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

905 12(CODE) method getScrollLeft()
    'method'(IDENTIFIER) 'getScrollLeft'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 905:20 [1] 'getScrollLeft'(IDENTIFIER)
>>>ADVANCE 905:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 905:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 906:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 906:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

906 12(CODE) method $moveTextAreaToCursor()
    'method'(IDENTIFIER) '$moveTextAreaToCursor'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 906:20 [1] '$moveTextAreaToCursor'(IDENTIFIER)
>>>ADVANCE 906:41 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 906:42 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 907:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 907:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

907 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 907:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 907:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 907:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 907:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 907:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 907:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 908:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 908:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

908 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 908:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 908:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 908:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 908:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 908:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 908:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 909:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 909:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

909 12(CODE) method $updateScrollBar()
    'method'(IDENTIFIER) '$updateScrollBar'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 909:20 [1] '$updateScrollBar'(IDENTIFIER)
>>>ADVANCE 909:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 909:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 910:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 910:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

910 12(CODE) method updateCursor()
    'method'(IDENTIFIER) 'updateCursor'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 910:20 [1] 'updateCursor'(IDENTIFIER)
>>>ADVANCE 910:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 910:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 911:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 911:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

911 12(CODE) method updateBreakpoints(rows)
    'method'(IDENTIFIER) 'updateBreakpoints'(IDENTIFIER) '('(LITERAL) 'rows'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 911:20 [1] 'updateBreakpoints'(IDENTIFIER)
>>>ADVANCE 911:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 911:38 [3] 'rows'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'rows'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER rows
>>>ADVANCE 911:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 912:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 912:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

912 12(CODE) method setPadding(padding)
    'method'(IDENTIFIER) 'setPadding'(IDENTIFIER) '('(LITERAL) 'padding'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 912:20 [1] 'setPadding'(IDENTIFIER)
>>>ADVANCE 912:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 912:31 [3] 'padding'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'padding'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER padding
>>>ADVANCE 912:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 913:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 913:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

913 12(CODE) method setShowPrintMargin(showPrintMargin)
    'method'(IDENTIFIER) 'setShowPrintMargin'(IDENTIFIER) '('(LITERAL) 'showPrintMargin'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 913:20 [1] 'setShowPrintMargin'(IDENTIFIER)
>>>ADVANCE 913:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 913:39 [3] 'showPrintMargin'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'showPrintMargin'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER showPrintMargin
>>>ADVANCE 913:54 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 914:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 914:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

914 12(CODE) method setHScrollBarAlwaysVisible(alwaysVisible)
    'method'(IDENTIFIER) 'setHScrollBarAlwaysVisible'(IDENTIFIER) '('(LITERAL) 'alwaysVisible'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 914:20 [1] 'setHScrollBarAlwaysVisible'(IDENTIFIER)
>>>ADVANCE 914:46 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 914:47 [3] 'alwaysVisible'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'alwaysVisible'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER alwaysVisible
>>>ADVANCE 914:60 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 915:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 915:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

915 12(CODE) method textToScreenCoordinates(row, column)
    'method'(IDENTIFIER) 'textToScreenCoordinates'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 915:20 [1] 'textToScreenCoordinates'(IDENTIFIER)
>>>ADVANCE 915:43 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 915:44 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 915:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 915:49 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 915:55 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 916:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 916:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

916 12(CODE) method scrollSelectionIntoView(anchor, lead, offset)
    'method'(IDENTIFIER) 'scrollSelectionIntoView'(IDENTIFIER) '('(LITERAL) 'anchor'(IDENTIFIER) ','(LITERAL) 'lead'(IDENTIFIER) ','(LITERAL) 'offset'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 916:20 [1] 'scrollSelectionIntoView'(IDENTIFIER)
>>>ADVANCE 916:43 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 916:44 [3] 'anchor'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'anchor'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER anchor
>>>ADVANCE 916:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 916:52 [5] 'lead'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lead'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lead
>>>ADVANCE 916:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 916:58 [7] 'offset'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'offset'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER offset
>>>ADVANCE 916:64 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 917:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 917:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

917 12(CODE) method setPrintMarginColumn(showPrintMargin)
    'method'(IDENTIFIER) 'setPrintMarginColumn'(IDENTIFIER) '('(LITERAL) 'showPrintMargin'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 917:20 [1] 'setPrintMarginColumn'(IDENTIFIER)
>>>ADVANCE 917:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 917:41 [3] 'showPrintMargin'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'showPrintMargin'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER showPrintMargin
>>>ADVANCE 917:56 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 918:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 918:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

918 12(CODE) method animateScrolling(fromValue, callback)
    'method'(IDENTIFIER) 'animateScrolling'(IDENTIFIER) '('(LITERAL) 'fromValue'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 918:20 [1] 'animateScrolling'(IDENTIFIER)
>>>ADVANCE 918:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 918:37 [3] 'fromValue'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'fromValue'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER fromValue
>>>ADVANCE 918:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 918:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 918:56 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 919:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 919:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

919 12(CODE) method $computeLayerConfig()
    'method'(IDENTIFIER) '$computeLayerConfig'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 919:20 [1] '$computeLayerConfig'(IDENTIFIER)
>>>ADVANCE 919:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 919:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 920:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 920:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

920 12(CODE) method onGutterResize()
    'method'(IDENTIFIER) 'onGutterResize'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 920:20 [1] 'onGutterResize'(IDENTIFIER)
>>>ADVANCE 920:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 920:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 921:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 921:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

921 12(CODE) method updateFrontMarkers()
    'method'(IDENTIFIER) 'updateFrontMarkers'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 921:20 [1] 'updateFrontMarkers'(IDENTIFIER)
>>>ADVANCE 921:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 921:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 922:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 922:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

922 12(CODE) method getHighlightGutterLine()
    'method'(IDENTIFIER) 'getHighlightGutterLine'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 922:20 [1] 'getHighlightGutterLine'(IDENTIFIER)
>>>ADVANCE 922:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 922:43 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 925:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 925:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

925 8(CODE) class MouseHandler
    'class'(IDENTIFIER) 'MouseHandler'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 925:15 [1] 'MouseHandler'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER MouseHandler
>>>ADVANCE 926:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 926:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:MouseHandler parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

926 12(CODE) constructor new MouseHandler (editor)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'MouseHandler'(IDENTIFIER) '('(LITERAL) 'editor'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 926:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 926:29 [2] 'MouseHandler'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER MouseHandler
>>>ADVANCE 926:42 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 926:43 [4] 'editor'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'editor'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER editor
>>>ADVANCE 926:49 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 928:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 928:13 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'properties'(IDENTIFIER)

928 12(CODE) properties
    'properties'(IDENTIFIER)

                    Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                      PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 929:0 [-1] ' '(NEWLINE)
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 929:17 [0] '$options'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $options
>>>ADVANCE 929:25 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 930:0 [-1] ' '(NEWLINE)
                        VariableDecl TRY FreeObjectLiteral on ' '(NEWLINE)
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 930:21 [0] 'scrollSpeed'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:$options parentIndent:16, blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'scrollSpeed'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER scrollSpeed
>>>ADVANCE 930:32 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 931:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 931:25 [0] 'initialValue'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:scrollSpeed parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 931:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 931:38 [2] 'number'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 932:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 932:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 932:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 932:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 935:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 935:21 [0] 'dragDelay'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'dragDelay'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER dragDelay
>>>ADVANCE 935:30 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 936:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 936:25 [0] 'initialValue'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:dragDelay parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 936:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 936:38 [2] 'number'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 937:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 937:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 937:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 937:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 940:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 940:21 [0] 'focusTimout'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'focusTimout'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER focusTimout
>>>ADVANCE 940:32 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 941:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 941:25 [0] 'initialValue'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:focusTimout parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 941:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 941:38 [2] 'number'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 942:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 942:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 942:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 942:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 944:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 944:17 [0] '$scrollSpeed'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:16 block indent:20 parentIndent:16
END freeFormMode [FreeObjectLiteral] blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                        Parsed OK!-> FreeObjectLiteral
                      Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$scrollSpeed'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $scrollSpeed
>>>ADVANCE 944:29 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 944:30 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 945:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 945:17 [0] '$dragDelay'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$dragDelay'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $dragDelay
>>>ADVANCE 945:27 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 945:28 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 946:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 946:17 [0] '$focusTimout'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$focusTimout'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $focusTimout
>>>ADVANCE 946:29 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 946:30 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 947:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 947:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [PropertiesDeclaration] blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                    Parsed OK!-> PropertiesDeclaration
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

947 12(CODE) method onMouseEvent(name, e)
    'method'(IDENTIFIER) 'onMouseEvent'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 947:20 [1] 'onMouseEvent'(IDENTIFIER)
>>>ADVANCE 947:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 947:33 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 947:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 947:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 947:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 948:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 948:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

948 12(CODE) method onMouseMove(name, e)
    'method'(IDENTIFIER) 'onMouseMove'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 948:20 [1] 'onMouseMove'(IDENTIFIER)
>>>ADVANCE 948:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 948:32 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 948:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 948:38 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 948:39 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 949:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 949:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

949 12(CODE) method onMouseWheel(name, e)
    'method'(IDENTIFIER) 'onMouseWheel'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 949:20 [1] 'onMouseWheel'(IDENTIFIER)
>>>ADVANCE 949:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 949:33 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 949:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 949:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 949:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 950:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 950:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

950 12(CODE) method setState(state)
    'method'(IDENTIFIER) 'setState'(IDENTIFIER) '('(LITERAL) 'state'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 950:20 [1] 'setState'(IDENTIFIER)
>>>ADVANCE 950:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 950:29 [3] 'state'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'state'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER state
>>>ADVANCE 950:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 951:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 951:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

951 12(CODE) method captureMouse(ev, state)
    'method'(IDENTIFIER) 'captureMouse'(IDENTIFIER) '('(LITERAL) 'ev'(IDENTIFIER) ','(LITERAL) 'state'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 951:20 [1] 'captureMouse'(IDENTIFIER)
>>>ADVANCE 951:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 951:33 [3] 'ev'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'ev'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER ev
>>>ADVANCE 951:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 951:37 [5] 'state'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'state'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER state
>>>ADVANCE 951:42 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 952:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 952:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

952 12(CODE) method setOptions(optList)
    'method'(IDENTIFIER) 'setOptions'(IDENTIFIER) '('(LITERAL) 'optList'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 952:20 [1] 'setOptions'(IDENTIFIER)
>>>ADVANCE 952:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 952:31 [3] 'optList'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'optList'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER optList
>>>ADVANCE 952:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 953:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 953:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

953 12(CODE) method getOptions(optionNames)
    'method'(IDENTIFIER) 'getOptions'(IDENTIFIER) '('(LITERAL) 'optionNames'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 953:20 [1] 'getOptions'(IDENTIFIER)
>>>ADVANCE 953:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 953:31 [3] 'optionNames'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'optionNames'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER optionNames
>>>ADVANCE 953:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 954:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 954:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

954 12(CODE) method setOption(name, value)
    'method'(IDENTIFIER) 'setOption'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 954:20 [1] 'setOption'(IDENTIFIER)
>>>ADVANCE 954:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 954:30 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 954:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 954:36 [5] 'value'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 954:41 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 955:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 955:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

955 12(CODE) method getOption(name)
    'method'(IDENTIFIER) 'getOption'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 955:20 [1] 'getOption'(IDENTIFIER)
>>>ADVANCE 955:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 955:30 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 955:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 958:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 958:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

958 8(CODE) class PlaceHolder
    'class'(IDENTIFIER) 'PlaceHolder'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 958:15 [1] 'PlaceHolder'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER PlaceHolder
>>>ADVANCE 959:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 959:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:PlaceHolder parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

959 12(CODE) constructor new PlaceHolder (session, length, pos, others, mainClass, othersClass)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'PlaceHolder'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ','(LITERAL) 'length'(IDENTIFIER) ','(LITERAL) 'pos'(IDENTIFIER) ','(LITERAL) 'others'(IDENTIFIER) ','(LITERAL) 'mainClass'(IDENTIFIER) ','(LITERAL) 'othersClass'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 959:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 959:29 [2] 'PlaceHolder'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER PlaceHolder
>>>ADVANCE 959:41 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 959:42 [4] 'session'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 959:49 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 959:51 [6] 'length'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'length'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER length
>>>ADVANCE 959:57 [7] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 959:59 [8] 'pos'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'pos'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER pos
>>>ADVANCE 959:62 [9] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 959:64 [10] 'others'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'others'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER others
>>>ADVANCE 959:70 [11] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 959:72 [12] 'mainClass'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'mainClass'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER mainClass
>>>ADVANCE 959:81 [13] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 959:83 [14] 'othersClass'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'othersClass'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER othersClass
>>>ADVANCE 959:94 [15] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 961:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 961:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

961 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 961:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 961:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 961:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 961:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 961:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 961:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 962:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 962:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

962 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 962:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 962:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 962:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 962:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 962:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 962:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 963:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 963:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

963 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 963:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 963:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 963:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 963:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 963:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 963:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 964:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 964:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

964 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 964:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 964:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 964:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 964:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 964:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 964:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 965:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 965:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

965 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 965:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 965:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 965:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 965:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 965:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 965:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 966:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 966:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

966 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 966:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 966:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 966:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 966:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 966:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 966:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 967:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 967:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

967 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 967:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 967:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 967:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 967:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 967:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 967:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 967:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 967:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 968:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 968:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

968 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 968:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 968:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 968:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 968:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 968:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 968:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 968:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 968:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 969:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 969:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

969 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 969:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 969:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 969:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 969:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 969:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 969:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 970:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 970:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

970 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 970:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 970:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 970:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 970:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 970:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 970:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 971:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 971:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

971 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 971:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 971:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 971:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 971:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 971:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 971:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 972:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 972:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

972 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 972:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 972:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 972:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 972:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 973:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 973:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

973 12(CODE) method setup()
    'method'(IDENTIFIER) 'setup'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 973:20 [1] 'setup'(IDENTIFIER)
>>>ADVANCE 973:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 973:26 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 974:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 974:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

974 12(CODE) method showOtherMarkers()
    'method'(IDENTIFIER) 'showOtherMarkers'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 974:20 [1] 'showOtherMarkers'(IDENTIFIER)
>>>ADVANCE 974:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 974:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 975:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 975:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

975 12(CODE) method hideOtherMarkers()
    'method'(IDENTIFIER) 'hideOtherMarkers'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 975:20 [1] 'hideOtherMarkers'(IDENTIFIER)
>>>ADVANCE 975:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 975:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 976:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 976:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

976 12(CODE) method onUpdate(event)
    'method'(IDENTIFIER) 'onUpdate'(IDENTIFIER) '('(LITERAL) 'event'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 976:20 [1] 'onUpdate'(IDENTIFIER)
>>>ADVANCE 976:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 976:29 [3] 'event'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'event'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER event
>>>ADVANCE 976:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 977:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 977:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

977 12(CODE) method onCursorChange(event)
    'method'(IDENTIFIER) 'onCursorChange'(IDENTIFIER) '('(LITERAL) 'event'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 977:20 [1] 'onCursorChange'(IDENTIFIER)
>>>ADVANCE 977:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 977:35 [3] 'event'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'event'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER event
>>>ADVANCE 977:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 978:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 978:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

978 12(CODE) method detach()
    'method'(IDENTIFIER) 'detach'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 978:20 [1] 'detach'(IDENTIFIER)
>>>ADVANCE 978:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 978:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 979:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 979:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

979 12(CODE) method cancel()
    'method'(IDENTIFIER) 'cancel'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 979:20 [1] 'cancel'(IDENTIFIER)
>>>ADVANCE 979:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 979:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 982:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 982:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

982 8(CODE) class Tokenizer
    'class'(IDENTIFIER) 'Tokenizer'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 982:15 [1] 'Tokenizer'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Tokenizer
>>>ADVANCE 983:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 983:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Tokenizer parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

983 12(CODE) constructor new Tokenizer (rules)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Tokenizer'(IDENTIFIER) '('(LITERAL) 'rules'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 983:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 983:29 [2] 'Tokenizer'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Tokenizer
>>>ADVANCE 983:39 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 983:40 [4] 'rules'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'rules'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER rules
>>>ADVANCE 983:45 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 985:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 985:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

985 12(CODE) method $applyToken(str)
    'method'(IDENTIFIER) '$applyToken'(IDENTIFIER) '('(LITERAL) 'str'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 985:20 [1] '$applyToken'(IDENTIFIER)
>>>ADVANCE 985:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 985:32 [3] 'str'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'str'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER str
>>>ADVANCE 985:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 986:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 986:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

986 12(CODE) method $arrayTokens(str)
    'method'(IDENTIFIER) '$arrayTokens'(IDENTIFIER) '('(LITERAL) 'str'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 986:20 [1] '$arrayTokens'(IDENTIFIER)
>>>ADVANCE 986:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 986:33 [3] 'str'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'str'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER str
>>>ADVANCE 986:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 987:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 987:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

987 12(CODE) method removeCapturingGroups(src)
    'method'(IDENTIFIER) 'removeCapturingGroups'(IDENTIFIER) '('(LITERAL) 'src'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 987:20 [1] 'removeCapturingGroups'(IDENTIFIER)
>>>ADVANCE 987:41 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 987:42 [3] 'src'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'src'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER src
>>>ADVANCE 987:45 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 988:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 988:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

988 12(CODE) method createSplitterRegexp(src, flag)
    'method'(IDENTIFIER) 'createSplitterRegexp'(IDENTIFIER) '('(LITERAL) 'src'(IDENTIFIER) ','(LITERAL) 'flag'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 988:20 [1] 'createSplitterRegexp'(IDENTIFIER)
>>>ADVANCE 988:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 988:41 [3] 'src'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'src'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER src
>>>ADVANCE 988:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 988:46 [5] 'flag'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'flag'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER flag
>>>ADVANCE 988:50 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 989:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 989:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

989 12(CODE) method getLineTokens(line, startState)
    'method'(IDENTIFIER) 'getLineTokens'(IDENTIFIER) '('(LITERAL) 'line'(IDENTIFIER) ','(LITERAL) 'startState'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 989:20 [1] 'getLineTokens'(IDENTIFIER)
>>>ADVANCE 989:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 989:34 [3] 'line'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'line'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER line
>>>ADVANCE 989:38 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 989:40 [5] 'startState'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startState'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startState
>>>ADVANCE 989:50 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 992:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 992:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

992 8(CODE) class Document
    'class'(IDENTIFIER) 'Document'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 992:15 [1] 'Document'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Document
>>>ADVANCE 993:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 993:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Document parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

993 12(CODE) constructor new Document (text)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Document'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 993:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 993:29 [2] 'Document'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Document
>>>ADVANCE 993:38 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 993:39 [4] 'text'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 993:43 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 995:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 995:13 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'properties'(IDENTIFIER)

995 12(CODE) properties
    'properties'(IDENTIFIER)

                    Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                      PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 996:0 [-1] ' '(NEWLINE)
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 996:17 [0] '$autoNewLine'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$autoNewLine'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $autoNewLine
>>>ADVANCE 996:29 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 996:30 [2] 'string'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 997:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 997:17 [0] '$newLineMode'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$newLineMode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $newLineMode
>>>ADVANCE 997:29 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 997:30 [2] 'string'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 998:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 998:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [PropertiesDeclaration] blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                    Parsed OK!-> PropertiesDeclaration
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

998 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 998:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 998:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 998:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 998:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 998:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 998:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 999:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 999:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

999 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 999:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 999:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 999:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 999:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 999:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 999:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1000:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1000:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1000 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1000:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 1000:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1000:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1000:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1000:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1000:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1001:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1001:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1001 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1001:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 1001:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1001:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1001:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1001:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1001:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1002:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1002:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1002 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1002:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 1002:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1002:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1002:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1002:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1002:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1003:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1003:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1003 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1003:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 1003:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1003:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1003:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1003:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1003:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1004:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1004:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1004 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1004:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 1004:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1004:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1004:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1004:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1004:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1004:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 1004:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1005:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1005:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1005 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1005:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 1005:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1005:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1005:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1005:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1005:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1005:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 1005:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1006:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1006:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1006 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1006:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 1006:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1006:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1006:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1006:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1006:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1007:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1007:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1007 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1007:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 1007:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1007:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1007:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1007:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1007:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1008:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1008:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1008 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1008:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 1008:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1008:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1008:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1008:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1008:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1009:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1009:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1009 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1009:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 1009:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1009:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1009:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1010:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1010:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1010 12(CODE) method setValue(text)
    'method'(IDENTIFIER) 'setValue'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1010:20 [1] 'setValue'(IDENTIFIER)
>>>ADVANCE 1010:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1010:29 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 1010:33 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1011:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1011:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1011 12(CODE) method getValue()
    'method'(IDENTIFIER) 'getValue'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1011:20 [1] 'getValue'(IDENTIFIER)
>>>ADVANCE 1011:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1011:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1012:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1012:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1012 12(CODE) method createAnchor(row, column)
    'method'(IDENTIFIER) 'createAnchor'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1012:20 [1] 'createAnchor'(IDENTIFIER)
>>>ADVANCE 1012:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1012:33 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1012:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1012:38 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1012:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1013:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1013:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1013 12(CODE) method $split(text)
    'method'(IDENTIFIER) '$split'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1013:20 [1] '$split'(IDENTIFIER)
>>>ADVANCE 1013:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1013:27 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 1013:31 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1014:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1014:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1014 12(CODE) method $detectNewLine(text)
    'method'(IDENTIFIER) '$detectNewLine'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1014:20 [1] '$detectNewLine'(IDENTIFIER)
>>>ADVANCE 1014:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1014:35 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 1014:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1015:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1015:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1015 12(CODE) method getNewLineCharacter()
    'method'(IDENTIFIER) 'getNewLineCharacter'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1015:20 [1] 'getNewLineCharacter'(IDENTIFIER)
>>>ADVANCE 1015:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1015:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1016:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1016:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1016 12(CODE) method setNewLineMode(newLineMode)
    'method'(IDENTIFIER) 'setNewLineMode'(IDENTIFIER) '('(LITERAL) 'newLineMode'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1016:20 [1] 'setNewLineMode'(IDENTIFIER)
>>>ADVANCE 1016:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1016:35 [3] 'newLineMode'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'newLineMode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER newLineMode
>>>ADVANCE 1016:46 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1017:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1017:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1017 12(CODE) method getNewLineMode()
    'method'(IDENTIFIER) 'getNewLineMode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1017:20 [1] 'getNewLineMode'(IDENTIFIER)
>>>ADVANCE 1017:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1017:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1018:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1018:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1018 12(CODE) method isNewLine(text)
    'method'(IDENTIFIER) 'isNewLine'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1018:20 [1] 'isNewLine'(IDENTIFIER)
>>>ADVANCE 1018:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1018:30 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 1018:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1019:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1019:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1019 12(CODE) method getLine(row)
    'method'(IDENTIFIER) 'getLine'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1019:20 [1] 'getLine'(IDENTIFIER)
>>>ADVANCE 1019:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1019:28 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1019:31 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1020:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1020:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1020 12(CODE) method getLines(firstRow, lastRow)
    'method'(IDENTIFIER) 'getLines'(IDENTIFIER) '('(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1020:20 [1] 'getLines'(IDENTIFIER)
>>>ADVANCE 1020:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1020:29 [3] 'firstRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 1020:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1020:39 [5] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 1020:46 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1021:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1021:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1021 12(CODE) method getAllLines()
    'method'(IDENTIFIER) 'getAllLines'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1021:20 [1] 'getAllLines'(IDENTIFIER)
>>>ADVANCE 1021:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1021:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1022:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1022:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1022 12(CODE) method getLength()
    'method'(IDENTIFIER) 'getLength'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1022:20 [1] 'getLength'(IDENTIFIER)
>>>ADVANCE 1022:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1022:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1023:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1023:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1023 12(CODE) method getTextRange(range)
    'method'(IDENTIFIER) 'getTextRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1023:20 [1] 'getTextRange'(IDENTIFIER)
>>>ADVANCE 1023:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1023:33 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 1023:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1024:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1024:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1024 12(CODE) method $clipPosition(position)
    'method'(IDENTIFIER) '$clipPosition'(IDENTIFIER) '('(LITERAL) 'position'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1024:20 [1] '$clipPosition'(IDENTIFIER)
>>>ADVANCE 1024:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1024:34 [3] 'position'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'position'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER position
>>>ADVANCE 1024:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1025:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1025:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1025 12(CODE) method insert(position, text)
    'method'(IDENTIFIER) 'insert'(IDENTIFIER) '('(LITERAL) 'position'(IDENTIFIER) ','(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1025:20 [1] 'insert'(IDENTIFIER)
>>>ADVANCE 1025:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1025:27 [3] 'position'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'position'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER position
>>>ADVANCE 1025:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1025:37 [5] 'text'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 1025:41 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1026:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1026:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1026 12(CODE) method insertLines(row, lines)
    'method'(IDENTIFIER) 'insertLines'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'lines'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1026:20 [1] 'insertLines'(IDENTIFIER)
>>>ADVANCE 1026:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1026:32 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1026:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1026:37 [5] 'lines'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lines'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lines
>>>ADVANCE 1026:42 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1027:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1027:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1027 12(CODE) method _insertLines(row, lines)
    'method'(IDENTIFIER) '_insertLines'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'lines'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1027:20 [1] '_insertLines'(IDENTIFIER)
>>>ADVANCE 1027:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1027:33 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1027:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1027:38 [5] 'lines'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lines'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lines
>>>ADVANCE 1027:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1028:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1028:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1028 12(CODE) method insertNewLine(position)
    'method'(IDENTIFIER) 'insertNewLine'(IDENTIFIER) '('(LITERAL) 'position'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1028:20 [1] 'insertNewLine'(IDENTIFIER)
>>>ADVANCE 1028:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1028:34 [3] 'position'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'position'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER position
>>>ADVANCE 1028:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1029:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1029:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1029 12(CODE) method insertInLine(position, text)
    'method'(IDENTIFIER) 'insertInLine'(IDENTIFIER) '('(LITERAL) 'position'(IDENTIFIER) ','(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1029:20 [1] 'insertInLine'(IDENTIFIER)
>>>ADVANCE 1029:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1029:33 [3] 'position'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'position'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER position
>>>ADVANCE 1029:41 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1029:43 [5] 'text'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 1029:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1030:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1030:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1030 12(CODE) method remove(range)
    'method'(IDENTIFIER) 'remove'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1030:20 [1] 'remove'(IDENTIFIER)
>>>ADVANCE 1030:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1030:27 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 1030:32 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1031:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1031:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1031 12(CODE) method removeInLine(row, startColumn, endColumn)
    'method'(IDENTIFIER) 'removeInLine'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'startColumn'(IDENTIFIER) ','(LITERAL) 'endColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1031:20 [1] 'removeInLine'(IDENTIFIER)
>>>ADVANCE 1031:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1031:33 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1031:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1031:38 [5] 'startColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startColumn
>>>ADVANCE 1031:49 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1031:51 [7] 'endColumn'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'endColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER endColumn
>>>ADVANCE 1031:60 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1032:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1032:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1032 12(CODE) method removeLines(firstRow, lastRow)
    'method'(IDENTIFIER) 'removeLines'(IDENTIFIER) '('(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1032:20 [1] 'removeLines'(IDENTIFIER)
>>>ADVANCE 1032:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1032:32 [3] 'firstRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 1032:40 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1032:42 [5] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 1032:49 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1033:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1033:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1033 12(CODE) method _removeLines(firstRow, lastRow)
    'method'(IDENTIFIER) '_removeLines'(IDENTIFIER) '('(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1033:20 [1] '_removeLines'(IDENTIFIER)
>>>ADVANCE 1033:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1033:33 [3] 'firstRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 1033:41 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1033:43 [5] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 1033:50 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1034:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1034:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1034 12(CODE) method removeNewLine(row)
    'method'(IDENTIFIER) 'removeNewLine'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1034:20 [1] 'removeNewLine'(IDENTIFIER)
>>>ADVANCE 1034:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1034:34 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1034:37 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1035:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1035:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1035 12(CODE) method replace(range, text)
    'method'(IDENTIFIER) 'replace'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1035:20 [1] 'replace'(IDENTIFIER)
>>>ADVANCE 1035:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1035:28 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 1035:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1035:35 [5] 'text'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 1035:39 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1036:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1036:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1036 12(CODE) method applyDeltas(deltas)
    'method'(IDENTIFIER) 'applyDeltas'(IDENTIFIER) '('(LITERAL) 'deltas'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1036:20 [1] 'applyDeltas'(IDENTIFIER)
>>>ADVANCE 1036:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1036:32 [3] 'deltas'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'deltas'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER deltas
>>>ADVANCE 1036:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1037:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1037:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1037 12(CODE) method revertDeltas(deltas)
    'method'(IDENTIFIER) 'revertDeltas'(IDENTIFIER) '('(LITERAL) 'deltas'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1037:20 [1] 'revertDeltas'(IDENTIFIER)
>>>ADVANCE 1037:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1037:33 [3] 'deltas'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'deltas'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER deltas
>>>ADVANCE 1037:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1038:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1038:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1038 12(CODE) method indexToPosition(index, startRow)
    'method'(IDENTIFIER) 'indexToPosition'(IDENTIFIER) '('(LITERAL) 'index'(IDENTIFIER) ','(LITERAL) 'startRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1038:20 [1] 'indexToPosition'(IDENTIFIER)
>>>ADVANCE 1038:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1038:36 [3] 'index'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'index'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER index
>>>ADVANCE 1038:41 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1038:43 [5] 'startRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startRow
>>>ADVANCE 1038:51 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1039:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1039:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1039 12(CODE) method positionToIndex(pos, startRow)
    'method'(IDENTIFIER) 'positionToIndex'(IDENTIFIER) '('(LITERAL) 'pos'(IDENTIFIER) ','(LITERAL) 'startRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1039:20 [1] 'positionToIndex'(IDENTIFIER)
>>>ADVANCE 1039:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1039:36 [3] 'pos'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'pos'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER pos
>>>ADVANCE 1039:39 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1039:41 [5] 'startRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'startRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startRow
>>>ADVANCE 1039:49 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1042:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1042:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

1042 8(CODE) class Editor
    'class'(IDENTIFIER) 'Editor'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 1042:15 [1] 'Editor'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Editor
>>>ADVANCE 1043:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 1043:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Editor parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

1043 12(CODE) constructor new Editor (renderer, session)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Editor'(IDENTIFIER) '('(LITERAL) 'renderer'(IDENTIFIER) ','(LITERAL) 'session'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 1043:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 1043:29 [2] 'Editor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Editor
>>>ADVANCE 1043:36 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 1043:37 [4] 'renderer'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'renderer'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER renderer
>>>ADVANCE 1043:45 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 1043:47 [6] 'session'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 1043:54 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 1045:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1045:13 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'properties'(IDENTIFIER)

1045 12(CODE) properties
    'properties'(IDENTIFIER)

                    Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                      PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 1047:0 [-1] ' '(NEWLINE)
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 1047:17 [0] 'session'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 1047:24 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 1047:26 [2] 'EditSession'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'EditSession'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER EditSession
>>>ADVANCE 1049:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 1049:17 [0] '$options'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $options
>>>ADVANCE 1049:25 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 1050:0 [-1] ' '(NEWLINE)
                        VariableDecl TRY FreeObjectLiteral on ' '(NEWLINE)
                          FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1050:21 [0] 'useSoftTabs'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:$options parentIndent:16, blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'useSoftTabs'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER useSoftTabs
>>>ADVANCE 1050:32 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1051:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1051:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:useSoftTabs parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1051:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1051:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1052:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1052:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1052:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1052:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1055:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1055:21 [0] 'fontFamily'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'fontFamily'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER fontFamily
>>>ADVANCE 1055:31 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1056:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1056:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:fontFamily parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1056:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1056:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1057:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1057:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1057:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1057:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1060:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1060:21 [0] 'foldStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'foldStyle'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER foldStyle
>>>ADVANCE 1060:30 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1061:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1061:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:foldStyle parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1061:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1061:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1062:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1062:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1062:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1062:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1065:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1065:21 [0] 'fadeFoldWidgets'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'fadeFoldWidgets'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER fadeFoldWidgets
>>>ADVANCE 1065:36 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1066:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1066:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:fadeFoldWidgets parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1066:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1066:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1067:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1067:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1067:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1067:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1070:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1070:21 [0] 'readOnly'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'readOnly'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER readOnly
>>>ADVANCE 1070:29 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1071:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1071:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:readOnly parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 1071:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1071:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 1071:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 1071:38 [4] 'readOnly'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'readOnly'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER readOnly
>>>ADVANCE 1071:46 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 1072:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1072:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 1072:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1072:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 1073:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1073:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1073:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1073:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1076:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1076:21 [0] 'highlightGutterLine'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'highlightGutterLine'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER highlightGutterLine
>>>ADVANCE 1076:40 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1077:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1077:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:highlightGutterLine parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1077:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1077:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1078:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1078:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1078:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1078:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1081:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1081:21 [0] 'tabSize'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'tabSize'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER tabSize
>>>ADVANCE 1081:28 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1082:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1082:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:tabSize parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1082:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1082:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1083:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1083:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1083:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1083:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1086:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1086:21 [0] 'displayIndentGuides'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'displayIndentGuides'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER displayIndentGuides
>>>ADVANCE 1086:40 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1087:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1087:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:displayIndentGuides parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1087:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1087:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1088:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1088:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1088:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1088:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1091:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1091:21 [0] 'overwrite'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'overwrite'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER overwrite
>>>ADVANCE 1091:30 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1092:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1092:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:overwrite parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1092:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1092:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1093:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1093:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1093:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1093:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1096:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1096:21 [0] 'scrollSpeed'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'scrollSpeed'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER scrollSpeed
>>>ADVANCE 1096:32 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1097:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1097:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:scrollSpeed parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1097:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1097:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1098:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1098:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1098:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1098:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1101:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1101:21 [0] 'showPrintMargin'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'showPrintMargin'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER showPrintMargin
>>>ADVANCE 1101:36 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1102:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1102:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:showPrintMargin parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1102:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1102:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1103:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1103:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1103:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1103:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1106:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1106:21 [0] 'behavioursEnabled'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'behavioursEnabled'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER behavioursEnabled
>>>ADVANCE 1106:38 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1107:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1107:25 [0] 'initialValue'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:behavioursEnabled parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 1107:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1107:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 1108:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1108:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1108:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1108:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1111:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1111:21 [0] 'hScrollBarAlwaysVisible'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'hScrollBarAlwaysVisible'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER hScrollBarAlwaysVisible
>>>ADVANCE 1111:44 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1112:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1112:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:hScrollBarAlwaysVisible parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1112:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1112:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1113:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1113:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1113:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1113:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1116:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1116:21 [0] 'printMarginColumn'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'printMarginColumn'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER printMarginColumn
>>>ADVANCE 1116:38 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1117:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1117:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:printMarginColumn parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1117:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1117:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1118:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1118:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1118:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1118:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1121:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1121:21 [0] 'fontSize'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'fontSize'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER fontSize
>>>ADVANCE 1121:29 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1122:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1122:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:fontSize parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1122:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1122:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1123:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1123:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1123:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1123:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1126:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1126:21 [0] 'newLineMode'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'newLineMode'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER newLineMode
>>>ADVANCE 1126:32 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1127:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1127:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:newLineMode parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1127:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1127:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1128:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1128:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1128:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1128:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1131:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1131:21 [0] 'wrap'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'wrap'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER wrap
>>>ADVANCE 1131:25 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1132:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1132:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:wrap parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1132:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1132:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1133:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1133:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1133:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1133:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1136:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1136:21 [0] 'animatedScroll'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'animatedScroll'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER animatedScroll
>>>ADVANCE 1136:35 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1137:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1137:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:animatedScroll parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1137:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1137:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1138:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1138:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1138:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1138:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1141:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1141:21 [0] 'firstLineNumber'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'firstLineNumber'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER firstLineNumber
>>>ADVANCE 1141:36 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1142:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1142:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:firstLineNumber parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1142:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1142:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1143:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1143:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1143:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1143:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1146:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1146:21 [0] 'cursorStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'cursorStyle'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER cursorStyle
>>>ADVANCE 1146:32 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1147:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1147:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:cursorStyle parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 1147:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1147:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 1147:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 1147:38 [4] 'val'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'val'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER val
>>>ADVANCE 1147:41 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 1151:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1151:25 [0] 'values'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'values'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER values
>>>ADVANCE 1151:31 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1152:0 [-1] ' '(NEWLINE)
                                NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                                  FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1152:29 [0] 'length'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:values parentIndent:24, blockIndent:28, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:28 block indent:28 parentIndent:24
                                  FreeObjectLiteral TRY NameValuePair on 'length'(IDENTIFIER)
                                    NameValuePair matched OK: IDENTIFIER length
>>>ADVANCE 1152:35 [1] ':'(OPER)
                                    NameValuePair matched OK: : :
>>>ADVANCE 1152:36 [2] 'number'(IDENTIFIER)
                                    NameValuePair TRY VariableRef on 'number'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 1156:0 [-1] ' '(NEWLINE)
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> NameValuePair
                                  FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1156:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:28 parentIndent:24
END freeFormMode [FreeObjectLiteral] blockIndent:28, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                                Parsed OK!-> FreeObjectLiteral
                              Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 1156:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1156:38 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1157:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1157:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1157:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1157:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1160:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1160:21 [0] 'dragDelay'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'dragDelay'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER dragDelay
>>>ADVANCE 1160:30 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1161:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1161:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:dragDelay parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1161:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1161:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1162:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1162:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1162:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1162:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1165:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1165:21 [0] 'showInvisibles'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'showInvisibles'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER showInvisibles
>>>ADVANCE 1165:35 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1166:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1166:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:showInvisibles parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1166:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1166:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1167:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1167:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1167:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1167:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1170:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1170:21 [0] 'useWorker'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'useWorker'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER useWorker
>>>ADVANCE 1170:30 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1171:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1171:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:useWorker parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1171:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1171:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1172:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1172:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1172:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1172:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1175:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1175:21 [0] 'focusTimout'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'focusTimout'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER focusTimout
>>>ADVANCE 1175:32 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1176:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1176:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:focusTimout parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1176:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1176:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1177:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1177:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1177:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1177:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1180:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1180:21 [0] 'selectionStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'selectionStyle'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER selectionStyle
>>>ADVANCE 1180:35 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1181:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1181:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:selectionStyle parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 1181:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1181:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 1181:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 1181:38 [4] 'style'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'style'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER style
>>>ADVANCE 1181:43 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 1182:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1182:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 1182:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1182:38 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1183:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1183:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1183:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1183:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1186:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1186:21 [0] 'wrapBehavioursEnabled'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'wrapBehavioursEnabled'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER wrapBehavioursEnabled
>>>ADVANCE 1186:42 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1187:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1187:25 [0] 'initialValue'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:wrapBehavioursEnabled parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 1187:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1187:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 1188:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1188:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1188:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1188:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1191:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1191:21 [0] 'highlightActiveLine'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'highlightActiveLine'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER highlightActiveLine
>>>ADVANCE 1191:40 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1192:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1192:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:highlightActiveLine parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 1192:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1192:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 1192:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 1192:38 [4] ')'(LITERAL)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair matched OK: ) )
>>>ADVANCE 1193:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1193:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 1193:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1193:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 1194:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1194:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1194:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1194:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1197:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1197:21 [0] 'showFoldWidgets'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'showFoldWidgets'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER showFoldWidgets
>>>ADVANCE 1197:36 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1198:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1198:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:showFoldWidgets parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1198:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1198:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1199:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1199:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1199:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1199:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1202:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1202:21 [0] 'highlightSelectedWord'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'highlightSelectedWord'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER highlightSelectedWord
>>>ADVANCE 1202:42 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1203:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1203:25 [0] 'set'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:highlightSelectedWord parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'set'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER set
>>>ADVANCE 1203:28 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1203:29 [2] 'function'(IDENTIFIER)
                                NameValuePair matched OK: function function
>>>ADVANCE 1203:37 [3] '('(LITERAL)
                                NameValuePair matched OK: ( (
>>>ADVANCE 1203:38 [4] 'shouldHighlight'(IDENTIFIER)
optSeparatedList [NameValuePair] indent:24, get SeparatedList of [VariableDecl] by ',' closer: )
                                NameValuePair TRY VariableDecl on 'shouldHighlight'(IDENTIFIER)
                                  VariableDecl matched OK: IDENTIFIER shouldHighlight
>>>ADVANCE 1203:53 [5] ')'(LITERAL)
                                Parsed OK!-> VariableDecl
                                NameValuePair matched OK: ) )
>>>ADVANCE 1204:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1204:25 [0] 'initialValue'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'initialValue'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER initialValue
>>>ADVANCE 1204:37 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1204:38 [2] 'boolean'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'boolean'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 1205:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1205:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1205:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1205:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1208:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1208:21 [0] 'printMargin'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'printMargin'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER printMargin
>>>ADVANCE 1208:32 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1209:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1209:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:printMargin parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1209:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1209:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1210:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1210:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1210:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1210:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1213:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1213:21 [0] 'showGutter'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          FreeObjectLiteral TRY NameValuePair on 'showGutter'(IDENTIFIER)
                            NameValuePair matched OK: IDENTIFIER showGutter
>>>ADVANCE 1213:31 [1] ':'(OPER)
                            NameValuePair matched OK: : :
>>>ADVANCE 1214:0 [-1] ' '(NEWLINE)
                            NameValuePair TRY FreeObjectLiteral on ' '(NEWLINE)
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1214:25 [0] 'forwardTo'(IDENTIFIER)
optFreeFormList [FreeObjectLiteral] parentname:showGutter parentIndent:20, blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'forwardTo'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER forwardTo
>>>ADVANCE 1214:34 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1214:35 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1215:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1215:25 [0] 'name'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                              FreeObjectLiteral TRY NameValuePair on 'name'(IDENTIFIER)
                                NameValuePair matched OK: IDENTIFIER name
>>>ADVANCE 1215:29 [1] ':'(OPER)
                                NameValuePair matched OK: : :
>>>ADVANCE 1215:30 [2] 'string'(IDENTIFIER)
                                NameValuePair TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1217:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> NameValuePair
                              FreeObjectLiteral matched OK: NEWLINE  
>>>ADVANCE 1217:17 [0] '$selectionStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:24 parentIndent:20
END freeFormMode [FreeObjectLiteral] blockIndent:24, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                            Parsed OK!-> FreeObjectLiteral
                          Parsed OK!-> NameValuePair
freeForm Mode .lexer.indent:16 block indent:20 parentIndent:16
END freeFormMode [FreeObjectLiteral] blockIndent:20, get SeparatedList of [NameValuePair] by ',' closer: -no closer-
                        Parsed OK!-> FreeObjectLiteral
                      Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$selectionStyle'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $selectionStyle
>>>ADVANCE 1217:32 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 1217:33 [2] 'string'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1218:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 1218:17 [0] '$highlightActiveLine'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$highlightActiveLine'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $highlightActiveLine
>>>ADVANCE 1218:37 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 1218:38 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 1219:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 1219:17 [0] '$highlightSelectedWord'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$highlightSelectedWord'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $highlightSelectedWord
>>>ADVANCE 1219:39 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 1219:40 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 1220:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 1220:17 [0] '$readOnly'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$readOnly'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $readOnly
>>>ADVANCE 1220:26 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 1220:27 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 1221:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 1221:17 [0] '$cursorStyle'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$cursorStyle'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $cursorStyle
>>>ADVANCE 1221:29 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 1221:30 [2] 'string'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 1222:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 1222:17 [0] '$behavioursEnabled'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$behavioursEnabled'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $behavioursEnabled
>>>ADVANCE 1222:35 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 1222:36 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 1223:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 1223:17 [0] '$wrapBehavioursEnabled'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$wrapBehavioursEnabled'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $wrapBehavioursEnabled
>>>ADVANCE 1223:39 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 1223:40 [2] 'boolean'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'boolean'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER boolean
>>>ADVANCE 1224:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 1224:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [PropertiesDeclaration] blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                    Parsed OK!-> PropertiesDeclaration
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1224 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1224:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 1224:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1224:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1224:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1224:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1224:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1225:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1225:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1225 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1225:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 1225:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1225:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1225:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1225:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1225:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1226:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1226:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1226 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1226:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 1226:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1226:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1226:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1226:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1226:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1227:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1227:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1227 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1227:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 1227:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1227:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1227:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1227:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1227:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1228:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1228:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1228 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1228:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 1228:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1228:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1228:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1228:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1228:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1229:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1229:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1229 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1229:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 1229:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1229:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1229:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1229:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1229:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1230:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1230:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1230 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1230:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 1230:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1230:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1230:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1230:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1230:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1230:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 1230:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1231:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1231:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1231 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1231:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 1231:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1231:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1231:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1231:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1231:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1231:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 1231:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1232:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1232:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1232 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1232:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 1232:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1232:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1232:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1232:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1232:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1233:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1233:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1233 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1233:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 1233:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1233:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1233:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1233:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1233:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1234:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1234:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1234 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1234:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 1234:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1234:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1234:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1234:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1234:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1235:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1235:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1235 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1235:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 1235:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1235:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1235:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1236:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1236:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1236 12(CODE) method setKeyboardHandler(keyboardHandler)
    'method'(IDENTIFIER) 'setKeyboardHandler'(IDENTIFIER) '('(LITERAL) 'keyboardHandler'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1236:20 [1] 'setKeyboardHandler'(IDENTIFIER)
>>>ADVANCE 1236:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1236:39 [3] 'keyboardHandler'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'keyboardHandler'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER keyboardHandler
>>>ADVANCE 1236:54 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1237:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1237:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1237 12(CODE) method getKeyboardHandler()
    'method'(IDENTIFIER) 'getKeyboardHandler'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1237:20 [1] 'getKeyboardHandler'(IDENTIFIER)
>>>ADVANCE 1237:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1237:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1238:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1238:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1238 12(CODE) method setSession(session)
    'method'(IDENTIFIER) 'setSession'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1238:20 [1] 'setSession'(IDENTIFIER)
>>>ADVANCE 1238:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1238:31 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 1238:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1239:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1239:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1239 12(CODE) method getSession() returns EditSession
    'method'(IDENTIFIER) 'getSession'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) 'returns'(IDENTIFIER) 'EditSession'(IDENTIFIER)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1239:20 [1] 'getSession'(IDENTIFIER)
>>>ADVANCE 1239:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1239:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1239:33 [4] 'returns'(IDENTIFIER)
                      MethodDeclaration matched OK: returns returns
>>>ADVANCE 1239:41 [5] 'EditSession'(IDENTIFIER)
                      MethodDeclaration TRY VariableRef on 'EditSession'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER EditSession
>>>ADVANCE 1241:0 [-1] ' '(NEWLINE)
                      Parsed OK!-> VariableRef
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1241:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1241 12(CODE) method setValue(val, cursorPos)
    'method'(IDENTIFIER) 'setValue'(IDENTIFIER) '('(LITERAL) 'val'(IDENTIFIER) ','(LITERAL) 'cursorPos'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1241:20 [1] 'setValue'(IDENTIFIER)
>>>ADVANCE 1241:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1241:29 [3] 'val'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'val'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER val
>>>ADVANCE 1241:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1241:34 [5] 'cursorPos'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'cursorPos'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER cursorPos
>>>ADVANCE 1241:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1242:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1242:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1242 12(CODE) method getValue()
    'method'(IDENTIFIER) 'getValue'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1242:20 [1] 'getValue'(IDENTIFIER)
>>>ADVANCE 1242:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1242:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1243:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1243:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1243 12(CODE) method getSelection()
    'method'(IDENTIFIER) 'getSelection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1243:20 [1] 'getSelection'(IDENTIFIER)
>>>ADVANCE 1243:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1243:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1244:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1244:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1244 12(CODE) method resize(force)
    'method'(IDENTIFIER) 'resize'(IDENTIFIER) '('(LITERAL) 'force'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1244:20 [1] 'resize'(IDENTIFIER)
>>>ADVANCE 1244:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1244:27 [3] 'force'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'force'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER force
>>>ADVANCE 1244:32 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1245:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1245:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1245 12(CODE) method setTheme(theme)
    'method'(IDENTIFIER) 'setTheme'(IDENTIFIER) '('(LITERAL) 'theme'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1245:20 [1] 'setTheme'(IDENTIFIER)
>>>ADVANCE 1245:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1245:29 [3] 'theme'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'theme'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER theme
>>>ADVANCE 1245:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1246:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1246:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1246 12(CODE) method getTheme()
    'method'(IDENTIFIER) 'getTheme'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1246:20 [1] 'getTheme'(IDENTIFIER)
>>>ADVANCE 1246:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1246:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1247:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1247:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1247 12(CODE) method setStyle(style)
    'method'(IDENTIFIER) 'setStyle'(IDENTIFIER) '('(LITERAL) 'style'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1247:20 [1] 'setStyle'(IDENTIFIER)
>>>ADVANCE 1247:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1247:29 [3] 'style'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'style'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER style
>>>ADVANCE 1247:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1248:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1248:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1248 12(CODE) method unsetStyle(style)
    'method'(IDENTIFIER) 'unsetStyle'(IDENTIFIER) '('(LITERAL) 'style'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1248:20 [1] 'unsetStyle'(IDENTIFIER)
>>>ADVANCE 1248:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1248:31 [3] 'style'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'style'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER style
>>>ADVANCE 1248:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1249:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1249:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1249 12(CODE) method getFontSize()
    'method'(IDENTIFIER) 'getFontSize'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1249:20 [1] 'getFontSize'(IDENTIFIER)
>>>ADVANCE 1249:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1249:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1250:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1250:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1250 12(CODE) method setFontSize(size)
    'method'(IDENTIFIER) 'setFontSize'(IDENTIFIER) '('(LITERAL) 'size'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1250:20 [1] 'setFontSize'(IDENTIFIER)
>>>ADVANCE 1250:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1250:32 [3] 'size'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'size'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER size
>>>ADVANCE 1250:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1251:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1251:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1251 12(CODE) method $highlightBrackets()
    'method'(IDENTIFIER) '$highlightBrackets'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1251:20 [1] '$highlightBrackets'(IDENTIFIER)
>>>ADVANCE 1251:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1251:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1252:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1252:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1252 12(CODE) method focus()
    'method'(IDENTIFIER) 'focus'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1252:20 [1] 'focus'(IDENTIFIER)
>>>ADVANCE 1252:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1252:26 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1253:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1253:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1253 12(CODE) method isFocused()
    'method'(IDENTIFIER) 'isFocused'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1253:20 [1] 'isFocused'(IDENTIFIER)
>>>ADVANCE 1253:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1253:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1254:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1254:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1254 12(CODE) method blur()
    'method'(IDENTIFIER) 'blur'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1254:20 [1] 'blur'(IDENTIFIER)
>>>ADVANCE 1254:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1254:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1255:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1255:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1255 12(CODE) method onFocus()
    'method'(IDENTIFIER) 'onFocus'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1255:20 [1] 'onFocus'(IDENTIFIER)
>>>ADVANCE 1255:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1255:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1256:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1256:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1256 12(CODE) method onBlur()
    'method'(IDENTIFIER) 'onBlur'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1256:20 [1] 'onBlur'(IDENTIFIER)
>>>ADVANCE 1256:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1256:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1257:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1257:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1257 12(CODE) method $cursorChange()
    'method'(IDENTIFIER) '$cursorChange'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1257:20 [1] '$cursorChange'(IDENTIFIER)
>>>ADVANCE 1257:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1257:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1258:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1258:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1258 12(CODE) method onDocumentChange(e)
    'method'(IDENTIFIER) 'onDocumentChange'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1258:20 [1] 'onDocumentChange'(IDENTIFIER)
>>>ADVANCE 1258:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1258:37 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1258:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1259:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1259:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1259 12(CODE) method onTokenizerUpdate(e)
    'method'(IDENTIFIER) 'onTokenizerUpdate'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1259:20 [1] 'onTokenizerUpdate'(IDENTIFIER)
>>>ADVANCE 1259:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1259:38 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1259:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1260:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1260:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1260 12(CODE) method onScrollTopChange()
    'method'(IDENTIFIER) 'onScrollTopChange'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1260:20 [1] 'onScrollTopChange'(IDENTIFIER)
>>>ADVANCE 1260:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1260:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1261:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1261:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1261 12(CODE) method onScrollLeftChange()
    'method'(IDENTIFIER) 'onScrollLeftChange'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1261:20 [1] 'onScrollLeftChange'(IDENTIFIER)
>>>ADVANCE 1261:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1261:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1262:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1262:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1262 12(CODE) method onCursorChange()
    'method'(IDENTIFIER) 'onCursorChange'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1262:20 [1] 'onCursorChange'(IDENTIFIER)
>>>ADVANCE 1262:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1262:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1263:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1263:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1263 12(CODE) method $updateHighlightActiveLine()
    'method'(IDENTIFIER) '$updateHighlightActiveLine'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1263:20 [1] '$updateHighlightActiveLine'(IDENTIFIER)
>>>ADVANCE 1263:46 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1263:47 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1264:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1264:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1264 12(CODE) method onSelectionChange(e)
    'method'(IDENTIFIER) 'onSelectionChange'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1264:20 [1] 'onSelectionChange'(IDENTIFIER)
>>>ADVANCE 1264:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1264:38 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1264:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1265:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1265:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1265 12(CODE) method $getSelectionHighLightRegexp()
    'method'(IDENTIFIER) '$getSelectionHighLightRegexp'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1265:20 [1] '$getSelectionHighLightRegexp'(IDENTIFIER)
>>>ADVANCE 1265:48 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1265:49 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1266:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1266:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1266 12(CODE) method onChangeFrontMarker()
    'method'(IDENTIFIER) 'onChangeFrontMarker'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1266:20 [1] 'onChangeFrontMarker'(IDENTIFIER)
>>>ADVANCE 1266:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1266:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1267:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1267:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1267 12(CODE) method onChangeBackMarker()
    'method'(IDENTIFIER) 'onChangeBackMarker'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1267:20 [1] 'onChangeBackMarker'(IDENTIFIER)
>>>ADVANCE 1267:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1267:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1268:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1268:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1268 12(CODE) method onChangeBreakpoint()
    'method'(IDENTIFIER) 'onChangeBreakpoint'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1268:20 [1] 'onChangeBreakpoint'(IDENTIFIER)
>>>ADVANCE 1268:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1268:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1269:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1269:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1269 12(CODE) method onChangeAnnotation()
    'method'(IDENTIFIER) 'onChangeAnnotation'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1269:20 [1] 'onChangeAnnotation'(IDENTIFIER)
>>>ADVANCE 1269:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1269:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1270:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1270:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1270 12(CODE) method onChangeMode(e)
    'method'(IDENTIFIER) 'onChangeMode'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1270:20 [1] 'onChangeMode'(IDENTIFIER)
>>>ADVANCE 1270:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1270:33 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1270:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1271:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1271:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1271 12(CODE) method onChangeWrapLimit()
    'method'(IDENTIFIER) 'onChangeWrapLimit'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1271:20 [1] 'onChangeWrapLimit'(IDENTIFIER)
>>>ADVANCE 1271:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1271:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1272:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1272:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1272 12(CODE) method onChangeWrapMode()
    'method'(IDENTIFIER) 'onChangeWrapMode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1272:20 [1] 'onChangeWrapMode'(IDENTIFIER)
>>>ADVANCE 1272:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1272:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1273:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1273:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1273 12(CODE) method onChangeFold()
    'method'(IDENTIFIER) 'onChangeFold'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1273:20 [1] 'onChangeFold'(IDENTIFIER)
>>>ADVANCE 1273:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1273:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1274:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1274:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1274 12(CODE) method getCopyText()
    'method'(IDENTIFIER) 'getCopyText'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1274:20 [1] 'getCopyText'(IDENTIFIER)
>>>ADVANCE 1274:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1274:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1275:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1275:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1275 12(CODE) method onCopy()
    'method'(IDENTIFIER) 'onCopy'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1275:20 [1] 'onCopy'(IDENTIFIER)
>>>ADVANCE 1275:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1275:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1276:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1276:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1276 12(CODE) method onCut()
    'method'(IDENTIFIER) 'onCut'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1276:20 [1] 'onCut'(IDENTIFIER)
>>>ADVANCE 1276:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1276:26 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1277:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1277:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1277 12(CODE) method onPaste(text)
    'method'(IDENTIFIER) 'onPaste'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1277:20 [1] 'onPaste'(IDENTIFIER)
>>>ADVANCE 1277:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1277:28 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 1277:32 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1278:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1278:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1278 12(CODE) method execCommand(command, args)
    'method'(IDENTIFIER) 'execCommand'(IDENTIFIER) '('(LITERAL) 'command'(IDENTIFIER) ','(LITERAL) 'args'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1278:20 [1] 'execCommand'(IDENTIFIER)
>>>ADVANCE 1278:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1278:32 [3] 'command'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'command'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER command
>>>ADVANCE 1278:39 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1278:41 [5] 'args'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'args'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER args
>>>ADVANCE 1278:45 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1279:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1279:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1279 12(CODE) method insert(text)
    'method'(IDENTIFIER) 'insert'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1279:20 [1] 'insert'(IDENTIFIER)
>>>ADVANCE 1279:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1279:27 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 1279:31 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1280:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1280:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1280 12(CODE) method onTextInput(text)
    'method'(IDENTIFIER) 'onTextInput'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1280:20 [1] 'onTextInput'(IDENTIFIER)
>>>ADVANCE 1280:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1280:32 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 1280:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1281:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1281:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1281 12(CODE) method onCommandKey(e, hashId, keyCode)
    'method'(IDENTIFIER) 'onCommandKey'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ','(LITERAL) 'hashId'(IDENTIFIER) ','(LITERAL) 'keyCode'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1281:20 [1] 'onCommandKey'(IDENTIFIER)
>>>ADVANCE 1281:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1281:33 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1281:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1281:36 [5] 'hashId'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'hashId'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER hashId
>>>ADVANCE 1281:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1281:44 [7] 'keyCode'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'keyCode'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER keyCode
>>>ADVANCE 1281:51 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1282:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1282:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1282 12(CODE) method setOverwrite(overwrite)
    'method'(IDENTIFIER) 'setOverwrite'(IDENTIFIER) '('(LITERAL) 'overwrite'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1282:20 [1] 'setOverwrite'(IDENTIFIER)
>>>ADVANCE 1282:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1282:33 [3] 'overwrite'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'overwrite'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER overwrite
>>>ADVANCE 1282:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1283:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1283:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1283 12(CODE) method getOverwrite()
    'method'(IDENTIFIER) 'getOverwrite'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1283:20 [1] 'getOverwrite'(IDENTIFIER)
>>>ADVANCE 1283:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1283:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1284:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1284:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1284 12(CODE) method toggleOverwrite()
    'method'(IDENTIFIER) 'toggleOverwrite'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1284:20 [1] 'toggleOverwrite'(IDENTIFIER)
>>>ADVANCE 1284:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1284:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1285:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1285:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1285 12(CODE) method setScrollSpeed(speed)
    'method'(IDENTIFIER) 'setScrollSpeed'(IDENTIFIER) '('(LITERAL) 'speed'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1285:20 [1] 'setScrollSpeed'(IDENTIFIER)
>>>ADVANCE 1285:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1285:35 [3] 'speed'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'speed'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER speed
>>>ADVANCE 1285:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1286:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1286:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1286 12(CODE) method getScrollSpeed()
    'method'(IDENTIFIER) 'getScrollSpeed'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1286:20 [1] 'getScrollSpeed'(IDENTIFIER)
>>>ADVANCE 1286:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1286:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1287:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1287:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1287 12(CODE) method setDragDelay(dragDelay)
    'method'(IDENTIFIER) 'setDragDelay'(IDENTIFIER) '('(LITERAL) 'dragDelay'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1287:20 [1] 'setDragDelay'(IDENTIFIER)
>>>ADVANCE 1287:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1287:33 [3] 'dragDelay'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'dragDelay'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER dragDelay
>>>ADVANCE 1287:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1288:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1288:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1288 12(CODE) method getDragDelay()
    'method'(IDENTIFIER) 'getDragDelay'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1288:20 [1] 'getDragDelay'(IDENTIFIER)
>>>ADVANCE 1288:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1288:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1289:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1289:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1289 12(CODE) method setSelectionStyle(val)
    'method'(IDENTIFIER) 'setSelectionStyle'(IDENTIFIER) '('(LITERAL) 'val'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1289:20 [1] 'setSelectionStyle'(IDENTIFIER)
>>>ADVANCE 1289:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1289:38 [3] 'val'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'val'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER val
>>>ADVANCE 1289:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1290:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1290:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1290 12(CODE) method getSelectionStyle()
    'method'(IDENTIFIER) 'getSelectionStyle'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1290:20 [1] 'getSelectionStyle'(IDENTIFIER)
>>>ADVANCE 1290:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1290:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1291:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1291:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1291 12(CODE) method setHighlightActiveLine(shouldHighlight)
    'method'(IDENTIFIER) 'setHighlightActiveLine'(IDENTIFIER) '('(LITERAL) 'shouldHighlight'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1291:20 [1] 'setHighlightActiveLine'(IDENTIFIER)
>>>ADVANCE 1291:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1291:43 [3] 'shouldHighlight'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'shouldHighlight'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER shouldHighlight
>>>ADVANCE 1291:58 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1292:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1292:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1292 12(CODE) method getHighlightActiveLine()
    'method'(IDENTIFIER) 'getHighlightActiveLine'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1292:20 [1] 'getHighlightActiveLine'(IDENTIFIER)
>>>ADVANCE 1292:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1292:43 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1293:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1293:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1293 12(CODE) method setHighlightGutterLine(shouldHighlight)
    'method'(IDENTIFIER) 'setHighlightGutterLine'(IDENTIFIER) '('(LITERAL) 'shouldHighlight'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1293:20 [1] 'setHighlightGutterLine'(IDENTIFIER)
>>>ADVANCE 1293:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1293:43 [3] 'shouldHighlight'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'shouldHighlight'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER shouldHighlight
>>>ADVANCE 1293:58 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1294:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1294:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1294 12(CODE) method getHighlightGutterLine()
    'method'(IDENTIFIER) 'getHighlightGutterLine'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1294:20 [1] 'getHighlightGutterLine'(IDENTIFIER)
>>>ADVANCE 1294:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1294:43 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1295:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1295:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1295 12(CODE) method setHighlightSelectedWord(shouldHighlight)
    'method'(IDENTIFIER) 'setHighlightSelectedWord'(IDENTIFIER) '('(LITERAL) 'shouldHighlight'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1295:20 [1] 'setHighlightSelectedWord'(IDENTIFIER)
>>>ADVANCE 1295:44 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1295:45 [3] 'shouldHighlight'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'shouldHighlight'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER shouldHighlight
>>>ADVANCE 1295:60 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1296:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1296:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1296 12(CODE) method getHighlightSelectedWord()
    'method'(IDENTIFIER) 'getHighlightSelectedWord'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1296:20 [1] 'getHighlightSelectedWord'(IDENTIFIER)
>>>ADVANCE 1296:44 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1296:45 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1297:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1297:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1297 12(CODE) method setAnimatedScroll(shouldAnimate)
    'method'(IDENTIFIER) 'setAnimatedScroll'(IDENTIFIER) '('(LITERAL) 'shouldAnimate'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1297:20 [1] 'setAnimatedScroll'(IDENTIFIER)
>>>ADVANCE 1297:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1297:38 [3] 'shouldAnimate'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'shouldAnimate'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER shouldAnimate
>>>ADVANCE 1297:51 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1298:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1298:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1298 12(CODE) method getAnimatedScroll()
    'method'(IDENTIFIER) 'getAnimatedScroll'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1298:20 [1] 'getAnimatedScroll'(IDENTIFIER)
>>>ADVANCE 1298:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1298:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1299:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1299:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1299 12(CODE) method setShowInvisibles(showInvisibles)
    'method'(IDENTIFIER) 'setShowInvisibles'(IDENTIFIER) '('(LITERAL) 'showInvisibles'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1299:20 [1] 'setShowInvisibles'(IDENTIFIER)
>>>ADVANCE 1299:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1299:38 [3] 'showInvisibles'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'showInvisibles'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER showInvisibles
>>>ADVANCE 1299:52 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1300:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1300:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1300 12(CODE) method getShowInvisibles()
    'method'(IDENTIFIER) 'getShowInvisibles'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1300:20 [1] 'getShowInvisibles'(IDENTIFIER)
>>>ADVANCE 1300:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1300:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1301:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1301:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1301 12(CODE) method setDisplayIndentGuides(display)
    'method'(IDENTIFIER) 'setDisplayIndentGuides'(IDENTIFIER) '('(LITERAL) 'display'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1301:20 [1] 'setDisplayIndentGuides'(IDENTIFIER)
>>>ADVANCE 1301:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1301:43 [3] 'display'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'display'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER display
>>>ADVANCE 1301:50 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1302:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1302:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1302 12(CODE) method getDisplayIndentGuides()
    'method'(IDENTIFIER) 'getDisplayIndentGuides'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1302:20 [1] 'getDisplayIndentGuides'(IDENTIFIER)
>>>ADVANCE 1302:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1302:43 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1303:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1303:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1303 12(CODE) method setShowPrintMargin(showPrintMargin)
    'method'(IDENTIFIER) 'setShowPrintMargin'(IDENTIFIER) '('(LITERAL) 'showPrintMargin'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1303:20 [1] 'setShowPrintMargin'(IDENTIFIER)
>>>ADVANCE 1303:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1303:39 [3] 'showPrintMargin'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'showPrintMargin'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER showPrintMargin
>>>ADVANCE 1303:54 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1304:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1304:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1304 12(CODE) method getShowPrintMargin()
    'method'(IDENTIFIER) 'getShowPrintMargin'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1304:20 [1] 'getShowPrintMargin'(IDENTIFIER)
>>>ADVANCE 1304:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1304:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1305:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1305:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1305 12(CODE) method setPrintMarginColumn(showPrintMargin)
    'method'(IDENTIFIER) 'setPrintMarginColumn'(IDENTIFIER) '('(LITERAL) 'showPrintMargin'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1305:20 [1] 'setPrintMarginColumn'(IDENTIFIER)
>>>ADVANCE 1305:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1305:41 [3] 'showPrintMargin'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'showPrintMargin'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER showPrintMargin
>>>ADVANCE 1305:56 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1306:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1306:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1306 12(CODE) method getPrintMarginColumn()
    'method'(IDENTIFIER) 'getPrintMarginColumn'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1306:20 [1] 'getPrintMarginColumn'(IDENTIFIER)
>>>ADVANCE 1306:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1306:41 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1307:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1307:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1307 12(CODE) method setReadOnly(readOnly)
    'method'(IDENTIFIER) 'setReadOnly'(IDENTIFIER) '('(LITERAL) 'readOnly'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1307:20 [1] 'setReadOnly'(IDENTIFIER)
>>>ADVANCE 1307:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1307:32 [3] 'readOnly'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'readOnly'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER readOnly
>>>ADVANCE 1307:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1308:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1308:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1308 12(CODE) method getReadOnly()
    'method'(IDENTIFIER) 'getReadOnly'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1308:20 [1] 'getReadOnly'(IDENTIFIER)
>>>ADVANCE 1308:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1308:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1309:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1309:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1309 12(CODE) method setBehavioursEnabled(enabled)
    'method'(IDENTIFIER) 'setBehavioursEnabled'(IDENTIFIER) '('(LITERAL) 'enabled'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1309:20 [1] 'setBehavioursEnabled'(IDENTIFIER)
>>>ADVANCE 1309:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1309:41 [3] 'enabled'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'enabled'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER enabled
>>>ADVANCE 1309:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1310:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1310:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1310 12(CODE) method getBehavioursEnabled()
    'method'(IDENTIFIER) 'getBehavioursEnabled'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1310:20 [1] 'getBehavioursEnabled'(IDENTIFIER)
>>>ADVANCE 1310:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1310:41 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1311:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1311:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1311 12(CODE) method setWrapBehavioursEnabled(enabled)
    'method'(IDENTIFIER) 'setWrapBehavioursEnabled'(IDENTIFIER) '('(LITERAL) 'enabled'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1311:20 [1] 'setWrapBehavioursEnabled'(IDENTIFIER)
>>>ADVANCE 1311:44 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1311:45 [3] 'enabled'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'enabled'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER enabled
>>>ADVANCE 1311:52 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1312:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1312:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1312 12(CODE) method getWrapBehavioursEnabled()
    'method'(IDENTIFIER) 'getWrapBehavioursEnabled'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1312:20 [1] 'getWrapBehavioursEnabled'(IDENTIFIER)
>>>ADVANCE 1312:44 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1312:45 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1313:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1313:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1313 12(CODE) method setShowFoldWidgets(show)
    'method'(IDENTIFIER) 'setShowFoldWidgets'(IDENTIFIER) '('(LITERAL) 'show'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1313:20 [1] 'setShowFoldWidgets'(IDENTIFIER)
>>>ADVANCE 1313:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1313:39 [3] 'show'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'show'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER show
>>>ADVANCE 1313:43 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1314:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1314:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1314 12(CODE) method getShowFoldWidgets()
    'method'(IDENTIFIER) 'getShowFoldWidgets'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1314:20 [1] 'getShowFoldWidgets'(IDENTIFIER)
>>>ADVANCE 1314:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1314:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1315:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1315:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1315 12(CODE) method setFadeFoldWidgets(fade)
    'method'(IDENTIFIER) 'setFadeFoldWidgets'(IDENTIFIER) '('(LITERAL) 'fade'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1315:20 [1] 'setFadeFoldWidgets'(IDENTIFIER)
>>>ADVANCE 1315:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1315:39 [3] 'fade'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'fade'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER fade
>>>ADVANCE 1315:43 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1316:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1316:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1316 12(CODE) method getFadeFoldWidgets()
    'method'(IDENTIFIER) 'getFadeFoldWidgets'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1316:20 [1] 'getFadeFoldWidgets'(IDENTIFIER)
>>>ADVANCE 1316:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1316:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1317:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1317:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1317 12(CODE) method remove(dir)
    'method'(IDENTIFIER) 'remove'(IDENTIFIER) '('(LITERAL) 'dir'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1317:20 [1] 'remove'(IDENTIFIER)
>>>ADVANCE 1317:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1317:27 [3] 'dir'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'dir'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER dir
>>>ADVANCE 1317:30 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1318:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1318:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1318 12(CODE) method removeWordRight()
    'method'(IDENTIFIER) 'removeWordRight'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1318:20 [1] 'removeWordRight'(IDENTIFIER)
>>>ADVANCE 1318:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1318:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1319:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1319:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1319 12(CODE) method removeWordLeft()
    'method'(IDENTIFIER) 'removeWordLeft'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1319:20 [1] 'removeWordLeft'(IDENTIFIER)
>>>ADVANCE 1319:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1319:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1320:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1320:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1320 12(CODE) method removeToLineStart()
    'method'(IDENTIFIER) 'removeToLineStart'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1320:20 [1] 'removeToLineStart'(IDENTIFIER)
>>>ADVANCE 1320:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1320:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1321:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1321:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1321 12(CODE) method removeToLineEnd()
    'method'(IDENTIFIER) 'removeToLineEnd'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1321:20 [1] 'removeToLineEnd'(IDENTIFIER)
>>>ADVANCE 1321:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1321:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1322:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1322:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1322 12(CODE) method splitLine()
    'method'(IDENTIFIER) 'splitLine'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1322:20 [1] 'splitLine'(IDENTIFIER)
>>>ADVANCE 1322:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1322:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1323:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1323:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1323 12(CODE) method transposeLetters()
    'method'(IDENTIFIER) 'transposeLetters'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1323:20 [1] 'transposeLetters'(IDENTIFIER)
>>>ADVANCE 1323:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1323:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1324:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1324:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1324 12(CODE) method toLowerCase()
    'method'(IDENTIFIER) 'toLowerCase'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1324:20 [1] 'toLowerCase'(IDENTIFIER)
>>>ADVANCE 1324:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1324:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1325:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1325:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1325 12(CODE) method toUpperCase()
    'method'(IDENTIFIER) 'toUpperCase'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1325:20 [1] 'toUpperCase'(IDENTIFIER)
>>>ADVANCE 1325:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1325:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1326:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1326:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1326 12(CODE) method indent()
    'method'(IDENTIFIER) 'indent'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1326:20 [1] 'indent'(IDENTIFIER)
>>>ADVANCE 1326:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1326:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1327:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1327:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1327 12(CODE) method blockIndent()
    'method'(IDENTIFIER) 'blockIndent'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1327:20 [1] 'blockIndent'(IDENTIFIER)
>>>ADVANCE 1327:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1327:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1328:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1328:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1328 12(CODE) method blockOutdent()
    'method'(IDENTIFIER) 'blockOutdent'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1328:20 [1] 'blockOutdent'(IDENTIFIER)
>>>ADVANCE 1328:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1328:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1329:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1329:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1329 12(CODE) method sortLines()
    'method'(IDENTIFIER) 'sortLines'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1329:20 [1] 'sortLines'(IDENTIFIER)
>>>ADVANCE 1329:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1329:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1330:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1330:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1330 12(CODE) method toggleCommentLines()
    'method'(IDENTIFIER) 'toggleCommentLines'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1330:20 [1] 'toggleCommentLines'(IDENTIFIER)
>>>ADVANCE 1330:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1330:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1331:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1331:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1331 12(CODE) method toggleBlockComment()
    'method'(IDENTIFIER) 'toggleBlockComment'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1331:20 [1] 'toggleBlockComment'(IDENTIFIER)
>>>ADVANCE 1331:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1331:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1332:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1332:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1332 12(CODE) method getNumberAt( row, column )
    'method'(IDENTIFIER) 'getNumberAt'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1332:20 [1] 'getNumberAt'(IDENTIFIER)
>>>ADVANCE 1332:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1332:33 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1332:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1332:38 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1332:45 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1333:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1333:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1333 12(CODE) method modifyNumber(amount)
    'method'(IDENTIFIER) 'modifyNumber'(IDENTIFIER) '('(LITERAL) 'amount'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1333:20 [1] 'modifyNumber'(IDENTIFIER)
>>>ADVANCE 1333:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1333:33 [3] 'amount'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'amount'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER amount
>>>ADVANCE 1333:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1334:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1334:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1334 12(CODE) method removeLines()
    'method'(IDENTIFIER) 'removeLines'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1334:20 [1] 'removeLines'(IDENTIFIER)
>>>ADVANCE 1334:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1334:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1335:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1335:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1335 12(CODE) method duplicateSelection()
    'method'(IDENTIFIER) 'duplicateSelection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1335:20 [1] 'duplicateSelection'(IDENTIFIER)
>>>ADVANCE 1335:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1335:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1336:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1336:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1336 12(CODE) method moveLinesDown()
    'method'(IDENTIFIER) 'moveLinesDown'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1336:20 [1] 'moveLinesDown'(IDENTIFIER)
>>>ADVANCE 1336:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1336:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1337:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1337:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1337 12(CODE) method moveLinesUp()
    'method'(IDENTIFIER) 'moveLinesUp'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1337:20 [1] 'moveLinesUp'(IDENTIFIER)
>>>ADVANCE 1337:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1337:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1338:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1338:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1338 12(CODE) method moveText(range, toPosition)
    'method'(IDENTIFIER) 'moveText'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'toPosition'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1338:20 [1] 'moveText'(IDENTIFIER)
>>>ADVANCE 1338:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1338:29 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 1338:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1338:36 [5] 'toPosition'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'toPosition'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER toPosition
>>>ADVANCE 1338:46 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1339:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1339:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1339 12(CODE) method copyLinesUp()
    'method'(IDENTIFIER) 'copyLinesUp'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1339:20 [1] 'copyLinesUp'(IDENTIFIER)
>>>ADVANCE 1339:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1339:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1340:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1340:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1340 12(CODE) method copyLinesDown()
    'method'(IDENTIFIER) 'copyLinesDown'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1340:20 [1] 'copyLinesDown'(IDENTIFIER)
>>>ADVANCE 1340:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1340:34 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1341:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1341:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1341 12(CODE) method $moveLines(mover)
    'method'(IDENTIFIER) '$moveLines'(IDENTIFIER) '('(LITERAL) 'mover'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1341:20 [1] '$moveLines'(IDENTIFIER)
>>>ADVANCE 1341:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1341:31 [3] 'mover'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'mover'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER mover
>>>ADVANCE 1341:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1342:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1342:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1342 12(CODE) method $getSelectedRows()
    'method'(IDENTIFIER) '$getSelectedRows'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1342:20 [1] '$getSelectedRows'(IDENTIFIER)
>>>ADVANCE 1342:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1342:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1343:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1343:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1343 12(CODE) method onCompositionStart(text)
    'method'(IDENTIFIER) 'onCompositionStart'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1343:20 [1] 'onCompositionStart'(IDENTIFIER)
>>>ADVANCE 1343:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1343:39 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 1343:43 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1344:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1344:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1344 12(CODE) method onCompositionUpdate(text)
    'method'(IDENTIFIER) 'onCompositionUpdate'(IDENTIFIER) '('(LITERAL) 'text'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1344:20 [1] 'onCompositionUpdate'(IDENTIFIER)
>>>ADVANCE 1344:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1344:40 [3] 'text'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'text'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER text
>>>ADVANCE 1344:44 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1345:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1345:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1345 12(CODE) method onCompositionEnd()
    'method'(IDENTIFIER) 'onCompositionEnd'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1345:20 [1] 'onCompositionEnd'(IDENTIFIER)
>>>ADVANCE 1345:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1345:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1346:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1346:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1346 12(CODE) method getFirstVisibleRow()
    'method'(IDENTIFIER) 'getFirstVisibleRow'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1346:20 [1] 'getFirstVisibleRow'(IDENTIFIER)
>>>ADVANCE 1346:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1346:39 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1347:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1347:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1347 12(CODE) method getLastVisibleRow()
    'method'(IDENTIFIER) 'getLastVisibleRow'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1347:20 [1] 'getLastVisibleRow'(IDENTIFIER)
>>>ADVANCE 1347:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1347:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1348:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1348:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1348 12(CODE) method isRowVisible(row)
    'method'(IDENTIFIER) 'isRowVisible'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1348:20 [1] 'isRowVisible'(IDENTIFIER)
>>>ADVANCE 1348:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1348:33 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1348:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1349:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1349:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1349 12(CODE) method isRowFullyVisible(row)
    'method'(IDENTIFIER) 'isRowFullyVisible'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1349:20 [1] 'isRowFullyVisible'(IDENTIFIER)
>>>ADVANCE 1349:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1349:38 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1349:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1350:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1350:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1350 12(CODE) method $getVisibleRowCount()
    'method'(IDENTIFIER) '$getVisibleRowCount'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1350:20 [1] '$getVisibleRowCount'(IDENTIFIER)
>>>ADVANCE 1350:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1350:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1351:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1351:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1351 12(CODE) method $moveByPage(dir, select)
    'method'(IDENTIFIER) '$moveByPage'(IDENTIFIER) '('(LITERAL) 'dir'(IDENTIFIER) ','(LITERAL) 'select'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1351:20 [1] '$moveByPage'(IDENTIFIER)
>>>ADVANCE 1351:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1351:32 [3] 'dir'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'dir'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER dir
>>>ADVANCE 1351:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1351:37 [5] 'select'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'select'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER select
>>>ADVANCE 1351:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1352:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1352:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1352 12(CODE) method selectPageDown()
    'method'(IDENTIFIER) 'selectPageDown'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1352:20 [1] 'selectPageDown'(IDENTIFIER)
>>>ADVANCE 1352:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1352:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1353:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1353:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1353 12(CODE) method selectPageUp()
    'method'(IDENTIFIER) 'selectPageUp'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1353:20 [1] 'selectPageUp'(IDENTIFIER)
>>>ADVANCE 1353:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1353:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1354:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1354:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1354 12(CODE) method gotoPageDown()
    'method'(IDENTIFIER) 'gotoPageDown'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1354:20 [1] 'gotoPageDown'(IDENTIFIER)
>>>ADVANCE 1354:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1354:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1355:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1355:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1355 12(CODE) method gotoPageUp()
    'method'(IDENTIFIER) 'gotoPageUp'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1355:20 [1] 'gotoPageUp'(IDENTIFIER)
>>>ADVANCE 1355:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1355:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1356:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1356:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1356 12(CODE) method scrollPageDown()
    'method'(IDENTIFIER) 'scrollPageDown'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1356:20 [1] 'scrollPageDown'(IDENTIFIER)
>>>ADVANCE 1356:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1356:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1357:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1357:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1357 12(CODE) method scrollPageUp()
    'method'(IDENTIFIER) 'scrollPageUp'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1357:20 [1] 'scrollPageUp'(IDENTIFIER)
>>>ADVANCE 1357:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1357:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1358:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1358:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1358 12(CODE) method scrollToRow(row)
    'method'(IDENTIFIER) 'scrollToRow'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1358:20 [1] 'scrollToRow'(IDENTIFIER)
>>>ADVANCE 1358:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1358:32 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1358:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1359:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1359:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1359 12(CODE) method scrollToLine(line, center, animate, callback)
    'method'(IDENTIFIER) 'scrollToLine'(IDENTIFIER) '('(LITERAL) 'line'(IDENTIFIER) ','(LITERAL) 'center'(IDENTIFIER) ','(LITERAL) 'animate'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1359:20 [1] 'scrollToLine'(IDENTIFIER)
>>>ADVANCE 1359:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1359:33 [3] 'line'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'line'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER line
>>>ADVANCE 1359:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1359:39 [5] 'center'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'center'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER center
>>>ADVANCE 1359:45 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1359:47 [7] 'animate'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'animate'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER animate
>>>ADVANCE 1359:54 [8] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1359:56 [9] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1359:64 [10] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1360:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1360:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1360 12(CODE) method centerSelection()
    'method'(IDENTIFIER) 'centerSelection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1360:20 [1] 'centerSelection'(IDENTIFIER)
>>>ADVANCE 1360:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1360:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1361:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1361:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1361 12(CODE) method getCursorPosition()
    'method'(IDENTIFIER) 'getCursorPosition'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1361:20 [1] 'getCursorPosition'(IDENTIFIER)
>>>ADVANCE 1361:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1361:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1362:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1362:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1362 12(CODE) method getCursorPositionScreen()
    'method'(IDENTIFIER) 'getCursorPositionScreen'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1362:20 [1] 'getCursorPositionScreen'(IDENTIFIER)
>>>ADVANCE 1362:43 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1362:44 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1363:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1363:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1363 12(CODE) method getSelectionRange()
    'method'(IDENTIFIER) 'getSelectionRange'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1363:20 [1] 'getSelectionRange'(IDENTIFIER)
>>>ADVANCE 1363:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1363:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1364:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1364:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1364 12(CODE) method selectAll()
    'method'(IDENTIFIER) 'selectAll'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1364:20 [1] 'selectAll'(IDENTIFIER)
>>>ADVANCE 1364:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1364:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1365:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1365:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1365 12(CODE) method clearSelection()
    'method'(IDENTIFIER) 'clearSelection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1365:20 [1] 'clearSelection'(IDENTIFIER)
>>>ADVANCE 1365:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1365:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1366:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1366:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1366 12(CODE) method moveCursorTo(row, column)
    'method'(IDENTIFIER) 'moveCursorTo'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1366:20 [1] 'moveCursorTo'(IDENTIFIER)
>>>ADVANCE 1366:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1366:33 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1366:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1366:38 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1366:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1367:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1367:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1367 12(CODE) method moveCursorToPosition(pos)
    'method'(IDENTIFIER) 'moveCursorToPosition'(IDENTIFIER) '('(LITERAL) 'pos'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1367:20 [1] 'moveCursorToPosition'(IDENTIFIER)
>>>ADVANCE 1367:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1367:41 [3] 'pos'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'pos'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER pos
>>>ADVANCE 1367:44 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1368:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1368:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1368 12(CODE) method jumpToMatching(select)
    'method'(IDENTIFIER) 'jumpToMatching'(IDENTIFIER) '('(LITERAL) 'select'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1368:20 [1] 'jumpToMatching'(IDENTIFIER)
>>>ADVANCE 1368:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1368:35 [3] 'select'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'select'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER select
>>>ADVANCE 1368:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1369:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1369:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1369 12(CODE) method gotoLine(lineNumber, column, animate)
    'method'(IDENTIFIER) 'gotoLine'(IDENTIFIER) '('(LITERAL) 'lineNumber'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ','(LITERAL) 'animate'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1369:20 [1] 'gotoLine'(IDENTIFIER)
>>>ADVANCE 1369:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1369:29 [3] 'lineNumber'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'lineNumber'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lineNumber
>>>ADVANCE 1369:39 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1369:41 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1369:47 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1369:49 [7] 'animate'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'animate'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER animate
>>>ADVANCE 1369:56 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1370:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1370:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1370 12(CODE) method navigateTo(row, column)
    'method'(IDENTIFIER) 'navigateTo'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1370:20 [1] 'navigateTo'(IDENTIFIER)
>>>ADVANCE 1370:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1370:31 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1370:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1370:36 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1370:42 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1371:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1371:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1371 12(CODE) method navigateUp(times)
    'method'(IDENTIFIER) 'navigateUp'(IDENTIFIER) '('(LITERAL) 'times'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1371:20 [1] 'navigateUp'(IDENTIFIER)
>>>ADVANCE 1371:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1371:31 [3] 'times'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'times'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER times
>>>ADVANCE 1371:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1372:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1372:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1372 12(CODE) method navigateDown(times)
    'method'(IDENTIFIER) 'navigateDown'(IDENTIFIER) '('(LITERAL) 'times'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1372:20 [1] 'navigateDown'(IDENTIFIER)
>>>ADVANCE 1372:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1372:33 [3] 'times'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'times'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER times
>>>ADVANCE 1372:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1373:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1373:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1373 12(CODE) method navigateLeft(times)
    'method'(IDENTIFIER) 'navigateLeft'(IDENTIFIER) '('(LITERAL) 'times'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1373:20 [1] 'navigateLeft'(IDENTIFIER)
>>>ADVANCE 1373:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1373:33 [3] 'times'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'times'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER times
>>>ADVANCE 1373:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1374:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1374:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1374 12(CODE) method navigateRight(times)
    'method'(IDENTIFIER) 'navigateRight'(IDENTIFIER) '('(LITERAL) 'times'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1374:20 [1] 'navigateRight'(IDENTIFIER)
>>>ADVANCE 1374:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1374:34 [3] 'times'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'times'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER times
>>>ADVANCE 1374:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1375:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1375:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1375 12(CODE) method navigateLineStart()
    'method'(IDENTIFIER) 'navigateLineStart'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1375:20 [1] 'navigateLineStart'(IDENTIFIER)
>>>ADVANCE 1375:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1375:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1376:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1376:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1376 12(CODE) method navigateLineEnd()
    'method'(IDENTIFIER) 'navigateLineEnd'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1376:20 [1] 'navigateLineEnd'(IDENTIFIER)
>>>ADVANCE 1376:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1376:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1377:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1377:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1377 12(CODE) method navigateFileEnd()
    'method'(IDENTIFIER) 'navigateFileEnd'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1377:20 [1] 'navigateFileEnd'(IDENTIFIER)
>>>ADVANCE 1377:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1377:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1378:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1378:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1378 12(CODE) method navigateFileStart()
    'method'(IDENTIFIER) 'navigateFileStart'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1378:20 [1] 'navigateFileStart'(IDENTIFIER)
>>>ADVANCE 1378:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1378:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1379:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1379:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1379 12(CODE) method navigateWordRight()
    'method'(IDENTIFIER) 'navigateWordRight'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1379:20 [1] 'navigateWordRight'(IDENTIFIER)
>>>ADVANCE 1379:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1379:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1380:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1380:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1380 12(CODE) method navigateWordLeft()
    'method'(IDENTIFIER) 'navigateWordLeft'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1380:20 [1] 'navigateWordLeft'(IDENTIFIER)
>>>ADVANCE 1380:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1380:37 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1381:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1381:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1381 12(CODE) method replace(replacement, options)
    'method'(IDENTIFIER) 'replace'(IDENTIFIER) '('(LITERAL) 'replacement'(IDENTIFIER) ','(LITERAL) 'options'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1381:20 [1] 'replace'(IDENTIFIER)
>>>ADVANCE 1381:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1381:28 [3] 'replacement'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'replacement'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER replacement
>>>ADVANCE 1381:39 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1381:41 [5] 'options'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 1381:48 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1382:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1382:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1382 12(CODE) method replaceAll(replacement, options)
    'method'(IDENTIFIER) 'replaceAll'(IDENTIFIER) '('(LITERAL) 'replacement'(IDENTIFIER) ','(LITERAL) 'options'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1382:20 [1] 'replaceAll'(IDENTIFIER)
>>>ADVANCE 1382:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1382:31 [3] 'replacement'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'replacement'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER replacement
>>>ADVANCE 1382:42 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1382:44 [5] 'options'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 1382:51 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1383:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1383:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1383 12(CODE) method $tryReplace(range, replacement)
    'method'(IDENTIFIER) '$tryReplace'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'replacement'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1383:20 [1] '$tryReplace'(IDENTIFIER)
>>>ADVANCE 1383:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1383:32 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 1383:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1383:39 [5] 'replacement'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'replacement'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER replacement
>>>ADVANCE 1383:50 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1384:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1384:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1384 12(CODE) method getLastSearchOptions()
    'method'(IDENTIFIER) 'getLastSearchOptions'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1384:20 [1] 'getLastSearchOptions'(IDENTIFIER)
>>>ADVANCE 1384:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1384:41 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1385:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1385:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1385 12(CODE) method find(needle, options, animate)
    'method'(IDENTIFIER) 'find'(IDENTIFIER) '('(LITERAL) 'needle'(IDENTIFIER) ','(LITERAL) 'options'(IDENTIFIER) ','(LITERAL) 'animate'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1385:20 [1] 'find'(IDENTIFIER)
>>>ADVANCE 1385:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1385:25 [3] 'needle'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'needle'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER needle
>>>ADVANCE 1385:31 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1385:33 [5] 'options'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 1385:40 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1385:42 [7] 'animate'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'animate'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER animate
>>>ADVANCE 1385:49 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1386:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1386:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1386 12(CODE) method findNext(options, animate)
    'method'(IDENTIFIER) 'findNext'(IDENTIFIER) '('(LITERAL) 'options'(IDENTIFIER) ','(LITERAL) 'animate'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1386:20 [1] 'findNext'(IDENTIFIER)
>>>ADVANCE 1386:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1386:29 [3] 'options'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 1386:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1386:38 [5] 'animate'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'animate'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER animate
>>>ADVANCE 1386:45 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1387:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1387:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1387 12(CODE) method findPrevious(options, animate)
    'method'(IDENTIFIER) 'findPrevious'(IDENTIFIER) '('(LITERAL) 'options'(IDENTIFIER) ','(LITERAL) 'animate'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1387:20 [1] 'findPrevious'(IDENTIFIER)
>>>ADVANCE 1387:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1387:33 [3] 'options'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 1387:40 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1387:42 [5] 'animate'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'animate'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER animate
>>>ADVANCE 1387:49 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1388:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1388:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1388 12(CODE) method revealRange(range, animate)
    'method'(IDENTIFIER) 'revealRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ','(LITERAL) 'animate'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1388:20 [1] 'revealRange'(IDENTIFIER)
>>>ADVANCE 1388:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1388:32 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 1388:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1388:39 [5] 'animate'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'animate'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER animate
>>>ADVANCE 1388:46 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1389:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1389:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1389 12(CODE) method undo()
    'method'(IDENTIFIER) 'undo'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1389:20 [1] 'undo'(IDENTIFIER)
>>>ADVANCE 1389:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1389:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1390:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1390:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1390 12(CODE) method redo()
    'method'(IDENTIFIER) 'redo'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1390:20 [1] 'redo'(IDENTIFIER)
>>>ADVANCE 1390:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1390:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1391:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1391:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1391 12(CODE) method destroy()
    'method'(IDENTIFIER) 'destroy'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1391:20 [1] 'destroy'(IDENTIFIER)
>>>ADVANCE 1391:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1391:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1392:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1392:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1392 12(CODE) method setAutoScrollEditorIntoView(enable)
    'method'(IDENTIFIER) 'setAutoScrollEditorIntoView'(IDENTIFIER) '('(LITERAL) 'enable'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1392:20 [1] 'setAutoScrollEditorIntoView'(IDENTIFIER)
>>>ADVANCE 1392:47 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1392:48 [3] 'enable'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'enable'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER enable
>>>ADVANCE 1392:54 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1393:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1393:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1393 12(CODE) method $resetCursorStyle()
    'method'(IDENTIFIER) '$resetCursorStyle'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1393:20 [1] '$resetCursorStyle'(IDENTIFIER)
>>>ADVANCE 1393:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1393:38 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1394:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1394:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1394 12(CODE) method setOptions(optList)
    'method'(IDENTIFIER) 'setOptions'(IDENTIFIER) '('(LITERAL) 'optList'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1394:20 [1] 'setOptions'(IDENTIFIER)
>>>ADVANCE 1394:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1394:31 [3] 'optList'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'optList'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER optList
>>>ADVANCE 1394:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1395:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1395:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1395 12(CODE) method getOptions(optionNames)
    'method'(IDENTIFIER) 'getOptions'(IDENTIFIER) '('(LITERAL) 'optionNames'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1395:20 [1] 'getOptions'(IDENTIFIER)
>>>ADVANCE 1395:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1395:31 [3] 'optionNames'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'optionNames'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER optionNames
>>>ADVANCE 1395:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1396:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1396:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1396 12(CODE) method setOption(name, value)
    'method'(IDENTIFIER) 'setOption'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ','(LITERAL) 'value'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1396:20 [1] 'setOption'(IDENTIFIER)
>>>ADVANCE 1396:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1396:30 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 1396:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1396:36 [5] 'value'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'value'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER value
>>>ADVANCE 1396:41 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1397:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1397:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1397 12(CODE) method getOption(name)
    'method'(IDENTIFIER) 'getOption'(IDENTIFIER) '('(LITERAL) 'name'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1397:20 [1] 'getOption'(IDENTIFIER)
>>>ADVANCE 1397:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1397:30 [3] 'name'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'name'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER name
>>>ADVANCE 1397:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1398:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1398:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1398 12(CODE) method updateSelectionMarkers()
    'method'(IDENTIFIER) 'updateSelectionMarkers'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1398:20 [1] 'updateSelectionMarkers'(IDENTIFIER)
>>>ADVANCE 1398:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1398:43 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1399:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1399:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1399 12(CODE) method addSelectionMarker(orientedRange)
    'method'(IDENTIFIER) 'addSelectionMarker'(IDENTIFIER) '('(LITERAL) 'orientedRange'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1399:20 [1] 'addSelectionMarker'(IDENTIFIER)
>>>ADVANCE 1399:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1399:39 [3] 'orientedRange'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'orientedRange'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER orientedRange
>>>ADVANCE 1399:52 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1400:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1400:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1400 12(CODE) method removeSelectionMarker(range)
    'method'(IDENTIFIER) 'removeSelectionMarker'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1400:20 [1] 'removeSelectionMarker'(IDENTIFIER)
>>>ADVANCE 1400:41 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1400:42 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 1400:47 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1401:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1401:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1401 12(CODE) method removeSelectionMarkers(ranges)
    'method'(IDENTIFIER) 'removeSelectionMarkers'(IDENTIFIER) '('(LITERAL) 'ranges'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1401:20 [1] 'removeSelectionMarkers'(IDENTIFIER)
>>>ADVANCE 1401:42 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1401:43 [3] 'ranges'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'ranges'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER ranges
>>>ADVANCE 1401:49 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1402:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1402:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1402 12(CODE) method $onAddRange(e)
    'method'(IDENTIFIER) '$onAddRange'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1402:20 [1] '$onAddRange'(IDENTIFIER)
>>>ADVANCE 1402:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1402:32 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1402:33 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1403:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1403:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1403 12(CODE) method $onRemoveRange(e)
    'method'(IDENTIFIER) '$onRemoveRange'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1403:20 [1] '$onRemoveRange'(IDENTIFIER)
>>>ADVANCE 1403:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1403:35 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1403:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1404:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1404:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1404 12(CODE) method $onMultiSelect(e)
    'method'(IDENTIFIER) '$onMultiSelect'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1404:20 [1] '$onMultiSelect'(IDENTIFIER)
>>>ADVANCE 1404:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1404:35 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1404:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1405:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1405:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1405 12(CODE) method $onSingleSelect(e)
    'method'(IDENTIFIER) '$onSingleSelect'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1405:20 [1] '$onSingleSelect'(IDENTIFIER)
>>>ADVANCE 1405:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1405:36 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1405:37 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1406:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1406:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1406 12(CODE) method $onMultiSelectExec(e)
    'method'(IDENTIFIER) '$onMultiSelectExec'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1406:20 [1] '$onMultiSelectExec'(IDENTIFIER)
>>>ADVANCE 1406:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1406:39 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1406:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1407:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1407:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1407 12(CODE) method forEachSelection(cmd, args, $byLines)
    'method'(IDENTIFIER) 'forEachSelection'(IDENTIFIER) '('(LITERAL) 'cmd'(IDENTIFIER) ','(LITERAL) 'args'(IDENTIFIER) ','(LITERAL) '$byLines'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1407:20 [1] 'forEachSelection'(IDENTIFIER)
>>>ADVANCE 1407:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1407:37 [3] 'cmd'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'cmd'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER cmd
>>>ADVANCE 1407:40 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1407:42 [5] 'args'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'args'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER args
>>>ADVANCE 1407:46 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1407:48 [7] '$byLines'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on '$byLines'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $byLines
>>>ADVANCE 1407:56 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1408:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1408:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1408 12(CODE) method exitMultiSelectMode()
    'method'(IDENTIFIER) 'exitMultiSelectMode'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1408:20 [1] 'exitMultiSelectMode'(IDENTIFIER)
>>>ADVANCE 1408:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1408:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1409:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1409:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1409 12(CODE) method findAll(needle, options, additive)
    'method'(IDENTIFIER) 'findAll'(IDENTIFIER) '('(LITERAL) 'needle'(IDENTIFIER) ','(LITERAL) 'options'(IDENTIFIER) ','(LITERAL) 'additive'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1409:20 [1] 'findAll'(IDENTIFIER)
>>>ADVANCE 1409:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1409:28 [3] 'needle'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'needle'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER needle
>>>ADVANCE 1409:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1409:36 [5] 'options'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 1409:43 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1409:45 [7] 'additive'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'additive'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER additive
>>>ADVANCE 1409:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1410:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1410:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1410 12(CODE) method selectMoreLines(dir, skip)
    'method'(IDENTIFIER) 'selectMoreLines'(IDENTIFIER) '('(LITERAL) 'dir'(IDENTIFIER) ','(LITERAL) 'skip'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1410:20 [1] 'selectMoreLines'(IDENTIFIER)
>>>ADVANCE 1410:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1410:36 [3] 'dir'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'dir'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER dir
>>>ADVANCE 1410:39 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1410:41 [5] 'skip'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'skip'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER skip
>>>ADVANCE 1410:45 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1411:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1411:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1411 12(CODE) method transposeSelections(dir)
    'method'(IDENTIFIER) 'transposeSelections'(IDENTIFIER) '('(LITERAL) 'dir'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1411:20 [1] 'transposeSelections'(IDENTIFIER)
>>>ADVANCE 1411:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1411:40 [3] 'dir'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'dir'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER dir
>>>ADVANCE 1411:43 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1412:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1412:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1412 12(CODE) method selectMore(dir, skip)
    'method'(IDENTIFIER) 'selectMore'(IDENTIFIER) '('(LITERAL) 'dir'(IDENTIFIER) ','(LITERAL) 'skip'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1412:20 [1] 'selectMore'(IDENTIFIER)
>>>ADVANCE 1412:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1412:31 [3] 'dir'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'dir'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER dir
>>>ADVANCE 1412:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1412:36 [5] 'skip'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'skip'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER skip
>>>ADVANCE 1412:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1413:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1413:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1413 12(CODE) method alignCursors()
    'method'(IDENTIFIER) 'alignCursors'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1413:20 [1] 'alignCursors'(IDENTIFIER)
>>>ADVANCE 1413:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1413:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1414:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1414:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1414 12(CODE) method $reAlignText(lines)
    'method'(IDENTIFIER) '$reAlignText'(IDENTIFIER) '('(LITERAL) 'lines'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1414:20 [1] '$reAlignText'(IDENTIFIER)
>>>ADVANCE 1414:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1414:33 [3] 'lines'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'lines'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lines
>>>ADVANCE 1414:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1417:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1417:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

1417 8(CODE) class MouseEvent
    'class'(IDENTIFIER) 'MouseEvent'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 1417:15 [1] 'MouseEvent'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER MouseEvent
>>>ADVANCE 1418:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 1418:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:MouseEvent parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

1418 12(CODE) constructor new MouseEvent (domEvent, editor)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'MouseEvent'(IDENTIFIER) '('(LITERAL) 'domEvent'(IDENTIFIER) ','(LITERAL) 'editor'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 1418:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 1418:29 [2] 'MouseEvent'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER MouseEvent
>>>ADVANCE 1418:40 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 1418:41 [4] 'domEvent'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'domEvent'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER domEvent
>>>ADVANCE 1418:49 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 1418:51 [6] 'editor'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'editor'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER editor
>>>ADVANCE 1418:57 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 1420:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1420:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1420 12(CODE) method stopPropagation()
    'method'(IDENTIFIER) 'stopPropagation'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1420:20 [1] 'stopPropagation'(IDENTIFIER)
>>>ADVANCE 1420:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1420:36 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1421:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1421:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1421 12(CODE) method preventDefault()
    'method'(IDENTIFIER) 'preventDefault'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1421:20 [1] 'preventDefault'(IDENTIFIER)
>>>ADVANCE 1421:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1421:35 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1422:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1422:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1422 12(CODE) method stop()
    'method'(IDENTIFIER) 'stop'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1422:20 [1] 'stop'(IDENTIFIER)
>>>ADVANCE 1422:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1422:25 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1423:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1423:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1423 12(CODE) method getDocumentPosition()
    'method'(IDENTIFIER) 'getDocumentPosition'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1423:20 [1] 'getDocumentPosition'(IDENTIFIER)
>>>ADVANCE 1423:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1423:40 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1424:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1424:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1424 12(CODE) method inSelection()
    'method'(IDENTIFIER) 'inSelection'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1424:20 [1] 'inSelection'(IDENTIFIER)
>>>ADVANCE 1424:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1424:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1425:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1425:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1425 12(CODE) method getButton()
    'method'(IDENTIFIER) 'getButton'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1425:20 [1] 'getButton'(IDENTIFIER)
>>>ADVANCE 1425:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1425:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1426:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1426:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1426 12(CODE) method getShiftKey()
    'method'(IDENTIFIER) 'getShiftKey'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1426:20 [1] 'getShiftKey'(IDENTIFIER)
>>>ADVANCE 1426:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1426:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1427:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1427:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1427 12(CODE) method getAccelKey()
    'method'(IDENTIFIER) 'getAccelKey'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1427:20 [1] 'getAccelKey'(IDENTIFIER)
>>>ADVANCE 1427:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1427:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1430:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1430:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

1430 8(CODE) class Cursor
    'class'(IDENTIFIER) 'Cursor'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 1430:15 [1] 'Cursor'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Cursor
>>>ADVANCE 1431:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 1431:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Cursor parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

1431 12(CODE) constructor new Cursor (parentEl)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Cursor'(IDENTIFIER) '('(LITERAL) 'parentEl'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 1431:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 1431:29 [2] 'Cursor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Cursor
>>>ADVANCE 1431:36 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 1431:37 [4] 'parentEl'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'parentEl'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER parentEl
>>>ADVANCE 1431:45 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 1433:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1433:13 [0] 'properties'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'properties'(IDENTIFIER)

1433 12(CODE) properties
    'properties'(IDENTIFIER)

                    Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                      PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 1434:0 [-1] ' '(NEWLINE)
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 1434:17 [0] '$padding'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                      PropertiesDeclaration TRY VariableDecl on '$padding'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER $padding
>>>ADVANCE 1434:25 [1] ':'(OPER)
                        VariableDecl matched OK: : :
>>>ADVANCE 1434:26 [2] 'number'(IDENTIFIER)
                        VariableDecl TRY VariableRef on 'number'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER number
>>>ADVANCE 1435:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> VariableRef
                      Parsed OK!-> VariableDecl
                      PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 1435:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [PropertiesDeclaration] blockIndent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                    Parsed OK!-> PropertiesDeclaration
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1435 12(CODE) method setPadding(padding)
    'method'(IDENTIFIER) 'setPadding'(IDENTIFIER) '('(LITERAL) 'padding'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1435:20 [1] 'setPadding'(IDENTIFIER)
>>>ADVANCE 1435:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1435:31 [3] 'padding'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'padding'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER padding
>>>ADVANCE 1435:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1436:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1436:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1436 12(CODE) method setSession(session)
    'method'(IDENTIFIER) 'setSession'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1436:20 [1] 'setSession'(IDENTIFIER)
>>>ADVANCE 1436:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1436:31 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 1436:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1437:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1437:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1437 12(CODE) method setBlinking(blinking)
    'method'(IDENTIFIER) 'setBlinking'(IDENTIFIER) '('(LITERAL) 'blinking'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1437:20 [1] 'setBlinking'(IDENTIFIER)
>>>ADVANCE 1437:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1437:32 [3] 'blinking'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'blinking'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER blinking
>>>ADVANCE 1437:40 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1438:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1438:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1438 12(CODE) method setBlinkInterval(blinkInterval)
    'method'(IDENTIFIER) 'setBlinkInterval'(IDENTIFIER) '('(LITERAL) 'blinkInterval'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1438:20 [1] 'setBlinkInterval'(IDENTIFIER)
>>>ADVANCE 1438:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1438:37 [3] 'blinkInterval'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'blinkInterval'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER blinkInterval
>>>ADVANCE 1438:50 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1439:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1439:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1439 12(CODE) method setSmoothBlinking(smoothBlinking)
    'method'(IDENTIFIER) 'setSmoothBlinking'(IDENTIFIER) '('(LITERAL) 'smoothBlinking'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1439:20 [1] 'setSmoothBlinking'(IDENTIFIER)
>>>ADVANCE 1439:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1439:38 [3] 'smoothBlinking'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'smoothBlinking'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER smoothBlinking
>>>ADVANCE 1439:52 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1440:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1440:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1440 12(CODE) method addCursor()
    'method'(IDENTIFIER) 'addCursor'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1440:20 [1] 'addCursor'(IDENTIFIER)
>>>ADVANCE 1440:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1440:30 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1441:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1441:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1441 12(CODE) method removeCursor()
    'method'(IDENTIFIER) 'removeCursor'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1441:20 [1] 'removeCursor'(IDENTIFIER)
>>>ADVANCE 1441:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1441:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1442:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1442:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1442 12(CODE) method hideCursor()
    'method'(IDENTIFIER) 'hideCursor'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1442:20 [1] 'hideCursor'(IDENTIFIER)
>>>ADVANCE 1442:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1442:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1443:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1443:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1443 12(CODE) method showCursor()
    'method'(IDENTIFIER) 'showCursor'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1443:20 [1] 'showCursor'(IDENTIFIER)
>>>ADVANCE 1443:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1443:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1444:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1444:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1444 12(CODE) method restartTimer()
    'method'(IDENTIFIER) 'restartTimer'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1444:20 [1] 'restartTimer'(IDENTIFIER)
>>>ADVANCE 1444:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1444:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1445:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1445:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1445 12(CODE) method getPixelPosition(position, onScreen)
    'method'(IDENTIFIER) 'getPixelPosition'(IDENTIFIER) '('(LITERAL) 'position'(IDENTIFIER) ','(LITERAL) 'onScreen'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1445:20 [1] 'getPixelPosition'(IDENTIFIER)
>>>ADVANCE 1445:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1445:37 [3] 'position'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'position'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER position
>>>ADVANCE 1445:45 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1445:47 [5] 'onScreen'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'onScreen'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER onScreen
>>>ADVANCE 1445:55 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1446:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1446:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1446 12(CODE) method update(config)
    'method'(IDENTIFIER) 'update'(IDENTIFIER) '('(LITERAL) 'config'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1446:20 [1] 'update'(IDENTIFIER)
>>>ADVANCE 1446:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1446:27 [3] 'config'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'config'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER config
>>>ADVANCE 1446:33 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1447:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1447:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1447 12(CODE) method $setOverwrite(overwrite)
    'method'(IDENTIFIER) '$setOverwrite'(IDENTIFIER) '('(LITERAL) 'overwrite'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1447:20 [1] '$setOverwrite'(IDENTIFIER)
>>>ADVANCE 1447:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1447:34 [3] 'overwrite'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'overwrite'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER overwrite
>>>ADVANCE 1447:43 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1448:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1448:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1448 12(CODE) method destroy()
    'method'(IDENTIFIER) 'destroy'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1448:20 [1] 'destroy'(IDENTIFIER)
>>>ADVANCE 1448:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1448:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1451:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1451:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

1451 8(CODE) class Range
    'class'(IDENTIFIER) 'Range'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 1451:15 [1] 'Range'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Range
>>>ADVANCE 1452:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 1452:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Range parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

1452 12(CODE) constructor new Range (startRow, startColumn, endRow, endColumn)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Range'(IDENTIFIER) '('(LITERAL) 'startRow'(IDENTIFIER) ','(LITERAL) 'startColumn'(IDENTIFIER) ','(LITERAL) 'endRow'(IDENTIFIER) ','(LITERAL) 'endColumn'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 1452:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 1452:29 [2] 'Range'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Range
>>>ADVANCE 1452:35 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 1452:36 [4] 'startRow'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'startRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startRow
>>>ADVANCE 1452:44 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 1452:46 [6] 'startColumn'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'startColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER startColumn
>>>ADVANCE 1452:57 [7] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 1452:59 [8] 'endRow'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'endRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER endRow
>>>ADVANCE 1452:65 [9] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 1452:67 [10] 'endColumn'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'endColumn'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER endColumn
>>>ADVANCE 1452:76 [11] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 1454:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1454:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1454 12(CODE) method isEqual(range)
    'method'(IDENTIFIER) 'isEqual'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1454:20 [1] 'isEqual'(IDENTIFIER)
>>>ADVANCE 1454:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1454:28 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 1454:33 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1455:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1455:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1455 12(CODE) method toString()
    'method'(IDENTIFIER) 'toString'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1455:20 [1] 'toString'(IDENTIFIER)
>>>ADVANCE 1455:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1455:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1456:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1456:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1456 12(CODE) method contains(row, column)
    'method'(IDENTIFIER) 'contains'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1456:20 [1] 'contains'(IDENTIFIER)
>>>ADVANCE 1456:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1456:29 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1456:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1456:34 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1456:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1457:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1457:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1457 12(CODE) method compareRange(range)
    'method'(IDENTIFIER) 'compareRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1457:20 [1] 'compareRange'(IDENTIFIER)
>>>ADVANCE 1457:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1457:33 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 1457:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1458:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1458:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1458 12(CODE) method comparePoint(p)
    'method'(IDENTIFIER) 'comparePoint'(IDENTIFIER) '('(LITERAL) 'p'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1458:20 [1] 'comparePoint'(IDENTIFIER)
>>>ADVANCE 1458:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1458:33 [3] 'p'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'p'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER p
>>>ADVANCE 1458:34 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1459:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1459:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1459 12(CODE) method containsRange(range)
    'method'(IDENTIFIER) 'containsRange'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1459:20 [1] 'containsRange'(IDENTIFIER)
>>>ADVANCE 1459:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1459:34 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 1459:39 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1460:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1460:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1460 12(CODE) method intersects(range)
    'method'(IDENTIFIER) 'intersects'(IDENTIFIER) '('(LITERAL) 'range'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1460:20 [1] 'intersects'(IDENTIFIER)
>>>ADVANCE 1460:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1460:31 [3] 'range'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'range'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER range
>>>ADVANCE 1460:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1461:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1461:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1461 12(CODE) method isEnd(row, column)
    'method'(IDENTIFIER) 'isEnd'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1461:20 [1] 'isEnd'(IDENTIFIER)
>>>ADVANCE 1461:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1461:26 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1461:29 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1461:31 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1461:37 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1462:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1462:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1462 12(CODE) method isStart(row, column)
    'method'(IDENTIFIER) 'isStart'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1462:20 [1] 'isStart'(IDENTIFIER)
>>>ADVANCE 1462:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1462:28 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1462:31 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1462:33 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1462:39 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1463:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1463:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1463 12(CODE) method setStart(row, column)
    'method'(IDENTIFIER) 'setStart'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1463:20 [1] 'setStart'(IDENTIFIER)
>>>ADVANCE 1463:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1463:29 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1463:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1463:34 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1463:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1464:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1464:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1464 12(CODE) method setEnd(row, column)
    'method'(IDENTIFIER) 'setEnd'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1464:20 [1] 'setEnd'(IDENTIFIER)
>>>ADVANCE 1464:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1464:27 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1464:30 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1464:32 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1464:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1465:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1465:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1465 12(CODE) method inside(row, column)
    'method'(IDENTIFIER) 'inside'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1465:20 [1] 'inside'(IDENTIFIER)
>>>ADVANCE 1465:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1465:27 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1465:30 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1465:32 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1465:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1466:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1466:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1466 12(CODE) method insideStart(row, column)
    'method'(IDENTIFIER) 'insideStart'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1466:20 [1] 'insideStart'(IDENTIFIER)
>>>ADVANCE 1466:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1466:32 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1466:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1466:37 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1466:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1467:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1467:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1467 12(CODE) method insideEnd(row, column)
    'method'(IDENTIFIER) 'insideEnd'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1467:20 [1] 'insideEnd'(IDENTIFIER)
>>>ADVANCE 1467:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1467:30 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1467:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1467:35 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1467:41 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1468:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1468:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1468 12(CODE) method compare(row, column)
    'method'(IDENTIFIER) 'compare'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1468:20 [1] 'compare'(IDENTIFIER)
>>>ADVANCE 1468:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1468:28 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1468:31 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1468:33 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1468:39 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1469:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1469:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1469 12(CODE) method compareStart(row, column)
    'method'(IDENTIFIER) 'compareStart'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1469:20 [1] 'compareStart'(IDENTIFIER)
>>>ADVANCE 1469:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1469:33 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1469:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1469:38 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1469:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1470:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1470:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1470 12(CODE) method compareEnd(row, column)
    'method'(IDENTIFIER) 'compareEnd'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1470:20 [1] 'compareEnd'(IDENTIFIER)
>>>ADVANCE 1470:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1470:31 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1470:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1470:36 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1470:42 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1471:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1471:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1471 12(CODE) method compareInside(row, column)
    'method'(IDENTIFIER) 'compareInside'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1471:20 [1] 'compareInside'(IDENTIFIER)
>>>ADVANCE 1471:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1471:34 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1471:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1471:39 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1471:45 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1472:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1472:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1472 12(CODE) method clipRows(firstRow, lastRow)
    'method'(IDENTIFIER) 'clipRows'(IDENTIFIER) '('(LITERAL) 'firstRow'(IDENTIFIER) ','(LITERAL) 'lastRow'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1472:20 [1] 'clipRows'(IDENTIFIER)
>>>ADVANCE 1472:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1472:29 [3] 'firstRow'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'firstRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER firstRow
>>>ADVANCE 1472:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1472:39 [5] 'lastRow'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'lastRow'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER lastRow
>>>ADVANCE 1472:46 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1473:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1473:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1473 12(CODE) method extend(row, column)
    'method'(IDENTIFIER) 'extend'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1473:20 [1] 'extend'(IDENTIFIER)
>>>ADVANCE 1473:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1473:27 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1473:30 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1473:32 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1473:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1474:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1474:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1474 12(CODE) method isEmpty()
    'method'(IDENTIFIER) 'isEmpty'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1474:20 [1] 'isEmpty'(IDENTIFIER)
>>>ADVANCE 1474:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1474:28 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1475:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1475:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1475 12(CODE) method isMultiLine()
    'method'(IDENTIFIER) 'isMultiLine'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1475:20 [1] 'isMultiLine'(IDENTIFIER)
>>>ADVANCE 1475:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1475:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1476:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1476:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1476 12(CODE) method clone()
    'method'(IDENTIFIER) 'clone'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1476:20 [1] 'clone'(IDENTIFIER)
>>>ADVANCE 1476:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1476:26 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1477:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1477:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1477 12(CODE) method collapseRows()
    'method'(IDENTIFIER) 'collapseRows'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1477:20 [1] 'collapseRows'(IDENTIFIER)
>>>ADVANCE 1477:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1477:33 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1478:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1478:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1478 12(CODE) method toScreenRange(session)
    'method'(IDENTIFIER) 'toScreenRange'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1478:20 [1] 'toScreenRange'(IDENTIFIER)
>>>ADVANCE 1478:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1478:34 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 1478:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1479:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1479:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1479 12(CODE) method moveBy(row, column)
    'method'(IDENTIFIER) 'moveBy'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1479:20 [1] 'moveBy'(IDENTIFIER)
>>>ADVANCE 1479:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1479:27 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1479:30 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1479:32 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1479:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1482:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1482:9 [0] 'append'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'append'(IDENTIFIER)

1482 8(CODE) append to namespace Range
    'append'(IDENTIFIER) 'to'(IDENTIFIER) 'namespace'(IDENTIFIER) 'Range'(IDENTIFIER)

              Statement TRY AppendToDeclaration on 'append'(IDENTIFIER)
                AppendToDeclaration matched OK: append append
>>>ADVANCE 1482:16 [1] 'to'(IDENTIFIER)
                AppendToDeclaration matched OK: to to
>>>ADVANCE 1482:19 [2] 'namespace'(IDENTIFIER)
                AppendToDeclaration matched OK: namespace namespace
>>>ADVANCE 1482:29 [3] 'Range'(IDENTIFIER)
                AppendToDeclaration TRY VariableRef on 'Range'(IDENTIFIER)
                  VariableRef matched OK: IDENTIFIER Range
>>>ADVANCE 1483:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableRef
                AppendToDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 1483:13 [0] 'method'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1483 12(CODE) method fromPoints(start, end)
    'method'(IDENTIFIER) 'fromPoints'(IDENTIFIER) '('(LITERAL) 'start'(IDENTIFIER) ','(LITERAL) 'end'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1483:20 [1] 'fromPoints'(IDENTIFIER)
>>>ADVANCE 1483:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1483:31 [3] 'start'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'start'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER start
>>>ADVANCE 1483:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1483:38 [5] 'end'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'end'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER end
>>>ADVANCE 1483:41 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1484:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1484:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1484 12(CODE) method comparePoints(p1, p2)
    'method'(IDENTIFIER) 'comparePoints'(IDENTIFIER) '('(LITERAL) 'p1'(IDENTIFIER) ','(LITERAL) 'p2'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1484:20 [1] 'comparePoints'(IDENTIFIER)
>>>ADVANCE 1484:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1484:34 [3] 'p1'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'p1'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER p1
>>>ADVANCE 1484:36 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1484:38 [5] 'p2'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'p2'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER p2
>>>ADVANCE 1484:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1486:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1486:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> AppendToDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

1486 8(CODE) class Search
    'class'(IDENTIFIER) 'Search'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 1486:15 [1] 'Search'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Search
>>>ADVANCE 1487:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 1487:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Search parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

1487 12(CODE) constructor new Search ()
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Search'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 1487:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 1487:29 [2] 'Search'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Search
>>>ADVANCE 1487:36 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 1487:37 [4] ')'(LITERAL)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 1489:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1489:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1489 12(CODE) method set(options)
    'method'(IDENTIFIER) 'set'(IDENTIFIER) '('(LITERAL) 'options'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1489:20 [1] 'set'(IDENTIFIER)
>>>ADVANCE 1489:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1489:24 [3] 'options'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 1489:31 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1490:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1490:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1490 12(CODE) method getOptions()
    'method'(IDENTIFIER) 'getOptions'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1490:20 [1] 'getOptions'(IDENTIFIER)
>>>ADVANCE 1490:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1490:31 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1491:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1491:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1491 12(CODE) method setOptions(options)
    'method'(IDENTIFIER) 'setOptions'(IDENTIFIER) '('(LITERAL) 'options'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1491:20 [1] 'setOptions'(IDENTIFIER)
>>>ADVANCE 1491:30 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1491:31 [3] 'options'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 1491:38 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1492:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1492:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1492 12(CODE) method find(session)
    'method'(IDENTIFIER) 'find'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1492:20 [1] 'find'(IDENTIFIER)
>>>ADVANCE 1492:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1492:25 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 1492:32 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1493:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1493:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1493 12(CODE) method findAll(session)
    'method'(IDENTIFIER) 'findAll'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1493:20 [1] 'findAll'(IDENTIFIER)
>>>ADVANCE 1493:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1493:28 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 1493:35 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1494:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1494:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1494 12(CODE) method replace(input, replacement)
    'method'(IDENTIFIER) 'replace'(IDENTIFIER) '('(LITERAL) 'input'(IDENTIFIER) ','(LITERAL) 'replacement'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1494:20 [1] 'replace'(IDENTIFIER)
>>>ADVANCE 1494:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1494:28 [3] 'input'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'input'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER input
>>>ADVANCE 1494:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1494:35 [5] 'replacement'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'replacement'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER replacement
>>>ADVANCE 1494:46 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1495:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1495:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1495 12(CODE) method $matchIterator(session, options)
    'method'(IDENTIFIER) '$matchIterator'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ','(LITERAL) 'options'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1495:20 [1] '$matchIterator'(IDENTIFIER)
>>>ADVANCE 1495:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1495:35 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 1495:42 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1495:44 [5] 'options'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 1495:51 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1496:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1496:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1496 12(CODE) method $assembleRegExp(options)
    'method'(IDENTIFIER) '$assembleRegExp'(IDENTIFIER) '('(LITERAL) 'options'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1496:20 [1] '$assembleRegExp'(IDENTIFIER)
>>>ADVANCE 1496:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1496:36 [3] 'options'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 1496:43 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1497:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1497:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1497 12(CODE) method $assembleMultilineRegExp(needle, modifier)
    'method'(IDENTIFIER) '$assembleMultilineRegExp'(IDENTIFIER) '('(LITERAL) 'needle'(IDENTIFIER) ','(LITERAL) 'modifier'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1497:20 [1] '$assembleMultilineRegExp'(IDENTIFIER)
>>>ADVANCE 1497:44 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1497:45 [3] 'needle'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'needle'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER needle
>>>ADVANCE 1497:51 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1497:53 [5] 'modifier'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'modifier'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER modifier
>>>ADVANCE 1497:61 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1498:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1498:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1498 12(CODE) method $lineIterator(session, options)
    'method'(IDENTIFIER) '$lineIterator'(IDENTIFIER) '('(LITERAL) 'session'(IDENTIFIER) ','(LITERAL) 'options'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1498:20 [1] '$lineIterator'(IDENTIFIER)
>>>ADVANCE 1498:33 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1498:34 [3] 'session'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'session'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER session
>>>ADVANCE 1498:41 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1498:43 [5] 'options'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'options'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER options
>>>ADVANCE 1498:50 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1501:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1501:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

1501 8(CODE) class CommandManager
    'class'(IDENTIFIER) 'CommandManager'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 1501:15 [1] 'CommandManager'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER CommandManager
>>>ADVANCE 1502:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 1502:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:CommandManager parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

1502 12(CODE) constructor new CommandManager (platform, commands)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'CommandManager'(IDENTIFIER) '('(LITERAL) 'platform'(IDENTIFIER) ','(LITERAL) 'commands'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 1502:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 1502:29 [2] 'CommandManager'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER CommandManager
>>>ADVANCE 1502:44 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 1502:45 [4] 'platform'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'platform'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER platform
>>>ADVANCE 1502:53 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 1502:55 [6] 'commands'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'commands'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER commands
>>>ADVANCE 1502:63 [7] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 1504:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1504:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1504 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1504:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 1504:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1504:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1504:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1504:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1504:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1505:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1505:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1505 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1505:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 1505:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1505:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1505:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1505:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1505:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1506:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1506:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1506 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1506:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 1506:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1506:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1506:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1506:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1506:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1507:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1507:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1507 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1507:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 1507:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1507:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1507:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1507:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1507:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1508:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1508:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1508 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1508:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 1508:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1508:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1508:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1508:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1508:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1509:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1509:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1509 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1509:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 1509:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1509:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1509:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1509:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1509:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1510:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1510:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1510 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1510:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 1510:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1510:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1510:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1510:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1510:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1510:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 1510:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1511:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1511:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1511 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1511:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 1511:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1511:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1511:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1511:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1511:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1511:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 1511:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1512:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1512:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1512 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1512:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 1512:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1512:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1512:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1512:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1512:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1513:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1513:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1513 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1513:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 1513:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1513:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1513:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1513:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1513:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1514:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1514:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1514 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1514:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 1514:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1514:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1514:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1514:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1514:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1515:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1515:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1515 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1515:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 1515:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1515:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1515:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1516:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1516:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1516 12(CODE) method exec(command, editor, args)
    'method'(IDENTIFIER) 'exec'(IDENTIFIER) '('(LITERAL) 'command'(IDENTIFIER) ','(LITERAL) 'editor'(IDENTIFIER) ','(LITERAL) 'args'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1516:20 [1] 'exec'(IDENTIFIER)
>>>ADVANCE 1516:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1516:25 [3] 'command'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'command'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER command
>>>ADVANCE 1516:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1516:34 [5] 'editor'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'editor'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER editor
>>>ADVANCE 1516:40 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1516:42 [7] 'args'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'args'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER args
>>>ADVANCE 1516:46 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1517:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1517:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1517 12(CODE) method toggleRecording(editor)
    'method'(IDENTIFIER) 'toggleRecording'(IDENTIFIER) '('(LITERAL) 'editor'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1517:20 [1] 'toggleRecording'(IDENTIFIER)
>>>ADVANCE 1517:35 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1517:36 [3] 'editor'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'editor'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER editor
>>>ADVANCE 1517:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1518:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1518:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1518 12(CODE) method replay(editor)
    'method'(IDENTIFIER) 'replay'(IDENTIFIER) '('(LITERAL) 'editor'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1518:20 [1] 'replay'(IDENTIFIER)
>>>ADVANCE 1518:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1518:27 [3] 'editor'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'editor'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER editor
>>>ADVANCE 1518:33 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1519:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1519:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1519 12(CODE) method trimMacro(m)
    'method'(IDENTIFIER) 'trimMacro'(IDENTIFIER) '('(LITERAL) 'm'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1519:20 [1] 'trimMacro'(IDENTIFIER)
>>>ADVANCE 1519:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1519:30 [3] 'm'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'm'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER m
>>>ADVANCE 1519:31 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1522:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1522:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

1522 8(CODE) class Anchor
    'class'(IDENTIFIER) 'Anchor'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 1522:15 [1] 'Anchor'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER Anchor
>>>ADVANCE 1523:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 1523:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:Anchor parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

1523 12(CODE) constructor new Anchor (doc, row, column)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'Anchor'(IDENTIFIER) '('(LITERAL) 'doc'(IDENTIFIER) ','(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 1523:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 1523:29 [2] 'Anchor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER Anchor
>>>ADVANCE 1523:36 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 1523:37 [4] 'doc'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'doc'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER doc
>>>ADVANCE 1523:40 [5] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 1523:42 [6] 'row'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1523:45 [7] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: , ,
>>>ADVANCE 1523:47 [8] 'column'(IDENTIFIER)
                      ConstructorDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1523:53 [9] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 1525:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1525:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1525 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1525:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 1525:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1525:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1525:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1525:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1525:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1526:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1526:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1526 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1526:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 1526:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1526:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1526:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1526:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1526:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1527:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1527:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1527 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1527:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 1527:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1527:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1527:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1527:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1527:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1528:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1528:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1528 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1528:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 1528:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1528:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1528:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1528:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1528:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1529:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1529:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1529 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1529:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 1529:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1529:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1529:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1529:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1529:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1530:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1530:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1530 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1530:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 1530:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1530:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1530:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1530:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1530:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1531:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1531:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1531 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1531:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 1531:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1531:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1531:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1531:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1531:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1531:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 1531:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1532:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1532:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1532 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1532:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 1532:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1532:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1532:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1532:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1532:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1532:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 1532:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1533:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1533:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1533 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1533:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 1533:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1533:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1533:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1533:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1533:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1534:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1534:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1534 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1534:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 1534:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1534:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1534:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1534:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1534:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1535:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1535:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1535 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1535:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 1535:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1535:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1535:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1535:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1535:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1536:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1536:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1536 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1536:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 1536:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1536:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1536:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1537:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1537:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1537 12(CODE) method getPosition()
    'method'(IDENTIFIER) 'getPosition'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1537:20 [1] 'getPosition'(IDENTIFIER)
>>>ADVANCE 1537:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1537:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1538:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1538:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1538 12(CODE) method getDocument()
    'method'(IDENTIFIER) 'getDocument'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1538:20 [1] 'getDocument'(IDENTIFIER)
>>>ADVANCE 1538:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1538:32 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1539:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1539:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1539 12(CODE) method onChange(e)
    'method'(IDENTIFIER) 'onChange'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1539:20 [1] 'onChange'(IDENTIFIER)
>>>ADVANCE 1539:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1539:29 [3] 'e'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1539:30 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1540:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1540:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1540 12(CODE) method setPosition(row, column, noClip)
    'method'(IDENTIFIER) 'setPosition'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ','(LITERAL) 'noClip'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1540:20 [1] 'setPosition'(IDENTIFIER)
>>>ADVANCE 1540:31 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1540:32 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1540:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1540:37 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1540:43 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1540:45 [7] 'noClip'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'noClip'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER noClip
>>>ADVANCE 1540:51 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1541:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1541:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1541 12(CODE) method detach()
    'method'(IDENTIFIER) 'detach'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1541:20 [1] 'detach'(IDENTIFIER)
>>>ADVANCE 1541:26 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1541:27 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1542:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1542:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1542 12(CODE) method $clipPositionToDocument(row, column)
    'method'(IDENTIFIER) '$clipPositionToDocument'(IDENTIFIER) '('(LITERAL) 'row'(IDENTIFIER) ','(LITERAL) 'column'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1542:20 [1] '$clipPositionToDocument'(IDENTIFIER)
>>>ADVANCE 1542:43 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1542:44 [3] 'row'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'row'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER row
>>>ADVANCE 1542:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1542:49 [5] 'column'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'column'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER column
>>>ADVANCE 1542:55 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1545:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1545:9 [0] 'class'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'class'(IDENTIFIER)

1545 8(CODE) class ScrollBar
    'class'(IDENTIFIER) 'ScrollBar'(IDENTIFIER)

              Statement TRY ClassDeclaration on 'class'(IDENTIFIER)
                ClassDeclaration matched OK: class class
>>>ADVANCE 1545:15 [1] 'ScrollBar'(IDENTIFIER)
                ClassDeclaration matched OK: IDENTIFIER ScrollBar
>>>ADVANCE 1546:0 [-1] ' '(NEWLINE)
                ClassDeclaration TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 1546:13 [0] 'constructor'(IDENTIFIER)
optFreeFormList [Body] parentname:ScrollBar parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'constructor'(IDENTIFIER)

1546 12(CODE) constructor new ScrollBar (parent)
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'ScrollBar'(IDENTIFIER) '('(LITERAL) 'parent'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY ConstructorDeclaration on 'constructor'(IDENTIFIER)
                      ConstructorDeclaration matched OK: constructor constructor
>>>ADVANCE 1546:25 [1] 'new'(IDENTIFIER)
                      ConstructorDeclaration matched OK: new new
>>>ADVANCE 1546:29 [2] 'ScrollBar'(IDENTIFIER)
                      ConstructorDeclaration matched OK: IDENTIFIER ScrollBar
>>>ADVANCE 1546:39 [3] '('(LITERAL)
                      ConstructorDeclaration matched OK: ( (
>>>ADVANCE 1546:40 [4] 'parent'(IDENTIFIER)
optSeparatedList [ConstructorDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      ConstructorDeclaration TRY VariableDecl on 'parent'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER parent
>>>ADVANCE 1546:46 [5] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      ConstructorDeclaration matched OK: ) )
>>>ADVANCE 1548:0 [-1] ' '(NEWLINE)
                      ConstructorDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> ConstructorDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1548:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1548 12(CODE) method _dispatchEvent(eventName, e)
    'method'(IDENTIFIER) '_dispatchEvent'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1548:20 [1] '_dispatchEvent'(IDENTIFIER)
>>>ADVANCE 1548:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1548:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1548:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1548:46 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1548:47 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1549:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1549:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1549 12(CODE) method _emit(eventName, e)
    'method'(IDENTIFIER) '_emit'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1549:20 [1] '_emit'(IDENTIFIER)
>>>ADVANCE 1549:25 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1549:26 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1549:35 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1549:37 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1549:38 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1550:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1550:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1550 12(CODE) method _signal(eventName, e)
    'method'(IDENTIFIER) '_signal'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1550:20 [1] '_signal'(IDENTIFIER)
>>>ADVANCE 1550:27 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1550:28 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1550:37 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1550:39 [5] 'e'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 1550:40 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1551:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1551:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1551 12(CODE) method once(eventName, callback)
    'method'(IDENTIFIER) 'once'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1551:20 [1] 'once'(IDENTIFIER)
>>>ADVANCE 1551:24 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1551:25 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1551:34 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1551:36 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1551:44 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1552:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1552:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1552 12(CODE) method setDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'setDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1552:20 [1] 'setDefaultHandler'(IDENTIFIER)
>>>ADVANCE 1552:37 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1552:38 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1552:47 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1552:49 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1552:57 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1553:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1553:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1553 12(CODE) method removeDefaultHandler(eventName, callback)
    'method'(IDENTIFIER) 'removeDefaultHandler'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1553:20 [1] 'removeDefaultHandler'(IDENTIFIER)
>>>ADVANCE 1553:40 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1553:41 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1553:50 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1553:52 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1553:60 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1554:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1554:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1554 12(CODE) method addEventListener(eventName, callback, capturing)
    'method'(IDENTIFIER) 'addEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1554:20 [1] 'addEventListener'(IDENTIFIER)
>>>ADVANCE 1554:36 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1554:37 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1554:46 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1554:48 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1554:56 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1554:58 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 1554:67 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1555:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1555:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1555 12(CODE) method on(eventName, callback, capturing)
    'method'(IDENTIFIER) 'on'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ','(LITERAL) 'capturing'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1555:20 [1] 'on'(IDENTIFIER)
>>>ADVANCE 1555:22 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1555:23 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1555:32 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1555:34 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1555:42 [6] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1555:44 [7] 'capturing'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'capturing'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER capturing
>>>ADVANCE 1555:53 [8] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1556:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1556:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1556 12(CODE) method removeEventListener(eventName, callback)
    'method'(IDENTIFIER) 'removeEventListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1556:20 [1] 'removeEventListener'(IDENTIFIER)
>>>ADVANCE 1556:39 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1556:40 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1556:49 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1556:51 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1556:59 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1557:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1557:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1557 12(CODE) method removeListener(eventName, callback)
    'method'(IDENTIFIER) 'removeListener'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1557:20 [1] 'removeListener'(IDENTIFIER)
>>>ADVANCE 1557:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1557:35 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1557:44 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1557:46 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1557:54 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1558:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1558:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1558 12(CODE) method off(eventName, callback)
    'method'(IDENTIFIER) 'off'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1558:20 [1] 'off'(IDENTIFIER)
>>>ADVANCE 1558:23 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1558:24 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1558:33 [4] ','(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: , ,
>>>ADVANCE 1558:35 [5] 'callback'(IDENTIFIER)
                      MethodDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 1558:43 [6] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1559:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1559:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1559 12(CODE) method removeAllListeners(eventName)
    'method'(IDENTIFIER) 'removeAllListeners'(IDENTIFIER) '('(LITERAL) 'eventName'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1559:20 [1] 'removeAllListeners'(IDENTIFIER)
>>>ADVANCE 1559:38 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1559:39 [3] 'eventName'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'eventName'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER eventName
>>>ADVANCE 1559:48 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1560:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1560:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1560 12(CODE) method onScroll()
    'method'(IDENTIFIER) 'onScroll'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1560:20 [1] 'onScroll'(IDENTIFIER)
>>>ADVANCE 1560:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1560:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1561:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1561:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1561 12(CODE) method getWidth()
    'method'(IDENTIFIER) 'getWidth'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1561:20 [1] 'getWidth'(IDENTIFIER)
>>>ADVANCE 1561:28 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1561:29 [3] ')'(LITERAL)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1562:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1562:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1562 12(CODE) method setHeight(height)
    'method'(IDENTIFIER) 'setHeight'(IDENTIFIER) '('(LITERAL) 'height'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1562:20 [1] 'setHeight'(IDENTIFIER)
>>>ADVANCE 1562:29 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1562:30 [3] 'height'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'height'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER height
>>>ADVANCE 1562:36 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1563:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1563:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1563 12(CODE) method setInnerHeight(height)
    'method'(IDENTIFIER) 'setInnerHeight'(IDENTIFIER) '('(LITERAL) 'height'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1563:20 [1] 'setInnerHeight'(IDENTIFIER)
>>>ADVANCE 1563:34 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1563:35 [3] 'height'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'height'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER height
>>>ADVANCE 1563:41 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1564:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1564:13 [0] 'method'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'method'(IDENTIFIER)

1564 12(CODE) method setScrollTop(scrollTop)
    'method'(IDENTIFIER) 'setScrollTop'(IDENTIFIER) '('(LITERAL) 'scrollTop'(IDENTIFIER) ')'(LITERAL)

                    Statement TRY MethodDeclaration on 'method'(IDENTIFIER)
                      MethodDeclaration matched OK: method method
>>>ADVANCE 1564:20 [1] 'setScrollTop'(IDENTIFIER)
>>>ADVANCE 1564:32 [2] '('(LITERAL)
                      MethodDeclaration matched OK: ( (
>>>ADVANCE 1564:33 [3] 'scrollTop'(IDENTIFIER)
optSeparatedList [MethodDeclaration] indent:12, get SeparatedList of [VariableDecl] by ',' closer: )
                      MethodDeclaration TRY VariableDecl on 'scrollTop'(IDENTIFIER)
                        VariableDecl matched OK: IDENTIFIER scrollTop
>>>ADVANCE 1564:42 [4] ')'(LITERAL)
                      Parsed OK!-> VariableDecl
                      MethodDeclaration matched OK: ) )
>>>ADVANCE 1566:0 [-1] ' '(NEWLINE)
                      MethodDeclaration TRY Body on ' '(NEWLINE)
                      Parsed OK!-> Body
                    Parsed OK!-> MethodDeclaration
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 1566:5 [0] 'end'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
              Parsed OK!-> ClassDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> NamespaceDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'end'(IDENTIFIER)

1566 4(CODE) end namespace ace
    'end'(IDENTIFIER) 'namespace'(IDENTIFIER) 'ace'(IDENTIFIER)

        Statement TRY EndStatement on 'end'(IDENTIFIER)
          EndStatement matched OK: end end
>>>ADVANCE 1566:9 [1] 'namespace'(IDENTIFIER)
>>>ADVANCE 1566:19 [2] 'ace'(IDENTIFIER)
>>>ADVANCE 1566:0 [-1] ' '(EOF)
          EndStatement matched OK: EOF  
>>>ADVANCE 1566:0 [0] ' '(EOF)
        Parsed OK!-> EndStatement
      Parsed OK!-> Statement
      Module matched OK: EOF  
>>>ADVANCE 1566:0 [-1] ' '(EOF)
END freeFormMode [Module] blockIndent:4, get SeparatedList of [Statement] by ';' closer: EOF

     'online.md' imports './httpGet'
[object Object]
addToScope: 'module' to '/home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md Scope'
addMember: 'exports' to 'module'
addToScope: 'exports' to '/home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md Scope'
addMember: 'filename' to 'module'
     compile: 'httpGet.lite.md'
1 (BLANK)
2 4(CODE) public function httpGet(url, callback)
3 (BLANK)
4 8(CODE) if typeof callback isnt 'function'
5 12(CODE) fail with '2nd parameter should be callback fn(err,data)'
6 (BLANK)
7 8(COMMENT) //ajax get file
8 8(CODE) var xmlhttp = create_HttpRequest();
9 8(CODE) declare valid xmlhttp.data_callback
10 8(CODE) xmlhttp.data_callback = callback; //store callback here
11 8(CODE) xmlhttp.onload = Local_OnLoad; //default, next fn
12 8(CODE) xmlhttp.onerror = Local_OnError;
13 8(COMMENT) //xmlhttp.setRequestHeader('content-type', 'applicattion/json');
14 8(CODE) console.log 'GET', url
15 8(CODE) xmlhttp.open 'GET', url, true
16 8(CODE) xmlhttp.send
17 (BLANK)
18 (BLANK)
19 4(CODE) function Local_OnLoad()
20 8(COMMENT) //var stat=document.getElementById('status');
21 8(COMMENT) //if (stat) stat.textContent='ready:'+this.readyState;
22 8(CODE) declare this:XMLHttpRequest
23 8(CODE) declare valid this.data_callback
24 8(CODE) if this.readyState is 4
25 12(COMMENT) //if (stat) stat.textContent='status:'+this.status;
26 12(CODE) if this.status isnt 200
27 16(CODE) var errMsg = 'Err '+ this.status+': '+this.statusText;
28 16(CODE) var stat=document.getElementById('status');
29 16(CODE) if stat, stat.textContent=errMsg;
30 16(CODE) this.data_callback(new Error(errMsg), this.responseText);
31 (BLANK)
32 12(CODE) else
33 16(CODE) this.data_callback(null, this.responseText);
34 (BLANK)
35 4(CODE) function Local_OnError(e)
36 8(CODE) declare valid this.data_callback
37 8(CODE) this.data_callback(new Error('Server not responding'));
38 (BLANK)
39 (BLANK)
40 4(CODE) function create_HttpRequest() returns XMLHttpRequest
41 (BLANK)
42 8(CODE) var ref = null;
43 (BLANK)
44 8(CODE) declare valid window.XMLHttpRequest
45 8(CODE) declare valid window.ActiveXObject
46 (BLANK)
47 8(CODE) if window.XMLHttpRequest
48 12(CODE) ref = new window.XMLHttpRequest()
49 8(CODE) else if (window.ActiveXObject)  // Older IE.
50 12(CODE) ref = new window.ActiveXObject("MSXML2.XMLHTTP.3.0");
51 (BLANK)
52 8(CODE) if no ref, fail with 'Failure to create XMLHttpRequest';
53 8(CODE) return ref;
54 (BLANK)
55 (BLANK)
56 (BLANK)
---- TOKENIZE
1 (BLANK)
2 4(CODE) public function httpGet(url, callback)
3 (BLANK)
4 8(CODE) if typeof callback isnt 'function'
5 12(CODE) fail with '2nd parameter should be callback fn(err,data)'
6 (BLANK)
7 8(COMMENT) //ajax get file
8 8(CODE) var xmlhttp = create_HttpRequest();
9 8(CODE) declare valid xmlhttp.data_callback
10 8(CODE) xmlhttp.data_callback = callback; //store callback here
11 8(CODE) xmlhttp.onload = Local_OnLoad; //default, next fn
12 8(CODE) xmlhttp.onerror = Local_OnError;
13 8(COMMENT) //xmlhttp.setRequestHeader('content-type', 'applicattion/json');
14 8(CODE) console.log 'GET', url
15 8(CODE) xmlhttp.open 'GET', url, true
16 8(CODE) xmlhttp.send
17 (BLANK)
18 (BLANK)
19 4(CODE) function Local_OnLoad()
20 8(COMMENT) //var stat=document.getElementById('status');
21 8(COMMENT) //if (stat) stat.textContent='ready:'+this.readyState;
22 8(CODE) declare this:XMLHttpRequest
23 8(CODE) declare valid this.data_callback
24 8(CODE) if this.readyState is 4
25 12(COMMENT) //if (stat) stat.textContent='status:'+this.status;
26 12(CODE) if this.status isnt 200
27 16(CODE) var errMsg = 'Err '+ this.status+': '+this.statusText;
28 16(CODE) var stat=document.getElementById('status');
29 16(CODE) if stat, stat.textContent=errMsg;
30 16(CODE) this.data_callback(new Error(errMsg), this.responseText);
31 (BLANK)
32 12(CODE) else
33 16(CODE) this.data_callback(null, this.responseText);
34 (BLANK)
35 4(CODE) function Local_OnError(e)
36 8(CODE) declare valid this.data_callback
37 8(CODE) this.data_callback(new Error('Server not responding'));
38 (BLANK)
39 (BLANK)
40 4(CODE) function create_HttpRequest() returns XMLHttpRequest
41 (BLANK)
42 8(CODE) var ref = null;
43 (BLANK)
44 8(CODE) declare valid window.XMLHttpRequest
45 8(CODE) declare valid window.ActiveXObject
46 (BLANK)
47 8(CODE) if window.XMLHttpRequest
48 12(CODE) ref = new window.XMLHttpRequest()
49 8(CODE) else if (window.ActiveXObject)  // Older IE.
50 12(CODE) ref = new window.ActiveXObject("MSXML2.XMLHTTP.3.0");
51 (BLANK)
52 8(CODE) if no ref, fail with 'Failure to create XMLHttpRequest';
53 8(CODE) return ref;
54 (BLANK)
55 (BLANK)
56 (BLANK)
>>>ADVANCE 2:0 [-1] ' '(NEWLINE)
      Module matched OK: NEWLINE  
>>>ADVANCE 2:5 [0] 'public'(IDENTIFIER)
optFreeFormList [Module] parentname:Project Root parentIndent:undefined, blockIndent:4, get SeparatedList of [Statement] by ';' closer: EOF
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

2 4(CODE) public function httpGet(url, callback)
    'public'(IDENTIFIER) 'function'(IDENTIFIER) 'httpGet'(IDENTIFIER) '('(LITERAL) 'url'(IDENTIFIER) ','(LITERAL) 'callback'(IDENTIFIER) ')'(LITERAL)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 2:12 [1] 'function'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'function'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:2:6. Adjective: found 'function'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 2:12 [1] 'function'(IDENTIFIER)
        Statement TRY FunctionDeclaration on 'function'(IDENTIFIER)
          FunctionDeclaration matched OK: function function
>>>ADVANCE 2:21 [2] 'httpGet'(IDENTIFIER)
          FunctionDeclaration matched OK: IDENTIFIER httpGet
>>>ADVANCE 2:28 [3] '('(LITERAL)
          FunctionDeclaration matched OK: ( (
>>>ADVANCE 2:29 [4] 'url'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:4, get SeparatedList of [VariableDecl] by ',' closer: )
          FunctionDeclaration TRY VariableDecl on 'url'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER url
>>>ADVANCE 2:32 [5] ','(LITERAL)
          Parsed OK!-> VariableDecl
          FunctionDeclaration matched OK: , ,
>>>ADVANCE 2:34 [6] 'callback'(IDENTIFIER)
          FunctionDeclaration TRY VariableDecl on 'callback'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER callback
>>>ADVANCE 2:42 [7] ')'(LITERAL)
          Parsed OK!-> VariableDecl
          FunctionDeclaration matched OK: ) )
>>>ADVANCE 4:0 [-1] ' '(NEWLINE)
          FunctionDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 4:9 [0] 'if'(IDENTIFIER)
optFreeFormList [Body] parentname:httpGet parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'if'(IDENTIFIER)

4 8(CODE) if typeof callback isnt 'function'
    'if'(IDENTIFIER) 'typeof'(IDENTIFIER) 'callback'(IDENTIFIER) 'isnt'(OPER) ''function''(STRING)

              Statement TRY IfStatement on 'if'(IDENTIFIER)
                IfStatement matched OK: if if
>>>ADVANCE 4:12 [1] 'typeof'(IDENTIFIER)
                IfStatement TRY Expression on 'typeof'(IDENTIFIER)
                  Expression TRY UnaryOper on 'typeof'(IDENTIFIER)
                    UnaryOper matched OK: typeof typeof
>>>ADVANCE 4:19 [2] 'callback'(IDENTIFIER)
                  Parsed OK!-> UnaryOper
                  Expression TRY Operand on 'callback'(IDENTIFIER)
                    Operand TRY VariableRef on 'callback'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER callback
>>>ADVANCE 4:28 [3] 'isnt'(OPER)
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression TRY Oper on 'isnt'(OPER)
                    Oper matched OK: OPER isnt
>>>ADVANCE 4:33 [4] ''function''(STRING)
                  Parsed OK!-> Oper
                  Expression TRY Operand on ''function''(STRING)
                    Operand TRY StringLiteral on ''function''(STRING)
                      StringLiteral matched OK: STRING 'function'
>>>ADVANCE 5:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> StringLiteral
                  Parsed OK!-> Operand
                  Expression matched OK: NEWLINE  
>>>ADVANCE 5:13 [0] 'fail'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 5
                Parsed OK!-> Expression
                IfStatement TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 5:13 [0] 'fail'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'fail'(IDENTIFIER)

5 12(CODE) fail with '2nd parameter should be callback fn(err,data)'
    'fail'(IDENTIFIER) 'with'(IDENTIFIER) ''2nd parameter should be callback fn(err,data)''(STRING)

                    Statement TRY ThrowStatement on 'fail'(IDENTIFIER)
                      ThrowStatement matched OK: fail fail
>>>ADVANCE 5:18 [1] 'with'(IDENTIFIER)
                      ThrowStatement matched OK: with with
>>>ADVANCE 5:23 [2] ''2nd parameter should be callback fn(err,data)''(STRING)
                      ThrowStatement TRY Expression on ''2nd parameter should be callback fn(err,data)''(STRING)
                        Expression TRY Operand on ''2nd parameter should be callback fn(err,data)''(STRING)
                          Operand TRY StringLiteral on ''2nd parameter should be callback fn(err,data)''(STRING)
                            StringLiteral matched OK: STRING '2nd parameter should be callback fn(err,data)'
>>>ADVANCE 8:0 [-1] ' '(NEWLINE)
                          Parsed OK!-> StringLiteral
                        Parsed OK!-> Operand
                        Expression matched OK: NEWLINE  
>>>ADVANCE 8:9 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 8
                      Parsed OK!-> Expression
                    Parsed OK!-> ThrowStatement
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 8:9 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
                IfStatement TRY ElseIfStatement on 'var'(IDENTIFIER)
                ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:8:1. ElseIfStatement: found 'var'(IDENTIFIER) but 'else' required
<<REW to 8:9 [0] 'var'(IDENTIFIER)
                IfStatement TRY ElseStatement on 'var'(IDENTIFIER)
                ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:8:1. ElseStatement: found 'var'(IDENTIFIER) but 'else' required
<<REW to 8:9 [0] 'var'(IDENTIFIER)
              Parsed OK!-> IfStatement
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'var'(IDENTIFIER)

8 8(CODE) var xmlhttp = create_HttpRequest();
    'var'(IDENTIFIER) 'xmlhttp'(IDENTIFIER) '='(ASSIGN) 'create_HttpRequest'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) ';'(LITERAL)

              Statement TRY VarStatement on 'var'(IDENTIFIER)
                VarStatement matched OK: var var
>>>ADVANCE 8:13 [1] 'xmlhttp'(IDENTIFIER)
optSeparatedList [VarStatement] indent:8, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                VarStatement TRY VariableDecl on 'xmlhttp'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER xmlhttp
>>>ADVANCE 8:21 [2] '='(ASSIGN)
                  VariableDecl matched OK: = =
>>>ADVANCE 8:23 [3] 'create_HttpRequest'(IDENTIFIER)
                  VariableDecl TRY Expression on 'create_HttpRequest'(IDENTIFIER)
                    Expression TRY Operand on 'create_HttpRequest'(IDENTIFIER)
                      Operand TRY VariableRef on 'create_HttpRequest'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER create_HttpRequest
>>>ADVANCE 8:41 [4] '('(LITERAL)
                        VariableRef TRY FunctionAccess on '('(LITERAL)
                          FunctionAccess matched OK: ( (
>>>ADVANCE 8:42 [5] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                          FunctionAccess matched OK: ) )
>>>ADVANCE 8:43 [6] ';'(LITERAL)
                        Parsed OK!-> FunctionAccess
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression TRY Oper on ';'(LITERAL)
                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:8:43. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 8:43 [6] ';'(LITERAL)
                  Parsed OK!-> Expression
                Parsed OK!-> VariableDecl
              Parsed OK!-> VarStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 9:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 9:9 [0] 'declare'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'declare'(IDENTIFIER)

9 8(CODE) declare valid xmlhttp.data_callback
    'declare'(IDENTIFIER) 'valid'(IDENTIFIER) 'xmlhttp'(IDENTIFIER) '.'(LITERAL) 'data_callback'(IDENTIFIER)

              Statement TRY DeclareStatement on 'declare'(IDENTIFIER)
                DeclareStatement matched OK: declare declare
>>>ADVANCE 9:17 [1] 'valid'(IDENTIFIER)
                DeclareStatement matched OK: valid valid
>>>ADVANCE 9:23 [2] 'xmlhttp'(IDENTIFIER)
                DeclareStatement TRY VariableRef on 'xmlhttp'(IDENTIFIER)
                  VariableRef matched OK: IDENTIFIER xmlhttp
>>>ADVANCE 9:30 [3] '.'(LITERAL)
                  VariableRef TRY PropertyAccess on '.'(LITERAL)
                    PropertyAccess matched OK: . .
>>>ADVANCE 9:31 [4] 'data_callback'(IDENTIFIER)
                    PropertyAccess matched OK: IDENTIFIER data_callback
>>>ADVANCE 10:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> PropertyAccess
                Parsed OK!-> VariableRef
              Parsed OK!-> DeclareStatement
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 10:9 [0] 'xmlhttp'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'xmlhttp'(IDENTIFIER)

10 8(CODE) xmlhttp.data_callback = callback; //store callback here
    'xmlhttp'(IDENTIFIER) '.'(LITERAL) 'data_callback'(IDENTIFIER) '='(ASSIGN) 'callback'(IDENTIFIER) ';'(LITERAL) '//store callback here'(COMMENT)

              Statement TRY Adjective on 'xmlhttp'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:10:1. Adjective: found 'xmlhttp'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 10:9 [0] 'xmlhttp'(IDENTIFIER)
              Statement TRY VariableRef on 'xmlhttp'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER xmlhttp
>>>ADVANCE 10:16 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 10:17 [2] 'data_callback'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER data_callback
>>>ADVANCE 10:31 [3] '='(ASSIGN)
                Parsed OK!-> PropertyAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on '='(ASSIGN)
                AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 10:33 [4] 'callback'(IDENTIFIER)
                AssignmentStatement TRY Expression on 'callback'(IDENTIFIER)
                  Expression TRY Operand on 'callback'(IDENTIFIER)
                    Operand TRY VariableRef on 'callback'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER callback
>>>ADVANCE 10:41 [5] ';'(LITERAL)
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression TRY Oper on ';'(LITERAL)
                  Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:10:34. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 10:41 [5] ';'(LITERAL)
                Parsed OK!-> Expression
              Parsed OK!-> AssignmentStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 11:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 11:9 [0] 'xmlhttp'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'xmlhttp'(IDENTIFIER)

11 8(CODE) xmlhttp.onload = Local_OnLoad; //default, next fn
    'xmlhttp'(IDENTIFIER) '.'(LITERAL) 'onload'(IDENTIFIER) '='(ASSIGN) 'Local_OnLoad'(IDENTIFIER) ';'(LITERAL) '//default, next fn'(COMMENT)

              Statement TRY Adjective on 'xmlhttp'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:11:1. Adjective: found 'xmlhttp'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 11:9 [0] 'xmlhttp'(IDENTIFIER)
              Statement TRY VariableRef on 'xmlhttp'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER xmlhttp
>>>ADVANCE 11:16 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 11:17 [2] 'onload'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER onload
>>>ADVANCE 11:24 [3] '='(ASSIGN)
                Parsed OK!-> PropertyAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on '='(ASSIGN)
                AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 11:26 [4] 'Local_OnLoad'(IDENTIFIER)
                AssignmentStatement TRY Expression on 'Local_OnLoad'(IDENTIFIER)
                  Expression TRY Operand on 'Local_OnLoad'(IDENTIFIER)
                    Operand TRY VariableRef on 'Local_OnLoad'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER Local_OnLoad
>>>ADVANCE 11:38 [5] ';'(LITERAL)
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression TRY Oper on ';'(LITERAL)
                  Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:11:27. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 11:38 [5] ';'(LITERAL)
                Parsed OK!-> Expression
              Parsed OK!-> AssignmentStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 12:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 12:9 [0] 'xmlhttp'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'xmlhttp'(IDENTIFIER)

12 8(CODE) xmlhttp.onerror = Local_OnError;
    'xmlhttp'(IDENTIFIER) '.'(LITERAL) 'onerror'(IDENTIFIER) '='(ASSIGN) 'Local_OnError'(IDENTIFIER) ';'(LITERAL)

              Statement TRY Adjective on 'xmlhttp'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:12:1. Adjective: found 'xmlhttp'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 12:9 [0] 'xmlhttp'(IDENTIFIER)
              Statement TRY VariableRef on 'xmlhttp'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER xmlhttp
>>>ADVANCE 12:16 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 12:17 [2] 'onerror'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER onerror
>>>ADVANCE 12:25 [3] '='(ASSIGN)
                Parsed OK!-> PropertyAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on '='(ASSIGN)
                AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 12:27 [4] 'Local_OnError'(IDENTIFIER)
                AssignmentStatement TRY Expression on 'Local_OnError'(IDENTIFIER)
                  Expression TRY Operand on 'Local_OnError'(IDENTIFIER)
                    Operand TRY VariableRef on 'Local_OnError'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER Local_OnError
>>>ADVANCE 12:40 [5] ';'(LITERAL)
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression TRY Oper on ';'(LITERAL)
                  Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:12:28. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 12:40 [5] ';'(LITERAL)
                Parsed OK!-> Expression
              Parsed OK!-> AssignmentStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 14:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 14:9 [0] 'console'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'console'(IDENTIFIER)

14 8(CODE) console.log 'GET', url
    'console'(IDENTIFIER) '.'(LITERAL) 'log'(IDENTIFIER) ''GET''(STRING) ','(LITERAL) 'url'(IDENTIFIER)

              Statement TRY Adjective on 'console'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:14:1. Adjective: found 'console'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 14:9 [0] 'console'(IDENTIFIER)
              Statement TRY VariableRef on 'console'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER console
>>>ADVANCE 14:16 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 14:17 [2] 'log'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER log
>>>ADVANCE 14:21 [3] ''GET''(STRING)
                Parsed OK!-> PropertyAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ''GET''(STRING)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:14:18. AssignmentStatement: found ''GET''(STRING) but 'ASSIGN' required
<<REW to 14:21 [3] ''GET''(STRING)
              Statement TRY FunctionCall on ''GET''(STRING)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: -no closer-
                  FunctionAccess TRY Expression on ''GET''(STRING)
                    Expression TRY Operand on ''GET''(STRING)
                      Operand TRY StringLiteral on ''GET''(STRING)
                        StringLiteral matched OK: STRING 'GET'
>>>ADVANCE 14:26 [4] ','(LITERAL)
                      Parsed OK!-> StringLiteral
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: , ,
>>>ADVANCE 14:28 [5] 'url'(IDENTIFIER)
                  FunctionAccess TRY Expression on 'url'(IDENTIFIER)
                    Expression TRY Operand on 'url'(IDENTIFIER)
                      Operand TRY VariableRef on 'url'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 15:0 [-1] ' '(NEWLINE)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression matched OK: NEWLINE  
>>>ADVANCE 15:9 [0] 'xmlhttp'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 15
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: NEWLINE  
>>>ADVANCE 15:9 [0] 'xmlhttp'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 15
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 15:9 [0] 'xmlhttp'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'xmlhttp'(IDENTIFIER)

15 8(CODE) xmlhttp.open 'GET', url, true
    'xmlhttp'(IDENTIFIER) '.'(LITERAL) 'open'(IDENTIFIER) ''GET''(STRING) ','(LITERAL) 'url'(IDENTIFIER) ','(LITERAL) 'true'(IDENTIFIER)

              Statement TRY Adjective on 'xmlhttp'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:15:1. Adjective: found 'xmlhttp'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 15:9 [0] 'xmlhttp'(IDENTIFIER)
              Statement TRY VariableRef on 'xmlhttp'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER xmlhttp
>>>ADVANCE 15:16 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 15:17 [2] 'open'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER open
>>>ADVANCE 15:22 [3] ''GET''(STRING)
                Parsed OK!-> PropertyAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ''GET''(STRING)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:15:18. AssignmentStatement: found ''GET''(STRING) but 'ASSIGN' required
<<REW to 15:22 [3] ''GET''(STRING)
              Statement TRY FunctionCall on ''GET''(STRING)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: -no closer-
                  FunctionAccess TRY Expression on ''GET''(STRING)
                    Expression TRY Operand on ''GET''(STRING)
                      Operand TRY StringLiteral on ''GET''(STRING)
                        StringLiteral matched OK: STRING 'GET'
>>>ADVANCE 15:27 [4] ','(LITERAL)
                      Parsed OK!-> StringLiteral
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: , ,
>>>ADVANCE 15:29 [5] 'url'(IDENTIFIER)
                  FunctionAccess TRY Expression on 'url'(IDENTIFIER)
                    Expression TRY Operand on 'url'(IDENTIFIER)
                      Operand TRY VariableRef on 'url'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 15:32 [6] ','(LITERAL)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: , ,
>>>ADVANCE 15:34 [7] 'true'(IDENTIFIER)
                  FunctionAccess TRY Expression on 'true'(IDENTIFIER)
                    Expression TRY Operand on 'true'(IDENTIFIER)
                      Operand TRY VariableRef on 'true'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER true
>>>ADVANCE 16:0 [-1] ' '(NEWLINE)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression matched OK: NEWLINE  
>>>ADVANCE 16:9 [0] 'xmlhttp'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 16
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: NEWLINE  
>>>ADVANCE 16:9 [0] 'xmlhttp'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 16
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 16:9 [0] 'xmlhttp'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'xmlhttp'(IDENTIFIER)

16 8(CODE) xmlhttp.send
    'xmlhttp'(IDENTIFIER) '.'(LITERAL) 'send'(IDENTIFIER)

              Statement TRY Adjective on 'xmlhttp'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:16:1. Adjective: found 'xmlhttp'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 16:9 [0] 'xmlhttp'(IDENTIFIER)
              Statement TRY VariableRef on 'xmlhttp'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER xmlhttp
>>>ADVANCE 16:16 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 16:17 [2] 'send'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER send
>>>ADVANCE 19:0 [-1] ' '(NEWLINE)
                Parsed OK!-> PropertyAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ' '(NEWLINE)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:16:18. AssignmentStatement: found ' '(NEWLINE) but 'ASSIGN' required
<<REW to 19:0 [-1] ' '(NEWLINE)
              Statement TRY FunctionCall on ' '(NEWLINE)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 19:5 [0] 'function'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> FunctionDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'function'(IDENTIFIER)

19 4(CODE) function Local_OnLoad()
    'function'(IDENTIFIER) 'Local_OnLoad'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

        Statement TRY FunctionDeclaration on 'function'(IDENTIFIER)
          FunctionDeclaration matched OK: function function
>>>ADVANCE 19:14 [1] 'Local_OnLoad'(IDENTIFIER)
          FunctionDeclaration matched OK: IDENTIFIER Local_OnLoad
>>>ADVANCE 19:26 [2] '('(LITERAL)
          FunctionDeclaration matched OK: ( (
>>>ADVANCE 19:27 [3] ')'(LITERAL)
optSeparatedList [FunctionDeclaration] indent:4, get SeparatedList of [VariableDecl] by ',' closer: )
          FunctionDeclaration matched OK: ) )
>>>ADVANCE 22:0 [-1] ' '(NEWLINE)
          FunctionDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 22:9 [0] 'declare'(IDENTIFIER)
optFreeFormList [Body] parentname:Local_OnLoad parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'declare'(IDENTIFIER)

22 8(CODE) declare this:XMLHttpRequest
    'declare'(IDENTIFIER) 'this'(IDENTIFIER) ':'(OPER) 'XMLHttpRequest'(IDENTIFIER)

              Statement TRY DeclareStatement on 'declare'(IDENTIFIER)
                DeclareStatement matched OK: declare declare
>>>ADVANCE 22:17 [1] 'this'(IDENTIFIER)
optSeparatedList [DeclareStatement] indent:8, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                DeclareStatement TRY VariableDecl on 'this'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER this
>>>ADVANCE 22:21 [2] ':'(OPER)
                  VariableDecl matched OK: : :
>>>ADVANCE 22:22 [3] 'XMLHttpRequest'(IDENTIFIER)
                  VariableDecl TRY VariableRef on 'XMLHttpRequest'(IDENTIFIER)
                    VariableRef matched OK: IDENTIFIER XMLHttpRequest
>>>ADVANCE 23:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> VariableRef
                Parsed OK!-> VariableDecl
                DeclareStatement matched OK: NEWLINE  
>>>ADVANCE 23:9 [0] 'declare'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 23
              Parsed OK!-> DeclareStatement
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 23:9 [0] 'declare'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'declare'(IDENTIFIER)

23 8(CODE) declare valid this.data_callback
    'declare'(IDENTIFIER) 'valid'(IDENTIFIER) 'this'(IDENTIFIER) '.'(LITERAL) 'data_callback'(IDENTIFIER)

              Statement TRY DeclareStatement on 'declare'(IDENTIFIER)
                DeclareStatement matched OK: declare declare
>>>ADVANCE 23:17 [1] 'valid'(IDENTIFIER)
                DeclareStatement matched OK: valid valid
>>>ADVANCE 23:23 [2] 'this'(IDENTIFIER)
                DeclareStatement TRY VariableRef on 'this'(IDENTIFIER)
                  VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 23:27 [3] '.'(LITERAL)
                  VariableRef TRY PropertyAccess on '.'(LITERAL)
                    PropertyAccess matched OK: . .
>>>ADVANCE 23:28 [4] 'data_callback'(IDENTIFIER)
                    PropertyAccess matched OK: IDENTIFIER data_callback
>>>ADVANCE 24:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> PropertyAccess
                Parsed OK!-> VariableRef
              Parsed OK!-> DeclareStatement
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 24:9 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'if'(IDENTIFIER)

24 8(CODE) if this.readyState is 4
    'if'(IDENTIFIER) 'this'(IDENTIFIER) '.'(LITERAL) 'readyState'(IDENTIFIER) 'is'(OPER) '4'(NUMBER)

              Statement TRY IfStatement on 'if'(IDENTIFIER)
                IfStatement matched OK: if if
>>>ADVANCE 24:12 [1] 'this'(IDENTIFIER)
                IfStatement TRY Expression on 'this'(IDENTIFIER)
                  Expression TRY Operand on 'this'(IDENTIFIER)
                    Operand TRY VariableRef on 'this'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 24:16 [2] '.'(LITERAL)
                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                        PropertyAccess matched OK: . .
>>>ADVANCE 24:17 [3] 'readyState'(IDENTIFIER)
                        PropertyAccess matched OK: IDENTIFIER readyState
>>>ADVANCE 24:28 [4] 'is'(OPER)
                      Parsed OK!-> PropertyAccess
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression TRY Oper on 'is'(OPER)
                    Oper matched OK: OPER is
>>>ADVANCE 24:31 [5] '4'(NUMBER)
                  Parsed OK!-> Oper
                  Expression TRY Operand on '4'(NUMBER)
                    Operand TRY NumberLiteral on '4'(NUMBER)
                      NumberLiteral matched OK: NUMBER 4
>>>ADVANCE 26:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> NumberLiteral
                  Parsed OK!-> Operand
                  Expression matched OK: NEWLINE  
>>>ADVANCE 26:13 [0] 'if'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 26
                Parsed OK!-> Expression
                IfStatement TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 26:13 [0] 'if'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'if'(IDENTIFIER)

26 12(CODE) if this.status isnt 200
    'if'(IDENTIFIER) 'this'(IDENTIFIER) '.'(LITERAL) 'status'(IDENTIFIER) 'isnt'(OPER) '200'(NUMBER)

                    Statement TRY IfStatement on 'if'(IDENTIFIER)
                      IfStatement matched OK: if if
>>>ADVANCE 26:16 [1] 'this'(IDENTIFIER)
                      IfStatement TRY Expression on 'this'(IDENTIFIER)
                        Expression TRY Operand on 'this'(IDENTIFIER)
                          Operand TRY VariableRef on 'this'(IDENTIFIER)
                            VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 26:20 [2] '.'(LITERAL)
                            VariableRef TRY PropertyAccess on '.'(LITERAL)
                              PropertyAccess matched OK: . .
>>>ADVANCE 26:21 [3] 'status'(IDENTIFIER)
                              PropertyAccess matched OK: IDENTIFIER status
>>>ADVANCE 26:28 [4] 'isnt'(OPER)
                            Parsed OK!-> PropertyAccess
                          Parsed OK!-> VariableRef
                        Parsed OK!-> Operand
                        Expression TRY Oper on 'isnt'(OPER)
                          Oper matched OK: OPER isnt
>>>ADVANCE 26:33 [5] '200'(NUMBER)
                        Parsed OK!-> Oper
                        Expression TRY Operand on '200'(NUMBER)
                          Operand TRY NumberLiteral on '200'(NUMBER)
                            NumberLiteral matched OK: NUMBER 200
>>>ADVANCE 27:0 [-1] ' '(NEWLINE)
                          Parsed OK!-> NumberLiteral
                        Parsed OK!-> Operand
                        Expression matched OK: NEWLINE  
>>>ADVANCE 27:17 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 27
                      Parsed OK!-> Expression
                      IfStatement TRY Body on ' '(NEWLINE)
                        Body matched OK: NEWLINE  
>>>ADVANCE 27:17 [0] 'var'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                        Body TRY Statement on 'var'(IDENTIFIER)

27 16(CODE) var errMsg = 'Err '+ this.status+': '+this.statusText;
    'var'(IDENTIFIER) 'errMsg'(IDENTIFIER) '='(ASSIGN) ''Err ''(STRING) '+'(OPER) 'this'(IDENTIFIER) '.'(LITERAL) 'status'(IDENTIFIER) '+'(OPER) '': ''(STRING) '+'(OPER) 'this'(IDENTIFIER) '.'(LITERAL) 'statusText'(IDENTIFIER) ';'(LITERAL)

                          Statement TRY VarStatement on 'var'(IDENTIFIER)
                            VarStatement matched OK: var var
>>>ADVANCE 27:21 [1] 'errMsg'(IDENTIFIER)
optSeparatedList [VarStatement] indent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                            VarStatement TRY VariableDecl on 'errMsg'(IDENTIFIER)
                              VariableDecl matched OK: IDENTIFIER errMsg
>>>ADVANCE 27:28 [2] '='(ASSIGN)
                              VariableDecl matched OK: = =
>>>ADVANCE 27:30 [3] ''Err ''(STRING)
                              VariableDecl TRY Expression on ''Err ''(STRING)
                                Expression TRY Operand on ''Err ''(STRING)
                                  Operand TRY StringLiteral on ''Err ''(STRING)
                                    StringLiteral matched OK: STRING 'Err '
>>>ADVANCE 27:36 [4] '+'(OPER)
                                  Parsed OK!-> StringLiteral
                                Parsed OK!-> Operand
                                Expression TRY Oper on '+'(OPER)
                                  Oper matched OK: OPER +
>>>ADVANCE 27:38 [5] 'this'(IDENTIFIER)
                                Parsed OK!-> Oper
                                Expression TRY Operand on 'this'(IDENTIFIER)
                                  Operand TRY VariableRef on 'this'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 27:42 [6] '.'(LITERAL)
                                    VariableRef TRY PropertyAccess on '.'(LITERAL)
                                      PropertyAccess matched OK: . .
>>>ADVANCE 27:43 [7] 'status'(IDENTIFIER)
                                      PropertyAccess matched OK: IDENTIFIER status
>>>ADVANCE 27:49 [8] '+'(OPER)
                                    Parsed OK!-> PropertyAccess
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                                Expression TRY Oper on '+'(OPER)
                                  Oper matched OK: OPER +
>>>ADVANCE 27:50 [9] '': ''(STRING)
                                Parsed OK!-> Oper
                                Expression TRY Operand on '': ''(STRING)
                                  Operand TRY StringLiteral on '': ''(STRING)
                                    StringLiteral matched OK: STRING ': '
>>>ADVANCE 27:54 [10] '+'(OPER)
                                  Parsed OK!-> StringLiteral
                                Parsed OK!-> Operand
                                Expression TRY Oper on '+'(OPER)
                                  Oper matched OK: OPER +
>>>ADVANCE 27:55 [11] 'this'(IDENTIFIER)
                                Parsed OK!-> Oper
                                Expression TRY Operand on 'this'(IDENTIFIER)
                                  Operand TRY VariableRef on 'this'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 27:59 [12] '.'(LITERAL)
                                    VariableRef TRY PropertyAccess on '.'(LITERAL)
                                      PropertyAccess matched OK: . .
>>>ADVANCE 27:60 [13] 'statusText'(IDENTIFIER)
                                      PropertyAccess matched OK: IDENTIFIER statusText
>>>ADVANCE 27:70 [14] ';'(LITERAL)
                                    Parsed OK!-> PropertyAccess
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                                Expression TRY Oper on ';'(LITERAL)
                                Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:27:61. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 27:70 [14] ';'(LITERAL)
                              Parsed OK!-> Expression
                            Parsed OK!-> VariableDecl
                          Parsed OK!-> VarStatement
                        Parsed OK!-> Statement
                        Body matched OK: ; ;
>>>ADVANCE 28:0 [-1] ' '(NEWLINE)
                        Body matched OK: NEWLINE  
>>>ADVANCE 28:17 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                        Body TRY Statement on 'var'(IDENTIFIER)

28 16(CODE) var stat=document.getElementById('status');
    'var'(IDENTIFIER) 'stat'(IDENTIFIER) '='(ASSIGN) 'document'(IDENTIFIER) '.'(LITERAL) 'getElementById'(IDENTIFIER) '('(LITERAL) ''status''(STRING) ')'(LITERAL) ';'(LITERAL)

                          Statement TRY VarStatement on 'var'(IDENTIFIER)
                            VarStatement matched OK: var var
>>>ADVANCE 28:21 [1] 'stat'(IDENTIFIER)
optSeparatedList [VarStatement] indent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                            VarStatement TRY VariableDecl on 'stat'(IDENTIFIER)
                              VariableDecl matched OK: IDENTIFIER stat
>>>ADVANCE 28:25 [2] '='(ASSIGN)
                              VariableDecl matched OK: = =
>>>ADVANCE 28:26 [3] 'document'(IDENTIFIER)
                              VariableDecl TRY Expression on 'document'(IDENTIFIER)
                                Expression TRY Operand on 'document'(IDENTIFIER)
                                  Operand TRY VariableRef on 'document'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER document
>>>ADVANCE 28:34 [4] '.'(LITERAL)
                                    VariableRef TRY PropertyAccess on '.'(LITERAL)
                                      PropertyAccess matched OK: . .
>>>ADVANCE 28:35 [5] 'getElementById'(IDENTIFIER)
                                      PropertyAccess matched OK: IDENTIFIER getElementById
>>>ADVANCE 28:49 [6] '('(LITERAL)
                                    Parsed OK!-> PropertyAccess
                                    VariableRef TRY FunctionAccess on '('(LITERAL)
                                      FunctionAccess matched OK: ( (
>>>ADVANCE 28:50 [7] ''status''(STRING)
optSeparatedList [FunctionAccess] indent:16, get SeparatedList of [Expression] by ',' closer: )
                                      FunctionAccess TRY Expression on ''status''(STRING)
                                        Expression TRY Operand on ''status''(STRING)
                                          Operand TRY StringLiteral on ''status''(STRING)
                                            StringLiteral matched OK: STRING 'status'
>>>ADVANCE 28:58 [8] ')'(LITERAL)
                                          Parsed OK!-> StringLiteral
                                        Parsed OK!-> Operand
                                      Parsed OK!-> Expression
                                      FunctionAccess matched OK: ) )
>>>ADVANCE 28:59 [9] ';'(LITERAL)
                                    Parsed OK!-> FunctionAccess
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                                Expression TRY Oper on ';'(LITERAL)
                                Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:28:59. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 28:59 [9] ';'(LITERAL)
                              Parsed OK!-> Expression
                            Parsed OK!-> VariableDecl
                          Parsed OK!-> VarStatement
                        Parsed OK!-> Statement
                        Body matched OK: ; ;
>>>ADVANCE 29:0 [-1] ' '(NEWLINE)
                        Body matched OK: NEWLINE  
>>>ADVANCE 29:17 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                        Body TRY Statement on 'if'(IDENTIFIER)

29 16(CODE) if stat, stat.textContent=errMsg;
    'if'(IDENTIFIER) 'stat'(IDENTIFIER) ','(LITERAL) 'stat'(IDENTIFIER) '.'(LITERAL) 'textContent'(IDENTIFIER) '='(ASSIGN) 'errMsg'(IDENTIFIER) ';'(LITERAL)

                          Statement TRY IfStatement on 'if'(IDENTIFIER)
                            IfStatement matched OK: if if
>>>ADVANCE 29:20 [1] 'stat'(IDENTIFIER)
                            IfStatement TRY Expression on 'stat'(IDENTIFIER)
                              Expression TRY Operand on 'stat'(IDENTIFIER)
                                Operand TRY VariableRef on 'stat'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER stat
>>>ADVANCE 29:24 [2] ','(LITERAL)
                                Parsed OK!-> VariableRef
                              Parsed OK!-> Operand
                            Parsed OK!-> Expression
                            IfStatement matched OK: , ,
>>>ADVANCE 29:26 [3] 'stat'(IDENTIFIER)
                            IfStatement TRY SingleLineStatement on 'stat'(IDENTIFIER)
optSeparatedList [SingleLineStatement] indent:16, get SeparatedList of [Statement] by ';' closer: NEWLINE
                              SingleLineStatement TRY Statement on 'stat'(IDENTIFIER)

29 16(CODE) if stat, stat.textContent=errMsg;
    'if'(IDENTIFIER) 'stat'(IDENTIFIER) ','(LITERAL) 'stat'(IDENTIFIER) '.'(LITERAL) 'textContent'(IDENTIFIER) '='(ASSIGN) 'errMsg'(IDENTIFIER) ';'(LITERAL)

                                Statement TRY Adjective on 'stat'(IDENTIFIER)
                                Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:29:25. Adjective: found 'stat'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 29:26 [3] 'stat'(IDENTIFIER)
                                Statement TRY VariableRef on 'stat'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER stat
>>>ADVANCE 29:30 [4] '.'(LITERAL)
                                  VariableRef TRY PropertyAccess on '.'(LITERAL)
                                    PropertyAccess matched OK: . .
>>>ADVANCE 29:31 [5] 'textContent'(IDENTIFIER)
                                    PropertyAccess matched OK: IDENTIFIER textContent
>>>ADVANCE 29:42 [6] '='(ASSIGN)
                                  Parsed OK!-> PropertyAccess
                                Parsed OK!-> VariableRef
                                Statement TRY AssignmentStatement on '='(ASSIGN)
                                  AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 29:43 [7] 'errMsg'(IDENTIFIER)
                                  AssignmentStatement TRY Expression on 'errMsg'(IDENTIFIER)
                                    Expression TRY Operand on 'errMsg'(IDENTIFIER)
                                      Operand TRY VariableRef on 'errMsg'(IDENTIFIER)
                                        VariableRef matched OK: IDENTIFIER errMsg
>>>ADVANCE 29:49 [8] ';'(LITERAL)
                                      Parsed OK!-> VariableRef
                                    Parsed OK!-> Operand
                                    Expression TRY Oper on ';'(LITERAL)
                                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:29:44. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 29:49 [8] ';'(LITERAL)
                                  Parsed OK!-> Expression
                                Parsed OK!-> AssignmentStatement
                              Parsed OK!-> Statement
                              SingleLineStatement matched OK: ; ;
>>>ADVANCE 30:0 [-1] ' '(NEWLINE)
                              SingleLineStatement matched OK: NEWLINE  
>>>ADVANCE 30:17 [0] 'this'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 30
                            Parsed OK!-> SingleLineStatement
                            IfStatement matched OK: NEWLINE  
>>>ADVANCE 30:17 [0] 'this'(IDENTIFIER)
                            IfStatement TRY ElseIfStatement on 'this'(IDENTIFIER)
                            ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:30:1. ElseIfStatement: found 'this'(IDENTIFIER) but 'else' required
<<REW to 30:17 [0] 'this'(IDENTIFIER)
                            IfStatement TRY ElseStatement on 'this'(IDENTIFIER)
                            ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:30:1. ElseStatement: found 'this'(IDENTIFIER) but 'else' required
<<REW to 30:17 [0] 'this'(IDENTIFIER)
                          Parsed OK!-> IfStatement
                        Parsed OK!-> Statement
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                        Body TRY Statement on 'this'(IDENTIFIER)

30 16(CODE) this.data_callback(new Error(errMsg), this.responseText);
    'this'(IDENTIFIER) '.'(LITERAL) 'data_callback'(IDENTIFIER) '('(LITERAL) 'new'(IDENTIFIER) 'Error'(IDENTIFIER) '('(LITERAL) 'errMsg'(IDENTIFIER) ')'(LITERAL) ','(LITERAL) 'this'(IDENTIFIER) '.'(LITERAL) 'responseText'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                          Statement TRY Adjective on 'this'(IDENTIFIER)
                          Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:30:1. Adjective: found 'this'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 30:17 [0] 'this'(IDENTIFIER)
                          Statement TRY VariableRef on 'this'(IDENTIFIER)
                            VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 30:21 [1] '.'(LITERAL)
                            VariableRef TRY PropertyAccess on '.'(LITERAL)
                              PropertyAccess matched OK: . .
>>>ADVANCE 30:22 [2] 'data_callback'(IDENTIFIER)
                              PropertyAccess matched OK: IDENTIFIER data_callback
>>>ADVANCE 30:35 [3] '('(LITERAL)
                            Parsed OK!-> PropertyAccess
                            VariableRef TRY FunctionAccess on '('(LITERAL)
                              FunctionAccess matched OK: ( (
>>>ADVANCE 30:36 [4] 'new'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:16, get SeparatedList of [Expression] by ',' closer: )
                              FunctionAccess TRY Expression on 'new'(IDENTIFIER)
                                Expression TRY UnaryOper on 'new'(IDENTIFIER)
                                  UnaryOper matched OK: new new
>>>ADVANCE 30:40 [5] 'Error'(IDENTIFIER)
                                Parsed OK!-> UnaryOper
                                Expression TRY Operand on 'Error'(IDENTIFIER)
                                  Operand TRY VariableRef on 'Error'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER Error
>>>ADVANCE 30:45 [6] '('(LITERAL)
                                    VariableRef TRY FunctionAccess on '('(LITERAL)
                                      FunctionAccess matched OK: ( (
>>>ADVANCE 30:46 [7] 'errMsg'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:16, get SeparatedList of [Expression] by ',' closer: )
                                      FunctionAccess TRY Expression on 'errMsg'(IDENTIFIER)
                                        Expression TRY Operand on 'errMsg'(IDENTIFIER)
                                          Operand TRY VariableRef on 'errMsg'(IDENTIFIER)
                                            VariableRef matched OK: IDENTIFIER errMsg
>>>ADVANCE 30:52 [8] ')'(LITERAL)
                                          Parsed OK!-> VariableRef
                                        Parsed OK!-> Operand
                                      Parsed OK!-> Expression
                                      FunctionAccess matched OK: ) )
>>>ADVANCE 30:53 [9] ','(LITERAL)
                                    Parsed OK!-> FunctionAccess
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                              Parsed OK!-> Expression
                              FunctionAccess matched OK: , ,
>>>ADVANCE 30:55 [10] 'this'(IDENTIFIER)
                              FunctionAccess TRY Expression on 'this'(IDENTIFIER)
                                Expression TRY Operand on 'this'(IDENTIFIER)
                                  Operand TRY VariableRef on 'this'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 30:59 [11] '.'(LITERAL)
                                    VariableRef TRY PropertyAccess on '.'(LITERAL)
                                      PropertyAccess matched OK: . .
>>>ADVANCE 30:60 [12] 'responseText'(IDENTIFIER)
                                      PropertyAccess matched OK: IDENTIFIER responseText
>>>ADVANCE 30:72 [13] ')'(LITERAL)
                                    Parsed OK!-> PropertyAccess
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                              Parsed OK!-> Expression
                              FunctionAccess matched OK: ) )
>>>ADVANCE 30:73 [14] ';'(LITERAL)
                            Parsed OK!-> FunctionAccess
                          Parsed OK!-> VariableRef
                          Statement TRY AssignmentStatement on ';'(LITERAL)
                          AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:30:73. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 30:73 [14] ';'(LITERAL)
                          Statement TRY FunctionCall on ';'(LITERAL)
                          Parsed OK!-> FunctionCall
                        Parsed OK!-> Statement
                        Body matched OK: ; ;
>>>ADVANCE 32:0 [-1] ' '(NEWLINE)
                        Body matched OK: NEWLINE  
>>>ADVANCE 32:13 [0] 'else'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [Body] blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no closer-
                      Parsed OK!-> Body
                      IfStatement TRY ElseIfStatement on 'else'(IDENTIFIER)
                        ElseIfStatement matched OK: else else
>>>ADVANCE 33:0 [-1] ' '(NEWLINE)
                      ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:32:14. ElseIfStatement: found ' '(NEWLINE) but 'if' required
<<REW to 32:13 [0] 'else'(IDENTIFIER)
                      IfStatement TRY ElseStatement on 'else'(IDENTIFIER)
                        ElseStatement matched OK: else else
>>>ADVANCE 33:0 [-1] ' '(NEWLINE)
                        ElseStatement TRY Body on ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 33:17 [0] 'this'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                          Body TRY Statement on 'this'(IDENTIFIER)

33 16(CODE) this.data_callback(null, this.responseText);
    'this'(IDENTIFIER) '.'(LITERAL) 'data_callback'(IDENTIFIER) '('(LITERAL) 'null'(IDENTIFIER) ','(LITERAL) 'this'(IDENTIFIER) '.'(LITERAL) 'responseText'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                            Statement TRY Adjective on 'this'(IDENTIFIER)
                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:33:1. Adjective: found 'this'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 33:17 [0] 'this'(IDENTIFIER)
                            Statement TRY VariableRef on 'this'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 33:21 [1] '.'(LITERAL)
                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                PropertyAccess matched OK: . .
>>>ADVANCE 33:22 [2] 'data_callback'(IDENTIFIER)
                                PropertyAccess matched OK: IDENTIFIER data_callback
>>>ADVANCE 33:35 [3] '('(LITERAL)
                              Parsed OK!-> PropertyAccess
                              VariableRef TRY FunctionAccess on '('(LITERAL)
                                FunctionAccess matched OK: ( (
>>>ADVANCE 33:36 [4] 'null'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:16, get SeparatedList of [Expression] by ',' closer: )
                                FunctionAccess TRY Expression on 'null'(IDENTIFIER)
                                  Expression TRY Operand on 'null'(IDENTIFIER)
                                    Operand TRY VariableRef on 'null'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER null
>>>ADVANCE 33:40 [5] ','(LITERAL)
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: , ,
>>>ADVANCE 33:42 [6] 'this'(IDENTIFIER)
                                FunctionAccess TRY Expression on 'this'(IDENTIFIER)
                                  Expression TRY Operand on 'this'(IDENTIFIER)
                                    Operand TRY VariableRef on 'this'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 33:46 [7] '.'(LITERAL)
                                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                                        PropertyAccess matched OK: . .
>>>ADVANCE 33:47 [8] 'responseText'(IDENTIFIER)
                                        PropertyAccess matched OK: IDENTIFIER responseText
>>>ADVANCE 33:59 [9] ')'(LITERAL)
                                      Parsed OK!-> PropertyAccess
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: ) )
>>>ADVANCE 33:60 [10] ';'(LITERAL)
                              Parsed OK!-> FunctionAccess
                            Parsed OK!-> VariableRef
                            Statement TRY AssignmentStatement on ';'(LITERAL)
                            AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:33:60. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 33:60 [10] ';'(LITERAL)
                            Statement TRY FunctionCall on ';'(LITERAL)
                            Parsed OK!-> FunctionCall
                          Parsed OK!-> Statement
                          Body matched OK: ; ;
>>>ADVANCE 35:0 [-1] ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 35:5 [0] 'function'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:16 parentIndent:12
END freeFormMode [Body] blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no closer-
                        Parsed OK!-> Body
                      Parsed OK!-> ElseStatement
                    Parsed OK!-> IfStatement
                  Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
                IfStatement TRY ElseIfStatement on 'function'(IDENTIFIER)
                ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:35:1. ElseIfStatement: found 'function'(IDENTIFIER) but 'else' required
<<REW to 35:5 [0] 'function'(IDENTIFIER)
                IfStatement TRY ElseStatement on 'function'(IDENTIFIER)
                ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:35:1. ElseStatement: found 'function'(IDENTIFIER) but 'else' required
<<REW to 35:5 [0] 'function'(IDENTIFIER)
              Parsed OK!-> IfStatement
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> FunctionDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'function'(IDENTIFIER)

35 4(CODE) function Local_OnError(e)
    'function'(IDENTIFIER) 'Local_OnError'(IDENTIFIER) '('(LITERAL) 'e'(IDENTIFIER) ')'(LITERAL)

        Statement TRY FunctionDeclaration on 'function'(IDENTIFIER)
          FunctionDeclaration matched OK: function function
>>>ADVANCE 35:14 [1] 'Local_OnError'(IDENTIFIER)
          FunctionDeclaration matched OK: IDENTIFIER Local_OnError
>>>ADVANCE 35:27 [2] '('(LITERAL)
          FunctionDeclaration matched OK: ( (
>>>ADVANCE 35:28 [3] 'e'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:4, get SeparatedList of [VariableDecl] by ',' closer: )
          FunctionDeclaration TRY VariableDecl on 'e'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER e
>>>ADVANCE 35:29 [4] ')'(LITERAL)
          Parsed OK!-> VariableDecl
          FunctionDeclaration matched OK: ) )
>>>ADVANCE 36:0 [-1] ' '(NEWLINE)
          FunctionDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 36:9 [0] 'declare'(IDENTIFIER)
optFreeFormList [Body] parentname:Local_OnError parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'declare'(IDENTIFIER)

36 8(CODE) declare valid this.data_callback
    'declare'(IDENTIFIER) 'valid'(IDENTIFIER) 'this'(IDENTIFIER) '.'(LITERAL) 'data_callback'(IDENTIFIER)

              Statement TRY DeclareStatement on 'declare'(IDENTIFIER)
                DeclareStatement matched OK: declare declare
>>>ADVANCE 36:17 [1] 'valid'(IDENTIFIER)
                DeclareStatement matched OK: valid valid
>>>ADVANCE 36:23 [2] 'this'(IDENTIFIER)
                DeclareStatement TRY VariableRef on 'this'(IDENTIFIER)
                  VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 36:27 [3] '.'(LITERAL)
                  VariableRef TRY PropertyAccess on '.'(LITERAL)
                    PropertyAccess matched OK: . .
>>>ADVANCE 36:28 [4] 'data_callback'(IDENTIFIER)
                    PropertyAccess matched OK: IDENTIFIER data_callback
>>>ADVANCE 37:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> PropertyAccess
                Parsed OK!-> VariableRef
              Parsed OK!-> DeclareStatement
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 37:9 [0] 'this'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'this'(IDENTIFIER)

37 8(CODE) this.data_callback(new Error('Server not responding'));
    'this'(IDENTIFIER) '.'(LITERAL) 'data_callback'(IDENTIFIER) '('(LITERAL) 'new'(IDENTIFIER) 'Error'(IDENTIFIER) '('(LITERAL) ''Server not responding''(STRING) ')'(LITERAL) ')'(LITERAL) ';'(LITERAL)

              Statement TRY Adjective on 'this'(IDENTIFIER)
              Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:37:1. Adjective: found 'this'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 37:9 [0] 'this'(IDENTIFIER)
              Statement TRY VariableRef on 'this'(IDENTIFIER)
                VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 37:13 [1] '.'(LITERAL)
                VariableRef TRY PropertyAccess on '.'(LITERAL)
                  PropertyAccess matched OK: . .
>>>ADVANCE 37:14 [2] 'data_callback'(IDENTIFIER)
                  PropertyAccess matched OK: IDENTIFIER data_callback
>>>ADVANCE 37:27 [3] '('(LITERAL)
                Parsed OK!-> PropertyAccess
                VariableRef TRY FunctionAccess on '('(LITERAL)
                  FunctionAccess matched OK: ( (
>>>ADVANCE 37:28 [4] 'new'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                  FunctionAccess TRY Expression on 'new'(IDENTIFIER)
                    Expression TRY UnaryOper on 'new'(IDENTIFIER)
                      UnaryOper matched OK: new new
>>>ADVANCE 37:32 [5] 'Error'(IDENTIFIER)
                    Parsed OK!-> UnaryOper
                    Expression TRY Operand on 'Error'(IDENTIFIER)
                      Operand TRY VariableRef on 'Error'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER Error
>>>ADVANCE 37:37 [6] '('(LITERAL)
                        VariableRef TRY FunctionAccess on '('(LITERAL)
                          FunctionAccess matched OK: ( (
>>>ADVANCE 37:38 [7] ''Server not responding''(STRING)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                          FunctionAccess TRY Expression on ''Server not responding''(STRING)
                            Expression TRY Operand on ''Server not responding''(STRING)
                              Operand TRY StringLiteral on ''Server not responding''(STRING)
                                StringLiteral matched OK: STRING 'Server not responding'
>>>ADVANCE 37:61 [8] ')'(LITERAL)
                              Parsed OK!-> StringLiteral
                            Parsed OK!-> Operand
                          Parsed OK!-> Expression
                          FunctionAccess matched OK: ) )
>>>ADVANCE 37:62 [9] ')'(LITERAL)
                        Parsed OK!-> FunctionAccess
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                  Parsed OK!-> Expression
                  FunctionAccess matched OK: ) )
>>>ADVANCE 37:63 [10] ';'(LITERAL)
                Parsed OK!-> FunctionAccess
              Parsed OK!-> VariableRef
              Statement TRY AssignmentStatement on ';'(LITERAL)
              AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:37:63. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 37:63 [10] ';'(LITERAL)
              Statement TRY FunctionCall on ';'(LITERAL)
              Parsed OK!-> FunctionCall
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 40:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 40:5 [0] 'function'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> FunctionDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'function'(IDENTIFIER)

40 4(CODE) function create_HttpRequest() returns XMLHttpRequest
    'function'(IDENTIFIER) 'create_HttpRequest'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) 'returns'(IDENTIFIER) 'XMLHttpRequest'(IDENTIFIER)

        Statement TRY FunctionDeclaration on 'function'(IDENTIFIER)
          FunctionDeclaration matched OK: function function
>>>ADVANCE 40:14 [1] 'create_HttpRequest'(IDENTIFIER)
          FunctionDeclaration matched OK: IDENTIFIER create_HttpRequest
>>>ADVANCE 40:32 [2] '('(LITERAL)
          FunctionDeclaration matched OK: ( (
>>>ADVANCE 40:33 [3] ')'(LITERAL)
optSeparatedList [FunctionDeclaration] indent:4, get SeparatedList of [VariableDecl] by ',' closer: )
          FunctionDeclaration matched OK: ) )
>>>ADVANCE 40:35 [4] 'returns'(IDENTIFIER)
          FunctionDeclaration matched OK: returns returns
>>>ADVANCE 40:43 [5] 'XMLHttpRequest'(IDENTIFIER)
          FunctionDeclaration TRY VariableRef on 'XMLHttpRequest'(IDENTIFIER)
            VariableRef matched OK: IDENTIFIER XMLHttpRequest
>>>ADVANCE 42:0 [-1] ' '(NEWLINE)
          Parsed OK!-> VariableRef
          FunctionDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 42:9 [0] 'var'(IDENTIFIER)
optFreeFormList [Body] parentname:create_HttpRequest parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'var'(IDENTIFIER)

42 8(CODE) var ref = null;
    'var'(IDENTIFIER) 'ref'(IDENTIFIER) '='(ASSIGN) 'null'(IDENTIFIER) ';'(LITERAL)

              Statement TRY VarStatement on 'var'(IDENTIFIER)
                VarStatement matched OK: var var
>>>ADVANCE 42:13 [1] 'ref'(IDENTIFIER)
optSeparatedList [VarStatement] indent:8, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                VarStatement TRY VariableDecl on 'ref'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER ref
>>>ADVANCE 42:17 [2] '='(ASSIGN)
                  VariableDecl matched OK: = =
>>>ADVANCE 42:19 [3] 'null'(IDENTIFIER)
                  VariableDecl TRY Expression on 'null'(IDENTIFIER)
                    Expression TRY Operand on 'null'(IDENTIFIER)
                      Operand TRY VariableRef on 'null'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER null
>>>ADVANCE 42:23 [4] ';'(LITERAL)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression TRY Oper on ';'(LITERAL)
                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:42:20. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 42:23 [4] ';'(LITERAL)
                  Parsed OK!-> Expression
                Parsed OK!-> VariableDecl
              Parsed OK!-> VarStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 44:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 44:9 [0] 'declare'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'declare'(IDENTIFIER)

44 8(CODE) declare valid window.XMLHttpRequest
    'declare'(IDENTIFIER) 'valid'(IDENTIFIER) 'window'(IDENTIFIER) '.'(LITERAL) 'XMLHttpRequest'(IDENTIFIER)

              Statement TRY DeclareStatement on 'declare'(IDENTIFIER)
                DeclareStatement matched OK: declare declare
>>>ADVANCE 44:17 [1] 'valid'(IDENTIFIER)
                DeclareStatement matched OK: valid valid
>>>ADVANCE 44:23 [2] 'window'(IDENTIFIER)
                DeclareStatement TRY VariableRef on 'window'(IDENTIFIER)
                  VariableRef matched OK: IDENTIFIER window
>>>ADVANCE 44:29 [3] '.'(LITERAL)
                  VariableRef TRY PropertyAccess on '.'(LITERAL)
                    PropertyAccess matched OK: . .
>>>ADVANCE 44:30 [4] 'XMLHttpRequest'(IDENTIFIER)
                    PropertyAccess matched OK: IDENTIFIER XMLHttpRequest
>>>ADVANCE 45:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> PropertyAccess
                Parsed OK!-> VariableRef
              Parsed OK!-> DeclareStatement
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 45:9 [0] 'declare'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'declare'(IDENTIFIER)

45 8(CODE) declare valid window.ActiveXObject
    'declare'(IDENTIFIER) 'valid'(IDENTIFIER) 'window'(IDENTIFIER) '.'(LITERAL) 'ActiveXObject'(IDENTIFIER)

              Statement TRY DeclareStatement on 'declare'(IDENTIFIER)
                DeclareStatement matched OK: declare declare
>>>ADVANCE 45:17 [1] 'valid'(IDENTIFIER)
                DeclareStatement matched OK: valid valid
>>>ADVANCE 45:23 [2] 'window'(IDENTIFIER)
                DeclareStatement TRY VariableRef on 'window'(IDENTIFIER)
                  VariableRef matched OK: IDENTIFIER window
>>>ADVANCE 45:29 [3] '.'(LITERAL)
                  VariableRef TRY PropertyAccess on '.'(LITERAL)
                    PropertyAccess matched OK: . .
>>>ADVANCE 45:30 [4] 'ActiveXObject'(IDENTIFIER)
                    PropertyAccess matched OK: IDENTIFIER ActiveXObject
>>>ADVANCE 47:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> PropertyAccess
                Parsed OK!-> VariableRef
              Parsed OK!-> DeclareStatement
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 47:9 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'if'(IDENTIFIER)

47 8(CODE) if window.XMLHttpRequest
    'if'(IDENTIFIER) 'window'(IDENTIFIER) '.'(LITERAL) 'XMLHttpRequest'(IDENTIFIER)

              Statement TRY IfStatement on 'if'(IDENTIFIER)
                IfStatement matched OK: if if
>>>ADVANCE 47:12 [1] 'window'(IDENTIFIER)
                IfStatement TRY Expression on 'window'(IDENTIFIER)
                  Expression TRY Operand on 'window'(IDENTIFIER)
                    Operand TRY VariableRef on 'window'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER window
>>>ADVANCE 47:18 [2] '.'(LITERAL)
                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                        PropertyAccess matched OK: . .
>>>ADVANCE 47:19 [3] 'XMLHttpRequest'(IDENTIFIER)
                        PropertyAccess matched OK: IDENTIFIER XMLHttpRequest
>>>ADVANCE 48:0 [-1] ' '(NEWLINE)
                      Parsed OK!-> PropertyAccess
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression matched OK: NEWLINE  
>>>ADVANCE 48:13 [0] 'ref'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 48
                Parsed OK!-> Expression
                IfStatement TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 48:13 [0] 'ref'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'ref'(IDENTIFIER)

48 12(CODE) ref = new window.XMLHttpRequest()
    'ref'(IDENTIFIER) '='(ASSIGN) 'new'(IDENTIFIER) 'window'(IDENTIFIER) '.'(LITERAL) 'XMLHttpRequest'(IDENTIFIER) '('(LITERAL) ')'(LITERAL)

                    Statement TRY Adjective on 'ref'(IDENTIFIER)
                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:48:1. Adjective: found 'ref'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 48:13 [0] 'ref'(IDENTIFIER)
                    Statement TRY VariableRef on 'ref'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER ref
>>>ADVANCE 48:17 [1] '='(ASSIGN)
                    Parsed OK!-> VariableRef
                    Statement TRY AssignmentStatement on '='(ASSIGN)
                      AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 48:19 [2] 'new'(IDENTIFIER)
                      AssignmentStatement TRY Expression on 'new'(IDENTIFIER)
                        Expression TRY UnaryOper on 'new'(IDENTIFIER)
                          UnaryOper matched OK: new new
>>>ADVANCE 48:23 [3] 'window'(IDENTIFIER)
                        Parsed OK!-> UnaryOper
                        Expression TRY Operand on 'window'(IDENTIFIER)
                          Operand TRY VariableRef on 'window'(IDENTIFIER)
                            VariableRef matched OK: IDENTIFIER window
>>>ADVANCE 48:29 [4] '.'(LITERAL)
                            VariableRef TRY PropertyAccess on '.'(LITERAL)
                              PropertyAccess matched OK: . .
>>>ADVANCE 48:30 [5] 'XMLHttpRequest'(IDENTIFIER)
                              PropertyAccess matched OK: IDENTIFIER XMLHttpRequest
>>>ADVANCE 48:44 [6] '('(LITERAL)
                            Parsed OK!-> PropertyAccess
                            VariableRef TRY FunctionAccess on '('(LITERAL)
                              FunctionAccess matched OK: ( (
>>>ADVANCE 48:45 [7] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                              FunctionAccess matched OK: ) )
>>>ADVANCE 49:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> FunctionAccess
                          Parsed OK!-> VariableRef
                        Parsed OK!-> Operand
                        Expression matched OK: NEWLINE  
>>>ADVANCE 49:9 [0] 'else'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 49
                      Parsed OK!-> Expression
                    Parsed OK!-> AssignmentStatement
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 49:9 [0] 'else'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
                IfStatement TRY ElseIfStatement on 'else'(IDENTIFIER)
                  ElseIfStatement matched OK: else else
>>>ADVANCE 49:14 [1] 'if'(IDENTIFIER)
                  ElseIfStatement matched OK: if if
>>>ADVANCE 49:17 [2] '('(LITERAL)
<< Returned: 'if'(IDENTIFIER) line 49
                  ElseIfStatement TRY IfStatement on 'if'(IDENTIFIER)
                    IfStatement matched OK: if if
>>>ADVANCE 49:17 [2] '('(LITERAL)
                    IfStatement TRY Expression on '('(LITERAL)
                      Expression TRY Operand on '('(LITERAL)
                        Operand TRY ParenExpression on '('(LITERAL)
                          ParenExpression matched OK: ( (
>>>ADVANCE 49:18 [3] 'window'(IDENTIFIER)
                          ParenExpression TRY Expression on 'window'(IDENTIFIER)
                            Expression TRY Operand on 'window'(IDENTIFIER)
                              Operand TRY VariableRef on 'window'(IDENTIFIER)
                                VariableRef matched OK: IDENTIFIER window
>>>ADVANCE 49:24 [4] '.'(LITERAL)
                                VariableRef TRY PropertyAccess on '.'(LITERAL)
                                  PropertyAccess matched OK: . .
>>>ADVANCE 49:25 [5] 'ActiveXObject'(IDENTIFIER)
                                  PropertyAccess matched OK: IDENTIFIER ActiveXObject
>>>ADVANCE 49:38 [6] ')'(LITERAL)
                                Parsed OK!-> PropertyAccess
                              Parsed OK!-> VariableRef
                            Parsed OK!-> Operand
                          Parsed OK!-> Expression
                          ParenExpression matched OK: ) )
>>>ADVANCE 50:0 [-1] ' '(NEWLINE)
                        Parsed OK!-> ParenExpression
                      Parsed OK!-> Operand
                      Expression matched OK: NEWLINE  
>>>ADVANCE 50:13 [0] 'ref'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 50
                    Parsed OK!-> Expression
                    IfStatement TRY Body on ' '(NEWLINE)
                      Body matched OK: NEWLINE  
>>>ADVANCE 50:13 [0] 'ref'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                      Body TRY Statement on 'ref'(IDENTIFIER)

50 12(CODE) ref = new window.ActiveXObject("MSXML2.XMLHTTP.3.0");
    'ref'(IDENTIFIER) '='(ASSIGN) 'new'(IDENTIFIER) 'window'(IDENTIFIER) '.'(LITERAL) 'ActiveXObject'(IDENTIFIER) '('(LITERAL) '"MSXML2.XMLHTTP.3.0"'(STRING) ')'(LITERAL) ';'(LITERAL)

                        Statement TRY Adjective on 'ref'(IDENTIFIER)
                        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:50:1. Adjective: found 'ref'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 50:13 [0] 'ref'(IDENTIFIER)
                        Statement TRY VariableRef on 'ref'(IDENTIFIER)
                          VariableRef matched OK: IDENTIFIER ref
>>>ADVANCE 50:17 [1] '='(ASSIGN)
                        Parsed OK!-> VariableRef
                        Statement TRY AssignmentStatement on '='(ASSIGN)
                          AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 50:19 [2] 'new'(IDENTIFIER)
                          AssignmentStatement TRY Expression on 'new'(IDENTIFIER)
                            Expression TRY UnaryOper on 'new'(IDENTIFIER)
                              UnaryOper matched OK: new new
>>>ADVANCE 50:23 [3] 'window'(IDENTIFIER)
                            Parsed OK!-> UnaryOper
                            Expression TRY Operand on 'window'(IDENTIFIER)
                              Operand TRY VariableRef on 'window'(IDENTIFIER)
                                VariableRef matched OK: IDENTIFIER window
>>>ADVANCE 50:29 [4] '.'(LITERAL)
                                VariableRef TRY PropertyAccess on '.'(LITERAL)
                                  PropertyAccess matched OK: . .
>>>ADVANCE 50:30 [5] 'ActiveXObject'(IDENTIFIER)
                                  PropertyAccess matched OK: IDENTIFIER ActiveXObject
>>>ADVANCE 50:43 [6] '('(LITERAL)
                                Parsed OK!-> PropertyAccess
                                VariableRef TRY FunctionAccess on '('(LITERAL)
                                  FunctionAccess matched OK: ( (
>>>ADVANCE 50:44 [7] '"MSXML2.XMLHTTP.3.0"'(STRING)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                                  FunctionAccess TRY Expression on '"MSXML2.XMLHTTP.3.0"'(STRING)
                                    Expression TRY Operand on '"MSXML2.XMLHTTP.3.0"'(STRING)
                                      Operand TRY StringLiteral on '"MSXML2.XMLHTTP.3.0"'(STRING)
                                        StringLiteral matched OK: STRING "MSXML2.XMLHTTP.3.0"
>>>ADVANCE 50:64 [8] ')'(LITERAL)
                                      Parsed OK!-> StringLiteral
                                    Parsed OK!-> Operand
                                  Parsed OK!-> Expression
                                  FunctionAccess matched OK: ) )
>>>ADVANCE 50:65 [9] ';'(LITERAL)
                                Parsed OK!-> FunctionAccess
                              Parsed OK!-> VariableRef
                            Parsed OK!-> Operand
                            Expression TRY Oper on ';'(LITERAL)
                            Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:50:65. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 50:65 [9] ';'(LITERAL)
                          Parsed OK!-> Expression
                        Parsed OK!-> AssignmentStatement
                      Parsed OK!-> Statement
                      Body matched OK: ; ;
>>>ADVANCE 52:0 [-1] ' '(NEWLINE)
                      Body matched OK: NEWLINE  
>>>ADVANCE 52:9 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                    Parsed OK!-> Body
                    IfStatement TRY ElseIfStatement on 'if'(IDENTIFIER)
                    ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:52:1. ElseIfStatement: found 'if'(IDENTIFIER) but 'else' required
<<REW to 52:9 [0] 'if'(IDENTIFIER)
                    IfStatement TRY ElseStatement on 'if'(IDENTIFIER)
                    ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:52:1. ElseStatement: found 'if'(IDENTIFIER) but 'else' required
<<REW to 52:9 [0] 'if'(IDENTIFIER)
                  Parsed OK!-> IfStatement
                Parsed OK!-> ElseIfStatement
              Parsed OK!-> IfStatement
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'if'(IDENTIFIER)

52 8(CODE) if no ref, fail with 'Failure to create XMLHttpRequest';
    'if'(IDENTIFIER) 'no'(IDENTIFIER) 'ref'(IDENTIFIER) ','(LITERAL) 'fail'(IDENTIFIER) 'with'(IDENTIFIER) ''Failure to create XMLHttpRequest''(STRING) ';'(LITERAL)

              Statement TRY IfStatement on 'if'(IDENTIFIER)
                IfStatement matched OK: if if
>>>ADVANCE 52:12 [1] 'no'(IDENTIFIER)
                IfStatement TRY Expression on 'no'(IDENTIFIER)
                  Expression TRY UnaryOper on 'no'(IDENTIFIER)
                    UnaryOper matched OK: no no
>>>ADVANCE 52:15 [2] 'ref'(IDENTIFIER)
                  Parsed OK!-> UnaryOper
                  Expression TRY Operand on 'ref'(IDENTIFIER)
                    Operand TRY VariableRef on 'ref'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER ref
>>>ADVANCE 52:18 [3] ','(LITERAL)
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                Parsed OK!-> Expression
                IfStatement matched OK: , ,
>>>ADVANCE 52:20 [4] 'fail'(IDENTIFIER)
                IfStatement TRY SingleLineStatement on 'fail'(IDENTIFIER)
optSeparatedList [SingleLineStatement] indent:8, get SeparatedList of [Statement] by ';' closer: NEWLINE
                  SingleLineStatement TRY Statement on 'fail'(IDENTIFIER)

52 8(CODE) if no ref, fail with 'Failure to create XMLHttpRequest';
    'if'(IDENTIFIER) 'no'(IDENTIFIER) 'ref'(IDENTIFIER) ','(LITERAL) 'fail'(IDENTIFIER) 'with'(IDENTIFIER) ''Failure to create XMLHttpRequest''(STRING) ';'(LITERAL)

                    Statement TRY ThrowStatement on 'fail'(IDENTIFIER)
                      ThrowStatement matched OK: fail fail
>>>ADVANCE 52:25 [5] 'with'(IDENTIFIER)
                      ThrowStatement matched OK: with with
>>>ADVANCE 52:30 [6] ''Failure to create XMLHttpRequest''(STRING)
                      ThrowStatement TRY Expression on ''Failure to create XMLHttpRequest''(STRING)
                        Expression TRY Operand on ''Failure to create XMLHttpRequest''(STRING)
                          Operand TRY StringLiteral on ''Failure to create XMLHttpRequest''(STRING)
                            StringLiteral matched OK: STRING 'Failure to create XMLHttpRequest'
>>>ADVANCE 52:64 [7] ';'(LITERAL)
                          Parsed OK!-> StringLiteral
                        Parsed OK!-> Operand
                        Expression TRY Oper on ';'(LITERAL)
                        Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:52:31. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 52:64 [7] ';'(LITERAL)
                      Parsed OK!-> Expression
                    Parsed OK!-> ThrowStatement
                  Parsed OK!-> Statement
                  SingleLineStatement matched OK: ; ;
>>>ADVANCE 53:0 [-1] ' '(NEWLINE)
                  SingleLineStatement matched OK: NEWLINE  
>>>ADVANCE 53:9 [0] 'return'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 53
                Parsed OK!-> SingleLineStatement
                IfStatement matched OK: NEWLINE  
>>>ADVANCE 53:9 [0] 'return'(IDENTIFIER)
                IfStatement TRY ElseIfStatement on 'return'(IDENTIFIER)
                ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:53:1. ElseIfStatement: found 'return'(IDENTIFIER) but 'else' required
<<REW to 53:9 [0] 'return'(IDENTIFIER)
                IfStatement TRY ElseStatement on 'return'(IDENTIFIER)
                ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:53:1. ElseStatement: found 'return'(IDENTIFIER) but 'else' required
<<REW to 53:9 [0] 'return'(IDENTIFIER)
              Parsed OK!-> IfStatement
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'return'(IDENTIFIER)

53 8(CODE) return ref;
    'return'(IDENTIFIER) 'ref'(IDENTIFIER) ';'(LITERAL)

              Statement TRY ReturnStatement on 'return'(IDENTIFIER)
                ReturnStatement matched OK: return return
>>>ADVANCE 53:16 [1] 'ref'(IDENTIFIER)
                ReturnStatement TRY Expression on 'ref'(IDENTIFIER)
                  Expression TRY Operand on 'ref'(IDENTIFIER)
                    Operand TRY VariableRef on 'ref'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER ref
>>>ADVANCE 53:19 [2] ';'(LITERAL)
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression TRY Oper on ';'(LITERAL)
                  Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md:53:17. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 53:19 [2] ';'(LITERAL)
                Parsed OK!-> Expression
              Parsed OK!-> ReturnStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 53:0 [-1] ' '(EOF)
freeForm Mode .lexer.indent:-1 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> FunctionDeclaration
      Parsed OK!-> Statement
      Module matched OK: EOF  
>>>ADVANCE 53:0 [0] ' '(EOF)
END freeFormMode [Module] blockIndent:4, get SeparatedList of [Statement] by ';' closer: EOF

     'online.md' imports './require'
[object Object]
addToScope: 'module' to '/home/ltato/LiteScript_online_playground/playground/js/require.lite.md Scope'
addMember: 'exports' to 'module'
addToScope: 'exports' to '/home/ltato/LiteScript_online_playground/playground/js/require.lite.md Scope'
addMember: 'filename' to 'module'
     compile: 'require.lite.md'
1 0(COMMENT) ///- simplified REQUIRE
2 0(COMMENT) // equivalent -for the borwser- to node's 'require'
3 0(COMMENT) //  http://github.com/luciotato
4 (BLANK)
5 4(CODE) public function require(url)
6 (BLANK)
7 8(CODE) declare valid this.uri
8 (BLANK)
9 8(CODE) if no this.uri #called from online.js in main web page
10 12(COMMENT) # remove ../ from ../lib, since HTTP GET is relative from host root
11 12(COMMENT) # not from online.js location (/js/online.js)
12 12(CODE) url = url.slice(3)
13 (BLANK)
14 8(CODE) else
15 (BLANK)
16 12(CODE) if url.slice(0,2) is './'
17 16(CODE) var caller:string = this.uri
18 16(CODE) var cwd = caller.slice(0,caller.lastIndexOf('/')+1)
19 16(CODE) url = cwd + url.slice(2);
20 (BLANK)
21 12(CODE) else if (url.slice(0,2) is '/')
22 16(CODE) do nothing
23 (BLANK)
24 12(CODE) else  // no ./ or /, is node.js 'global' search on node_modules
25 16(CODE) url = require.globalPath + url;
26 (BLANK)
27 0(COMMENT) add js suffix it it is not there
28 (BLANK)
29 8(CODE) if url.toLowerCase().substr(-3) !== '.js', url+='.js';
30 (BLANK)
31 8(CODE) if no require.cache, require.cache={}; //init cache
32 (BLANK)
33 8(CODE) var cacheName = 'module:'+url;
34 8(CODE) var requiredModule = require.cache[cacheName]; //get from cache
35 8(CODE) if requiredModule
36 12(CODE) do nothing //console.log('CACHED',url);
37 (BLANK)
38 8(CODE) else  //not cached
39 16(CODE) console.log('REQUIRE',url);
40 16(CODE) try
41 20(CODE) var moduleExports = {};
42 20(CODE) var X=new XMLHttpRequest();
43 20(CODE) X.open "GET", url, 0 // sync
44 20(CODE) X.send
45 20(CODE) if X.status and X.status isnt 200, fail with X.statusText
46 20(CODE) var source = X.responseText
47 (BLANK)
48 0(COMMENT) fix (if saved form for Chrome Dev Tools)
49 (BLANK)
50 20(CODE) if source.substr(0,10) is "(function("
51 24(CODE) var moduleStart = source.indexOf('{');
52 24(CODE) var moduleEnd = source.lastIndexOf('})');
53 24(CODE) var CDTcomment = source.indexOf('//@ ');
54 24(CODE) if CDTcomment>-1 and CDTcomment<moduleStart+6, moduleStart = source.indexOf('\n',CDTcomment);
55 24(CODE) source = source.slice(moduleStart+1,moduleEnd-1);
56 (BLANK)
57 0(COMMENT) fix, add comment to show source on Chrome Dev Tools
58 (BLANK)
59 20(CODE) source="//@ sourceURL=#{url}\n#{source}"
60 (BLANK)
61 20(COMMENT) //------
62 20(CODE) requiredModule = { id: url, uri: url, exports:moduleExports }; //according to the modules 1.1 standard
63 (BLANK)
64 20(COMMENT) //early cache to avoid circular requires
65 20(CODE) require.cache[cacheName] = requiredModule
66 20(CODE) var requireBinded = require.bind(requiredModule);
67 20(CODE) var anonFn = new Function("require", "exports", "module", source); //create a Fn with module code, and 3 params: require, exports & module
68 20(CODE) anonFn(requireBinded, moduleExports, requiredModule); // call the Fn, Execute the module
69 20(COMMENT) // at module.exports -> require.cache[url].exports: obj exported by module
70 (BLANK)
71 16(CODE) catch err
72 20(CODE) fail with "Error loading module #{url}: #{err}"
73 (BLANK)
74 8(CODE) declare valid requiredModule.exports
75 8(CODE) return requiredModule.exports; //require returns object exported by module
76 (BLANK)
77 (BLANK)
78 0(COMMENT) When required module in node.js does not starts with ./ or .., node.js starts looking
79 0(COMMENT) for the module in ./node_modules, then ../../node_modules... then NODES_PATH, etc.
80 0(COMMENT) If you make a require() from the browser and required file does not starts with ./ or ..
81 0(COMMENT) this require() will prepend *require.globalPath* to try to get the resource.
82 0(COMMENT) Default is 'lib/'
83 (BLANK)
84 4(CODE) append to namespace require
85 8(CODE) properties
86 12(CODE) cache
87 12(CODE) globalPath = 'lib/' //default for node.js node_modules global search
88 (BLANK)
89 (BLANK)
90 0(COMMENT) ///- END REQUIRE FN
91 (BLANK)
92 (BLANK)
93 (BLANK)
---- TOKENIZE
1 0(COMMENT) ///- simplified REQUIRE
2 0(COMMENT) // equivalent -for the borwser- to node's 'require'
3 0(COMMENT) //  http://github.com/luciotato
4 (BLANK)
5 4(CODE) public function require(url)
6 (BLANK)
7 8(CODE) declare valid this.uri
8 (BLANK)
9 8(CODE) if no this.uri #called from online.js in main web page
10 12(COMMENT) # remove ../ from ../lib, since HTTP GET is relative from host root
11 12(COMMENT) # not from online.js location (/js/online.js)
12 12(CODE) url = url.slice(3)
13 (BLANK)
14 8(CODE) else
15 (BLANK)
16 12(CODE) if url.slice(0,2) is './'
17 16(CODE) var caller:string = this.uri
18 16(CODE) var cwd = caller.slice(0,caller.lastIndexOf('/')+1)
19 16(CODE) url = cwd + url.slice(2);
20 (BLANK)
21 12(CODE) else if (url.slice(0,2) is '/')
22 16(CODE) do nothing
23 (BLANK)
24 12(CODE) else  // no ./ or /, is node.js 'global' search on node_modules
25 16(CODE) url = require.globalPath + url;
26 (BLANK)
27 0(COMMENT) add js suffix it it is not there
28 (BLANK)
29 8(CODE) if url.toLowerCase().substr(-3) !== '.js', url+='.js';
30 (BLANK)
31 8(CODE) if no require.cache, require.cache={}; //init cache
32 (BLANK)
33 8(CODE) var cacheName = 'module:'+url;
34 8(CODE) var requiredModule = require.cache[cacheName]; //get from cache
35 8(CODE) if requiredModule
36 12(CODE) do nothing //console.log('CACHED',url);
37 (BLANK)
38 8(CODE) else  //not cached
39 16(CODE) console.log('REQUIRE',url);
40 16(CODE) try
41 20(CODE) var moduleExports = {};
42 20(CODE) var X=new XMLHttpRequest();
43 20(CODE) X.open "GET", url, 0 // sync
44 20(CODE) X.send
45 20(CODE) if X.status and X.status isnt 200, fail with X.statusText
46 20(CODE) var source = X.responseText
47 (BLANK)
48 0(COMMENT) fix (if saved form for Chrome Dev Tools)
49 (BLANK)
50 20(CODE) if source.substr(0,10) is "(function("
51 24(CODE) var moduleStart = source.indexOf('{');
52 24(CODE) var moduleEnd = source.lastIndexOf('})');
53 24(CODE) var CDTcomment = source.indexOf('//@ ');
54 24(CODE) if CDTcomment>-1 and CDTcomment<moduleStart+6, moduleStart = source.indexOf('\n',CDTcomment);
55 24(CODE) source = source.slice(moduleStart+1,moduleEnd-1);
56 (BLANK)
57 0(COMMENT) fix, add comment to show source on Chrome Dev Tools
58 (BLANK)
59 20(CODE) source="//@ sourceURL=#{url}\n#{source}"
60 (BLANK)
61 20(COMMENT) //------
62 20(CODE) requiredModule = { id: url, uri: url, exports:moduleExports }; //according to the modules 1.1 standard
63 (BLANK)
64 20(COMMENT) //early cache to avoid circular requires
65 20(CODE) require.cache[cacheName] = requiredModule
66 20(CODE) var requireBinded = require.bind(requiredModule);
67 20(CODE) var anonFn = new Function("require", "exports", "module", source); //create a Fn with module code, and 3 params: require, exports & module
68 20(CODE) anonFn(requireBinded, moduleExports, requiredModule); // call the Fn, Execute the module
69 20(COMMENT) // at module.exports -> require.cache[url].exports: obj exported by module
70 (BLANK)
71 16(CODE) catch err
72 20(CODE) fail with "Error loading module #{url}: #{err}"
73 (BLANK)
74 8(CODE) declare valid requiredModule.exports
75 8(CODE) return requiredModule.exports; //require returns object exported by module
76 (BLANK)
77 (BLANK)
78 0(COMMENT) When required module in node.js does not starts with ./ or .., node.js starts looking
79 0(COMMENT) for the module in ./node_modules, then ../../node_modules... then NODES_PATH, etc.
80 0(COMMENT) If you make a require() from the browser and required file does not starts with ./ or ..
81 0(COMMENT) this require() will prepend *require.globalPath* to try to get the resource.
82 0(COMMENT) Default is 'lib/'
83 (BLANK)
84 4(CODE) append to namespace require
85 8(CODE) properties
86 12(CODE) cache
87 12(CODE) globalPath = 'lib/' //default for node.js node_modules global search
88 (BLANK)
89 (BLANK)
90 0(COMMENT) ///- END REQUIRE FN
91 (BLANK)
92 (BLANK)
93 (BLANK)
>>>ADVANCE 5:0 [-1] ' '(NEWLINE)
      Module matched OK: NEWLINE  
>>>ADVANCE 5:5 [0] 'public'(IDENTIFIER)
optFreeFormList [Module] parentname:Project Root parentIndent:undefined, blockIndent:4, get SeparatedList of [Statement] by ';' closer: EOF
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'public'(IDENTIFIER)

5 4(CODE) public function require(url)
    'public'(IDENTIFIER) 'function'(IDENTIFIER) 'require'(IDENTIFIER) '('(LITERAL) 'url'(IDENTIFIER) ')'(LITERAL)

        Statement TRY Adjective on 'public'(IDENTIFIER)
          Adjective matched OK: public public
>>>ADVANCE 5:12 [1] 'function'(IDENTIFIER)
        Parsed OK!-> Adjective
        Statement TRY Adjective on 'function'(IDENTIFIER)
        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:5:6. Adjective: found 'function'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 5:12 [1] 'function'(IDENTIFIER)
        Statement TRY FunctionDeclaration on 'function'(IDENTIFIER)
          FunctionDeclaration matched OK: function function
>>>ADVANCE 5:21 [2] 'require'(IDENTIFIER)
          FunctionDeclaration matched OK: IDENTIFIER require
>>>ADVANCE 5:28 [3] '('(LITERAL)
          FunctionDeclaration matched OK: ( (
>>>ADVANCE 5:29 [4] 'url'(IDENTIFIER)
optSeparatedList [FunctionDeclaration] indent:4, get SeparatedList of [VariableDecl] by ',' closer: )
          FunctionDeclaration TRY VariableDecl on 'url'(IDENTIFIER)
            VariableDecl matched OK: IDENTIFIER url
>>>ADVANCE 5:32 [5] ')'(LITERAL)
          Parsed OK!-> VariableDecl
          FunctionDeclaration matched OK: ) )
>>>ADVANCE 7:0 [-1] ' '(NEWLINE)
          FunctionDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 7:9 [0] 'declare'(IDENTIFIER)
optFreeFormList [Body] parentname:require parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'declare'(IDENTIFIER)

7 8(CODE) declare valid this.uri
    'declare'(IDENTIFIER) 'valid'(IDENTIFIER) 'this'(IDENTIFIER) '.'(LITERAL) 'uri'(IDENTIFIER)

              Statement TRY DeclareStatement on 'declare'(IDENTIFIER)
                DeclareStatement matched OK: declare declare
>>>ADVANCE 7:17 [1] 'valid'(IDENTIFIER)
                DeclareStatement matched OK: valid valid
>>>ADVANCE 7:23 [2] 'this'(IDENTIFIER)
                DeclareStatement TRY VariableRef on 'this'(IDENTIFIER)
                  VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 7:27 [3] '.'(LITERAL)
                  VariableRef TRY PropertyAccess on '.'(LITERAL)
                    PropertyAccess matched OK: . .
>>>ADVANCE 7:28 [4] 'uri'(IDENTIFIER)
                    PropertyAccess matched OK: IDENTIFIER uri
>>>ADVANCE 9:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> PropertyAccess
                Parsed OK!-> VariableRef
              Parsed OK!-> DeclareStatement
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 9:9 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'if'(IDENTIFIER)

9 8(CODE) if no this.uri #called from online.js in main web page
    'if'(IDENTIFIER) 'no'(IDENTIFIER) 'this'(IDENTIFIER) '.'(LITERAL) 'uri'(IDENTIFIER) '#called from online.js in main web page'(COMMENT)

              Statement TRY IfStatement on 'if'(IDENTIFIER)
                IfStatement matched OK: if if
>>>ADVANCE 9:12 [1] 'no'(IDENTIFIER)
                IfStatement TRY Expression on 'no'(IDENTIFIER)
                  Expression TRY UnaryOper on 'no'(IDENTIFIER)
                    UnaryOper matched OK: no no
>>>ADVANCE 9:15 [2] 'this'(IDENTIFIER)
                  Parsed OK!-> UnaryOper
                  Expression TRY Operand on 'this'(IDENTIFIER)
                    Operand TRY VariableRef on 'this'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 9:19 [3] '.'(LITERAL)
                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                        PropertyAccess matched OK: . .
>>>ADVANCE 9:20 [4] 'uri'(IDENTIFIER)
                        PropertyAccess matched OK: IDENTIFIER uri
>>>ADVANCE 12:0 [-1] ' '(NEWLINE)
                      Parsed OK!-> PropertyAccess
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression matched OK: NEWLINE  
>>>ADVANCE 12:13 [0] 'url'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 12
                Parsed OK!-> Expression
                IfStatement TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 12:13 [0] 'url'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'url'(IDENTIFIER)

12 12(CODE) url = url.slice(3)
    'url'(IDENTIFIER) '='(ASSIGN) 'url'(IDENTIFIER) '.'(LITERAL) 'slice'(IDENTIFIER) '('(LITERAL) '3'(NUMBER) ')'(LITERAL)

                    Statement TRY Adjective on 'url'(IDENTIFIER)
                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:12:1. Adjective: found 'url'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 12:13 [0] 'url'(IDENTIFIER)
                    Statement TRY VariableRef on 'url'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 12:17 [1] '='(ASSIGN)
                    Parsed OK!-> VariableRef
                    Statement TRY AssignmentStatement on '='(ASSIGN)
                      AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 12:19 [2] 'url'(IDENTIFIER)
                      AssignmentStatement TRY Expression on 'url'(IDENTIFIER)
                        Expression TRY Operand on 'url'(IDENTIFIER)
                          Operand TRY VariableRef on 'url'(IDENTIFIER)
                            VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 12:22 [3] '.'(LITERAL)
                            VariableRef TRY PropertyAccess on '.'(LITERAL)
                              PropertyAccess matched OK: . .
>>>ADVANCE 12:23 [4] 'slice'(IDENTIFIER)
                              PropertyAccess matched OK: IDENTIFIER slice
>>>ADVANCE 12:28 [5] '('(LITERAL)
                            Parsed OK!-> PropertyAccess
                            VariableRef TRY FunctionAccess on '('(LITERAL)
                              FunctionAccess matched OK: ( (
>>>ADVANCE 12:29 [6] '3'(NUMBER)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                              FunctionAccess TRY Expression on '3'(NUMBER)
                                Expression TRY Operand on '3'(NUMBER)
                                  Operand TRY NumberLiteral on '3'(NUMBER)
                                    NumberLiteral matched OK: NUMBER 3
>>>ADVANCE 12:30 [7] ')'(LITERAL)
                                  Parsed OK!-> NumberLiteral
                                Parsed OK!-> Operand
                              Parsed OK!-> Expression
                              FunctionAccess matched OK: ) )
>>>ADVANCE 14:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> FunctionAccess
                          Parsed OK!-> VariableRef
                        Parsed OK!-> Operand
                        Expression matched OK: NEWLINE  
>>>ADVANCE 14:9 [0] 'else'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 14
                      Parsed OK!-> Expression
                    Parsed OK!-> AssignmentStatement
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 14:9 [0] 'else'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
                IfStatement TRY ElseIfStatement on 'else'(IDENTIFIER)
                  ElseIfStatement matched OK: else else
>>>ADVANCE 16:0 [-1] ' '(NEWLINE)
                ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:14:10. ElseIfStatement: found ' '(NEWLINE) but 'if' required
<<REW to 14:9 [0] 'else'(IDENTIFIER)
                IfStatement TRY ElseStatement on 'else'(IDENTIFIER)
                  ElseStatement matched OK: else else
>>>ADVANCE 16:0 [-1] ' '(NEWLINE)
                  ElseStatement TRY Body on ' '(NEWLINE)
                    Body matched OK: NEWLINE  
>>>ADVANCE 16:13 [0] 'if'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                    Body TRY Statement on 'if'(IDENTIFIER)

16 12(CODE) if url.slice(0,2) is './'
    'if'(IDENTIFIER) 'url'(IDENTIFIER) '.'(LITERAL) 'slice'(IDENTIFIER) '('(LITERAL) '0'(NUMBER) ','(LITERAL) '2'(NUMBER) ')'(LITERAL) 'is'(OPER) ''./''(STRING)

                      Statement TRY IfStatement on 'if'(IDENTIFIER)
                        IfStatement matched OK: if if
>>>ADVANCE 16:16 [1] 'url'(IDENTIFIER)
                        IfStatement TRY Expression on 'url'(IDENTIFIER)
                          Expression TRY Operand on 'url'(IDENTIFIER)
                            Operand TRY VariableRef on 'url'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 16:19 [2] '.'(LITERAL)
                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                PropertyAccess matched OK: . .
>>>ADVANCE 16:20 [3] 'slice'(IDENTIFIER)
                                PropertyAccess matched OK: IDENTIFIER slice
>>>ADVANCE 16:25 [4] '('(LITERAL)
                              Parsed OK!-> PropertyAccess
                              VariableRef TRY FunctionAccess on '('(LITERAL)
                                FunctionAccess matched OK: ( (
>>>ADVANCE 16:26 [5] '0'(NUMBER)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                                FunctionAccess TRY Expression on '0'(NUMBER)
                                  Expression TRY Operand on '0'(NUMBER)
                                    Operand TRY NumberLiteral on '0'(NUMBER)
                                      NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 16:27 [6] ','(LITERAL)
                                    Parsed OK!-> NumberLiteral
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: , ,
>>>ADVANCE 16:28 [7] '2'(NUMBER)
                                FunctionAccess TRY Expression on '2'(NUMBER)
                                  Expression TRY Operand on '2'(NUMBER)
                                    Operand TRY NumberLiteral on '2'(NUMBER)
                                      NumberLiteral matched OK: NUMBER 2
>>>ADVANCE 16:29 [8] ')'(LITERAL)
                                    Parsed OK!-> NumberLiteral
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: ) )
>>>ADVANCE 16:31 [9] 'is'(OPER)
                              Parsed OK!-> FunctionAccess
                            Parsed OK!-> VariableRef
                          Parsed OK!-> Operand
                          Expression TRY Oper on 'is'(OPER)
                            Oper matched OK: OPER is
>>>ADVANCE 16:34 [10] ''./''(STRING)
                          Parsed OK!-> Oper
                          Expression TRY Operand on ''./''(STRING)
                            Operand TRY StringLiteral on ''./''(STRING)
                              StringLiteral matched OK: STRING './'
>>>ADVANCE 17:0 [-1] ' '(NEWLINE)
                            Parsed OK!-> StringLiteral
                          Parsed OK!-> Operand
                          Expression matched OK: NEWLINE  
>>>ADVANCE 17:17 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 17
                        Parsed OK!-> Expression
                        IfStatement TRY Body on ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 17:17 [0] 'var'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                          Body TRY Statement on 'var'(IDENTIFIER)

17 16(CODE) var caller:string = this.uri
    'var'(IDENTIFIER) 'caller'(IDENTIFIER) ':'(OPER) 'string'(IDENTIFIER) '='(ASSIGN) 'this'(IDENTIFIER) '.'(LITERAL) 'uri'(IDENTIFIER)

                            Statement TRY VarStatement on 'var'(IDENTIFIER)
                              VarStatement matched OK: var var
>>>ADVANCE 17:21 [1] 'caller'(IDENTIFIER)
optSeparatedList [VarStatement] indent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                              VarStatement TRY VariableDecl on 'caller'(IDENTIFIER)
                                VariableDecl matched OK: IDENTIFIER caller
>>>ADVANCE 17:27 [2] ':'(OPER)
                                VariableDecl matched OK: : :
>>>ADVANCE 17:28 [3] 'string'(IDENTIFIER)
                                VariableDecl TRY VariableRef on 'string'(IDENTIFIER)
                                  VariableRef matched OK: IDENTIFIER string
>>>ADVANCE 17:35 [4] '='(ASSIGN)
                                Parsed OK!-> VariableRef
                                VariableDecl matched OK: = =
>>>ADVANCE 17:37 [5] 'this'(IDENTIFIER)
                                VariableDecl TRY Expression on 'this'(IDENTIFIER)
                                  Expression TRY Operand on 'this'(IDENTIFIER)
                                    Operand TRY VariableRef on 'this'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER this
>>>ADVANCE 17:41 [6] '.'(LITERAL)
                                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                                        PropertyAccess matched OK: . .
>>>ADVANCE 17:42 [7] 'uri'(IDENTIFIER)
                                        PropertyAccess matched OK: IDENTIFIER uri
>>>ADVANCE 18:0 [-1] ' '(NEWLINE)
                                      Parsed OK!-> PropertyAccess
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                  Expression matched OK: NEWLINE  
>>>ADVANCE 18:17 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 18
                                Parsed OK!-> Expression
                              Parsed OK!-> VariableDecl
                              VarStatement matched OK: NEWLINE  
>>>ADVANCE 18:17 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 18
                            Parsed OK!-> VarStatement
                          Parsed OK!-> Statement
                          Body matched OK: NEWLINE  
>>>ADVANCE 18:17 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                          Body TRY Statement on 'var'(IDENTIFIER)

18 16(CODE) var cwd = caller.slice(0,caller.lastIndexOf('/')+1)
    'var'(IDENTIFIER) 'cwd'(IDENTIFIER) '='(ASSIGN) 'caller'(IDENTIFIER) '.'(LITERAL) 'slice'(IDENTIFIER) '('(LITERAL) '0'(NUMBER) ','(LITERAL) 'caller'(IDENTIFIER) '.'(LITERAL) 'lastIndexOf'(IDENTIFIER) '('(LITERAL) ''/''(STRING) ')'(LITERAL) '+'(OPER) '1'(NUMBER) ')'(LITERAL)

                            Statement TRY VarStatement on 'var'(IDENTIFIER)
                              VarStatement matched OK: var var
>>>ADVANCE 18:21 [1] 'cwd'(IDENTIFIER)
optSeparatedList [VarStatement] indent:16, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                              VarStatement TRY VariableDecl on 'cwd'(IDENTIFIER)
                                VariableDecl matched OK: IDENTIFIER cwd
>>>ADVANCE 18:25 [2] '='(ASSIGN)
                                VariableDecl matched OK: = =
>>>ADVANCE 18:27 [3] 'caller'(IDENTIFIER)
                                VariableDecl TRY Expression on 'caller'(IDENTIFIER)
                                  Expression TRY Operand on 'caller'(IDENTIFIER)
                                    Operand TRY VariableRef on 'caller'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER caller
>>>ADVANCE 18:33 [4] '.'(LITERAL)
                                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                                        PropertyAccess matched OK: . .
>>>ADVANCE 18:34 [5] 'slice'(IDENTIFIER)
                                        PropertyAccess matched OK: IDENTIFIER slice
>>>ADVANCE 18:39 [6] '('(LITERAL)
                                      Parsed OK!-> PropertyAccess
                                      VariableRef TRY FunctionAccess on '('(LITERAL)
                                        FunctionAccess matched OK: ( (
>>>ADVANCE 18:40 [7] '0'(NUMBER)
optSeparatedList [FunctionAccess] indent:16, get SeparatedList of [Expression] by ',' closer: )
                                        FunctionAccess TRY Expression on '0'(NUMBER)
                                          Expression TRY Operand on '0'(NUMBER)
                                            Operand TRY NumberLiteral on '0'(NUMBER)
                                              NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 18:41 [8] ','(LITERAL)
                                            Parsed OK!-> NumberLiteral
                                          Parsed OK!-> Operand
                                        Parsed OK!-> Expression
                                        FunctionAccess matched OK: , ,
>>>ADVANCE 18:42 [9] 'caller'(IDENTIFIER)
                                        FunctionAccess TRY Expression on 'caller'(IDENTIFIER)
                                          Expression TRY Operand on 'caller'(IDENTIFIER)
                                            Operand TRY VariableRef on 'caller'(IDENTIFIER)
                                              VariableRef matched OK: IDENTIFIER caller
>>>ADVANCE 18:48 [10] '.'(LITERAL)
                                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                                PropertyAccess matched OK: . .
>>>ADVANCE 18:49 [11] 'lastIndexOf'(IDENTIFIER)
                                                PropertyAccess matched OK: IDENTIFIER lastIndexOf
>>>ADVANCE 18:60 [12] '('(LITERAL)
                                              Parsed OK!-> PropertyAccess
                                              VariableRef TRY FunctionAccess on '('(LITERAL)
                                                FunctionAccess matched OK: ( (
>>>ADVANCE 18:61 [13] ''/''(STRING)
optSeparatedList [FunctionAccess] indent:16, get SeparatedList of [Expression] by ',' closer: )
                                                FunctionAccess TRY Expression on ''/''(STRING)
                                                  Expression TRY Operand on ''/''(STRING)
                                                    Operand TRY StringLiteral on ''/''(STRING)
                                                      StringLiteral matched OK: STRING '/'
>>>ADVANCE 18:64 [14] ')'(LITERAL)
                                                    Parsed OK!-> StringLiteral
                                                  Parsed OK!-> Operand
                                                Parsed OK!-> Expression
                                                FunctionAccess matched OK: ) )
>>>ADVANCE 18:65 [15] '+'(OPER)
                                              Parsed OK!-> FunctionAccess
                                            Parsed OK!-> VariableRef
                                          Parsed OK!-> Operand
                                          Expression TRY Oper on '+'(OPER)
                                            Oper matched OK: OPER +
>>>ADVANCE 18:66 [16] '1'(NUMBER)
                                          Parsed OK!-> Oper
                                          Expression TRY Operand on '1'(NUMBER)
                                            Operand TRY NumberLiteral on '1'(NUMBER)
                                              NumberLiteral matched OK: NUMBER 1
>>>ADVANCE 18:67 [17] ')'(LITERAL)
                                            Parsed OK!-> NumberLiteral
                                          Parsed OK!-> Operand
                                        Parsed OK!-> Expression
                                        FunctionAccess matched OK: ) )
>>>ADVANCE 19:0 [-1] ' '(NEWLINE)
                                      Parsed OK!-> FunctionAccess
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                  Expression matched OK: NEWLINE  
>>>ADVANCE 19:17 [0] 'url'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 19
                                Parsed OK!-> Expression
                              Parsed OK!-> VariableDecl
                              VarStatement matched OK: NEWLINE  
>>>ADVANCE 19:17 [0] 'url'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 19
                            Parsed OK!-> VarStatement
                          Parsed OK!-> Statement
                          Body matched OK: NEWLINE  
>>>ADVANCE 19:17 [0] 'url'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                          Body TRY Statement on 'url'(IDENTIFIER)

19 16(CODE) url = cwd + url.slice(2);
    'url'(IDENTIFIER) '='(ASSIGN) 'cwd'(IDENTIFIER) '+'(OPER) 'url'(IDENTIFIER) '.'(LITERAL) 'slice'(IDENTIFIER) '('(LITERAL) '2'(NUMBER) ')'(LITERAL) ';'(LITERAL)

                            Statement TRY Adjective on 'url'(IDENTIFIER)
                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:19:1. Adjective: found 'url'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 19:17 [0] 'url'(IDENTIFIER)
                            Statement TRY VariableRef on 'url'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 19:21 [1] '='(ASSIGN)
                            Parsed OK!-> VariableRef
                            Statement TRY AssignmentStatement on '='(ASSIGN)
                              AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 19:23 [2] 'cwd'(IDENTIFIER)
                              AssignmentStatement TRY Expression on 'cwd'(IDENTIFIER)
                                Expression TRY Operand on 'cwd'(IDENTIFIER)
                                  Operand TRY VariableRef on 'cwd'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER cwd
>>>ADVANCE 19:27 [3] '+'(OPER)
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                                Expression TRY Oper on '+'(OPER)
                                  Oper matched OK: OPER +
>>>ADVANCE 19:29 [4] 'url'(IDENTIFIER)
                                Parsed OK!-> Oper
                                Expression TRY Operand on 'url'(IDENTIFIER)
                                  Operand TRY VariableRef on 'url'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 19:32 [5] '.'(LITERAL)
                                    VariableRef TRY PropertyAccess on '.'(LITERAL)
                                      PropertyAccess matched OK: . .
>>>ADVANCE 19:33 [6] 'slice'(IDENTIFIER)
                                      PropertyAccess matched OK: IDENTIFIER slice
>>>ADVANCE 19:38 [7] '('(LITERAL)
                                    Parsed OK!-> PropertyAccess
                                    VariableRef TRY FunctionAccess on '('(LITERAL)
                                      FunctionAccess matched OK: ( (
>>>ADVANCE 19:39 [8] '2'(NUMBER)
optSeparatedList [FunctionAccess] indent:16, get SeparatedList of [Expression] by ',' closer: )
                                      FunctionAccess TRY Expression on '2'(NUMBER)
                                        Expression TRY Operand on '2'(NUMBER)
                                          Operand TRY NumberLiteral on '2'(NUMBER)
                                            NumberLiteral matched OK: NUMBER 2
>>>ADVANCE 19:40 [9] ')'(LITERAL)
                                          Parsed OK!-> NumberLiteral
                                        Parsed OK!-> Operand
                                      Parsed OK!-> Expression
                                      FunctionAccess matched OK: ) )
>>>ADVANCE 19:41 [10] ';'(LITERAL)
                                    Parsed OK!-> FunctionAccess
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                                Expression TRY Oper on ';'(LITERAL)
                                Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:19:41. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 19:41 [10] ';'(LITERAL)
                              Parsed OK!-> Expression
                            Parsed OK!-> AssignmentStatement
                          Parsed OK!-> Statement
                          Body matched OK: ; ;
>>>ADVANCE 21:0 [-1] ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 21:13 [0] 'else'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [Body] blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no closer-
                        Parsed OK!-> Body
                        IfStatement TRY ElseIfStatement on 'else'(IDENTIFIER)
                          ElseIfStatement matched OK: else else
>>>ADVANCE 21:18 [1] 'if'(IDENTIFIER)
                          ElseIfStatement matched OK: if if
>>>ADVANCE 21:21 [2] '('(LITERAL)
<< Returned: 'if'(IDENTIFIER) line 21
                          ElseIfStatement TRY IfStatement on 'if'(IDENTIFIER)
                            IfStatement matched OK: if if
>>>ADVANCE 21:21 [2] '('(LITERAL)
                            IfStatement TRY Expression on '('(LITERAL)
                              Expression TRY Operand on '('(LITERAL)
                                Operand TRY ParenExpression on '('(LITERAL)
                                  ParenExpression matched OK: ( (
>>>ADVANCE 21:22 [3] 'url'(IDENTIFIER)
                                  ParenExpression TRY Expression on 'url'(IDENTIFIER)
                                    Expression TRY Operand on 'url'(IDENTIFIER)
                                      Operand TRY VariableRef on 'url'(IDENTIFIER)
                                        VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 21:25 [4] '.'(LITERAL)
                                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                                          PropertyAccess matched OK: . .
>>>ADVANCE 21:26 [5] 'slice'(IDENTIFIER)
                                          PropertyAccess matched OK: IDENTIFIER slice
>>>ADVANCE 21:31 [6] '('(LITERAL)
                                        Parsed OK!-> PropertyAccess
                                        VariableRef TRY FunctionAccess on '('(LITERAL)
                                          FunctionAccess matched OK: ( (
>>>ADVANCE 21:32 [7] '0'(NUMBER)
optSeparatedList [FunctionAccess] indent:12, get SeparatedList of [Expression] by ',' closer: )
                                          FunctionAccess TRY Expression on '0'(NUMBER)
                                            Expression TRY Operand on '0'(NUMBER)
                                              Operand TRY NumberLiteral on '0'(NUMBER)
                                                NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 21:33 [8] ','(LITERAL)
                                              Parsed OK!-> NumberLiteral
                                            Parsed OK!-> Operand
                                          Parsed OK!-> Expression
                                          FunctionAccess matched OK: , ,
>>>ADVANCE 21:34 [9] '2'(NUMBER)
                                          FunctionAccess TRY Expression on '2'(NUMBER)
                                            Expression TRY Operand on '2'(NUMBER)
                                              Operand TRY NumberLiteral on '2'(NUMBER)
                                                NumberLiteral matched OK: NUMBER 2
>>>ADVANCE 21:35 [10] ')'(LITERAL)
                                              Parsed OK!-> NumberLiteral
                                            Parsed OK!-> Operand
                                          Parsed OK!-> Expression
                                          FunctionAccess matched OK: ) )
>>>ADVANCE 21:37 [11] 'is'(OPER)
                                        Parsed OK!-> FunctionAccess
                                      Parsed OK!-> VariableRef
                                    Parsed OK!-> Operand
                                    Expression TRY Oper on 'is'(OPER)
                                      Oper matched OK: OPER is
>>>ADVANCE 21:40 [12] ''/''(STRING)
                                    Parsed OK!-> Oper
                                    Expression TRY Operand on ''/''(STRING)
                                      Operand TRY StringLiteral on ''/''(STRING)
                                        StringLiteral matched OK: STRING '/'
>>>ADVANCE 21:43 [13] ')'(LITERAL)
                                      Parsed OK!-> StringLiteral
                                    Parsed OK!-> Operand
                                  Parsed OK!-> Expression
                                  ParenExpression matched OK: ) )
>>>ADVANCE 22:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> ParenExpression
                              Parsed OK!-> Operand
                              Expression matched OK: NEWLINE  
>>>ADVANCE 22:17 [0] 'do'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 22
                            Parsed OK!-> Expression
                            IfStatement TRY Body on ' '(NEWLINE)
                              Body matched OK: NEWLINE  
>>>ADVANCE 22:17 [0] 'do'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                              Body TRY Statement on 'do'(IDENTIFIER)

22 16(CODE) do nothing
    'do'(IDENTIFIER) 'nothing'(IDENTIFIER)

                                Statement TRY DoNothingStatement on 'do'(IDENTIFIER)
                                  DoNothingStatement matched OK: do do
>>>ADVANCE 22:20 [1] 'nothing'(IDENTIFIER)
                                  DoNothingStatement matched OK: nothing nothing
>>>ADVANCE 24:0 [-1] ' '(NEWLINE)
                                Parsed OK!-> DoNothingStatement
                              Parsed OK!-> Statement
                              Body matched OK: NEWLINE  
>>>ADVANCE 24:13 [0] 'else'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12
END freeFormMode [Body] blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no closer-
                            Parsed OK!-> Body
                            IfStatement TRY ElseIfStatement on 'else'(IDENTIFIER)
                              ElseIfStatement matched OK: else else
>>>ADVANCE 25:0 [-1] ' '(NEWLINE)
                            ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:24:14. ElseIfStatement: found ' '(NEWLINE) but 'if' required
<<REW to 24:13 [0] 'else'(IDENTIFIER)
                            IfStatement TRY ElseStatement on 'else'(IDENTIFIER)
                              ElseStatement matched OK: else else
>>>ADVANCE 25:0 [-1] ' '(NEWLINE)
                              ElseStatement TRY Body on ' '(NEWLINE)
                                Body matched OK: NEWLINE  
>>>ADVANCE 25:17 [0] 'url'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:12, blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12
                                Body TRY Statement on 'url'(IDENTIFIER)

25 16(CODE) url = require.globalPath + url;
    'url'(IDENTIFIER) '='(ASSIGN) 'require'(IDENTIFIER) '.'(LITERAL) 'globalPath'(IDENTIFIER) '+'(OPER) 'url'(IDENTIFIER) ';'(LITERAL)

                                  Statement TRY Adjective on 'url'(IDENTIFIER)
                                  Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:25:1. Adjective: found 'url'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 25:17 [0] 'url'(IDENTIFIER)
                                  Statement TRY VariableRef on 'url'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 25:21 [1] '='(ASSIGN)
                                  Parsed OK!-> VariableRef
                                  Statement TRY AssignmentStatement on '='(ASSIGN)
                                    AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 25:23 [2] 'require'(IDENTIFIER)
                                    AssignmentStatement TRY Expression on 'require'(IDENTIFIER)
                                      Expression TRY Operand on 'require'(IDENTIFIER)
                                        Operand TRY VariableRef on 'require'(IDENTIFIER)
                                          VariableRef matched OK: IDENTIFIER require
>>>ADVANCE 25:30 [3] '.'(LITERAL)
                                          VariableRef TRY PropertyAccess on '.'(LITERAL)
                                            PropertyAccess matched OK: . .
>>>ADVANCE 25:31 [4] 'globalPath'(IDENTIFIER)
                                            PropertyAccess matched OK: IDENTIFIER globalPath
>>>ADVANCE 25:42 [5] '+'(OPER)
                                          Parsed OK!-> PropertyAccess
                                        Parsed OK!-> VariableRef
                                      Parsed OK!-> Operand
                                      Expression TRY Oper on '+'(OPER)
                                        Oper matched OK: OPER +
>>>ADVANCE 25:44 [6] 'url'(IDENTIFIER)
                                      Parsed OK!-> Oper
                                      Expression TRY Operand on 'url'(IDENTIFIER)
                                        Operand TRY VariableRef on 'url'(IDENTIFIER)
                                          VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 25:47 [7] ';'(LITERAL)
                                        Parsed OK!-> VariableRef
                                      Parsed OK!-> Operand
                                      Expression TRY Oper on ';'(LITERAL)
                                      Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:25:45. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 25:47 [7] ';'(LITERAL)
                                    Parsed OK!-> Expression
                                  Parsed OK!-> AssignmentStatement
                                Parsed OK!-> Statement
                                Body matched OK: ; ;
>>>ADVANCE 29:0 [-1] ' '(NEWLINE)
                                Body matched OK: NEWLINE  
>>>ADVANCE 29:9 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:16 parentIndent:12
END freeFormMode [Body] blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no closer-
                              Parsed OK!-> Body
                            Parsed OK!-> ElseStatement
                          Parsed OK!-> IfStatement
                        Parsed OK!-> ElseIfStatement
                      Parsed OK!-> IfStatement
                    Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                  Parsed OK!-> Body
                Parsed OK!-> ElseStatement
              Parsed OK!-> IfStatement
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'if'(IDENTIFIER)

29 8(CODE) if url.toLowerCase().substr(-3) !== '.js', url+='.js';
    'if'(IDENTIFIER) 'url'(IDENTIFIER) '.'(LITERAL) 'toLowerCase'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) '.'(LITERAL) 'substr'(IDENTIFIER) '('(LITERAL) '-'(OPER) '3'(NUMBER) ')'(LITERAL) '!=='(OPER) ''.js''(STRING) ','(LITERAL) 'url'(IDENTIFIER) '+='(ASSIGN) ''.js''(STRING) ';'(LITERAL)

              Statement TRY IfStatement on 'if'(IDENTIFIER)
                IfStatement matched OK: if if
>>>ADVANCE 29:12 [1] 'url'(IDENTIFIER)
                IfStatement TRY Expression on 'url'(IDENTIFIER)
                  Expression TRY Operand on 'url'(IDENTIFIER)
                    Operand TRY VariableRef on 'url'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 29:15 [2] '.'(LITERAL)
                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                        PropertyAccess matched OK: . .
>>>ADVANCE 29:16 [3] 'toLowerCase'(IDENTIFIER)
                        PropertyAccess matched OK: IDENTIFIER toLowerCase
>>>ADVANCE 29:27 [4] '('(LITERAL)
                      Parsed OK!-> PropertyAccess
                      VariableRef TRY FunctionAccess on '('(LITERAL)
                        FunctionAccess matched OK: ( (
>>>ADVANCE 29:28 [5] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                        FunctionAccess matched OK: ) )
>>>ADVANCE 29:29 [6] '.'(LITERAL)
                      Parsed OK!-> FunctionAccess
                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                        PropertyAccess matched OK: . .
>>>ADVANCE 29:30 [7] 'substr'(IDENTIFIER)
                        PropertyAccess matched OK: IDENTIFIER substr
>>>ADVANCE 29:36 [8] '('(LITERAL)
                      Parsed OK!-> PropertyAccess
                      VariableRef TRY FunctionAccess on '('(LITERAL)
                        FunctionAccess matched OK: ( (
>>>ADVANCE 29:37 [9] '-'(OPER)
optSeparatedList [FunctionAccess] indent:8, get SeparatedList of [Expression] by ',' closer: )
                        FunctionAccess TRY Expression on '-'(OPER)
                          Expression TRY UnaryOper on '-'(OPER)
                            UnaryOper matched OK: - -
>>>ADVANCE 29:38 [10] '3'(NUMBER)
                          Parsed OK!-> UnaryOper
                          Expression TRY Operand on '3'(NUMBER)
                            Operand TRY NumberLiteral on '3'(NUMBER)
                              NumberLiteral matched OK: NUMBER 3
>>>ADVANCE 29:39 [11] ')'(LITERAL)
                            Parsed OK!-> NumberLiteral
                          Parsed OK!-> Operand
                        Parsed OK!-> Expression
                        FunctionAccess matched OK: ) )
>>>ADVANCE 29:41 [12] '!=='(OPER)
                      Parsed OK!-> FunctionAccess
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression TRY Oper on '!=='(OPER)
                    Oper matched OK: OPER !==
>>>ADVANCE 29:45 [13] ''.js''(STRING)
                  Parsed OK!-> Oper
                  Expression TRY Operand on ''.js''(STRING)
                    Operand TRY StringLiteral on ''.js''(STRING)
                      StringLiteral matched OK: STRING '.js'
>>>ADVANCE 29:50 [14] ','(LITERAL)
                    Parsed OK!-> StringLiteral
                  Parsed OK!-> Operand
                Parsed OK!-> Expression
                IfStatement matched OK: , ,
>>>ADVANCE 29:52 [15] 'url'(IDENTIFIER)
                IfStatement TRY SingleLineStatement on 'url'(IDENTIFIER)
optSeparatedList [SingleLineStatement] indent:8, get SeparatedList of [Statement] by ';' closer: NEWLINE
                  SingleLineStatement TRY Statement on 'url'(IDENTIFIER)

29 8(CODE) if url.toLowerCase().substr(-3) !== '.js', url+='.js';
    'if'(IDENTIFIER) 'url'(IDENTIFIER) '.'(LITERAL) 'toLowerCase'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) '.'(LITERAL) 'substr'(IDENTIFIER) '('(LITERAL) '-'(OPER) '3'(NUMBER) ')'(LITERAL) '!=='(OPER) ''.js''(STRING) ','(LITERAL) 'url'(IDENTIFIER) '+='(ASSIGN) ''.js''(STRING) ';'(LITERAL)

                    Statement TRY Adjective on 'url'(IDENTIFIER)
                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:29:51. Adjective: found 'url'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 29:52 [15] 'url'(IDENTIFIER)
                    Statement TRY VariableRef on 'url'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 29:55 [16] '+='(ASSIGN)
                    Parsed OK!-> VariableRef
                    Statement TRY AssignmentStatement on '+='(ASSIGN)
                      AssignmentStatement matched OK: ASSIGN +=
>>>ADVANCE 29:57 [17] ''.js''(STRING)
                      AssignmentStatement TRY Expression on ''.js''(STRING)
                        Expression TRY Operand on ''.js''(STRING)
                          Operand TRY StringLiteral on ''.js''(STRING)
                            StringLiteral matched OK: STRING '.js'
>>>ADVANCE 29:62 [18] ';'(LITERAL)
                          Parsed OK!-> StringLiteral
                        Parsed OK!-> Operand
                        Expression TRY Oper on ';'(LITERAL)
                        Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:29:58. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 29:62 [18] ';'(LITERAL)
                      Parsed OK!-> Expression
                    Parsed OK!-> AssignmentStatement
                  Parsed OK!-> Statement
                  SingleLineStatement matched OK: ; ;
>>>ADVANCE 31:0 [-1] ' '(NEWLINE)
                  SingleLineStatement matched OK: NEWLINE  
>>>ADVANCE 31:9 [0] 'if'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 31
                Parsed OK!-> SingleLineStatement
                IfStatement matched OK: NEWLINE  
>>>ADVANCE 31:9 [0] 'if'(IDENTIFIER)
                IfStatement TRY ElseIfStatement on 'if'(IDENTIFIER)
                ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:31:1. ElseIfStatement: found 'if'(IDENTIFIER) but 'else' required
<<REW to 31:9 [0] 'if'(IDENTIFIER)
                IfStatement TRY ElseStatement on 'if'(IDENTIFIER)
                ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:31:1. ElseStatement: found 'if'(IDENTIFIER) but 'else' required
<<REW to 31:9 [0] 'if'(IDENTIFIER)
              Parsed OK!-> IfStatement
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'if'(IDENTIFIER)

31 8(CODE) if no require.cache, require.cache={}; //init cache
    'if'(IDENTIFIER) 'no'(IDENTIFIER) 'require'(IDENTIFIER) '.'(LITERAL) 'cache'(IDENTIFIER) ','(LITERAL) 'require'(IDENTIFIER) '.'(LITERAL) 'cache'(IDENTIFIER) '='(ASSIGN) '{'(LITERAL) '}'(LITERAL) ';'(LITERAL) '//init cache'(COMMENT)

              Statement TRY IfStatement on 'if'(IDENTIFIER)
                IfStatement matched OK: if if
>>>ADVANCE 31:12 [1] 'no'(IDENTIFIER)
                IfStatement TRY Expression on 'no'(IDENTIFIER)
                  Expression TRY UnaryOper on 'no'(IDENTIFIER)
                    UnaryOper matched OK: no no
>>>ADVANCE 31:15 [2] 'require'(IDENTIFIER)
                  Parsed OK!-> UnaryOper
                  Expression TRY Operand on 'require'(IDENTIFIER)
                    Operand TRY VariableRef on 'require'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER require
>>>ADVANCE 31:22 [3] '.'(LITERAL)
                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                        PropertyAccess matched OK: . .
>>>ADVANCE 31:23 [4] 'cache'(IDENTIFIER)
                        PropertyAccess matched OK: IDENTIFIER cache
>>>ADVANCE 31:28 [5] ','(LITERAL)
                      Parsed OK!-> PropertyAccess
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                Parsed OK!-> Expression
                IfStatement matched OK: , ,
>>>ADVANCE 31:30 [6] 'require'(IDENTIFIER)
                IfStatement TRY SingleLineStatement on 'require'(IDENTIFIER)
optSeparatedList [SingleLineStatement] indent:8, get SeparatedList of [Statement] by ';' closer: NEWLINE
                  SingleLineStatement TRY Statement on 'require'(IDENTIFIER)

31 8(CODE) if no require.cache, require.cache={}; //init cache
    'if'(IDENTIFIER) 'no'(IDENTIFIER) 'require'(IDENTIFIER) '.'(LITERAL) 'cache'(IDENTIFIER) ','(LITERAL) 'require'(IDENTIFIER) '.'(LITERAL) 'cache'(IDENTIFIER) '='(ASSIGN) '{'(LITERAL) '}'(LITERAL) ';'(LITERAL) '//init cache'(COMMENT)

                    Statement TRY Adjective on 'require'(IDENTIFIER)
                    Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:31:29. Adjective: found 'require'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 31:30 [6] 'require'(IDENTIFIER)
                    Statement TRY VariableRef on 'require'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER require
>>>ADVANCE 31:37 [7] '.'(LITERAL)
                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                        PropertyAccess matched OK: . .
>>>ADVANCE 31:38 [8] 'cache'(IDENTIFIER)
                        PropertyAccess matched OK: IDENTIFIER cache
>>>ADVANCE 31:43 [9] '='(ASSIGN)
                      Parsed OK!-> PropertyAccess
                    Parsed OK!-> VariableRef
                    Statement TRY AssignmentStatement on '='(ASSIGN)
                      AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 31:44 [10] '{'(LITERAL)
                      AssignmentStatement TRY Expression on '{'(LITERAL)
                        Expression TRY Operand on '{'(LITERAL)
                          Operand TRY ObjectLiteral on '{'(LITERAL)
                            ObjectLiteral matched OK: { {
>>>ADVANCE 31:45 [11] '}'(LITERAL)
optSeparatedList [ObjectLiteral] indent:8, get SeparatedList of [NameValuePair] by ',' closer: }
                            ObjectLiteral matched OK: } }
>>>ADVANCE 31:46 [12] ';'(LITERAL)
                          Parsed OK!-> ObjectLiteral
                        Parsed OK!-> Operand
                        Expression TRY Oper on ';'(LITERAL)
                        Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:31:46. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 31:46 [12] ';'(LITERAL)
                      Parsed OK!-> Expression
                    Parsed OK!-> AssignmentStatement
                  Parsed OK!-> Statement
                  SingleLineStatement matched OK: ; ;
>>>ADVANCE 33:0 [-1] ' '(NEWLINE)
                  SingleLineStatement matched OK: NEWLINE  
>>>ADVANCE 33:9 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 33
                Parsed OK!-> SingleLineStatement
                IfStatement matched OK: NEWLINE  
>>>ADVANCE 33:9 [0] 'var'(IDENTIFIER)
                IfStatement TRY ElseIfStatement on 'var'(IDENTIFIER)
                ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:33:1. ElseIfStatement: found 'var'(IDENTIFIER) but 'else' required
<<REW to 33:9 [0] 'var'(IDENTIFIER)
                IfStatement TRY ElseStatement on 'var'(IDENTIFIER)
                ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:33:1. ElseStatement: found 'var'(IDENTIFIER) but 'else' required
<<REW to 33:9 [0] 'var'(IDENTIFIER)
              Parsed OK!-> IfStatement
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'var'(IDENTIFIER)

33 8(CODE) var cacheName = 'module:'+url;
    'var'(IDENTIFIER) 'cacheName'(IDENTIFIER) '='(ASSIGN) ''module:''(STRING) '+'(OPER) 'url'(IDENTIFIER) ';'(LITERAL)

              Statement TRY VarStatement on 'var'(IDENTIFIER)
                VarStatement matched OK: var var
>>>ADVANCE 33:13 [1] 'cacheName'(IDENTIFIER)
optSeparatedList [VarStatement] indent:8, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                VarStatement TRY VariableDecl on 'cacheName'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER cacheName
>>>ADVANCE 33:23 [2] '='(ASSIGN)
                  VariableDecl matched OK: = =
>>>ADVANCE 33:25 [3] ''module:''(STRING)
                  VariableDecl TRY Expression on ''module:''(STRING)
                    Expression TRY Operand on ''module:''(STRING)
                      Operand TRY StringLiteral on ''module:''(STRING)
                        StringLiteral matched OK: STRING 'module:'
>>>ADVANCE 33:34 [4] '+'(OPER)
                      Parsed OK!-> StringLiteral
                    Parsed OK!-> Operand
                    Expression TRY Oper on '+'(OPER)
                      Oper matched OK: OPER +
>>>ADVANCE 33:35 [5] 'url'(IDENTIFIER)
                    Parsed OK!-> Oper
                    Expression TRY Operand on 'url'(IDENTIFIER)
                      Operand TRY VariableRef on 'url'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 33:38 [6] ';'(LITERAL)
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression TRY Oper on ';'(LITERAL)
                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:33:36. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 33:38 [6] ';'(LITERAL)
                  Parsed OK!-> Expression
                Parsed OK!-> VariableDecl
              Parsed OK!-> VarStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 34:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 34:9 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'var'(IDENTIFIER)

34 8(CODE) var requiredModule = require.cache[cacheName]; //get from cache
    'var'(IDENTIFIER) 'requiredModule'(IDENTIFIER) '='(ASSIGN) 'require'(IDENTIFIER) '.'(LITERAL) 'cache'(IDENTIFIER) '['(LITERAL) 'cacheName'(IDENTIFIER) ']'(LITERAL) ';'(LITERAL) '//get from cache'(COMMENT)

              Statement TRY VarStatement on 'var'(IDENTIFIER)
                VarStatement matched OK: var var
>>>ADVANCE 34:13 [1] 'requiredModule'(IDENTIFIER)
optSeparatedList [VarStatement] indent:8, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                VarStatement TRY VariableDecl on 'requiredModule'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER requiredModule
>>>ADVANCE 34:28 [2] '='(ASSIGN)
                  VariableDecl matched OK: = =
>>>ADVANCE 34:30 [3] 'require'(IDENTIFIER)
                  VariableDecl TRY Expression on 'require'(IDENTIFIER)
                    Expression TRY Operand on 'require'(IDENTIFIER)
                      Operand TRY VariableRef on 'require'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER require
>>>ADVANCE 34:37 [4] '.'(LITERAL)
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 34:38 [5] 'cache'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER cache
>>>ADVANCE 34:43 [6] '['(LITERAL)
                        Parsed OK!-> PropertyAccess
                        VariableRef TRY IndexAccess on '['(LITERAL)
                          IndexAccess matched OK: [ [
>>>ADVANCE 34:44 [7] 'cacheName'(IDENTIFIER)
                          IndexAccess TRY Expression on 'cacheName'(IDENTIFIER)
                            Expression TRY Operand on 'cacheName'(IDENTIFIER)
                              Operand TRY VariableRef on 'cacheName'(IDENTIFIER)
                                VariableRef matched OK: IDENTIFIER cacheName
>>>ADVANCE 34:53 [8] ']'(LITERAL)
                              Parsed OK!-> VariableRef
                            Parsed OK!-> Operand
                          Parsed OK!-> Expression
                          IndexAccess matched OK: ] ]
>>>ADVANCE 34:54 [9] ';'(LITERAL)
                        Parsed OK!-> IndexAccess
                      Parsed OK!-> VariableRef
                    Parsed OK!-> Operand
                    Expression TRY Oper on ';'(LITERAL)
                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:34:54. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 34:54 [9] ';'(LITERAL)
                  Parsed OK!-> Expression
                Parsed OK!-> VariableDecl
              Parsed OK!-> VarStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 35:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 35:9 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'if'(IDENTIFIER)

35 8(CODE) if requiredModule
    'if'(IDENTIFIER) 'requiredModule'(IDENTIFIER)

              Statement TRY IfStatement on 'if'(IDENTIFIER)
                IfStatement matched OK: if if
>>>ADVANCE 35:12 [1] 'requiredModule'(IDENTIFIER)
                IfStatement TRY Expression on 'requiredModule'(IDENTIFIER)
                  Expression TRY Operand on 'requiredModule'(IDENTIFIER)
                    Operand TRY VariableRef on 'requiredModule'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER requiredModule
>>>ADVANCE 36:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression matched OK: NEWLINE  
>>>ADVANCE 36:13 [0] 'do'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 36
                Parsed OK!-> Expression
                IfStatement TRY Body on ' '(NEWLINE)
                  Body matched OK: NEWLINE  
>>>ADVANCE 36:13 [0] 'do'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                  Body TRY Statement on 'do'(IDENTIFIER)

36 12(CODE) do nothing //console.log('CACHED',url);
    'do'(IDENTIFIER) 'nothing'(IDENTIFIER) '//console.log('CACHED',url);'(COMMENT)

                    Statement TRY DoNothingStatement on 'do'(IDENTIFIER)
                      DoNothingStatement matched OK: do do
>>>ADVANCE 36:16 [1] 'nothing'(IDENTIFIER)
                      DoNothingStatement matched OK: nothing nothing
>>>ADVANCE 38:0 [-1] ' '(NEWLINE)
                    Parsed OK!-> DoNothingStatement
                  Parsed OK!-> Statement
                  Body matched OK: NEWLINE  
>>>ADVANCE 38:9 [0] 'else'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8
END freeFormMode [Body] blockIndent:12, get SeparatedList of [Statement] by ';' closer: -no closer-
                Parsed OK!-> Body
                IfStatement TRY ElseIfStatement on 'else'(IDENTIFIER)
                  ElseIfStatement matched OK: else else
>>>ADVANCE 39:0 [-1] ' '(NEWLINE)
                ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:38:10. ElseIfStatement: found ' '(NEWLINE) but 'if' required
<<REW to 38:9 [0] 'else'(IDENTIFIER)
                IfStatement TRY ElseStatement on 'else'(IDENTIFIER)
                  ElseStatement matched OK: else else
>>>ADVANCE 39:0 [-1] ' '(NEWLINE)
                  ElseStatement TRY Body on ' '(NEWLINE)
                    Body matched OK: NEWLINE  
>>>ADVANCE 39:17 [0] 'console'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:8, blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:8
                    Body TRY Statement on 'console'(IDENTIFIER)

39 16(CODE) console.log('REQUIRE',url);
    'console'(IDENTIFIER) '.'(LITERAL) 'log'(IDENTIFIER) '('(LITERAL) ''REQUIRE''(STRING) ','(LITERAL) 'url'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                      Statement TRY Adjective on 'console'(IDENTIFIER)
                      Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:39:1. Adjective: found 'console'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 39:17 [0] 'console'(IDENTIFIER)
                      Statement TRY VariableRef on 'console'(IDENTIFIER)
                        VariableRef matched OK: IDENTIFIER console
>>>ADVANCE 39:24 [1] '.'(LITERAL)
                        VariableRef TRY PropertyAccess on '.'(LITERAL)
                          PropertyAccess matched OK: . .
>>>ADVANCE 39:25 [2] 'log'(IDENTIFIER)
                          PropertyAccess matched OK: IDENTIFIER log
>>>ADVANCE 39:28 [3] '('(LITERAL)
                        Parsed OK!-> PropertyAccess
                        VariableRef TRY FunctionAccess on '('(LITERAL)
                          FunctionAccess matched OK: ( (
>>>ADVANCE 39:29 [4] ''REQUIRE''(STRING)
optSeparatedList [FunctionAccess] indent:16, get SeparatedList of [Expression] by ',' closer: )
                          FunctionAccess TRY Expression on ''REQUIRE''(STRING)
                            Expression TRY Operand on ''REQUIRE''(STRING)
                              Operand TRY StringLiteral on ''REQUIRE''(STRING)
                                StringLiteral matched OK: STRING 'REQUIRE'
>>>ADVANCE 39:38 [5] ','(LITERAL)
                              Parsed OK!-> StringLiteral
                            Parsed OK!-> Operand
                          Parsed OK!-> Expression
                          FunctionAccess matched OK: , ,
>>>ADVANCE 39:39 [6] 'url'(IDENTIFIER)
                          FunctionAccess TRY Expression on 'url'(IDENTIFIER)
                            Expression TRY Operand on 'url'(IDENTIFIER)
                              Operand TRY VariableRef on 'url'(IDENTIFIER)
                                VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 39:42 [7] ')'(LITERAL)
                              Parsed OK!-> VariableRef
                            Parsed OK!-> Operand
                          Parsed OK!-> Expression
                          FunctionAccess matched OK: ) )
>>>ADVANCE 39:43 [8] ';'(LITERAL)
                        Parsed OK!-> FunctionAccess
                      Parsed OK!-> VariableRef
                      Statement TRY AssignmentStatement on ';'(LITERAL)
                      AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:39:43. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 39:43 [8] ';'(LITERAL)
                      Statement TRY FunctionCall on ';'(LITERAL)
                      Parsed OK!-> FunctionCall
                    Parsed OK!-> Statement
                    Body matched OK: ; ;
>>>ADVANCE 40:0 [-1] ' '(NEWLINE)
                    Body matched OK: NEWLINE  
>>>ADVANCE 40:17 [0] 'try'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:8
                    Body TRY Statement on 'try'(IDENTIFIER)

40 16(CODE) try
    'try'(IDENTIFIER)

                      Statement TRY TryCatch on 'try'(IDENTIFIER)
                        TryCatch matched OK: try try
>>>ADVANCE 41:0 [-1] ' '(NEWLINE)
                        TryCatch TRY Body on ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 41:21 [0] 'var'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:16, blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          Body TRY Statement on 'var'(IDENTIFIER)

41 20(CODE) var moduleExports = {};
    'var'(IDENTIFIER) 'moduleExports'(IDENTIFIER) '='(ASSIGN) '{'(LITERAL) '}'(LITERAL) ';'(LITERAL)

                            Statement TRY VarStatement on 'var'(IDENTIFIER)
                              VarStatement matched OK: var var
>>>ADVANCE 41:25 [1] 'moduleExports'(IDENTIFIER)
optSeparatedList [VarStatement] indent:20, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                              VarStatement TRY VariableDecl on 'moduleExports'(IDENTIFIER)
                                VariableDecl matched OK: IDENTIFIER moduleExports
>>>ADVANCE 41:39 [2] '='(ASSIGN)
                                VariableDecl matched OK: = =
>>>ADVANCE 41:41 [3] '{'(LITERAL)
                                VariableDecl TRY Expression on '{'(LITERAL)
                                  Expression TRY Operand on '{'(LITERAL)
                                    Operand TRY ObjectLiteral on '{'(LITERAL)
                                      ObjectLiteral matched OK: { {
>>>ADVANCE 41:42 [4] '}'(LITERAL)
optSeparatedList [ObjectLiteral] indent:20, get SeparatedList of [NameValuePair] by ',' closer: }
                                      ObjectLiteral matched OK: } }
>>>ADVANCE 41:43 [5] ';'(LITERAL)
                                    Parsed OK!-> ObjectLiteral
                                  Parsed OK!-> Operand
                                  Expression TRY Oper on ';'(LITERAL)
                                  Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:41:43. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 41:43 [5] ';'(LITERAL)
                                Parsed OK!-> Expression
                              Parsed OK!-> VariableDecl
                            Parsed OK!-> VarStatement
                          Parsed OK!-> Statement
                          Body matched OK: ; ;
>>>ADVANCE 42:0 [-1] ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 42:21 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          Body TRY Statement on 'var'(IDENTIFIER)

42 20(CODE) var X=new XMLHttpRequest();
    'var'(IDENTIFIER) 'X'(IDENTIFIER) '='(ASSIGN) 'new'(IDENTIFIER) 'XMLHttpRequest'(IDENTIFIER) '('(LITERAL) ')'(LITERAL) ';'(LITERAL)

                            Statement TRY VarStatement on 'var'(IDENTIFIER)
                              VarStatement matched OK: var var
>>>ADVANCE 42:25 [1] 'X'(IDENTIFIER)
optSeparatedList [VarStatement] indent:20, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                              VarStatement TRY VariableDecl on 'X'(IDENTIFIER)
                                VariableDecl matched OK: IDENTIFIER X
>>>ADVANCE 42:26 [2] '='(ASSIGN)
                                VariableDecl matched OK: = =
>>>ADVANCE 42:27 [3] 'new'(IDENTIFIER)
                                VariableDecl TRY Expression on 'new'(IDENTIFIER)
                                  Expression TRY UnaryOper on 'new'(IDENTIFIER)
                                    UnaryOper matched OK: new new
>>>ADVANCE 42:31 [4] 'XMLHttpRequest'(IDENTIFIER)
                                  Parsed OK!-> UnaryOper
                                  Expression TRY Operand on 'XMLHttpRequest'(IDENTIFIER)
                                    Operand TRY VariableRef on 'XMLHttpRequest'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER XMLHttpRequest
>>>ADVANCE 42:45 [5] '('(LITERAL)
                                      VariableRef TRY FunctionAccess on '('(LITERAL)
                                        FunctionAccess matched OK: ( (
>>>ADVANCE 42:46 [6] ')'(LITERAL)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                        FunctionAccess matched OK: ) )
>>>ADVANCE 42:47 [7] ';'(LITERAL)
                                      Parsed OK!-> FunctionAccess
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                  Expression TRY Oper on ';'(LITERAL)
                                  Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:42:47. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 42:47 [7] ';'(LITERAL)
                                Parsed OK!-> Expression
                              Parsed OK!-> VariableDecl
                            Parsed OK!-> VarStatement
                          Parsed OK!-> Statement
                          Body matched OK: ; ;
>>>ADVANCE 43:0 [-1] ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 43:21 [0] 'X'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          Body TRY Statement on 'X'(IDENTIFIER)

43 20(CODE) X.open "GET", url, 0 // sync
    'X'(IDENTIFIER) '.'(LITERAL) 'open'(IDENTIFIER) '"GET"'(STRING) ','(LITERAL) 'url'(IDENTIFIER) ','(LITERAL) '0'(NUMBER) '// sync'(COMMENT)

                            Statement TRY Adjective on 'X'(IDENTIFIER)
                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:43:1. Adjective: found 'X'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 43:21 [0] 'X'(IDENTIFIER)
                            Statement TRY VariableRef on 'X'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER X
>>>ADVANCE 43:22 [1] '.'(LITERAL)
                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                PropertyAccess matched OK: . .
>>>ADVANCE 43:23 [2] 'open'(IDENTIFIER)
                                PropertyAccess matched OK: IDENTIFIER open
>>>ADVANCE 43:28 [3] '"GET"'(STRING)
                              Parsed OK!-> PropertyAccess
                            Parsed OK!-> VariableRef
                            Statement TRY AssignmentStatement on '"GET"'(STRING)
                            AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:43:24. AssignmentStatement: found '"GET"'(STRING) but 'ASSIGN' required
<<REW to 43:28 [3] '"GET"'(STRING)
                            Statement TRY FunctionCall on '"GET"'(STRING)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: -no closer-
                                FunctionAccess TRY Expression on '"GET"'(STRING)
                                  Expression TRY Operand on '"GET"'(STRING)
                                    Operand TRY StringLiteral on '"GET"'(STRING)
                                      StringLiteral matched OK: STRING "GET"
>>>ADVANCE 43:33 [4] ','(LITERAL)
                                    Parsed OK!-> StringLiteral
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: , ,
>>>ADVANCE 43:35 [5] 'url'(IDENTIFIER)
                                FunctionAccess TRY Expression on 'url'(IDENTIFIER)
                                  Expression TRY Operand on 'url'(IDENTIFIER)
                                    Operand TRY VariableRef on 'url'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 43:38 [6] ','(LITERAL)
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: , ,
>>>ADVANCE 43:40 [7] '0'(NUMBER)
                                FunctionAccess TRY Expression on '0'(NUMBER)
                                  Expression TRY Operand on '0'(NUMBER)
                                    Operand TRY NumberLiteral on '0'(NUMBER)
                                      NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 44:0 [-1] ' '(NEWLINE)
                                    Parsed OK!-> NumberLiteral
                                  Parsed OK!-> Operand
                                  Expression matched OK: NEWLINE  
>>>ADVANCE 44:21 [0] 'X'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 44
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: NEWLINE  
>>>ADVANCE 44:21 [0] 'X'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 44
                            Parsed OK!-> FunctionCall
                          Parsed OK!-> Statement
                          Body matched OK: NEWLINE  
>>>ADVANCE 44:21 [0] 'X'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          Body TRY Statement on 'X'(IDENTIFIER)

44 20(CODE) X.send
    'X'(IDENTIFIER) '.'(LITERAL) 'send'(IDENTIFIER)

                            Statement TRY Adjective on 'X'(IDENTIFIER)
                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:44:1. Adjective: found 'X'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 44:21 [0] 'X'(IDENTIFIER)
                            Statement TRY VariableRef on 'X'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER X
>>>ADVANCE 44:22 [1] '.'(LITERAL)
                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                PropertyAccess matched OK: . .
>>>ADVANCE 44:23 [2] 'send'(IDENTIFIER)
                                PropertyAccess matched OK: IDENTIFIER send
>>>ADVANCE 45:0 [-1] ' '(NEWLINE)
                              Parsed OK!-> PropertyAccess
                            Parsed OK!-> VariableRef
                            Statement TRY AssignmentStatement on ' '(NEWLINE)
                            AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:44:24. AssignmentStatement: found ' '(NEWLINE) but 'ASSIGN' required
<<REW to 45:0 [-1] ' '(NEWLINE)
                            Statement TRY FunctionCall on ' '(NEWLINE)
                            Parsed OK!-> FunctionCall
                          Parsed OK!-> Statement
                          Body matched OK: NEWLINE  
>>>ADVANCE 45:21 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          Body TRY Statement on 'if'(IDENTIFIER)

45 20(CODE) if X.status and X.status isnt 200, fail with X.statusText
    'if'(IDENTIFIER) 'X'(IDENTIFIER) '.'(LITERAL) 'status'(IDENTIFIER) 'and'(OPER) 'X'(IDENTIFIER) '.'(LITERAL) 'status'(IDENTIFIER) 'isnt'(OPER) '200'(NUMBER) ','(LITERAL) 'fail'(IDENTIFIER) 'with'(IDENTIFIER) 'X'(IDENTIFIER) '.'(LITERAL) 'statusText'(IDENTIFIER)

                            Statement TRY IfStatement on 'if'(IDENTIFIER)
                              IfStatement matched OK: if if
>>>ADVANCE 45:24 [1] 'X'(IDENTIFIER)
                              IfStatement TRY Expression on 'X'(IDENTIFIER)
                                Expression TRY Operand on 'X'(IDENTIFIER)
                                  Operand TRY VariableRef on 'X'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER X
>>>ADVANCE 45:25 [2] '.'(LITERAL)
                                    VariableRef TRY PropertyAccess on '.'(LITERAL)
                                      PropertyAccess matched OK: . .
>>>ADVANCE 45:26 [3] 'status'(IDENTIFIER)
                                      PropertyAccess matched OK: IDENTIFIER status
>>>ADVANCE 45:33 [4] 'and'(OPER)
                                    Parsed OK!-> PropertyAccess
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                                Expression TRY Oper on 'and'(OPER)
                                  Oper matched OK: OPER and
>>>ADVANCE 45:37 [5] 'X'(IDENTIFIER)
                                Parsed OK!-> Oper
                                Expression TRY Operand on 'X'(IDENTIFIER)
                                  Operand TRY VariableRef on 'X'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER X
>>>ADVANCE 45:38 [6] '.'(LITERAL)
                                    VariableRef TRY PropertyAccess on '.'(LITERAL)
                                      PropertyAccess matched OK: . .
>>>ADVANCE 45:39 [7] 'status'(IDENTIFIER)
                                      PropertyAccess matched OK: IDENTIFIER status
>>>ADVANCE 45:46 [8] 'isnt'(OPER)
                                    Parsed OK!-> PropertyAccess
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                                Expression TRY Oper on 'isnt'(OPER)
                                  Oper matched OK: OPER isnt
>>>ADVANCE 45:51 [9] '200'(NUMBER)
                                Parsed OK!-> Oper
                                Expression TRY Operand on '200'(NUMBER)
                                  Operand TRY NumberLiteral on '200'(NUMBER)
                                    NumberLiteral matched OK: NUMBER 200
>>>ADVANCE 45:54 [10] ','(LITERAL)
                                  Parsed OK!-> NumberLiteral
                                Parsed OK!-> Operand
                              Parsed OK!-> Expression
                              IfStatement matched OK: , ,
>>>ADVANCE 45:56 [11] 'fail'(IDENTIFIER)
                              IfStatement TRY SingleLineStatement on 'fail'(IDENTIFIER)
optSeparatedList [SingleLineStatement] indent:20, get SeparatedList of [Statement] by ';' closer: NEWLINE
                                SingleLineStatement TRY Statement on 'fail'(IDENTIFIER)

45 20(CODE) if X.status and X.status isnt 200, fail with X.statusText
    'if'(IDENTIFIER) 'X'(IDENTIFIER) '.'(LITERAL) 'status'(IDENTIFIER) 'and'(OPER) 'X'(IDENTIFIER) '.'(LITERAL) 'status'(IDENTIFIER) 'isnt'(OPER) '200'(NUMBER) ','(LITERAL) 'fail'(IDENTIFIER) 'with'(IDENTIFIER) 'X'(IDENTIFIER) '.'(LITERAL) 'statusText'(IDENTIFIER)

                                  Statement TRY ThrowStatement on 'fail'(IDENTIFIER)
                                    ThrowStatement matched OK: fail fail
>>>ADVANCE 45:61 [12] 'with'(IDENTIFIER)
                                    ThrowStatement matched OK: with with
>>>ADVANCE 45:66 [13] 'X'(IDENTIFIER)
                                    ThrowStatement TRY Expression on 'X'(IDENTIFIER)
                                      Expression TRY Operand on 'X'(IDENTIFIER)
                                        Operand TRY VariableRef on 'X'(IDENTIFIER)
                                          VariableRef matched OK: IDENTIFIER X
>>>ADVANCE 45:67 [14] '.'(LITERAL)
                                          VariableRef TRY PropertyAccess on '.'(LITERAL)
                                            PropertyAccess matched OK: . .
>>>ADVANCE 45:68 [15] 'statusText'(IDENTIFIER)
                                            PropertyAccess matched OK: IDENTIFIER statusText
>>>ADVANCE 46:0 [-1] ' '(NEWLINE)
                                          Parsed OK!-> PropertyAccess
                                        Parsed OK!-> VariableRef
                                      Parsed OK!-> Operand
                                      Expression matched OK: NEWLINE  
>>>ADVANCE 46:21 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 46
                                    Parsed OK!-> Expression
                                  Parsed OK!-> ThrowStatement
                                Parsed OK!-> Statement
                                SingleLineStatement matched OK: NEWLINE  
>>>ADVANCE 46:21 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 46
                              Parsed OK!-> SingleLineStatement
                              IfStatement matched OK: NEWLINE  
>>>ADVANCE 46:21 [0] 'var'(IDENTIFIER)
                              IfStatement TRY ElseIfStatement on 'var'(IDENTIFIER)
                              ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:46:1. ElseIfStatement: found 'var'(IDENTIFIER) but 'else' required
<<REW to 46:21 [0] 'var'(IDENTIFIER)
                              IfStatement TRY ElseStatement on 'var'(IDENTIFIER)
                              ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:46:1. ElseStatement: found 'var'(IDENTIFIER) but 'else' required
<<REW to 46:21 [0] 'var'(IDENTIFIER)
                            Parsed OK!-> IfStatement
                          Parsed OK!-> Statement
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          Body TRY Statement on 'var'(IDENTIFIER)

46 20(CODE) var source = X.responseText
    'var'(IDENTIFIER) 'source'(IDENTIFIER) '='(ASSIGN) 'X'(IDENTIFIER) '.'(LITERAL) 'responseText'(IDENTIFIER)

                            Statement TRY VarStatement on 'var'(IDENTIFIER)
                              VarStatement matched OK: var var
>>>ADVANCE 46:25 [1] 'source'(IDENTIFIER)
optSeparatedList [VarStatement] indent:20, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                              VarStatement TRY VariableDecl on 'source'(IDENTIFIER)
                                VariableDecl matched OK: IDENTIFIER source
>>>ADVANCE 46:32 [2] '='(ASSIGN)
                                VariableDecl matched OK: = =
>>>ADVANCE 46:34 [3] 'X'(IDENTIFIER)
                                VariableDecl TRY Expression on 'X'(IDENTIFIER)
                                  Expression TRY Operand on 'X'(IDENTIFIER)
                                    Operand TRY VariableRef on 'X'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER X
>>>ADVANCE 46:35 [4] '.'(LITERAL)
                                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                                        PropertyAccess matched OK: . .
>>>ADVANCE 46:36 [5] 'responseText'(IDENTIFIER)
                                        PropertyAccess matched OK: IDENTIFIER responseText
>>>ADVANCE 50:0 [-1] ' '(NEWLINE)
                                      Parsed OK!-> PropertyAccess
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                  Expression matched OK: NEWLINE  
>>>ADVANCE 50:21 [0] 'if'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 50
                                Parsed OK!-> Expression
                              Parsed OK!-> VariableDecl
                              VarStatement matched OK: NEWLINE  
>>>ADVANCE 50:21 [0] 'if'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 50
                            Parsed OK!-> VarStatement
                          Parsed OK!-> Statement
                          Body matched OK: NEWLINE  
>>>ADVANCE 50:21 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          Body TRY Statement on 'if'(IDENTIFIER)

50 20(CODE) if source.substr(0,10) is "(function("
    'if'(IDENTIFIER) 'source'(IDENTIFIER) '.'(LITERAL) 'substr'(IDENTIFIER) '('(LITERAL) '0'(NUMBER) ','(LITERAL) '10'(NUMBER) ')'(LITERAL) 'is'(OPER) '"(function("'(STRING)

                            Statement TRY IfStatement on 'if'(IDENTIFIER)
                              IfStatement matched OK: if if
>>>ADVANCE 50:24 [1] 'source'(IDENTIFIER)
                              IfStatement TRY Expression on 'source'(IDENTIFIER)
                                Expression TRY Operand on 'source'(IDENTIFIER)
                                  Operand TRY VariableRef on 'source'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER source
>>>ADVANCE 50:30 [2] '.'(LITERAL)
                                    VariableRef TRY PropertyAccess on '.'(LITERAL)
                                      PropertyAccess matched OK: . .
>>>ADVANCE 50:31 [3] 'substr'(IDENTIFIER)
                                      PropertyAccess matched OK: IDENTIFIER substr
>>>ADVANCE 50:37 [4] '('(LITERAL)
                                    Parsed OK!-> PropertyAccess
                                    VariableRef TRY FunctionAccess on '('(LITERAL)
                                      FunctionAccess matched OK: ( (
>>>ADVANCE 50:38 [5] '0'(NUMBER)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                      FunctionAccess TRY Expression on '0'(NUMBER)
                                        Expression TRY Operand on '0'(NUMBER)
                                          Operand TRY NumberLiteral on '0'(NUMBER)
                                            NumberLiteral matched OK: NUMBER 0
>>>ADVANCE 50:39 [6] ','(LITERAL)
                                          Parsed OK!-> NumberLiteral
                                        Parsed OK!-> Operand
                                      Parsed OK!-> Expression
                                      FunctionAccess matched OK: , ,
>>>ADVANCE 50:40 [7] '10'(NUMBER)
                                      FunctionAccess TRY Expression on '10'(NUMBER)
                                        Expression TRY Operand on '10'(NUMBER)
                                          Operand TRY NumberLiteral on '10'(NUMBER)
                                            NumberLiteral matched OK: NUMBER 10
>>>ADVANCE 50:42 [8] ')'(LITERAL)
                                          Parsed OK!-> NumberLiteral
                                        Parsed OK!-> Operand
                                      Parsed OK!-> Expression
                                      FunctionAccess matched OK: ) )
>>>ADVANCE 50:44 [9] 'is'(OPER)
                                    Parsed OK!-> FunctionAccess
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                                Expression TRY Oper on 'is'(OPER)
                                  Oper matched OK: OPER is
>>>ADVANCE 50:47 [10] '"(function("'(STRING)
                                Parsed OK!-> Oper
                                Expression TRY Operand on '"(function("'(STRING)
                                  Operand TRY StringLiteral on '"(function("'(STRING)
                                    StringLiteral matched OK: STRING "(function("
>>>ADVANCE 51:0 [-1] ' '(NEWLINE)
                                  Parsed OK!-> StringLiteral
                                Parsed OK!-> Operand
                                Expression matched OK: NEWLINE  
>>>ADVANCE 51:25 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 51
                              Parsed OK!-> Expression
                              IfStatement TRY Body on ' '(NEWLINE)
                                Body matched OK: NEWLINE  
>>>ADVANCE 51:25 [0] 'var'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:20, blockIndent:24, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                                Body TRY Statement on 'var'(IDENTIFIER)

51 24(CODE) var moduleStart = source.indexOf('{');
    'var'(IDENTIFIER) 'moduleStart'(IDENTIFIER) '='(ASSIGN) 'source'(IDENTIFIER) '.'(LITERAL) 'indexOf'(IDENTIFIER) '('(LITERAL) ''{''(STRING) ')'(LITERAL) ';'(LITERAL)

                                  Statement TRY VarStatement on 'var'(IDENTIFIER)
                                    VarStatement matched OK: var var
>>>ADVANCE 51:29 [1] 'moduleStart'(IDENTIFIER)
optSeparatedList [VarStatement] indent:24, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                                    VarStatement TRY VariableDecl on 'moduleStart'(IDENTIFIER)
                                      VariableDecl matched OK: IDENTIFIER moduleStart
>>>ADVANCE 51:41 [2] '='(ASSIGN)
                                      VariableDecl matched OK: = =
>>>ADVANCE 51:43 [3] 'source'(IDENTIFIER)
                                      VariableDecl TRY Expression on 'source'(IDENTIFIER)
                                        Expression TRY Operand on 'source'(IDENTIFIER)
                                          Operand TRY VariableRef on 'source'(IDENTIFIER)
                                            VariableRef matched OK: IDENTIFIER source
>>>ADVANCE 51:49 [4] '.'(LITERAL)
                                            VariableRef TRY PropertyAccess on '.'(LITERAL)
                                              PropertyAccess matched OK: . .
>>>ADVANCE 51:50 [5] 'indexOf'(IDENTIFIER)
                                              PropertyAccess matched OK: IDENTIFIER indexOf
>>>ADVANCE 51:57 [6] '('(LITERAL)
                                            Parsed OK!-> PropertyAccess
                                            VariableRef TRY FunctionAccess on '('(LITERAL)
                                              FunctionAccess matched OK: ( (
>>>ADVANCE 51:58 [7] ''{''(STRING)
optSeparatedList [FunctionAccess] indent:24, get SeparatedList of [Expression] by ',' closer: )
                                              FunctionAccess TRY Expression on ''{''(STRING)
                                                Expression TRY Operand on ''{''(STRING)
                                                  Operand TRY StringLiteral on ''{''(STRING)
                                                    StringLiteral matched OK: STRING '{'
>>>ADVANCE 51:61 [8] ')'(LITERAL)
                                                  Parsed OK!-> StringLiteral
                                                Parsed OK!-> Operand
                                              Parsed OK!-> Expression
                                              FunctionAccess matched OK: ) )
>>>ADVANCE 51:62 [9] ';'(LITERAL)
                                            Parsed OK!-> FunctionAccess
                                          Parsed OK!-> VariableRef
                                        Parsed OK!-> Operand
                                        Expression TRY Oper on ';'(LITERAL)
                                        Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:51:62. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 51:62 [9] ';'(LITERAL)
                                      Parsed OK!-> Expression
                                    Parsed OK!-> VariableDecl
                                  Parsed OK!-> VarStatement
                                Parsed OK!-> Statement
                                Body matched OK: ; ;
>>>ADVANCE 52:0 [-1] ' '(NEWLINE)
                                Body matched OK: NEWLINE  
>>>ADVANCE 52:25 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                                Body TRY Statement on 'var'(IDENTIFIER)

52 24(CODE) var moduleEnd = source.lastIndexOf('})');
    'var'(IDENTIFIER) 'moduleEnd'(IDENTIFIER) '='(ASSIGN) 'source'(IDENTIFIER) '.'(LITERAL) 'lastIndexOf'(IDENTIFIER) '('(LITERAL) ''})''(STRING) ')'(LITERAL) ';'(LITERAL)

                                  Statement TRY VarStatement on 'var'(IDENTIFIER)
                                    VarStatement matched OK: var var
>>>ADVANCE 52:29 [1] 'moduleEnd'(IDENTIFIER)
optSeparatedList [VarStatement] indent:24, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                                    VarStatement TRY VariableDecl on 'moduleEnd'(IDENTIFIER)
                                      VariableDecl matched OK: IDENTIFIER moduleEnd
>>>ADVANCE 52:39 [2] '='(ASSIGN)
                                      VariableDecl matched OK: = =
>>>ADVANCE 52:41 [3] 'source'(IDENTIFIER)
                                      VariableDecl TRY Expression on 'source'(IDENTIFIER)
                                        Expression TRY Operand on 'source'(IDENTIFIER)
                                          Operand TRY VariableRef on 'source'(IDENTIFIER)
                                            VariableRef matched OK: IDENTIFIER source
>>>ADVANCE 52:47 [4] '.'(LITERAL)
                                            VariableRef TRY PropertyAccess on '.'(LITERAL)
                                              PropertyAccess matched OK: . .
>>>ADVANCE 52:48 [5] 'lastIndexOf'(IDENTIFIER)
                                              PropertyAccess matched OK: IDENTIFIER lastIndexOf
>>>ADVANCE 52:59 [6] '('(LITERAL)
                                            Parsed OK!-> PropertyAccess
                                            VariableRef TRY FunctionAccess on '('(LITERAL)
                                              FunctionAccess matched OK: ( (
>>>ADVANCE 52:60 [7] ''})''(STRING)
optSeparatedList [FunctionAccess] indent:24, get SeparatedList of [Expression] by ',' closer: )
                                              FunctionAccess TRY Expression on ''})''(STRING)
                                                Expression TRY Operand on ''})''(STRING)
                                                  Operand TRY StringLiteral on ''})''(STRING)
                                                    StringLiteral matched OK: STRING '})'
>>>ADVANCE 52:64 [8] ')'(LITERAL)
                                                  Parsed OK!-> StringLiteral
                                                Parsed OK!-> Operand
                                              Parsed OK!-> Expression
                                              FunctionAccess matched OK: ) )
>>>ADVANCE 52:65 [9] ';'(LITERAL)
                                            Parsed OK!-> FunctionAccess
                                          Parsed OK!-> VariableRef
                                        Parsed OK!-> Operand
                                        Expression TRY Oper on ';'(LITERAL)
                                        Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:52:65. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 52:65 [9] ';'(LITERAL)
                                      Parsed OK!-> Expression
                                    Parsed OK!-> VariableDecl
                                  Parsed OK!-> VarStatement
                                Parsed OK!-> Statement
                                Body matched OK: ; ;
>>>ADVANCE 53:0 [-1] ' '(NEWLINE)
                                Body matched OK: NEWLINE  
>>>ADVANCE 53:25 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                                Body TRY Statement on 'var'(IDENTIFIER)

53 24(CODE) var CDTcomment = source.indexOf('//@ ');
    'var'(IDENTIFIER) 'CDTcomment'(IDENTIFIER) '='(ASSIGN) 'source'(IDENTIFIER) '.'(LITERAL) 'indexOf'(IDENTIFIER) '('(LITERAL) ''//@ ''(STRING) ')'(LITERAL) ';'(LITERAL)

                                  Statement TRY VarStatement on 'var'(IDENTIFIER)
                                    VarStatement matched OK: var var
>>>ADVANCE 53:29 [1] 'CDTcomment'(IDENTIFIER)
optSeparatedList [VarStatement] indent:24, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                                    VarStatement TRY VariableDecl on 'CDTcomment'(IDENTIFIER)
                                      VariableDecl matched OK: IDENTIFIER CDTcomment
>>>ADVANCE 53:40 [2] '='(ASSIGN)
                                      VariableDecl matched OK: = =
>>>ADVANCE 53:42 [3] 'source'(IDENTIFIER)
                                      VariableDecl TRY Expression on 'source'(IDENTIFIER)
                                        Expression TRY Operand on 'source'(IDENTIFIER)
                                          Operand TRY VariableRef on 'source'(IDENTIFIER)
                                            VariableRef matched OK: IDENTIFIER source
>>>ADVANCE 53:48 [4] '.'(LITERAL)
                                            VariableRef TRY PropertyAccess on '.'(LITERAL)
                                              PropertyAccess matched OK: . .
>>>ADVANCE 53:49 [5] 'indexOf'(IDENTIFIER)
                                              PropertyAccess matched OK: IDENTIFIER indexOf
>>>ADVANCE 53:56 [6] '('(LITERAL)
                                            Parsed OK!-> PropertyAccess
                                            VariableRef TRY FunctionAccess on '('(LITERAL)
                                              FunctionAccess matched OK: ( (
>>>ADVANCE 53:57 [7] ''//@ ''(STRING)
optSeparatedList [FunctionAccess] indent:24, get SeparatedList of [Expression] by ',' closer: )
                                              FunctionAccess TRY Expression on ''//@ ''(STRING)
                                                Expression TRY Operand on ''//@ ''(STRING)
                                                  Operand TRY StringLiteral on ''//@ ''(STRING)
                                                    StringLiteral matched OK: STRING '//@ '
>>>ADVANCE 53:63 [8] ')'(LITERAL)
                                                  Parsed OK!-> StringLiteral
                                                Parsed OK!-> Operand
                                              Parsed OK!-> Expression
                                              FunctionAccess matched OK: ) )
>>>ADVANCE 53:64 [9] ';'(LITERAL)
                                            Parsed OK!-> FunctionAccess
                                          Parsed OK!-> VariableRef
                                        Parsed OK!-> Operand
                                        Expression TRY Oper on ';'(LITERAL)
                                        Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:53:64. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 53:64 [9] ';'(LITERAL)
                                      Parsed OK!-> Expression
                                    Parsed OK!-> VariableDecl
                                  Parsed OK!-> VarStatement
                                Parsed OK!-> Statement
                                Body matched OK: ; ;
>>>ADVANCE 54:0 [-1] ' '(NEWLINE)
                                Body matched OK: NEWLINE  
>>>ADVANCE 54:25 [0] 'if'(IDENTIFIER)
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                                Body TRY Statement on 'if'(IDENTIFIER)

54 24(CODE) if CDTcomment>-1 and CDTcomment<moduleStart+6, moduleStart = source.indexOf('\n',CDTcomment);
    'if'(IDENTIFIER) 'CDTcomment'(IDENTIFIER) '>'(OPER) '-'(OPER) '1'(NUMBER) 'and'(OPER) 'CDTcomment'(IDENTIFIER) '<'(OPER) 'moduleStart'(IDENTIFIER) '+'(OPER) '6'(NUMBER) ','(LITERAL) 'moduleStart'(IDENTIFIER) '='(ASSIGN) 'source'(IDENTIFIER) '.'(LITERAL) 'indexOf'(IDENTIFIER) '('(LITERAL) ''\n''(STRING) ','(LITERAL) 'CDTcomment'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                                  Statement TRY IfStatement on 'if'(IDENTIFIER)
                                    IfStatement matched OK: if if
>>>ADVANCE 54:28 [1] 'CDTcomment'(IDENTIFIER)
                                    IfStatement TRY Expression on 'CDTcomment'(IDENTIFIER)
                                      Expression TRY Operand on 'CDTcomment'(IDENTIFIER)
                                        Operand TRY VariableRef on 'CDTcomment'(IDENTIFIER)
                                          VariableRef matched OK: IDENTIFIER CDTcomment
>>>ADVANCE 54:38 [2] '>'(OPER)
                                        Parsed OK!-> VariableRef
                                      Parsed OK!-> Operand
                                      Expression TRY Oper on '>'(OPER)
                                        Oper matched OK: OPER >
>>>ADVANCE 54:39 [3] '-'(OPER)
                                      Parsed OK!-> Oper
                                      Expression TRY UnaryOper on '-'(OPER)
                                        UnaryOper matched OK: - -
>>>ADVANCE 54:40 [4] '1'(NUMBER)
                                      Parsed OK!-> UnaryOper
                                      Expression TRY Operand on '1'(NUMBER)
                                        Operand TRY NumberLiteral on '1'(NUMBER)
                                          NumberLiteral matched OK: NUMBER 1
>>>ADVANCE 54:42 [5] 'and'(OPER)
                                        Parsed OK!-> NumberLiteral
                                      Parsed OK!-> Operand
                                      Expression TRY Oper on 'and'(OPER)
                                        Oper matched OK: OPER and
>>>ADVANCE 54:46 [6] 'CDTcomment'(IDENTIFIER)
                                      Parsed OK!-> Oper
                                      Expression TRY Operand on 'CDTcomment'(IDENTIFIER)
                                        Operand TRY VariableRef on 'CDTcomment'(IDENTIFIER)
                                          VariableRef matched OK: IDENTIFIER CDTcomment
>>>ADVANCE 54:56 [7] '<'(OPER)
                                        Parsed OK!-> VariableRef
                                      Parsed OK!-> Operand
                                      Expression TRY Oper on '<'(OPER)
                                        Oper matched OK: OPER <
>>>ADVANCE 54:57 [8] 'moduleStart'(IDENTIFIER)
                                      Parsed OK!-> Oper
                                      Expression TRY Operand on 'moduleStart'(IDENTIFIER)
                                        Operand TRY VariableRef on 'moduleStart'(IDENTIFIER)
                                          VariableRef matched OK: IDENTIFIER moduleStart
>>>ADVANCE 54:68 [9] '+'(OPER)
                                        Parsed OK!-> VariableRef
                                      Parsed OK!-> Operand
                                      Expression TRY Oper on '+'(OPER)
                                        Oper matched OK: OPER +
>>>ADVANCE 54:69 [10] '6'(NUMBER)
                                      Parsed OK!-> Oper
                                      Expression TRY Operand on '6'(NUMBER)
                                        Operand TRY NumberLiteral on '6'(NUMBER)
                                          NumberLiteral matched OK: NUMBER 6
>>>ADVANCE 54:70 [11] ','(LITERAL)
                                        Parsed OK!-> NumberLiteral
                                      Parsed OK!-> Operand
                                    Parsed OK!-> Expression
                                    IfStatement matched OK: , ,
>>>ADVANCE 54:72 [12] 'moduleStart'(IDENTIFIER)
                                    IfStatement TRY SingleLineStatement on 'moduleStart'(IDENTIFIER)
optSeparatedList [SingleLineStatement] indent:24, get SeparatedList of [Statement] by ';' closer: NEWLINE
                                      SingleLineStatement TRY Statement on 'moduleStart'(IDENTIFIER)

54 24(CODE) if CDTcomment>-1 and CDTcomment<moduleStart+6, moduleStart = source.indexOf('\n',CDTcomment);
    'if'(IDENTIFIER) 'CDTcomment'(IDENTIFIER) '>'(OPER) '-'(OPER) '1'(NUMBER) 'and'(OPER) 'CDTcomment'(IDENTIFIER) '<'(OPER) 'moduleStart'(IDENTIFIER) '+'(OPER) '6'(NUMBER) ','(LITERAL) 'moduleStart'(IDENTIFIER) '='(ASSIGN) 'source'(IDENTIFIER) '.'(LITERAL) 'indexOf'(IDENTIFIER) '('(LITERAL) ''\n''(STRING) ','(LITERAL) 'CDTcomment'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                                        Statement TRY Adjective on 'moduleStart'(IDENTIFIER)
                                        Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:54:71. Adjective: found 'moduleStart'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 54:72 [12] 'moduleStart'(IDENTIFIER)
                                        Statement TRY VariableRef on 'moduleStart'(IDENTIFIER)
                                          VariableRef matched OK: IDENTIFIER moduleStart
>>>ADVANCE 54:84 [13] '='(ASSIGN)
                                        Parsed OK!-> VariableRef
                                        Statement TRY AssignmentStatement on '='(ASSIGN)
                                          AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 54:86 [14] 'source'(IDENTIFIER)
                                          AssignmentStatement TRY Expression on 'source'(IDENTIFIER)
                                            Expression TRY Operand on 'source'(IDENTIFIER)
                                              Operand TRY VariableRef on 'source'(IDENTIFIER)
                                                VariableRef matched OK: IDENTIFIER source
>>>ADVANCE 54:92 [15] '.'(LITERAL)
                                                VariableRef TRY PropertyAccess on '.'(LITERAL)
                                                  PropertyAccess matched OK: . .
>>>ADVANCE 54:93 [16] 'indexOf'(IDENTIFIER)
                                                  PropertyAccess matched OK: IDENTIFIER indexOf
>>>ADVANCE 54:100 [17] '('(LITERAL)
                                                Parsed OK!-> PropertyAccess
                                                VariableRef TRY FunctionAccess on '('(LITERAL)
                                                  FunctionAccess matched OK: ( (
>>>ADVANCE 54:101 [18] ''\n''(STRING)
optSeparatedList [FunctionAccess] indent:24, get SeparatedList of [Expression] by ',' closer: )
                                                  FunctionAccess TRY Expression on ''\n''(STRING)
                                                    Expression TRY Operand on ''\n''(STRING)
                                                      Operand TRY StringLiteral on ''\n''(STRING)
                                                        StringLiteral matched OK: STRING '\n'
>>>ADVANCE 54:105 [19] ','(LITERAL)
                                                      Parsed OK!-> StringLiteral
                                                    Parsed OK!-> Operand
                                                  Parsed OK!-> Expression
                                                  FunctionAccess matched OK: , ,
>>>ADVANCE 54:106 [20] 'CDTcomment'(IDENTIFIER)
                                                  FunctionAccess TRY Expression on 'CDTcomment'(IDENTIFIER)
                                                    Expression TRY Operand on 'CDTcomment'(IDENTIFIER)
                                                      Operand TRY VariableRef on 'CDTcomment'(IDENTIFIER)
                                                        VariableRef matched OK: IDENTIFIER CDTcomment
>>>ADVANCE 54:116 [21] ')'(LITERAL)
                                                      Parsed OK!-> VariableRef
                                                    Parsed OK!-> Operand
                                                  Parsed OK!-> Expression
                                                  FunctionAccess matched OK: ) )
>>>ADVANCE 54:117 [22] ';'(LITERAL)
                                                Parsed OK!-> FunctionAccess
                                              Parsed OK!-> VariableRef
                                            Parsed OK!-> Operand
                                            Expression TRY Oper on ';'(LITERAL)
                                            Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:54:117. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 54:117 [22] ';'(LITERAL)
                                          Parsed OK!-> Expression
                                        Parsed OK!-> AssignmentStatement
                                      Parsed OK!-> Statement
                                      SingleLineStatement matched OK: ; ;
>>>ADVANCE 55:0 [-1] ' '(NEWLINE)
                                      SingleLineStatement matched OK: NEWLINE  
>>>ADVANCE 55:25 [0] 'source'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 55
                                    Parsed OK!-> SingleLineStatement
                                    IfStatement matched OK: NEWLINE  
>>>ADVANCE 55:25 [0] 'source'(IDENTIFIER)
                                    IfStatement TRY ElseIfStatement on 'source'(IDENTIFIER)
                                    ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:55:1. ElseIfStatement: found 'source'(IDENTIFIER) but 'else' required
<<REW to 55:25 [0] 'source'(IDENTIFIER)
                                    IfStatement TRY ElseStatement on 'source'(IDENTIFIER)
                                    ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:55:1. ElseStatement: found 'source'(IDENTIFIER) but 'else' required
<<REW to 55:25 [0] 'source'(IDENTIFIER)
                                  Parsed OK!-> IfStatement
                                Parsed OK!-> Statement
freeForm Mode .lexer.indent:24 block indent:24 parentIndent:20
                                Body TRY Statement on 'source'(IDENTIFIER)

55 24(CODE) source = source.slice(moduleStart+1,moduleEnd-1);
    'source'(IDENTIFIER) '='(ASSIGN) 'source'(IDENTIFIER) '.'(LITERAL) 'slice'(IDENTIFIER) '('(LITERAL) 'moduleStart'(IDENTIFIER) '+'(OPER) '1'(NUMBER) ','(LITERAL) 'moduleEnd'(IDENTIFIER) '-'(OPER) '1'(NUMBER) ')'(LITERAL) ';'(LITERAL)

                                  Statement TRY Adjective on 'source'(IDENTIFIER)
                                  Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:55:1. Adjective: found 'source'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 55:25 [0] 'source'(IDENTIFIER)
                                  Statement TRY VariableRef on 'source'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER source
>>>ADVANCE 55:32 [1] '='(ASSIGN)
                                  Parsed OK!-> VariableRef
                                  Statement TRY AssignmentStatement on '='(ASSIGN)
                                    AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 55:34 [2] 'source'(IDENTIFIER)
                                    AssignmentStatement TRY Expression on 'source'(IDENTIFIER)
                                      Expression TRY Operand on 'source'(IDENTIFIER)
                                        Operand TRY VariableRef on 'source'(IDENTIFIER)
                                          VariableRef matched OK: IDENTIFIER source
>>>ADVANCE 55:40 [3] '.'(LITERAL)
                                          VariableRef TRY PropertyAccess on '.'(LITERAL)
                                            PropertyAccess matched OK: . .
>>>ADVANCE 55:41 [4] 'slice'(IDENTIFIER)
                                            PropertyAccess matched OK: IDENTIFIER slice
>>>ADVANCE 55:46 [5] '('(LITERAL)
                                          Parsed OK!-> PropertyAccess
                                          VariableRef TRY FunctionAccess on '('(LITERAL)
                                            FunctionAccess matched OK: ( (
>>>ADVANCE 55:47 [6] 'moduleStart'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:24, get SeparatedList of [Expression] by ',' closer: )
                                            FunctionAccess TRY Expression on 'moduleStart'(IDENTIFIER)
                                              Expression TRY Operand on 'moduleStart'(IDENTIFIER)
                                                Operand TRY VariableRef on 'moduleStart'(IDENTIFIER)
                                                  VariableRef matched OK: IDENTIFIER moduleStart
>>>ADVANCE 55:58 [7] '+'(OPER)
                                                Parsed OK!-> VariableRef
                                              Parsed OK!-> Operand
                                              Expression TRY Oper on '+'(OPER)
                                                Oper matched OK: OPER +
>>>ADVANCE 55:59 [8] '1'(NUMBER)
                                              Parsed OK!-> Oper
                                              Expression TRY Operand on '1'(NUMBER)
                                                Operand TRY NumberLiteral on '1'(NUMBER)
                                                  NumberLiteral matched OK: NUMBER 1
>>>ADVANCE 55:60 [9] ','(LITERAL)
                                                Parsed OK!-> NumberLiteral
                                              Parsed OK!-> Operand
                                            Parsed OK!-> Expression
                                            FunctionAccess matched OK: , ,
>>>ADVANCE 55:61 [10] 'moduleEnd'(IDENTIFIER)
                                            FunctionAccess TRY Expression on 'moduleEnd'(IDENTIFIER)
                                              Expression TRY Operand on 'moduleEnd'(IDENTIFIER)
                                                Operand TRY VariableRef on 'moduleEnd'(IDENTIFIER)
                                                  VariableRef matched OK: IDENTIFIER moduleEnd
>>>ADVANCE 55:70 [11] '-'(OPER)
                                                Parsed OK!-> VariableRef
                                              Parsed OK!-> Operand
                                              Expression TRY Oper on '-'(OPER)
                                                Oper matched OK: OPER -
>>>ADVANCE 55:71 [12] '1'(NUMBER)
                                              Parsed OK!-> Oper
                                              Expression TRY Operand on '1'(NUMBER)
                                                Operand TRY NumberLiteral on '1'(NUMBER)
                                                  NumberLiteral matched OK: NUMBER 1
>>>ADVANCE 55:72 [13] ')'(LITERAL)
                                                Parsed OK!-> NumberLiteral
                                              Parsed OK!-> Operand
                                            Parsed OK!-> Expression
                                            FunctionAccess matched OK: ) )
>>>ADVANCE 55:73 [14] ';'(LITERAL)
                                          Parsed OK!-> FunctionAccess
                                        Parsed OK!-> VariableRef
                                      Parsed OK!-> Operand
                                      Expression TRY Oper on ';'(LITERAL)
                                      Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:55:73. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 55:73 [14] ';'(LITERAL)
                                    Parsed OK!-> Expression
                                  Parsed OK!-> AssignmentStatement
                                Parsed OK!-> Statement
                                Body matched OK: ; ;
>>>ADVANCE 59:0 [-1] ' '(NEWLINE)
                                Body matched OK: NEWLINE  
>>>ADVANCE 59:21 [0] 'source'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:24 parentIndent:20
END freeFormMode [Body] blockIndent:24, get SeparatedList of [Statement] by ';' closer: -no closer-
                              Parsed OK!-> Body
                              IfStatement TRY ElseIfStatement on 'source'(IDENTIFIER)
                              ElseIfStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:59:1. ElseIfStatement: found 'source'(IDENTIFIER) but 'else' required
<<REW to 59:21 [0] 'source'(IDENTIFIER)
                              IfStatement TRY ElseStatement on 'source'(IDENTIFIER)
                              ElseStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:59:1. ElseStatement: found 'source'(IDENTIFIER) but 'else' required
<<REW to 59:21 [0] 'source'(IDENTIFIER)
                            Parsed OK!-> IfStatement
                          Parsed OK!-> Statement
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          Body TRY Statement on 'source'(IDENTIFIER)

59 20(CODE) source="//@ sourceURL=#{url}\n#{source}"
    'source'(IDENTIFIER) '='(ASSIGN) '"//@ sourceURL="'(STRING) '+'(OPER) 'url'(IDENTIFIER) '+'(OPER) '"\n"'(STRING) '+'(OPER) 'source'(IDENTIFIER)

                            Statement TRY Adjective on 'source'(IDENTIFIER)
                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:59:1. Adjective: found 'source'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 59:21 [0] 'source'(IDENTIFIER)
                            Statement TRY VariableRef on 'source'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER source
>>>ADVANCE 59:27 [1] '='(ASSIGN)
                            Parsed OK!-> VariableRef
                            Statement TRY AssignmentStatement on '='(ASSIGN)
                              AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 59:29 [2] '"//@ sourceURL="'(STRING)
                              AssignmentStatement TRY Expression on '"//@ sourceURL="'(STRING)
                                Expression TRY Operand on '"//@ sourceURL="'(STRING)
                                  Operand TRY StringLiteral on '"//@ sourceURL="'(STRING)
                                    StringLiteral matched OK: STRING "//@ sourceURL="
>>>ADVANCE 59:46 [3] '+'(OPER)
                                  Parsed OK!-> StringLiteral
                                Parsed OK!-> Operand
                                Expression TRY Oper on '+'(OPER)
                                  Oper matched OK: OPER +
>>>ADVANCE 59:48 [4] 'url'(IDENTIFIER)
                                Parsed OK!-> Oper
                                Expression TRY Operand on 'url'(IDENTIFIER)
                                  Operand TRY VariableRef on 'url'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 59:52 [5] '+'(OPER)
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                                Expression TRY Oper on '+'(OPER)
                                  Oper matched OK: OPER +
>>>ADVANCE 59:54 [6] '"\n"'(STRING)
                                Parsed OK!-> Oper
                                Expression TRY Operand on '"\n"'(STRING)
                                  Operand TRY StringLiteral on '"\n"'(STRING)
                                    StringLiteral matched OK: STRING "\n"
>>>ADVANCE 59:59 [7] '+'(OPER)
                                  Parsed OK!-> StringLiteral
                                Parsed OK!-> Operand
                                Expression TRY Oper on '+'(OPER)
                                  Oper matched OK: OPER +
>>>ADVANCE 59:61 [8] 'source'(IDENTIFIER)
                                Parsed OK!-> Oper
                                Expression TRY Operand on 'source'(IDENTIFIER)
                                  Operand TRY VariableRef on 'source'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER source
>>>ADVANCE 62:0 [-1] ' '(NEWLINE)
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                                Expression matched OK: NEWLINE  
>>>ADVANCE 62:21 [0] 'requiredModule'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 62
                              Parsed OK!-> Expression
                            Parsed OK!-> AssignmentStatement
                          Parsed OK!-> Statement
                          Body matched OK: NEWLINE  
>>>ADVANCE 62:21 [0] 'requiredModule'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          Body TRY Statement on 'requiredModule'(IDENTIFIER)

62 20(CODE) requiredModule = { id: url, uri: url, exports:moduleExports }; //according to the modules 1.1 standard
    'requiredModule'(IDENTIFIER) '='(ASSIGN) '{'(LITERAL) 'id'(IDENTIFIER) ':'(OPER) 'url'(IDENTIFIER) ','(LITERAL) 'uri'(IDENTIFIER) ':'(OPER) 'url'(IDENTIFIER) ','(LITERAL) 'exports'(IDENTIFIER) ':'(OPER) 'moduleExports'(IDENTIFIER) '}'(LITERAL) ';'(LITERAL) '//according to the modules 1.1 standard'(COMMENT)

                            Statement TRY Adjective on 'requiredModule'(IDENTIFIER)
                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:62:1. Adjective: found 'requiredModule'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 62:21 [0] 'requiredModule'(IDENTIFIER)
                            Statement TRY VariableRef on 'requiredModule'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER requiredModule
>>>ADVANCE 62:36 [1] '='(ASSIGN)
                            Parsed OK!-> VariableRef
                            Statement TRY AssignmentStatement on '='(ASSIGN)
                              AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 62:38 [2] '{'(LITERAL)
                              AssignmentStatement TRY Expression on '{'(LITERAL)
                                Expression TRY Operand on '{'(LITERAL)
                                  Operand TRY ObjectLiteral on '{'(LITERAL)
                                    ObjectLiteral matched OK: { {
>>>ADVANCE 62:40 [3] 'id'(IDENTIFIER)
optSeparatedList [ObjectLiteral] indent:20, get SeparatedList of [NameValuePair] by ',' closer: }
                                    ObjectLiteral TRY NameValuePair on 'id'(IDENTIFIER)
                                      NameValuePair matched OK: IDENTIFIER id
>>>ADVANCE 62:42 [4] ':'(OPER)
                                      NameValuePair matched OK: : :
>>>ADVANCE 62:44 [5] 'url'(IDENTIFIER)
                                      NameValuePair TRY Expression on 'url'(IDENTIFIER)
                                        Expression TRY Operand on 'url'(IDENTIFIER)
                                          Operand TRY VariableRef on 'url'(IDENTIFIER)
                                            VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 62:47 [6] ','(LITERAL)
                                          Parsed OK!-> VariableRef
                                        Parsed OK!-> Operand
                                      Parsed OK!-> Expression
                                    Parsed OK!-> NameValuePair
                                    ObjectLiteral matched OK: , ,
>>>ADVANCE 62:49 [7] 'uri'(IDENTIFIER)
                                    ObjectLiteral TRY NameValuePair on 'uri'(IDENTIFIER)
                                      NameValuePair matched OK: IDENTIFIER uri
>>>ADVANCE 62:52 [8] ':'(OPER)
                                      NameValuePair matched OK: : :
>>>ADVANCE 62:54 [9] 'url'(IDENTIFIER)
                                      NameValuePair TRY Expression on 'url'(IDENTIFIER)
                                        Expression TRY Operand on 'url'(IDENTIFIER)
                                          Operand TRY VariableRef on 'url'(IDENTIFIER)
                                            VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 62:57 [10] ','(LITERAL)
                                          Parsed OK!-> VariableRef
                                        Parsed OK!-> Operand
                                      Parsed OK!-> Expression
                                    Parsed OK!-> NameValuePair
                                    ObjectLiteral matched OK: , ,
>>>ADVANCE 62:59 [11] 'exports'(IDENTIFIER)
                                    ObjectLiteral TRY NameValuePair on 'exports'(IDENTIFIER)
                                      NameValuePair matched OK: IDENTIFIER exports
>>>ADVANCE 62:66 [12] ':'(OPER)
                                      NameValuePair matched OK: : :
>>>ADVANCE 62:67 [13] 'moduleExports'(IDENTIFIER)
                                      NameValuePair TRY Expression on 'moduleExports'(IDENTIFIER)
                                        Expression TRY Operand on 'moduleExports'(IDENTIFIER)
                                          Operand TRY VariableRef on 'moduleExports'(IDENTIFIER)
                                            VariableRef matched OK: IDENTIFIER moduleExports
>>>ADVANCE 62:81 [14] '}'(LITERAL)
                                          Parsed OK!-> VariableRef
                                        Parsed OK!-> Operand
                                        Expression TRY Oper on '}'(LITERAL)
                                        Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:62:68. Oper: found '}'(LITERAL) but 'OPER' required
<<REW to 62:81 [14] '}'(LITERAL)
                                      Parsed OK!-> Expression
                                    Parsed OK!-> NameValuePair
                                    ObjectLiteral matched OK: } }
>>>ADVANCE 62:82 [15] ';'(LITERAL)
                                  Parsed OK!-> ObjectLiteral
                                Parsed OK!-> Operand
                                Expression TRY Oper on ';'(LITERAL)
                                Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:62:82. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 62:82 [15] ';'(LITERAL)
                              Parsed OK!-> Expression
                            Parsed OK!-> AssignmentStatement
                          Parsed OK!-> Statement
                          Body matched OK: ; ;
>>>ADVANCE 65:0 [-1] ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 65:21 [0] 'require'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          Body TRY Statement on 'require'(IDENTIFIER)

65 20(CODE) require.cache[cacheName] = requiredModule
    'require'(IDENTIFIER) '.'(LITERAL) 'cache'(IDENTIFIER) '['(LITERAL) 'cacheName'(IDENTIFIER) ']'(LITERAL) '='(ASSIGN) 'requiredModule'(IDENTIFIER)

                            Statement TRY Adjective on 'require'(IDENTIFIER)
                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:65:1. Adjective: found 'require'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 65:21 [0] 'require'(IDENTIFIER)
                            Statement TRY VariableRef on 'require'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER require
>>>ADVANCE 65:28 [1] '.'(LITERAL)
                              VariableRef TRY PropertyAccess on '.'(LITERAL)
                                PropertyAccess matched OK: . .
>>>ADVANCE 65:29 [2] 'cache'(IDENTIFIER)
                                PropertyAccess matched OK: IDENTIFIER cache
>>>ADVANCE 65:34 [3] '['(LITERAL)
                              Parsed OK!-> PropertyAccess
                              VariableRef TRY IndexAccess on '['(LITERAL)
                                IndexAccess matched OK: [ [
>>>ADVANCE 65:35 [4] 'cacheName'(IDENTIFIER)
                                IndexAccess TRY Expression on 'cacheName'(IDENTIFIER)
                                  Expression TRY Operand on 'cacheName'(IDENTIFIER)
                                    Operand TRY VariableRef on 'cacheName'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER cacheName
>>>ADVANCE 65:44 [5] ']'(LITERAL)
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                IndexAccess matched OK: ] ]
>>>ADVANCE 65:46 [6] '='(ASSIGN)
                              Parsed OK!-> IndexAccess
                            Parsed OK!-> VariableRef
                            Statement TRY AssignmentStatement on '='(ASSIGN)
                              AssignmentStatement matched OK: ASSIGN =
>>>ADVANCE 65:48 [7] 'requiredModule'(IDENTIFIER)
                              AssignmentStatement TRY Expression on 'requiredModule'(IDENTIFIER)
                                Expression TRY Operand on 'requiredModule'(IDENTIFIER)
                                  Operand TRY VariableRef on 'requiredModule'(IDENTIFIER)
                                    VariableRef matched OK: IDENTIFIER requiredModule
>>>ADVANCE 66:0 [-1] ' '(NEWLINE)
                                  Parsed OK!-> VariableRef
                                Parsed OK!-> Operand
                                Expression matched OK: NEWLINE  
>>>ADVANCE 66:21 [0] 'var'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 66
                              Parsed OK!-> Expression
                            Parsed OK!-> AssignmentStatement
                          Parsed OK!-> Statement
                          Body matched OK: NEWLINE  
>>>ADVANCE 66:21 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          Body TRY Statement on 'var'(IDENTIFIER)

66 20(CODE) var requireBinded = require.bind(requiredModule);
    'var'(IDENTIFIER) 'requireBinded'(IDENTIFIER) '='(ASSIGN) 'require'(IDENTIFIER) '.'(LITERAL) 'bind'(IDENTIFIER) '('(LITERAL) 'requiredModule'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL)

                            Statement TRY VarStatement on 'var'(IDENTIFIER)
                              VarStatement matched OK: var var
>>>ADVANCE 66:25 [1] 'requireBinded'(IDENTIFIER)
optSeparatedList [VarStatement] indent:20, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                              VarStatement TRY VariableDecl on 'requireBinded'(IDENTIFIER)
                                VariableDecl matched OK: IDENTIFIER requireBinded
>>>ADVANCE 66:39 [2] '='(ASSIGN)
                                VariableDecl matched OK: = =
>>>ADVANCE 66:41 [3] 'require'(IDENTIFIER)
                                VariableDecl TRY Expression on 'require'(IDENTIFIER)
                                  Expression TRY Operand on 'require'(IDENTIFIER)
                                    Operand TRY VariableRef on 'require'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER require
>>>ADVANCE 66:48 [4] '.'(LITERAL)
                                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                                        PropertyAccess matched OK: . .
>>>ADVANCE 66:49 [5] 'bind'(IDENTIFIER)
                                        PropertyAccess matched OK: IDENTIFIER bind
>>>ADVANCE 66:53 [6] '('(LITERAL)
                                      Parsed OK!-> PropertyAccess
                                      VariableRef TRY FunctionAccess on '('(LITERAL)
                                        FunctionAccess matched OK: ( (
>>>ADVANCE 66:54 [7] 'requiredModule'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                        FunctionAccess TRY Expression on 'requiredModule'(IDENTIFIER)
                                          Expression TRY Operand on 'requiredModule'(IDENTIFIER)
                                            Operand TRY VariableRef on 'requiredModule'(IDENTIFIER)
                                              VariableRef matched OK: IDENTIFIER requiredModule
>>>ADVANCE 66:68 [8] ')'(LITERAL)
                                            Parsed OK!-> VariableRef
                                          Parsed OK!-> Operand
                                        Parsed OK!-> Expression
                                        FunctionAccess matched OK: ) )
>>>ADVANCE 66:69 [9] ';'(LITERAL)
                                      Parsed OK!-> FunctionAccess
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                  Expression TRY Oper on ';'(LITERAL)
                                  Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:66:69. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 66:69 [9] ';'(LITERAL)
                                Parsed OK!-> Expression
                              Parsed OK!-> VariableDecl
                            Parsed OK!-> VarStatement
                          Parsed OK!-> Statement
                          Body matched OK: ; ;
>>>ADVANCE 67:0 [-1] ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 67:21 [0] 'var'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          Body TRY Statement on 'var'(IDENTIFIER)

67 20(CODE) var anonFn = new Function("require", "exports", "module", source); //create a Fn with module code, and 3 params: require, exports & module
    'var'(IDENTIFIER) 'anonFn'(IDENTIFIER) '='(ASSIGN) 'new'(IDENTIFIER) 'Function'(IDENTIFIER) '('(LITERAL) '"require"'(STRING) ','(LITERAL) '"exports"'(STRING) ','(LITERAL) '"module"'(STRING) ','(LITERAL) 'source'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL) '//create a Fn with module code, and 3 params: require, exports & module'(COMMENT)

                            Statement TRY VarStatement on 'var'(IDENTIFIER)
                              VarStatement matched OK: var var
>>>ADVANCE 67:25 [1] 'anonFn'(IDENTIFIER)
optSeparatedList [VarStatement] indent:20, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
                              VarStatement TRY VariableDecl on 'anonFn'(IDENTIFIER)
                                VariableDecl matched OK: IDENTIFIER anonFn
>>>ADVANCE 67:32 [2] '='(ASSIGN)
                                VariableDecl matched OK: = =
>>>ADVANCE 67:34 [3] 'new'(IDENTIFIER)
                                VariableDecl TRY Expression on 'new'(IDENTIFIER)
                                  Expression TRY UnaryOper on 'new'(IDENTIFIER)
                                    UnaryOper matched OK: new new
>>>ADVANCE 67:38 [4] 'Function'(IDENTIFIER)
                                  Parsed OK!-> UnaryOper
                                  Expression TRY Operand on 'Function'(IDENTIFIER)
                                    Operand TRY VariableRef on 'Function'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER Function
>>>ADVANCE 67:46 [5] '('(LITERAL)
                                      VariableRef TRY FunctionAccess on '('(LITERAL)
                                        FunctionAccess matched OK: ( (
>>>ADVANCE 67:47 [6] '"require"'(STRING)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                        FunctionAccess TRY Expression on '"require"'(STRING)
                                          Expression TRY Operand on '"require"'(STRING)
                                            Operand TRY StringLiteral on '"require"'(STRING)
                                              StringLiteral matched OK: STRING "require"
>>>ADVANCE 67:56 [7] ','(LITERAL)
                                            Parsed OK!-> StringLiteral
                                          Parsed OK!-> Operand
                                        Parsed OK!-> Expression
                                        FunctionAccess matched OK: , ,
>>>ADVANCE 67:58 [8] '"exports"'(STRING)
                                        FunctionAccess TRY Expression on '"exports"'(STRING)
                                          Expression TRY Operand on '"exports"'(STRING)
                                            Operand TRY StringLiteral on '"exports"'(STRING)
                                              StringLiteral matched OK: STRING "exports"
>>>ADVANCE 67:67 [9] ','(LITERAL)
                                            Parsed OK!-> StringLiteral
                                          Parsed OK!-> Operand
                                        Parsed OK!-> Expression
                                        FunctionAccess matched OK: , ,
>>>ADVANCE 67:69 [10] '"module"'(STRING)
                                        FunctionAccess TRY Expression on '"module"'(STRING)
                                          Expression TRY Operand on '"module"'(STRING)
                                            Operand TRY StringLiteral on '"module"'(STRING)
                                              StringLiteral matched OK: STRING "module"
>>>ADVANCE 67:77 [11] ','(LITERAL)
                                            Parsed OK!-> StringLiteral
                                          Parsed OK!-> Operand
                                        Parsed OK!-> Expression
                                        FunctionAccess matched OK: , ,
>>>ADVANCE 67:79 [12] 'source'(IDENTIFIER)
                                        FunctionAccess TRY Expression on 'source'(IDENTIFIER)
                                          Expression TRY Operand on 'source'(IDENTIFIER)
                                            Operand TRY VariableRef on 'source'(IDENTIFIER)
                                              VariableRef matched OK: IDENTIFIER source
>>>ADVANCE 67:85 [13] ')'(LITERAL)
                                            Parsed OK!-> VariableRef
                                          Parsed OK!-> Operand
                                        Parsed OK!-> Expression
                                        FunctionAccess matched OK: ) )
>>>ADVANCE 67:86 [14] ';'(LITERAL)
                                      Parsed OK!-> FunctionAccess
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                  Expression TRY Oper on ';'(LITERAL)
                                  Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:67:86. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 67:86 [14] ';'(LITERAL)
                                Parsed OK!-> Expression
                              Parsed OK!-> VariableDecl
                            Parsed OK!-> VarStatement
                          Parsed OK!-> Statement
                          Body matched OK: ; ;
>>>ADVANCE 68:0 [-1] ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 68:21 [0] 'anonFn'(IDENTIFIER)
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                          Body TRY Statement on 'anonFn'(IDENTIFIER)

68 20(CODE) anonFn(requireBinded, moduleExports, requiredModule); // call the Fn, Execute the module
    'anonFn'(IDENTIFIER) '('(LITERAL) 'requireBinded'(IDENTIFIER) ','(LITERAL) 'moduleExports'(IDENTIFIER) ','(LITERAL) 'requiredModule'(IDENTIFIER) ')'(LITERAL) ';'(LITERAL) '// call the Fn, Execute the module'(COMMENT)

                            Statement TRY Adjective on 'anonFn'(IDENTIFIER)
                            Adjective parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:68:1. Adjective: found 'anonFn'(IDENTIFIER) but 'public'|'export'|'default'|'nice'|'generator'|'shim'|'helper'|'global' required
<<REW to 68:21 [0] 'anonFn'(IDENTIFIER)
                            Statement TRY VariableRef on 'anonFn'(IDENTIFIER)
                              VariableRef matched OK: IDENTIFIER anonFn
>>>ADVANCE 68:27 [1] '('(LITERAL)
                              VariableRef TRY FunctionAccess on '('(LITERAL)
                                FunctionAccess matched OK: ( (
>>>ADVANCE 68:28 [2] 'requireBinded'(IDENTIFIER)
optSeparatedList [FunctionAccess] indent:20, get SeparatedList of [Expression] by ',' closer: )
                                FunctionAccess TRY Expression on 'requireBinded'(IDENTIFIER)
                                  Expression TRY Operand on 'requireBinded'(IDENTIFIER)
                                    Operand TRY VariableRef on 'requireBinded'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER requireBinded
>>>ADVANCE 68:41 [3] ','(LITERAL)
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: , ,
>>>ADVANCE 68:43 [4] 'moduleExports'(IDENTIFIER)
                                FunctionAccess TRY Expression on 'moduleExports'(IDENTIFIER)
                                  Expression TRY Operand on 'moduleExports'(IDENTIFIER)
                                    Operand TRY VariableRef on 'moduleExports'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER moduleExports
>>>ADVANCE 68:56 [5] ','(LITERAL)
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: , ,
>>>ADVANCE 68:58 [6] 'requiredModule'(IDENTIFIER)
                                FunctionAccess TRY Expression on 'requiredModule'(IDENTIFIER)
                                  Expression TRY Operand on 'requiredModule'(IDENTIFIER)
                                    Operand TRY VariableRef on 'requiredModule'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER requiredModule
>>>ADVANCE 68:72 [7] ')'(LITERAL)
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                Parsed OK!-> Expression
                                FunctionAccess matched OK: ) )
>>>ADVANCE 68:73 [8] ';'(LITERAL)
                              Parsed OK!-> FunctionAccess
                            Parsed OK!-> VariableRef
                            Statement TRY AssignmentStatement on ';'(LITERAL)
                            AssignmentStatement parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:68:73. AssignmentStatement: found ';'(LITERAL) but 'ASSIGN' required
<<REW to 68:73 [8] ';'(LITERAL)
                            Statement TRY FunctionCall on ';'(LITERAL)
                            Parsed OK!-> FunctionCall
                          Parsed OK!-> Statement
                          Body matched OK: ; ;
>>>ADVANCE 71:0 [-1] ' '(NEWLINE)
                          Body matched OK: NEWLINE  
>>>ADVANCE 71:17 [0] 'catch'(IDENTIFIER)
freeForm Mode .lexer.indent:16 block indent:20 parentIndent:16
END freeFormMode [Body] blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no closer-
                        Parsed OK!-> Body
                        TryCatch TRY ExceptionBlock on 'catch'(IDENTIFIER)
                          ExceptionBlock matched OK: catch catch
>>>ADVANCE 71:23 [1] 'err'(IDENTIFIER)
                          ExceptionBlock matched OK: IDENTIFIER err
>>>ADVANCE 72:0 [-1] ' '(NEWLINE)
                          ExceptionBlock TRY Body on ' '(NEWLINE)
                            Body matched OK: NEWLINE  
>>>ADVANCE 72:21 [0] 'fail'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:16, blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:20 block indent:20 parentIndent:16
                            Body TRY Statement on 'fail'(IDENTIFIER)

72 20(CODE) fail with "Error loading module #{url}: #{err}"
    'fail'(IDENTIFIER) 'with'(IDENTIFIER) '"Error loading module "'(STRING) '+'(OPER) 'url'(IDENTIFIER) '+'(OPER) '": "'(STRING) '+'(OPER) 'err'(IDENTIFIER)

                              Statement TRY ThrowStatement on 'fail'(IDENTIFIER)
                                ThrowStatement matched OK: fail fail
>>>ADVANCE 72:26 [1] 'with'(IDENTIFIER)
                                ThrowStatement matched OK: with with
>>>ADVANCE 72:32 [2] '"Error loading module "'(STRING)
                                ThrowStatement TRY Expression on '"Error loading module "'(STRING)
                                  Expression TRY Operand on '"Error loading module "'(STRING)
                                    Operand TRY StringLiteral on '"Error loading module "'(STRING)
                                      StringLiteral matched OK: STRING "Error loading module "
>>>ADVANCE 72:56 [3] '+'(OPER)
                                    Parsed OK!-> StringLiteral
                                  Parsed OK!-> Operand
                                  Expression TRY Oper on '+'(OPER)
                                    Oper matched OK: OPER +
>>>ADVANCE 72:58 [4] 'url'(IDENTIFIER)
                                  Parsed OK!-> Oper
                                  Expression TRY Operand on 'url'(IDENTIFIER)
                                    Operand TRY VariableRef on 'url'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER url
>>>ADVANCE 72:62 [5] '+'(OPER)
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                  Expression TRY Oper on '+'(OPER)
                                    Oper matched OK: OPER +
>>>ADVANCE 72:64 [6] '": "'(STRING)
                                  Parsed OK!-> Oper
                                  Expression TRY Operand on '": "'(STRING)
                                    Operand TRY StringLiteral on '": "'(STRING)
                                      StringLiteral matched OK: STRING ": "
>>>ADVANCE 72:69 [7] '+'(OPER)
                                    Parsed OK!-> StringLiteral
                                  Parsed OK!-> Operand
                                  Expression TRY Oper on '+'(OPER)
                                    Oper matched OK: OPER +
>>>ADVANCE 72:71 [8] 'err'(IDENTIFIER)
                                  Parsed OK!-> Oper
                                  Expression TRY Operand on 'err'(IDENTIFIER)
                                    Operand TRY VariableRef on 'err'(IDENTIFIER)
                                      VariableRef matched OK: IDENTIFIER err
>>>ADVANCE 74:0 [-1] ' '(NEWLINE)
                                    Parsed OK!-> VariableRef
                                  Parsed OK!-> Operand
                                  Expression matched OK: NEWLINE  
>>>ADVANCE 74:9 [0] 'declare'(IDENTIFIER)
<< Returned: ' '(NEWLINE) line 74
                                Parsed OK!-> Expression
                              Parsed OK!-> ThrowStatement
                            Parsed OK!-> Statement
                            Body matched OK: NEWLINE  
>>>ADVANCE 74:9 [0] 'declare'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:20 parentIndent:16
END freeFormMode [Body] blockIndent:20, get SeparatedList of [Statement] by ';' closer: -no closer-
                          Parsed OK!-> Body
                        Parsed OK!-> ExceptionBlock
                      Parsed OK!-> TryCatch
                    Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:16 parentIndent:8
END freeFormMode [Body] blockIndent:16, get SeparatedList of [Statement] by ';' closer: -no closer-
                  Parsed OK!-> Body
                Parsed OK!-> ElseStatement
              Parsed OK!-> IfStatement
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'declare'(IDENTIFIER)

74 8(CODE) declare valid requiredModule.exports
    'declare'(IDENTIFIER) 'valid'(IDENTIFIER) 'requiredModule'(IDENTIFIER) '.'(LITERAL) 'exports'(IDENTIFIER)

              Statement TRY DeclareStatement on 'declare'(IDENTIFIER)
                DeclareStatement matched OK: declare declare
>>>ADVANCE 74:17 [1] 'valid'(IDENTIFIER)
                DeclareStatement matched OK: valid valid
>>>ADVANCE 74:23 [2] 'requiredModule'(IDENTIFIER)
                DeclareStatement TRY VariableRef on 'requiredModule'(IDENTIFIER)
                  VariableRef matched OK: IDENTIFIER requiredModule
>>>ADVANCE 74:37 [3] '.'(LITERAL)
                  VariableRef TRY PropertyAccess on '.'(LITERAL)
                    PropertyAccess matched OK: . .
>>>ADVANCE 74:38 [4] 'exports'(IDENTIFIER)
                    PropertyAccess matched OK: IDENTIFIER exports
>>>ADVANCE 75:0 [-1] ' '(NEWLINE)
                  Parsed OK!-> PropertyAccess
                Parsed OK!-> VariableRef
              Parsed OK!-> DeclareStatement
            Parsed OK!-> Statement
            Body matched OK: NEWLINE  
>>>ADVANCE 75:9 [0] 'return'(IDENTIFIER)
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'return'(IDENTIFIER)

75 8(CODE) return requiredModule.exports; //require returns object exported by module
    'return'(IDENTIFIER) 'requiredModule'(IDENTIFIER) '.'(LITERAL) 'exports'(IDENTIFIER) ';'(LITERAL) '//require returns object exported by module'(COMMENT)

              Statement TRY ReturnStatement on 'return'(IDENTIFIER)
                ReturnStatement matched OK: return return
>>>ADVANCE 75:16 [1] 'requiredModule'(IDENTIFIER)
                ReturnStatement TRY Expression on 'requiredModule'(IDENTIFIER)
                  Expression TRY Operand on 'requiredModule'(IDENTIFIER)
                    Operand TRY VariableRef on 'requiredModule'(IDENTIFIER)
                      VariableRef matched OK: IDENTIFIER requiredModule
>>>ADVANCE 75:30 [2] '.'(LITERAL)
                      VariableRef TRY PropertyAccess on '.'(LITERAL)
                        PropertyAccess matched OK: . .
>>>ADVANCE 75:31 [3] 'exports'(IDENTIFIER)
                        PropertyAccess matched OK: IDENTIFIER exports
>>>ADVANCE 75:38 [4] ';'(LITERAL)
                      Parsed OK!-> PropertyAccess
                    Parsed OK!-> VariableRef
                  Parsed OK!-> Operand
                  Expression TRY Oper on ';'(LITERAL)
                  Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:75:32. Oper: found ';'(LITERAL) but 'OPER' required
<<REW to 75:38 [4] ';'(LITERAL)
                Parsed OK!-> Expression
              Parsed OK!-> ReturnStatement
            Parsed OK!-> Statement
            Body matched OK: ; ;
>>>ADVANCE 84:0 [-1] ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 84:5 [0] 'append'(IDENTIFIER)
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> FunctionDeclaration
      Parsed OK!-> Statement
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined
      Module TRY Statement on 'append'(IDENTIFIER)

84 4(CODE) append to namespace require
    'append'(IDENTIFIER) 'to'(IDENTIFIER) 'namespace'(IDENTIFIER) 'require'(IDENTIFIER)

        Statement TRY AppendToDeclaration on 'append'(IDENTIFIER)
          AppendToDeclaration matched OK: append append
>>>ADVANCE 84:12 [1] 'to'(IDENTIFIER)
          AppendToDeclaration matched OK: to to
>>>ADVANCE 84:15 [2] 'namespace'(IDENTIFIER)
          AppendToDeclaration matched OK: namespace namespace
>>>ADVANCE 84:25 [3] 'require'(IDENTIFIER)
          AppendToDeclaration TRY VariableRef on 'require'(IDENTIFIER)
            VariableRef matched OK: IDENTIFIER require
>>>ADVANCE 85:0 [-1] ' '(NEWLINE)
          Parsed OK!-> VariableRef
          AppendToDeclaration TRY Body on ' '(NEWLINE)
            Body matched OK: NEWLINE  
>>>ADVANCE 85:9 [0] 'properties'(IDENTIFIER)
optFreeFormList [Body] parentname:undefined parentIndent:4, blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no-
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4
            Body TRY Statement on 'properties'(IDENTIFIER)

85 8(CODE) properties
    'properties'(IDENTIFIER)

              Statement TRY PropertiesDeclaration on 'properties'(IDENTIFIER)
                PropertiesDeclaration matched OK: properties properties
>>>ADVANCE 86:0 [-1] ' '(NEWLINE)
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 86:13 [0] 'cache'(IDENTIFIER)
optFreeFormList [PropertiesDeclaration] parentname:undefined parentIndent:8, blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no-
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'cache'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER cache
>>>ADVANCE 87:0 [-1] ' '(NEWLINE)
                Parsed OK!-> VariableDecl
                PropertiesDeclaration matched OK: NEWLINE  
>>>ADVANCE 87:13 [0] 'globalPath'(IDENTIFIER)
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8
                PropertiesDeclaration TRY VariableDecl on 'globalPath'(IDENTIFIER)
                  VariableDecl matched OK: IDENTIFIER globalPath
>>>ADVANCE 87:24 [1] '='(ASSIGN)
                  VariableDecl matched OK: = =
>>>ADVANCE 87:26 [2] ''lib/''(STRING)
                  VariableDecl TRY Expression on ''lib/''(STRING)
                    Expression TRY Operand on ''lib/''(STRING)
                      Operand TRY StringLiteral on ''lib/''(STRING)
                        StringLiteral matched OK: STRING 'lib/'
>>>ADVANCE 87:0 [-1] ' '(EOF)
                      Parsed OK!-> StringLiteral
                    Parsed OK!-> Operand
                    Expression TRY Oper on ' '(EOF)
                    Oper parse failed. /home/ltato/LiteScript_online_playground/playground/js/require.lite.md:87:27. Oper: found ' '(EOF) but 'OPER' required
<<REW to 87:0 [-1] ' '(EOF)
                  Parsed OK!-> Expression
                Parsed OK!-> VariableDecl
freeForm Mode .lexer.indent:0 block indent:12 parentIndent:8
END freeFormMode [PropertiesDeclaration] blockIndent:12, get SeparatedList of [VariableDecl] by ',' closer: -no closer-
              Parsed OK!-> PropertiesDeclaration
            Parsed OK!-> Statement
freeForm Mode .lexer.indent:0 block indent:8 parentIndent:4
END freeFormMode [Body] blockIndent:8, get SeparatedList of [Statement] by ';' closer: -no closer-
          Parsed OK!-> Body
        Parsed OK!-> AppendToDeclaration
      Parsed OK!-> Statement
      Module matched OK: EOF  
>>>ADVANCE 87:0 [-1] ' '(EOF)
END freeFormMode [Module] blockIndent:4, get SeparatedList of [Statement] by ';' closer: EOF

     'online.md' imports './../lib/log'
[object Object]
addToScope: 'module' to '/home/ltato/LiteScript_online_playground/playground/lib/log.js Scope'
addMember: 'exports' to 'module'
addToScope: 'exports' to '/home/ltato/LiteScript_online_playground/playground/lib/log.js Scope'
addMember: 'filename' to 'module'
     javascript file require('./../lib/log')
importingModule /home/ltato/LiteScript_online_playground/playground/js/online.md
addMember: 'options' to 'exports'
addMember: 'verbose' to 'options'
addMember: 'warning' to 'options'
addMember: 'storeMessages' to 'options'
addMember: 'debug' to 'options'
addMember: 'enabled' to 'debug'
addMember: 'file' to 'debug'
addMember: 'messages' to 'exports'
addMember: 'length' to 'messages'
addMember: 'color' to 'exports'
addMember: 'normal' to 'color'
addMember: 'red' to 'color'
addMember: 'yellow' to 'color'
addMember: 'green' to 'color'
addMember: 'debug' to 'exports'
addMember: 'length' to 'debug'
addMember: 'name' to 'debug'
addMember: 'arguments' to 'debug'
addMember: 'caller' to 'debug'
addMember: 'prototype' to 'debug'
addMember: 'constructor' to 'prototype'
addMember: 'clear' to 'debug'
addMember: 'length' to 'clear'
addMember: 'name' to 'clear'
addMember: 'arguments' to 'clear'
addMember: 'caller' to 'clear'
addMember: 'prototype' to 'clear'
addMember: 'constructor' to 'prototype'
addMember: 'error' to 'exports'
addMember: 'length' to 'error'
addMember: 'name' to 'error'
addMember: 'arguments' to 'error'
addMember: 'caller' to 'error'
addMember: 'prototype' to 'error'
addMember: 'constructor' to 'prototype'
addMember: 'count' to 'error'
addMember: 'warning' to 'exports'
addMember: 'length' to 'warning'
addMember: 'name' to 'warning'
addMember: 'arguments' to 'warning'
addMember: 'caller' to 'warning'
addMember: 'prototype' to 'warning'
addMember: 'constructor' to 'prototype'
addMember: 'count' to 'warning'
addMember: 'message' to 'exports'
addMember: 'length' to 'message'
addMember: 'name' to 'message'
addMember: 'arguments' to 'message'
addMember: 'caller' to 'message'
addMember: 'prototype' to 'message'
addMember: 'constructor' to 'prototype'
addMember: 'extra' to 'exports'
addMember: 'length' to 'extra'
addMember: 'name' to 'extra'
addMember: 'arguments' to 'extra'
addMember: 'caller' to 'extra'
addMember: 'prototype' to 'extra'
addMember: 'constructor' to 'prototype'
addMember: 'getMessages' to 'exports'
addMember: 'length' to 'getMessages'
addMember: 'name' to 'getMessages'
addMember: 'arguments' to 'getMessages'
addMember: 'caller' to 'getMessages'
addMember: 'prototype' to 'getMessages'
addMember: 'constructor' to 'prototype'
addMember: 'throwControled' to 'exports'
addMember: 'length' to 'throwControled'
addMember: 'name' to 'throwControled'
addMember: 'arguments' to 'throwControled'
addMember: 'caller' to 'throwControled'
addMember: 'prototype' to 'throwControled'
addMember: 'constructor' to 'prototype'

     'online.md' imports './../lib/Compiler'
[object Object]
addToScope: 'module' to '/home/ltato/LiteScript_online_playground/playground/lib/Compiler.js Scope'
addMember: 'exports' to 'module'
addToScope: 'exports' to '/home/ltato/LiteScript_online_playground/playground/lib/Compiler.js Scope'
addMember: 'filename' to 'module'
     javascript file require('./../lib/Compiler')
importingModule /home/ltato/LiteScript_online_playground/playground/js/online.md
addMember: 'version' to 'exports'
addMember: 'compile' to 'exports'
addMember: 'length' to 'compile'
addMember: 'name' to 'compile'
addMember: 'arguments' to 'compile'
addMember: 'caller' to 'compile'
addMember: 'prototype' to 'compile'
addMember: 'constructor' to 'prototype'
addMember: 'compileProject' to 'exports'
addMember: 'length' to 'compileProject'
addMember: 'name' to 'compileProject'
addMember: 'arguments' to 'compileProject'
addMember: 'caller' to 'compileProject'
addMember: 'prototype' to 'compileProject'
addMember: 'constructor' to 'prototype'
addMember: 'compileModule' to 'exports'
addMember: 'length' to 'compileModule'
addMember: 'name' to 'compileModule'
addMember: 'arguments' to 'compileModule'
addMember: 'caller' to 'compileModule'
addMember: 'prototype' to 'compileModule'
addMember: 'constructor' to 'prototype'
addMember: 'registerRequireExtensions' to 'exports'
addMember: 'length' to 'registerRequireExtensions'
addMember: 'name' to 'registerRequireExtensions'
addMember: 'arguments' to 'registerRequireExtensions'
addMember: 'caller' to 'registerRequireExtensions'
addMember: 'prototype' to 'registerRequireExtensions'
addMember: 'constructor' to 'prototype'

Parsed OK
Validating
addMember: 'err' to 'Name Affinity'
- Process Declarations
addToScope: 'global' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addMember: 'exit' to '_*ObjectLiteral*1'
addMember: 'arguments' to 'FunctionDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'FunctionDeclaration Scope'
addToScope: 'code' to 'FunctionDeclaration Scope'
addToScope: 'log' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addMember: 'controled' to 'prototype'
addMember: 'soft' to 'prototype'
addToScope: 'LiteScript' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addToScope: 'CompareOrig_ed' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addToScope: 'CompareJs_ed' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addToScope: 'loadedFname' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addToScope: 'compileOptions' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addMember: 'extraComments' to '_*ObjectLiteral*2'
addMember: 'startsWith' to 'prototype'
addMember: 'arguments' to 'startsWith Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'startsWith Scope'
addToScope: 's' to 'startsWith Scope'
addMember: 'endsWith' to 'prototype'
addMember: 'arguments' to 'endsWith Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'endsWith Scope'
addToScope: 's' to 'endsWith Scope'
addToScope: 'OnLine_Main' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addMember: 'arguments' to 'OnLine_Main Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'OnLine_Main Scope'
addToScope: 'loadSample' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addMember: 'arguments' to 'loadSample Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'loadSample Scope'
addToScope: 'fname' to 'loadSample Scope'
addToScope: 'callback' to 'loadSample Scope'
addMember: 'arguments' to 'FunctionDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'FunctionDeclaration Scope'
addToScope: 'err' to 'FunctionDeclaration Scope'
addToScope: 'data' to 'FunctionDeclaration Scope'
addToScope: 'run' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addMember: 'arguments' to 'run Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'run Scope'
addToScope: 'liteSource' to 'run Scope'
addToScope: 'compiled' to 'run Scope'
addToScope: 'e' to 'ExceptionBlock Scope'
addToScope: 'linesLite' to 'run Scope'
addToScope: 'linesJs' to 'run Scope'
addToScope: 'loadExample' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addMember: 'arguments' to 'loadExample Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'loadExample Scope'
addToScope: 'fileName' to 'loadExample Scope'
addToScope: 'callback' to 'loadExample Scope'
addMember: 'url' to '_*ObjectLiteral*3'
addMember: 'success' to '_*ObjectLiteral*3'
addMember: 'arguments' to 'FunctionDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'FunctionDeclaration Scope'
addToScope: 'data' to 'FunctionDeclaration Scope'
addMember: 'error' to '_*ObjectLiteral*3'
addMember: 'arguments' to 'FunctionDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'FunctionDeclaration Scope'
addToScope: 'jqxhr' to 'FunctionDeclaration Scope'
addToScope: 'textStatus' to 'FunctionDeclaration Scope'
addToScope: 'errorThrown' to 'FunctionDeclaration Scope'
addToScope: 'alert' to 'Project Root Scope'
addToScope: 'mkEditor' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addMember: 'arguments' to 'mkEditor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'mkEditor Scope'
addToScope: 'divName' to 'mkEditor Scope'
addToScope: 'editor' to 'mkEditor Scope'
addToScope: 'session' to 'mkEditor Scope'
addToScope: 'addLines' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addMember: 'arguments' to 'addLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addLines Scope'
addToScope: 'lineArray' to 'addLines Scope'
addToScope: 'ed' to 'addLines Scope'
addToScope: 'a' to 'addLines Scope'
addToScope: 'syncEditors' to '/home/ltato/LiteScript_online_playground/playground/js/online.md Scope'
addMember: 'arguments' to 'syncEditors Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'syncEditors Scope'
addToScope: 'aceEditors' to 'syncEditors Scope'
addToScope: 'onOff' to 'syncEditors Scope'
addToScope: 'n' to 'ForStatement Scope'
addToScope: 'session1' to 'ForStatement Scope'
addToScope: 'session2' to 'ForStatement Scope'
addMember: 'arguments' to 'FunctionDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'FunctionDeclaration Scope'
addToScope: 'scroll' to 'FunctionDeclaration Scope'
addMember: 'arguments' to 'FunctionDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'FunctionDeclaration Scope'
addToScope: 'scroll' to 'FunctionDeclaration Scope'
addToScope: '$' to '/home/ltato/LiteScript_online_playground/playground/js/jQuery.interface.md Scope'
addMember: '$' to 'exports'
addToScope: 'jQuery' to '/home/ltato/LiteScript_online_playground/playground/js/jQuery.interface.md Scope'
addMember: 'jQuery' to 'exports'
addMember: 'prototype' to 'jQuery'
addMember: 'constructor' to 'prototype'
addMember: 'jQuery' to 'Name Affinity'
addMember: 'jquery' to 'prototype'
addMember: 'selector' to 'prototype'
addMember: 'length' to 'prototype'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'selector' to 'ConstructorDeclaration Scope'
addToScope: 'context' to 'ConstructorDeclaration Scope'
addMember: 'init' to 'prototype'
addMember: 'arguments' to 'init Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'init Scope'
addToScope: 'selector' to 'init Scope'
addToScope: 'context' to 'init Scope'
addToScope: 'rootjQuery' to 'init Scope'
addMember: 'acceptData' to 'prototype'
addMember: 'arguments' to 'acceptData Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'acceptData Scope'
addToScope: 'elem' to 'acceptData Scope'
addMember: 'access' to 'prototype'
addMember: 'arguments' to 'access Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'access Scope'
addToScope: 'elems' to 'access Scope'
addToScope: 'fn' to 'access Scope'
addToScope: 'key' to 'access Scope'
addToScope: 'value' to 'access Scope'
addToScope: 'chainable' to 'access Scope'
addToScope: 'emptyGet' to 'access Scope'
addToScope: 'raw' to 'access Scope'
addMember: 'add' to 'prototype'
addMember: 'arguments' to 'add Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'add Scope'
addToScope: 'selector' to 'add Scope'
addToScope: 'context' to 'add Scope'
addMember: 'addBack' to 'prototype'
addMember: 'arguments' to 'addBack Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addBack Scope'
addToScope: 'selector' to 'addBack Scope'
addMember: 'addClass' to 'prototype'
addMember: 'arguments' to 'addClass Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addClass Scope'
addToScope: 'value' to 'addClass Scope'
addMember: 'after' to 'prototype'
addMember: 'arguments' to 'after Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'after Scope'
addMember: 'ajax' to 'prototype'
addMember: 'arguments' to 'ajax Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ajax Scope'
addToScope: 'url' to 'ajax Scope'
addToScope: 'options' to 'ajax Scope'
addMember: 'ajaxComplete' to 'prototype'
addMember: 'arguments' to 'ajaxComplete Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ajaxComplete Scope'
addToScope: 'fn' to 'ajaxComplete Scope'
addMember: 'ajaxError' to 'prototype'
addMember: 'arguments' to 'ajaxError Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ajaxError Scope'
addToScope: 'fn' to 'ajaxError Scope'
addMember: 'ajaxPrefilter' to 'prototype'
addMember: 'arguments' to 'ajaxPrefilter Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ajaxPrefilter Scope'
addToScope: 'dataTypeExpression' to 'ajaxPrefilter Scope'
addToScope: 'func' to 'ajaxPrefilter Scope'
addMember: 'ajaxSend' to 'prototype'
addMember: 'arguments' to 'ajaxSend Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ajaxSend Scope'
addToScope: 'fn' to 'ajaxSend Scope'
addMember: 'ajaxSetup' to 'prototype'
addMember: 'arguments' to 'ajaxSetup Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ajaxSetup Scope'
addToScope: 'target' to 'ajaxSetup Scope'
addToScope: 'settings' to 'ajaxSetup Scope'
addMember: 'ajaxStart' to 'prototype'
addMember: 'arguments' to 'ajaxStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ajaxStart Scope'
addToScope: 'fn' to 'ajaxStart Scope'
addMember: 'ajaxStop' to 'prototype'
addMember: 'arguments' to 'ajaxStop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ajaxStop Scope'
addToScope: 'fn' to 'ajaxStop Scope'
addMember: 'ajaxSuccess' to 'prototype'
addMember: 'arguments' to 'ajaxSuccess Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ajaxSuccess Scope'
addToScope: 'fn' to 'ajaxSuccess Scope'
addMember: 'ajaxTransport' to 'prototype'
addMember: 'arguments' to 'ajaxTransport Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ajaxTransport Scope'
addToScope: 'dataTypeExpression' to 'ajaxTransport Scope'
addToScope: 'func' to 'ajaxTransport Scope'
addMember: 'andSelf' to 'prototype'
addMember: 'arguments' to 'andSelf Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'andSelf Scope'
addToScope: 'selector' to 'andSelf Scope'
addMember: 'animate' to 'prototype'
addMember: 'arguments' to 'animate Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'animate Scope'
addToScope: 'prop' to 'animate Scope'
addToScope: 'speed' to 'animate Scope'
addToScope: 'easing' to 'animate Scope'
addToScope: 'callback' to 'animate Scope'
addMember: 'Animation' to 'prototype'
addMember: 'arguments' to 'Animation Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'Animation Scope'
addToScope: 'elem' to 'Animation Scope'
addToScope: 'properties' to 'Animation Scope'
addToScope: 'options' to 'Animation Scope'
addMember: 'append' to 'prototype'
addMember: 'arguments' to 'append Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'append Scope'
addMember: 'appendTo' to 'prototype'
addMember: 'arguments' to 'appendTo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'appendTo Scope'
addToScope: 'selector' to 'appendTo Scope'
addMember: 'attr' to 'prototype'
addMember: 'arguments' to 'attr Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'attr Scope'
addToScope: 'elem' to 'attr Scope'
addToScope: 'name' to 'attr Scope'
addToScope: 'value' to 'attr Scope'
addMember: 'before' to 'prototype'
addMember: 'arguments' to 'before Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'before Scope'
addMember: 'bind' to 'prototype'
addMember: 'arguments' to 'bind Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'bind Scope'
addToScope: 'types' to 'bind Scope'
addToScope: 'data' to 'bind Scope'
addToScope: 'fn' to 'bind Scope'
addMember: 'blur' to 'prototype'
addMember: 'arguments' to 'blur Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'blur Scope'
addToScope: 'data' to 'blur Scope'
addToScope: 'fn' to 'blur Scope'
addMember: 'buildFragment' to 'prototype'
addMember: 'arguments' to 'buildFragment Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'buildFragment Scope'
addToScope: 'elems' to 'buildFragment Scope'
addToScope: 'context' to 'buildFragment Scope'
addToScope: 'scripts' to 'buildFragment Scope'
addToScope: 'selection' to 'buildFragment Scope'
addMember: 'Callbacks' to 'prototype'
addMember: 'arguments' to 'Callbacks Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'Callbacks Scope'
addToScope: 'options' to 'Callbacks Scope'
addMember: 'camelCase' to 'prototype'
addMember: 'arguments' to 'camelCase Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'camelCase Scope'
addToScope: 'string' to 'camelCase Scope'
addMember: 'change' to 'prototype'
addMember: 'arguments' to 'change Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'change Scope'
addToScope: 'data' to 'change Scope'
addToScope: 'fn' to 'change Scope'
addMember: 'children' to 'prototype'
addMember: 'arguments' to 'children Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'children Scope'
addToScope: 'until' to 'children Scope'
addToScope: 'selector' to 'children Scope'
addMember: 'cleanData' to 'prototype'
addMember: 'arguments' to 'cleanData Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'cleanData Scope'
addToScope: 'elems' to 'cleanData Scope'
addToScope: 'acceptData' to 'cleanData Scope'
addMember: 'clearQueue' to 'prototype'
addMember: 'arguments' to 'clearQueue Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clearQueue Scope'
addToScope: 'type' to 'clearQueue Scope'
addMember: 'click' to 'prototype'
addMember: 'arguments' to 'click Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'click Scope'
addToScope: 'data' to 'click Scope'
addToScope: 'fn' to 'click Scope'
addMember: 'clone' to 'prototype'
addMember: 'arguments' to 'clone Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clone Scope'
addToScope: 'elem' to 'clone Scope'
addToScope: 'dataAndEvents' to 'clone Scope'
addToScope: 'deepDataAndEvents' to 'clone Scope'
addMember: 'closest' to 'prototype'
addMember: 'arguments' to 'closest Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'closest Scope'
addToScope: 'selectors' to 'closest Scope'
addToScope: 'context' to 'closest Scope'
addMember: 'contains' to 'prototype'
addMember: 'arguments' to 'contains Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'contains Scope'
addToScope: 'context' to 'contains Scope'
addToScope: 'elem' to 'contains Scope'
addMember: 'contents' to 'prototype'
addMember: 'arguments' to 'contents Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'contents Scope'
addToScope: 'until' to 'contents Scope'
addToScope: 'selector' to 'contents Scope'
addMember: 'contextmenu' to 'prototype'
addMember: 'arguments' to 'contextmenu Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'contextmenu Scope'
addToScope: 'data' to 'contextmenu Scope'
addToScope: 'fn' to 'contextmenu Scope'
addMember: 'css' to 'prototype'
addMember: 'arguments' to 'css Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'css Scope'
addToScope: 'elem' to 'css Scope'
addToScope: 'name' to 'css Scope'
addToScope: 'extra' to 'css Scope'
addToScope: 'styles' to 'css Scope'
addMember: 'data' to 'prototype'
addMember: 'arguments' to 'data Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'data Scope'
addToScope: 'elem' to 'data Scope'
addToScope: 'name' to 'data Scope'
addToScope: 'data' to 'data Scope'
addMember: 'dblclick' to 'prototype'
addMember: 'arguments' to 'dblclick Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'dblclick Scope'
addToScope: 'data' to 'dblclick Scope'
addToScope: 'fn' to 'dblclick Scope'
addMember: 'Deferred' to 'prototype'
addMember: 'arguments' to 'Deferred Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'Deferred Scope'
addToScope: 'func' to 'Deferred Scope'
addMember: 'delay' to 'prototype'
addMember: 'arguments' to 'delay Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'delay Scope'
addToScope: 'time' to 'delay Scope'
addToScope: 'type' to 'delay Scope'
addMember: 'delegate' to 'prototype'
addMember: 'arguments' to 'delegate Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'delegate Scope'
addToScope: 'selector' to 'delegate Scope'
addToScope: 'types' to 'delegate Scope'
addToScope: 'data' to 'delegate Scope'
addToScope: 'fn' to 'delegate Scope'
addMember: 'dequeue' to 'prototype'
addMember: 'arguments' to 'dequeue Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'dequeue Scope'
addToScope: 'type' to 'dequeue Scope'
addMember: 'detach' to 'prototype'
addMember: 'arguments' to 'detach Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'detach Scope'
addToScope: 'selector' to 'detach Scope'
addMember: 'dir' to 'prototype'
addMember: 'arguments' to 'dir Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'dir Scope'
addToScope: 'elem' to 'dir Scope'
addToScope: 'dir' to 'dir Scope'
addToScope: 'until' to 'dir Scope'
addMember: 'domManip' to 'prototype'
addMember: 'arguments' to 'domManip Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'domManip Scope'
addToScope: 'args' to 'domManip Scope'
addToScope: 'table' to 'domManip Scope'
addToScope: 'callback' to 'domManip Scope'
addMember: 'each' to 'prototype'
addMember: 'arguments' to 'each Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'each Scope'
addToScope: 'obj' to 'each Scope'
addToScope: 'callback' to 'each Scope'
addToScope: 'args' to 'each Scope'
addMember: 'empty' to 'prototype'
addMember: 'arguments' to 'empty Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'empty Scope'
addMember: 'end' to 'prototype'
addMember: 'arguments' to 'end Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'end Scope'
addMember: 'eq' to 'prototype'
addMember: 'arguments' to 'eq Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'eq Scope'
addToScope: 'i' to 'eq Scope'
addMember: 'error' to 'prototype'
addMember: 'arguments' to 'error Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'error Scope'
addToScope: 'data' to 'error Scope'
addToScope: 'fn' to 'error Scope'
addMember: 'extend' to 'prototype'
addMember: 'arguments' to 'extend Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'extend Scope'
addMember: 'fadeIn' to 'prototype'
addMember: 'arguments' to 'fadeIn Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'fadeIn Scope'
addToScope: 'speed' to 'fadeIn Scope'
addToScope: 'easing' to 'fadeIn Scope'
addToScope: 'callback' to 'fadeIn Scope'
addMember: 'fadeOut' to 'prototype'
addMember: 'arguments' to 'fadeOut Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'fadeOut Scope'
addToScope: 'speed' to 'fadeOut Scope'
addToScope: 'easing' to 'fadeOut Scope'
addToScope: 'callback' to 'fadeOut Scope'
addMember: 'fadeTo' to 'prototype'
addMember: 'arguments' to 'fadeTo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'fadeTo Scope'
addToScope: 'speed' to 'fadeTo Scope'
addToScope: 'to' to 'fadeTo Scope'
addToScope: 'easing' to 'fadeTo Scope'
addToScope: 'callback' to 'fadeTo Scope'
addMember: 'fadeToggle' to 'prototype'
addMember: 'arguments' to 'fadeToggle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'fadeToggle Scope'
addToScope: 'speed' to 'fadeToggle Scope'
addToScope: 'easing' to 'fadeToggle Scope'
addToScope: 'callback' to 'fadeToggle Scope'
addMember: 'filter' to 'prototype'
addMember: 'arguments' to 'filter Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'filter Scope'
addToScope: 'expr' to 'filter Scope'
addToScope: 'elems' to 'filter Scope'
addToScope: 'notParam' to 'filter Scope'
addMember: 'find' to 'prototype'
addMember: 'arguments' to 'find Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'find Scope'
addToScope: 'selector' to 'find Scope'
addToScope: 'context' to 'find Scope'
addToScope: 'results' to 'find Scope'
addToScope: 'seed' to 'find Scope'
addMember: 'finish' to 'prototype'
addMember: 'arguments' to 'finish Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'finish Scope'
addToScope: 'type' to 'finish Scope'
addMember: 'first' to 'prototype'
addMember: 'arguments' to 'first Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'first Scope'
addMember: 'focus' to 'prototype'
addMember: 'arguments' to 'focus Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'focus Scope'
addToScope: 'data' to 'focus Scope'
addToScope: 'fn' to 'focus Scope'
addMember: 'focusin' to 'prototype'
addMember: 'arguments' to 'focusin Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'focusin Scope'
addToScope: 'data' to 'focusin Scope'
addToScope: 'fn' to 'focusin Scope'
addMember: 'focusout' to 'prototype'
addMember: 'arguments' to 'focusout Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'focusout Scope'
addToScope: 'data' to 'focusout Scope'
addToScope: 'fn' to 'focusout Scope'
addMember: 'fx' to 'prototype'
addMember: 'arguments' to 'fx Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'fx Scope'
addToScope: 'elem' to 'fx Scope'
addToScope: 'options' to 'fx Scope'
addToScope: 'prop' to 'fx Scope'
addToScope: 'end' to 'fx Scope'
addToScope: 'easing' to 'fx Scope'
addToScope: 'unit' to 'fx Scope'
addMember: 'get' to 'prototype'
addMember: 'arguments' to 'get Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'get Scope'
addToScope: 'num' to 'get Scope'
addMember: 'getJSON' to 'prototype'
addMember: 'arguments' to 'getJSON Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getJSON Scope'
addToScope: 'url' to 'getJSON Scope'
addToScope: 'data' to 'getJSON Scope'
addToScope: 'callback' to 'getJSON Scope'
addMember: 'getScript' to 'prototype'
addMember: 'arguments' to 'getScript Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getScript Scope'
addToScope: 'url' to 'getScript Scope'
addToScope: 'callback' to 'getScript Scope'
addMember: 'globalEval' to 'prototype'
addMember: 'arguments' to 'globalEval Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'globalEval Scope'
addToScope: 'data' to 'globalEval Scope'
addMember: 'grep' to 'prototype'
addMember: 'arguments' to 'grep Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'grep Scope'
addToScope: 'elems' to 'grep Scope'
addToScope: 'callback' to 'grep Scope'
addToScope: 'inv' to 'grep Scope'
addMember: 'has' to 'prototype'
addMember: 'arguments' to 'has Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'has Scope'
addToScope: 'target' to 'has Scope'
addMember: 'hasClass' to 'prototype'
addMember: 'arguments' to 'hasClass Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hasClass Scope'
addToScope: 'selector' to 'hasClass Scope'
addMember: 'hasData' to 'prototype'
addMember: 'arguments' to 'hasData Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hasData Scope'
addToScope: 'elem' to 'hasData Scope'
addMember: 'height' to 'prototype'
addMember: 'arguments' to 'height Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'height Scope'
addToScope: 'margin' to 'height Scope'
addToScope: 'value' to 'height Scope'
addMember: 'hide' to 'prototype'
addMember: 'arguments' to 'hide Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hide Scope'
addToScope: 'speed' to 'hide Scope'
addToScope: 'easing' to 'hide Scope'
addToScope: 'callback' to 'hide Scope'
addMember: 'holdReady' to 'prototype'
addMember: 'arguments' to 'holdReady Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'holdReady Scope'
addToScope: 'hold' to 'holdReady Scope'
addMember: 'hover' to 'prototype'
addMember: 'arguments' to 'hover Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hover Scope'
addToScope: 'fnOver' to 'hover Scope'
addToScope: 'fnOut' to 'hover Scope'
addMember: 'html' to 'prototype'
addMember: 'arguments' to 'html Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'html Scope'
addToScope: 'value' to 'html Scope'
addMember: 'inArray' to 'prototype'
addMember: 'arguments' to 'inArray Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'inArray Scope'
addToScope: 'elem' to 'inArray Scope'
addToScope: 'arr' to 'inArray Scope'
addToScope: 'i' to 'inArray Scope'
addMember: 'index' to 'prototype'
addMember: 'arguments' to 'index Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'index Scope'
addToScope: 'elem' to 'index Scope'
addMember: 'innerHeight' to 'prototype'
addMember: 'arguments' to 'innerHeight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'innerHeight Scope'
addToScope: 'margin' to 'innerHeight Scope'
addToScope: 'value' to 'innerHeight Scope'
addMember: 'innerWidth' to 'prototype'
addMember: 'arguments' to 'innerWidth Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'innerWidth Scope'
addToScope: 'margin' to 'innerWidth Scope'
addToScope: 'value' to 'innerWidth Scope'
addMember: 'insertAfter' to 'prototype'
addMember: 'arguments' to 'insertAfter Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'insertAfter Scope'
addToScope: 'selector' to 'insertAfter Scope'
addMember: 'insertBefore' to 'prototype'
addMember: 'arguments' to 'insertBefore Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'insertBefore Scope'
addToScope: 'selector' to 'insertBefore Scope'
addMember: 'is' to 'prototype'
addMember: 'arguments' to 'is Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'is Scope'
addToScope: 'selector' to 'is Scope'
addMember: 'isArray' to 'prototype'
addMember: 'arguments' to 'isArray Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isArray Scope'
addMember: 'isEmptyObject' to 'prototype'
addMember: 'arguments' to 'isEmptyObject Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isEmptyObject Scope'
addToScope: 'obj' to 'isEmptyObject Scope'
addMember: 'isFunction' to 'prototype'
addMember: 'arguments' to 'isFunction Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isFunction Scope'
addToScope: 'obj' to 'isFunction Scope'
addMember: 'isNumeric' to 'prototype'
addMember: 'arguments' to 'isNumeric Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isNumeric Scope'
addToScope: 'obj' to 'isNumeric Scope'
addMember: 'isPlainObject' to 'prototype'
addMember: 'arguments' to 'isPlainObject Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isPlainObject Scope'
addToScope: 'obj' to 'isPlainObject Scope'
addMember: 'isWindow' to 'prototype'
addMember: 'arguments' to 'isWindow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isWindow Scope'
addToScope: 'obj' to 'isWindow Scope'
addMember: 'isXMLDoc' to 'prototype'
addMember: 'arguments' to 'isXMLDoc Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isXMLDoc Scope'
addToScope: 'elem' to 'isXMLDoc Scope'
addMember: 'keydown' to 'prototype'
addMember: 'arguments' to 'keydown Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'keydown Scope'
addToScope: 'data' to 'keydown Scope'
addToScope: 'fn' to 'keydown Scope'
addMember: 'keypress' to 'prototype'
addMember: 'arguments' to 'keypress Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'keypress Scope'
addToScope: 'data' to 'keypress Scope'
addToScope: 'fn' to 'keypress Scope'
addMember: 'keyup' to 'prototype'
addMember: 'arguments' to 'keyup Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'keyup Scope'
addToScope: 'data' to 'keyup Scope'
addToScope: 'fn' to 'keyup Scope'
addMember: 'last' to 'prototype'
addMember: 'arguments' to 'last Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'last Scope'
addMember: 'load' to 'prototype'
addMember: 'arguments' to 'load Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'load Scope'
addToScope: 'url' to 'load Scope'
addToScope: 'params' to 'load Scope'
addToScope: 'callback' to 'load Scope'
addMember: 'makeArray' to 'prototype'
addMember: 'arguments' to 'makeArray Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'makeArray Scope'
addToScope: 'arr' to 'makeArray Scope'
addToScope: 'results' to 'makeArray Scope'
addMember: 'map' to 'prototype'
addMember: 'arguments' to 'map Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'map Scope'
addToScope: 'elems' to 'map Scope'
addToScope: 'callback' to 'map Scope'
addToScope: 'arg' to 'map Scope'
addMember: 'merge' to 'prototype'
addMember: 'arguments' to 'merge Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'merge Scope'
addToScope: 'first' to 'merge Scope'
addToScope: 'second' to 'merge Scope'
addMember: 'mousedown' to 'prototype'
addMember: 'arguments' to 'mousedown Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'mousedown Scope'
addToScope: 'data' to 'mousedown Scope'
addToScope: 'fn' to 'mousedown Scope'
addMember: 'mouseenter' to 'prototype'
addMember: 'arguments' to 'mouseenter Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'mouseenter Scope'
addToScope: 'data' to 'mouseenter Scope'
addToScope: 'fn' to 'mouseenter Scope'
addMember: 'mouseleave' to 'prototype'
addMember: 'arguments' to 'mouseleave Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'mouseleave Scope'
addToScope: 'data' to 'mouseleave Scope'
addToScope: 'fn' to 'mouseleave Scope'
addMember: 'mousemove' to 'prototype'
addMember: 'arguments' to 'mousemove Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'mousemove Scope'
addToScope: 'data' to 'mousemove Scope'
addToScope: 'fn' to 'mousemove Scope'
addMember: 'mouseout' to 'prototype'
addMember: 'arguments' to 'mouseout Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'mouseout Scope'
addToScope: 'data' to 'mouseout Scope'
addToScope: 'fn' to 'mouseout Scope'
addMember: 'mouseover' to 'prototype'
addMember: 'arguments' to 'mouseover Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'mouseover Scope'
addToScope: 'data' to 'mouseover Scope'
addToScope: 'fn' to 'mouseover Scope'
addMember: 'mouseup' to 'prototype'
addMember: 'arguments' to 'mouseup Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'mouseup Scope'
addToScope: 'data' to 'mouseup Scope'
addToScope: 'fn' to 'mouseup Scope'
addMember: 'next' to 'prototype'
addMember: 'arguments' to 'next Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'next Scope'
addToScope: 'until' to 'next Scope'
addToScope: 'selector' to 'next Scope'
addMember: 'nextAll' to 'prototype'
addMember: 'arguments' to 'nextAll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'nextAll Scope'
addToScope: 'until' to 'nextAll Scope'
addToScope: 'selector' to 'nextAll Scope'
addMember: 'nextUntil' to 'prototype'
addMember: 'arguments' to 'nextUntil Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'nextUntil Scope'
addToScope: 'until' to 'nextUntil Scope'
addToScope: 'selector' to 'nextUntil Scope'
addMember: 'noConflict' to 'prototype'
addMember: 'arguments' to 'noConflict Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'noConflict Scope'
addToScope: 'deep' to 'noConflict Scope'
addMember: 'nodeName' to 'prototype'
addMember: 'arguments' to 'nodeName Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'nodeName Scope'
addToScope: 'elem' to 'nodeName Scope'
addToScope: 'name' to 'nodeName Scope'
addMember: 'noop' to 'prototype'
addMember: 'arguments' to 'noop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'noop Scope'
addMember: 'not' to 'prototype'
addMember: 'arguments' to 'not Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'not Scope'
addToScope: 'selector' to 'not Scope'
addMember: 'now' to 'prototype'
addMember: 'arguments' to 'now Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'now Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'types' to 'off Scope'
addToScope: 'selector' to 'off Scope'
addToScope: 'fn' to 'off Scope'
addMember: 'offset' to 'prototype'
addMember: 'arguments' to 'offset Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'offset Scope'
addToScope: 'options' to 'offset Scope'
addMember: 'offsetParent' to 'prototype'
addMember: 'arguments' to 'offsetParent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'offsetParent Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'types' to 'on Scope'
addToScope: 'selector' to 'on Scope'
addToScope: 'data' to 'on Scope'
addToScope: 'fn' to 'on Scope'
addToScope: 'one' to 'on Scope'
addMember: 'one' to 'prototype'
addMember: 'arguments' to 'one Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'one Scope'
addToScope: 'types' to 'one Scope'
addToScope: 'selector' to 'one Scope'
addToScope: 'data' to 'one Scope'
addToScope: 'fn' to 'one Scope'
addMember: 'outerHeight' to 'prototype'
addMember: 'arguments' to 'outerHeight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'outerHeight Scope'
addToScope: 'margin' to 'outerHeight Scope'
addToScope: 'value' to 'outerHeight Scope'
addMember: 'outerWidth' to 'prototype'
addMember: 'arguments' to 'outerWidth Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'outerWidth Scope'
addToScope: 'margin' to 'outerWidth Scope'
addToScope: 'value' to 'outerWidth Scope'
addMember: 'param' to 'prototype'
addMember: 'arguments' to 'param Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'param Scope'
addToScope: 'a' to 'param Scope'
addToScope: 'traditional' to 'param Scope'
addMember: 'parent' to 'prototype'
addMember: 'arguments' to 'parent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'parent Scope'
addToScope: 'until' to 'parent Scope'
addToScope: 'selector' to 'parent Scope'
addMember: 'parents' to 'prototype'
addMember: 'arguments' to 'parents Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'parents Scope'
addToScope: 'until' to 'parents Scope'
addToScope: 'selector' to 'parents Scope'
addMember: 'parentsUntil' to 'prototype'
addMember: 'arguments' to 'parentsUntil Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'parentsUntil Scope'
addToScope: 'until' to 'parentsUntil Scope'
addToScope: 'selector' to 'parentsUntil Scope'
addMember: 'parseHTML' to 'prototype'
addMember: 'arguments' to 'parseHTML Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'parseHTML Scope'
addToScope: 'data' to 'parseHTML Scope'
addToScope: 'context' to 'parseHTML Scope'
addToScope: 'keepScripts' to 'parseHTML Scope'
addMember: 'parseJSON' to 'prototype'
addMember: 'arguments' to 'parseJSON Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'parseJSON Scope'
addToScope: 'data' to 'parseJSON Scope'
addMember: 'parseXML' to 'prototype'
addMember: 'arguments' to 'parseXML Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'parseXML Scope'
addToScope: 'data' to 'parseXML Scope'
addMember: 'position' to 'prototype'
addMember: 'arguments' to 'position Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'position Scope'
addMember: 'post' to 'prototype'
addMember: 'arguments' to 'post Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'post Scope'
addToScope: 'url' to 'post Scope'
addToScope: 'data' to 'post Scope'
addToScope: 'callback' to 'post Scope'
addToScope: 'type' to 'post Scope'
addMember: 'prepend' to 'prototype'
addMember: 'arguments' to 'prepend Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'prepend Scope'
addMember: 'prependTo' to 'prototype'
addMember: 'arguments' to 'prependTo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'prependTo Scope'
addToScope: 'selector' to 'prependTo Scope'
addMember: 'prev' to 'prototype'
addMember: 'arguments' to 'prev Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'prev Scope'
addToScope: 'until' to 'prev Scope'
addToScope: 'selector' to 'prev Scope'
addMember: 'prevAll' to 'prototype'
addMember: 'arguments' to 'prevAll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'prevAll Scope'
addToScope: 'until' to 'prevAll Scope'
addToScope: 'selector' to 'prevAll Scope'
addMember: 'prevUntil' to 'prototype'
addMember: 'arguments' to 'prevUntil Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'prevUntil Scope'
addToScope: 'until' to 'prevUntil Scope'
addToScope: 'selector' to 'prevUntil Scope'
addMember: 'promise' to 'prototype'
addMember: 'arguments' to 'promise Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'promise Scope'
addToScope: 'type' to 'promise Scope'
addToScope: 'obj' to 'promise Scope'
addMember: 'prop' to 'prototype'
addMember: 'arguments' to 'prop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'prop Scope'
addToScope: 'elem' to 'prop Scope'
addToScope: 'name' to 'prop Scope'
addToScope: 'value' to 'prop Scope'
addMember: 'proxy' to 'prototype'
addMember: 'arguments' to 'proxy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'proxy Scope'
addToScope: 'fn' to 'proxy Scope'
addToScope: 'context' to 'proxy Scope'
addMember: 'push' to 'prototype'
addMember: 'arguments' to 'push Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'push Scope'
addMember: 'pushStack' to 'prototype'
addMember: 'arguments' to 'pushStack Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'pushStack Scope'
addToScope: 'elems' to 'pushStack Scope'
addMember: 'queue' to 'prototype'
addMember: 'arguments' to 'queue Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'queue Scope'
addToScope: 'elem' to 'queue Scope'
addToScope: 'type' to 'queue Scope'
addToScope: 'data' to 'queue Scope'
addMember: 'ready' to 'prototype'
addMember: 'arguments' to 'ready Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ready Scope'
addToScope: 'fn' to 'ready Scope'
addMember: 'remove' to 'prototype'
addMember: 'arguments' to 'remove Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'remove Scope'
addToScope: 'selector' to 'remove Scope'
addToScope: 'keepData' to 'remove Scope'
addMember: 'removeAttr' to 'prototype'
addMember: 'arguments' to 'removeAttr Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAttr Scope'
addToScope: 'elem' to 'removeAttr Scope'
addToScope: 'value' to 'removeAttr Scope'
addMember: 'removeClass' to 'prototype'
addMember: 'arguments' to 'removeClass Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeClass Scope'
addToScope: 'value' to 'removeClass Scope'
addMember: 'removeData' to 'prototype'
addMember: 'arguments' to 'removeData Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeData Scope'
addToScope: 'elem' to 'removeData Scope'
addToScope: 'name' to 'removeData Scope'
addMember: 'removeEvent' to 'prototype'
addMember: 'arguments' to 'removeEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEvent Scope'
addToScope: 'elem' to 'removeEvent Scope'
addToScope: 'type' to 'removeEvent Scope'
addToScope: 'handle' to 'removeEvent Scope'
addMember: 'removeProp' to 'prototype'
addMember: 'arguments' to 'removeProp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeProp Scope'
addToScope: 'name' to 'removeProp Scope'
addMember: 'replaceAll' to 'prototype'
addMember: 'arguments' to 'replaceAll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'replaceAll Scope'
addToScope: 'selector' to 'replaceAll Scope'
addMember: 'replaceWith' to 'prototype'
addMember: 'arguments' to 'replaceWith Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'replaceWith Scope'
addToScope: 'value' to 'replaceWith Scope'
addMember: 'resize' to 'prototype'
addMember: 'arguments' to 'resize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'resize Scope'
addToScope: 'data' to 'resize Scope'
addToScope: 'fn' to 'resize Scope'
addMember: 'scroll' to 'prototype'
addMember: 'arguments' to 'scroll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scroll Scope'
addToScope: 'data' to 'scroll Scope'
addToScope: 'fn' to 'scroll Scope'
addMember: 'scrollLeft' to 'prototype'
addMember: 'arguments' to 'scrollLeft Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollLeft Scope'
addToScope: 'val' to 'scrollLeft Scope'
addMember: 'scrollTop' to 'prototype'
addMember: 'arguments' to 'scrollTop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollTop Scope'
addToScope: 'val' to 'scrollTop Scope'
addMember: 'select' to 'prototype'
addMember: 'arguments' to 'select Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'select Scope'
addToScope: 'data' to 'select Scope'
addToScope: 'fn' to 'select Scope'
addMember: 'serialize' to 'prototype'
addMember: 'arguments' to 'serialize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'serialize Scope'
addMember: 'serializeArray' to 'prototype'
addMember: 'arguments' to 'serializeArray Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'serializeArray Scope'
addMember: 'show' to 'prototype'
addMember: 'arguments' to 'show Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'show Scope'
addToScope: 'speed' to 'show Scope'
addToScope: 'easing' to 'show Scope'
addToScope: 'callback' to 'show Scope'
addMember: 'sibling' to 'prototype'
addMember: 'arguments' to 'sibling Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'sibling Scope'
addToScope: 'n' to 'sibling Scope'
addToScope: 'elem' to 'sibling Scope'
addMember: 'siblings' to 'prototype'
addMember: 'arguments' to 'siblings Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'siblings Scope'
addToScope: 'until' to 'siblings Scope'
addToScope: 'selector' to 'siblings Scope'
addMember: 'size' to 'prototype'
addMember: 'arguments' to 'size Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'size Scope'
addMember: 'slice' to 'prototype'
addMember: 'arguments' to 'slice Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'slice Scope'
addMember: 'slideDown' to 'prototype'
addMember: 'arguments' to 'slideDown Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'slideDown Scope'
addToScope: 'speed' to 'slideDown Scope'
addToScope: 'easing' to 'slideDown Scope'
addToScope: 'callback' to 'slideDown Scope'
addMember: 'slideToggle' to 'prototype'
addMember: 'arguments' to 'slideToggle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'slideToggle Scope'
addToScope: 'speed' to 'slideToggle Scope'
addToScope: 'easing' to 'slideToggle Scope'
addToScope: 'callback' to 'slideToggle Scope'
addMember: 'slideUp' to 'prototype'
addMember: 'arguments' to 'slideUp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'slideUp Scope'
addToScope: 'speed' to 'slideUp Scope'
addToScope: 'easing' to 'slideUp Scope'
addToScope: 'callback' to 'slideUp Scope'
addMember: 'sort' to 'prototype'
addMember: 'arguments' to 'sort Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'sort Scope'
addMember: 'speed' to 'prototype'
addMember: 'arguments' to 'speed Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'speed Scope'
addToScope: 'speed' to 'speed Scope'
addToScope: 'easing' to 'speed Scope'
addToScope: 'fn' to 'speed Scope'
addMember: 'splice' to 'prototype'
addMember: 'arguments' to 'splice Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'splice Scope'
addMember: 'stop' to 'prototype'
addMember: 'arguments' to 'stop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'stop Scope'
addToScope: 'type' to 'stop Scope'
addToScope: 'clearQueue' to 'stop Scope'
addToScope: 'gotoEnd' to 'stop Scope'
addMember: 'style' to 'prototype'
addMember: 'arguments' to 'style Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'style Scope'
addToScope: 'elem' to 'style Scope'
addToScope: 'name' to 'style Scope'
addToScope: 'value' to 'style Scope'
addToScope: 'extra' to 'style Scope'
addMember: 'submit' to 'prototype'
addMember: 'arguments' to 'submit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'submit Scope'
addToScope: 'data' to 'submit Scope'
addToScope: 'fn' to 'submit Scope'
addMember: 'swap' to 'prototype'
addMember: 'arguments' to 'swap Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'swap Scope'
addToScope: 'elem' to 'swap Scope'
addToScope: 'options' to 'swap Scope'
addToScope: 'callback' to 'swap Scope'
addToScope: 'args' to 'swap Scope'
addMember: 'text' to 'prototype'
addMember: 'arguments' to 'text Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'text Scope'
addToScope: 'elem' to 'text Scope'
addMember: 'toArray' to 'prototype'
addMember: 'arguments' to 'toArray Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toArray Scope'
addMember: 'toggle' to 'prototype'
addMember: 'arguments' to 'toggle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toggle Scope'
addToScope: 'speed' to 'toggle Scope'
addToScope: 'easing' to 'toggle Scope'
addToScope: 'callback' to 'toggle Scope'
addMember: 'toggleClass' to 'prototype'
addMember: 'arguments' to 'toggleClass Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toggleClass Scope'
addToScope: 'value' to 'toggleClass Scope'
addToScope: 'stateVal' to 'toggleClass Scope'
addMember: 'trigger' to 'prototype'
addMember: 'arguments' to 'trigger Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'trigger Scope'
addToScope: 'type' to 'trigger Scope'
addToScope: 'data' to 'trigger Scope'
addMember: 'triggerHandler' to 'prototype'
addMember: 'arguments' to 'triggerHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'triggerHandler Scope'
addToScope: 'type' to 'triggerHandler Scope'
addToScope: 'data' to 'triggerHandler Scope'
addMember: 'trim' to 'prototype'
addMember: 'arguments' to 'trim Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'trim Scope'
addToScope: 'text' to 'trim Scope'
addMember: 'Tween' to 'prototype'
addMember: 'arguments' to 'Tween Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'Tween Scope'
addToScope: 'elem' to 'Tween Scope'
addToScope: 'options' to 'Tween Scope'
addToScope: 'prop' to 'Tween Scope'
addToScope: 'end' to 'Tween Scope'
addToScope: 'easing' to 'Tween Scope'
addMember: 'type' to 'prototype'
addMember: 'arguments' to 'type Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'type Scope'
addToScope: 'obj' to 'type Scope'
addMember: 'unbind' to 'prototype'
addMember: 'arguments' to 'unbind Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'unbind Scope'
addToScope: 'types' to 'unbind Scope'
addToScope: 'fn' to 'unbind Scope'
addMember: 'undelegate' to 'prototype'
addMember: 'arguments' to 'undelegate Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'undelegate Scope'
addToScope: 'selector' to 'undelegate Scope'
addToScope: 'types' to 'undelegate Scope'
addToScope: 'fn' to 'undelegate Scope'
addMember: 'unique' to 'prototype'
addMember: 'arguments' to 'unique Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'unique Scope'
addToScope: 'results' to 'unique Scope'
addMember: 'unload' to 'prototype'
addMember: 'arguments' to 'unload Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'unload Scope'
addToScope: 'data' to 'unload Scope'
addToScope: 'fn' to 'unload Scope'
addMember: 'unwrap' to 'prototype'
addMember: 'arguments' to 'unwrap Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'unwrap Scope'
addMember: 'val' to 'prototype'
addMember: 'arguments' to 'val Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'val Scope'
addToScope: 'value' to 'val Scope'
addMember: 'when' to 'prototype'
addMember: 'arguments' to 'when Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'when Scope'
addToScope: 'subordinate' to 'when Scope'
addMember: 'width' to 'prototype'
addMember: 'arguments' to 'width Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'width Scope'
addToScope: 'margin' to 'width Scope'
addToScope: 'value' to 'width Scope'
addMember: 'wrap' to 'prototype'
addMember: 'arguments' to 'wrap Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'wrap Scope'
addToScope: 'html' to 'wrap Scope'
addMember: 'wrapAll' to 'prototype'
addMember: 'arguments' to 'wrapAll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'wrapAll Scope'
addToScope: 'html' to 'wrapAll Scope'
addMember: 'wrapInner' to 'prototype'
addMember: 'arguments' to 'wrapInner Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'wrapInner Scope'
addToScope: 'html' to 'wrapInner Scope'
addMember: 'fn' to 'jQuery'
addToScope: 'Event' to '/home/ltato/LiteScript_online_playground/playground/js/jQuery.interface.md Scope'
addMember: 'prototype' to 'Event'
addMember: 'constructor' to 'prototype'
addMember: 'Event' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'src' to 'ConstructorDeclaration Scope'
addToScope: 'props' to 'ConstructorDeclaration Scope'
addMember: 'isDefaultPrevented' to 'prototype'
addMember: 'arguments' to 'isDefaultPrevented Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isDefaultPrevented Scope'
addMember: 'isPropagationStopped' to 'prototype'
addMember: 'arguments' to 'isPropagationStopped Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isPropagationStopped Scope'
addMember: 'isImmediatePropagationStopped' to 'prototype'
addMember: 'arguments' to 'isImmediatePropagationStopped Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isImmediatePropagationStopped Scope'
addMember: 'preventDefault' to 'prototype'
addMember: 'arguments' to 'preventDefault Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'preventDefault Scope'
addMember: 'stopPropagation' to 'prototype'
addMember: 'arguments' to 'stopPropagation Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'stopPropagation Scope'
addMember: 'stopImmediatePropagation' to 'prototype'
addMember: 'arguments' to 'stopImmediatePropagation Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'stopImmediatePropagation Scope'
addToScope: 'window' to '/home/ltato/LiteScript_online_playground/playground/js/Document.interface.md Scope'
addMember: 'window' to 'exports'
addToScope: 'document' to '/home/ltato/LiteScript_online_playground/playground/js/Document.interface.md Scope'
addMember: 'document' to 'exports'
addToScope: 'Window' to '/home/ltato/LiteScript_online_playground/playground/js/Document.interface.md Scope'
addMember: 'Window' to 'exports'
addMember: 'prototype' to 'Window'
addMember: 'constructor' to 'prototype'
addMember: 'Window' to 'Name Affinity'
addMember: 'applicationCache' to 'prototype'
addMember: 'closed' to 'prototype'
addMember: 'content' to 'prototype'
addMember: 'document' to 'prototype'
addMember: 'frameElement' to 'prototype'
addMember: 'frames' to 'prototype'
addMember: 'fullScreen' to 'prototype'
addMember: 'gamepadconnected' to 'prototype'
addMember: 'gamepaddisconnected' to 'prototype'
addMember: 'history' to 'prototype'
addMember: 'innerHeight' to 'prototype'
addMember: 'innerWidth' to 'prototype'
addMember: 'length' to 'prototype'
addMember: 'location' to 'prototype'
addMember: 'locationbar' to 'prototype'
addMember: 'menubar' to 'prototype'
addMember: 'name' to 'prototype'
addMember: 'navigator' to 'prototype'
addMember: 'onafterprint' to 'prototype'
addMember: 'onbeforeprint' to 'prototype'
addMember: 'onbeforeunload' to 'prototype'
addMember: 'onblur' to 'prototype'
addMember: 'onchange' to 'prototype'
addMember: 'onclick' to 'prototype'
addMember: 'ondevicelight' to 'prototype'
addMember: 'ondevicemotion' to 'prototype'
addMember: 'ondeviceorientation' to 'prototype'
addMember: 'ondeviceproximity' to 'prototype'
addMember: 'ondragdrop' to 'prototype'
addMember: 'onfocus' to 'prototype'
addMember: 'onhashchange' to 'prototype'
addMember: 'onkeydown' to 'prototype'
addMember: 'onkeypress' to 'prototype'
addMember: 'onkeyup' to 'prototype'
addMember: 'onmousedown' to 'prototype'
addMember: 'onmousemove' to 'prototype'
addMember: 'onmouseout' to 'prototype'
addMember: 'onmouseover' to 'prototype'
addMember: 'onmouseup' to 'prototype'
addMember: 'onpaint' to 'prototype'
addMember: 'onpopstate' to 'prototype'
addMember: 'onreset' to 'prototype'
addMember: 'onresize' to 'prototype'
addMember: 'onscroll' to 'prototype'
addMember: 'onunload' to 'prototype'
addMember: 'opener' to 'prototype'
addMember: 'outerHeight' to 'prototype'
addMember: 'outerWidth' to 'prototype'
addMember: 'parent' to 'prototype'
addMember: 'performance' to 'prototype'
addMember: 'personalbar' to 'prototype'
addMember: 'screen' to 'prototype'
addMember: 'screenX' to 'prototype'
addMember: 'screenY' to 'prototype'
addMember: 'scrollbars' to 'prototype'
addMember: 'scrollMaxX' to 'prototype'
addMember: 'scrollMaxY' to 'prototype'
addMember: 'scrollX' to 'prototype'
addMember: 'scrollY' to 'prototype'
addMember: 'self' to 'prototype'
addMember: 'sidebar' to 'prototype'
addMember: 'status' to 'prototype'
addMember: 'statusbar' to 'prototype'
addMember: 'toolbar' to 'prototype'
addMember: 'top' to 'prototype'
addMember: 'window' to 'prototype'
addMember: 'XPCSafeJSObjectWrapper' to 'prototype'
addMember: 'QueryInterface' to 'prototype'
addMember: 'arguments' to 'QueryInterface Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'QueryInterface Scope'
addMember: 'back' to 'prototype'
addMember: 'arguments' to 'back Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'back Scope'
addMember: 'blur' to 'prototype'
addMember: 'arguments' to 'blur Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'blur Scope'
addMember: 'btoa' to 'prototype'
addMember: 'arguments' to 'btoa Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'btoa Scope'
addMember: 'captureEvents' to 'prototype'
addMember: 'arguments' to 'captureEvents Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'captureEvents Scope'
addMember: 'clearImmediate' to 'prototype'
addMember: 'arguments' to 'clearImmediate Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clearImmediate Scope'
addMember: 'clearTimeout' to 'prototype'
addMember: 'arguments' to 'clearTimeout Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clearTimeout Scope'
addMember: 'close' to 'prototype'
addMember: 'arguments' to 'close Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'close Scope'
addMember: 'confirm' to 'prototype'
addMember: 'arguments' to 'confirm Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'confirm Scope'
addMember: 'dispatchEvent' to 'prototype'
addMember: 'arguments' to 'dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'dispatchEvent Scope'
addMember: 'dump' to 'prototype'
addMember: 'arguments' to 'dump Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'dump Scope'
addMember: 'escape' to 'prototype'
addMember: 'arguments' to 'escape Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'escape Scope'
addMember: 'find' to 'prototype'
addMember: 'arguments' to 'find Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'find Scope'
addMember: 'focus' to 'prototype'
addMember: 'arguments' to 'focus Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'focus Scope'
addMember: 'forward' to 'prototype'
addMember: 'arguments' to 'forward Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'forward Scope'
addMember: 'getComputedStyle' to 'prototype'
addMember: 'arguments' to 'getComputedStyle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getComputedStyle Scope'
addMember: 'home' to 'prototype'
addMember: 'arguments' to 'home Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'home Scope'
addMember: 'matchMedia' to 'prototype'
addMember: 'arguments' to 'matchMedia Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'matchMedia Scope'
addMember: 'minimize' to 'prototype'
addMember: 'arguments' to 'minimize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'minimize Scope'
addMember: 'moveBy' to 'prototype'
addMember: 'arguments' to 'moveBy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveBy Scope'
addMember: 'moveTo' to 'prototype'
addMember: 'arguments' to 'moveTo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveTo Scope'
addMember: 'onuserproximity' to 'prototype'
addMember: 'arguments' to 'onuserproximity Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onuserproximity Scope'
addMember: 'openDialog' to 'prototype'
addMember: 'arguments' to 'openDialog Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'openDialog Scope'
addMember: 'print' to 'prototype'
addMember: 'arguments' to 'print Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'print Scope'
addMember: 'releaseEvents' to 'prototype'
addMember: 'arguments' to 'releaseEvents Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'releaseEvents Scope'
addMember: 'resizeBy' to 'prototype'
addMember: 'arguments' to 'resizeBy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'resizeBy Scope'
addMember: 'resizeTo' to 'prototype'
addMember: 'arguments' to 'resizeTo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'resizeTo Scope'
addMember: 'restore' to 'prototype'
addMember: 'arguments' to 'restore Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'restore Scope'
addMember: 'scroll' to 'prototype'
addMember: 'arguments' to 'scroll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scroll Scope'
addMember: 'scrollByLines' to 'prototype'
addMember: 'arguments' to 'scrollByLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollByLines Scope'
addMember: 'scrollTo' to 'prototype'
addMember: 'arguments' to 'scrollTo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollTo Scope'
addMember: 'setCursor' to 'prototype'
addMember: 'arguments' to 'setCursor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setCursor Scope'
addMember: 'setImmediate' to 'prototype'
addMember: 'arguments' to 'setImmediate Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setImmediate Scope'
addMember: 'setInterval' to 'prototype'
addMember: 'arguments' to 'setInterval Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setInterval Scope'
addMember: 'setTimeout' to 'prototype'
addMember: 'arguments' to 'setTimeout Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setTimeout Scope'
addMember: 'showModalDialog' to 'prototype'
addMember: 'arguments' to 'showModalDialog Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'showModalDialog Scope'
addMember: 'sizeToContent' to 'prototype'
addMember: 'arguments' to 'sizeToContent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'sizeToContent Scope'
addMember: 'stop' to 'prototype'
addMember: 'arguments' to 'stop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'stop Scope'
addMember: 'unescape' to 'prototype'
addMember: 'arguments' to 'unescape Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'unescape Scope'
addMember: 'updateCommands' to 'prototype'
addMember: 'arguments' to 'updateCommands Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'updateCommands Scope'
addMember: 'cancelAnimationFrame' to 'prototype'
addMember: 'arguments' to 'cancelAnimationFrame Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'cancelAnimationFrame Scope'
addMember: 'clearInterval' to 'prototype'
addMember: 'arguments' to 'clearInterval Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clearInterval Scope'
addMember: 'getAttention' to 'prototype'
addMember: 'arguments' to 'getAttention Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAttention Scope'
addMember: 'getDefaultComputedStyle' to 'prototype'
addMember: 'arguments' to 'getDefaultComputedStyle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getDefaultComputedStyle Scope'
addMember: 'getSelection' to 'prototype'
addMember: 'arguments' to 'getSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getSelection Scope'
addMember: 'importDialog' to 'prototype'
addMember: 'arguments' to 'importDialog Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'importDialog Scope'
addMember: 'open' to 'prototype'
addMember: 'arguments' to 'open Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'open Scope'
addMember: 'postMessage' to 'prototype'
addMember: 'arguments' to 'postMessage Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'postMessage Scope'
addMember: 'prompt' to 'prototype'
addMember: 'arguments' to 'prompt Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'prompt Scope'
addMember: 'prompter' to 'prototype'
addMember: 'arguments' to 'prompter Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'prompter Scope'
addMember: 'requestAnimationFrame' to 'prototype'
addMember: 'arguments' to 'requestAnimationFrame Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'requestAnimationFrame Scope'
addMember: 'routeEvent' to 'prototype'
addMember: 'arguments' to 'routeEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'routeEvent Scope'
addMember: 'scrollBy' to 'prototype'
addMember: 'arguments' to 'scrollBy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollBy Scope'
addMember: 'scrollByPages' to 'prototype'
addMember: 'arguments' to 'scrollByPages Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollByPages Scope'
addToScope: 'Location' to '/home/ltato/LiteScript_online_playground/playground/js/Document.interface.md Scope'
addMember: 'Location' to 'exports'
addMember: 'prototype' to 'Location'
addMember: 'constructor' to 'prototype'
addMember: 'Location' to 'Name Affinity'
addMember: 'ancestorOrigins' to 'prototype'
addMember: 'hash' to 'prototype'
addMember: 'host' to 'prototype'
addMember: 'hostname' to 'prototype'
addMember: 'href' to 'prototype'
addMember: 'origin' to 'prototype'
addMember: 'pathname' to 'prototype'
addMember: 'port' to 'prototype'
addMember: 'protocol' to 'prototype'
addMember: 'search' to 'prototype'
addMember: 'assign' to 'prototype'
addMember: 'arguments' to 'assign Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'assign Scope'
addMember: 'reload' to 'prototype'
addMember: 'arguments' to 'reload Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'reload Scope'
addMember: 'replace' to 'prototype'
addMember: 'arguments' to 'replace Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'replace Scope'
addMember: 'toString' to 'prototype'
addMember: 'arguments' to 'toString Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toString Scope'
addMember: 'valueOf' to 'prototype'
addMember: 'arguments' to 'valueOf Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'valueOf Scope'
addToScope: 'Document' to '/home/ltato/LiteScript_online_playground/playground/js/Document.interface.md Scope'
addMember: 'Document' to 'exports'
addMember: 'prototype' to 'Document'
addMember: 'constructor' to 'prototype'
addMember: 'Document' to 'Name Affinity'
addMember: 'location' to 'prototype'
addMember: 'adoptNode' to 'prototype'
addMember: 'arguments' to 'adoptNode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'adoptNode Scope'
addMember: 'caretRangeFromPoint' to 'prototype'
addMember: 'arguments' to 'caretRangeFromPoint Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'caretRangeFromPoint Scope'
addMember: 'createAttribute' to 'prototype'
addMember: 'arguments' to 'createAttribute Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createAttribute Scope'
addMember: 'createAttributeNS' to 'prototype'
addMember: 'arguments' to 'createAttributeNS Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createAttributeNS Scope'
addMember: 'createCDATASection' to 'prototype'
addMember: 'arguments' to 'createCDATASection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createCDATASection Scope'
addMember: 'createComment' to 'prototype'
addMember: 'arguments' to 'createComment Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createComment Scope'
addMember: 'createDocumentFragment' to 'prototype'
addMember: 'arguments' to 'createDocumentFragment Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createDocumentFragment Scope'
addMember: 'createElement' to 'prototype'
addMember: 'arguments' to 'createElement Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createElement Scope'
addMember: 'createElementNS' to 'prototype'
addMember: 'arguments' to 'createElementNS Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createElementNS Scope'
addMember: 'createEvent' to 'prototype'
addMember: 'arguments' to 'createEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createEvent Scope'
addMember: 'createExpression' to 'prototype'
addMember: 'arguments' to 'createExpression Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createExpression Scope'
addMember: 'createNodeIterator' to 'prototype'
addMember: 'arguments' to 'createNodeIterator Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createNodeIterator Scope'
addMember: 'createNSResolver' to 'prototype'
addMember: 'arguments' to 'createNSResolver Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createNSResolver Scope'
addMember: 'createProcessingInstruction' to 'prototype'
addMember: 'arguments' to 'createProcessingInstruction Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createProcessingInstruction Scope'
addMember: 'createRange' to 'prototype'
addMember: 'arguments' to 'createRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createRange Scope'
addMember: 'createTextNode' to 'prototype'
addMember: 'arguments' to 'createTextNode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createTextNode Scope'
addMember: 'createTreeWalker' to 'prototype'
addMember: 'arguments' to 'createTreeWalker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createTreeWalker Scope'
addMember: 'elementFromPoint' to 'prototype'
addMember: 'arguments' to 'elementFromPoint Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'elementFromPoint Scope'
addMember: 'evaluate' to 'prototype'
addMember: 'arguments' to 'evaluate Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'evaluate Scope'
addMember: 'execCommand' to 'prototype'
addMember: 'arguments' to 'execCommand Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'execCommand Scope'
addMember: 'getCSSCanvasContext' to 'prototype'
addMember: 'arguments' to 'getCSSCanvasContext Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getCSSCanvasContext Scope'
addMember: 'getElementById' to 'prototype'
addMember: 'arguments' to 'getElementById Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getElementById Scope'
addToScope: 'id' to 'getElementById Scope'
addMember: 'getElementsByClassName' to 'prototype'
addMember: 'arguments' to 'getElementsByClassName Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getElementsByClassName Scope'
addMember: 'getElementsByName' to 'prototype'
addMember: 'arguments' to 'getElementsByName Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getElementsByName Scope'
addMember: 'getElementsByTagName' to 'prototype'
addMember: 'arguments' to 'getElementsByTagName Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getElementsByTagName Scope'
addMember: 'getElementsByTagNameNS' to 'prototype'
addMember: 'arguments' to 'getElementsByTagNameNS Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getElementsByTagNameNS Scope'
addMember: 'getOverrideStyle' to 'prototype'
addMember: 'arguments' to 'getOverrideStyle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getOverrideStyle Scope'
addMember: 'getSelection' to 'prototype'
addMember: 'arguments' to 'getSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getSelection Scope'
addMember: 'importNode' to 'prototype'
addMember: 'arguments' to 'importNode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'importNode Scope'
addMember: 'queryCommandEnabled' to 'prototype'
addMember: 'arguments' to 'queryCommandEnabled Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'queryCommandEnabled Scope'
addMember: 'queryCommandIndeterm' to 'prototype'
addMember: 'arguments' to 'queryCommandIndeterm Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'queryCommandIndeterm Scope'
addMember: 'queryCommandState' to 'prototype'
addMember: 'arguments' to 'queryCommandState Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'queryCommandState Scope'
addMember: 'queryCommandSupported' to 'prototype'
addMember: 'arguments' to 'queryCommandSupported Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'queryCommandSupported Scope'
addMember: 'queryCommandValue' to 'prototype'
addMember: 'arguments' to 'queryCommandValue Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'queryCommandValue Scope'
addMember: 'registerElement' to 'prototype'
addMember: 'arguments' to 'registerElement Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'registerElement Scope'
addMember: 'webkitCancelFullScreen' to 'prototype'
addMember: 'arguments' to 'webkitCancelFullScreen Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'webkitCancelFullScreen Scope'
addMember: 'webkitExitFullscreen' to 'prototype'
addMember: 'arguments' to 'webkitExitFullscreen Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'webkitExitFullscreen Scope'
addMember: 'webkitExitPointerLock' to 'prototype'
addMember: 'arguments' to 'webkitExitPointerLock Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'webkitExitPointerLock Scope'
addToScope: 'NodeList' to '/home/ltato/LiteScript_online_playground/playground/js/Document.interface.md Scope'
addMember: 'NodeList' to 'exports'
addMember: 'prototype' to 'NodeList'
addMember: 'constructor' to 'prototype'
addMember: 'NodeList' to 'Name Affinity'
addMember: 'length' to 'prototype'
addToScope: 'Node' to '/home/ltato/LiteScript_online_playground/playground/js/Document.interface.md Scope'
addMember: 'Node' to 'exports'
addMember: 'prototype' to 'Node'
addMember: 'constructor' to 'prototype'
addMember: 'Node' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addMember: 'baseURI' to 'prototype'
addMember: 'childNodes' to 'prototype'
addMember: 'firstChild' to 'prototype'
addMember: 'lastChild' to 'prototype'
addMember: 'localName' to 'prototype'
addMember: 'namespaceURI' to 'prototype'
addMember: 'nextSibling' to 'prototype'
addMember: 'nodeName' to 'prototype'
addMember: 'nodePrincipal' to 'prototype'
addMember: 'nodeType' to 'prototype'
addMember: 'nodeValue' to 'prototype'
addMember: 'ownerDocument' to 'prototype'
addMember: 'parentElement' to 'prototype'
addMember: 'parentNode' to 'prototype'
addMember: 'prefix' to 'prototype'
addMember: 'previousSibling' to 'prototype'
addMember: 'textContent' to 'prototype'
addMember: 'appendChild' to 'prototype'
addMember: 'arguments' to 'appendChild Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'appendChild Scope'
addMember: 'cloneNode' to 'prototype'
addMember: 'arguments' to 'cloneNode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'cloneNode Scope'
addMember: 'compareDocumentPosition' to 'prototype'
addMember: 'arguments' to 'compareDocumentPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'compareDocumentPosition Scope'
addMember: 'contains' to 'prototype'
addMember: 'arguments' to 'contains Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'contains Scope'
addMember: 'hasChildNodes' to 'prototype'
addMember: 'arguments' to 'hasChildNodes Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hasChildNodes Scope'
addMember: 'insertBefore' to 'prototype'
addMember: 'arguments' to 'insertBefore Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'insertBefore Scope'
addMember: 'isDefaultNamespace' to 'prototype'
addMember: 'arguments' to 'isDefaultNamespace Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isDefaultNamespace Scope'
addMember: 'isEqualNode' to 'prototype'
addMember: 'arguments' to 'isEqualNode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isEqualNode Scope'
addMember: 'isSameNode' to 'prototype'
addMember: 'arguments' to 'isSameNode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isSameNode Scope'
addMember: 'isSupported' to 'prototype'
addMember: 'arguments' to 'isSupported Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isSupported Scope'
addMember: 'lookupNamespaceURI' to 'prototype'
addMember: 'arguments' to 'lookupNamespaceURI Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'lookupNamespaceURI Scope'
addMember: 'lookupPrefix' to 'prototype'
addMember: 'arguments' to 'lookupPrefix Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'lookupPrefix Scope'
addMember: 'normalize' to 'prototype'
addMember: 'arguments' to 'normalize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'normalize Scope'
addMember: 'removeChild' to 'prototype'
addMember: 'arguments' to 'removeChild Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeChild Scope'
addMember: 'replaceChild' to 'prototype'
addMember: 'arguments' to 'replaceChild Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'replaceChild Scope'
addToScope: 'Element' to '/home/ltato/LiteScript_online_playground/playground/js/Document.interface.md Scope'
addMember: 'Element' to 'exports'
addMember: 'prototype' to 'Element'
addMember: 'constructor' to 'prototype'
addMember: 'Element' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addMember: 'accessKey' to 'prototype'
addMember: 'align' to 'prototype'
addMember: 'attributes' to 'prototype'
addMember: 'baseURI' to 'prototype'
addMember: 'childElementCount' to 'prototype'
addMember: 'childNodes' to 'prototype'
addMember: 'children' to 'prototype'
addMember: 'classList' to 'prototype'
addMember: 'className' to 'prototype'
addMember: 'clientHeight' to 'prototype'
addMember: 'clientLeft' to 'prototype'
addMember: 'clientTop' to 'prototype'
addMember: 'clientWidth' to 'prototype'
addMember: 'contentEditable' to 'prototype'
addMember: 'dataset' to 'prototype'
addMember: 'dir' to 'prototype'
addMember: 'draggable' to 'prototype'
addMember: 'firstChild' to 'prototype'
addMember: 'firstElementChild' to 'prototype'
addMember: 'hidden' to 'prototype'
addMember: 'id' to 'prototype'
addMember: 'innerHTML' to 'prototype'
addMember: 'innerText' to 'prototype'
addMember: 'isContentEditable' to 'prototype'
addMember: 'lang' to 'prototype'
addMember: 'lastChild' to 'prototype'
addMember: 'lastElementChild' to 'prototype'
addMember: 'localName' to 'prototype'
addMember: 'namespaceURI' to 'prototype'
addMember: 'nextElementSibling' to 'prototype'
addMember: 'nextSibling' to 'prototype'
addMember: 'nodeName' to 'prototype'
addMember: 'nodeType' to 'prototype'
addMember: 'nodeValue' to 'prototype'
addMember: 'offsetHeight' to 'prototype'
addMember: 'offsetLeft' to 'prototype'
addMember: 'offsetParent' to 'prototype'
addMember: 'offsetTop' to 'prototype'
addMember: 'offsetWidth' to 'prototype'
addMember: 'onabort' to 'prototype'
addMember: 'onbeforecopy' to 'prototype'
addMember: 'onbeforecut' to 'prototype'
addMember: 'onbeforepaste' to 'prototype'
addMember: 'onblur' to 'prototype'
addMember: 'oncancel' to 'prototype'
addMember: 'oncanplay' to 'prototype'
addMember: 'oncanplaythrough' to 'prototype'
addMember: 'onchange' to 'prototype'
addMember: 'onclick' to 'prototype'
addMember: 'onclose' to 'prototype'
addMember: 'oncontextmenu' to 'prototype'
addMember: 'oncopy' to 'prototype'
addMember: 'oncuechange' to 'prototype'
addMember: 'oncut' to 'prototype'
addMember: 'ondblclick' to 'prototype'
addMember: 'ondrag' to 'prototype'
addMember: 'ondragend' to 'prototype'
addMember: 'ondragenter' to 'prototype'
addMember: 'ondragleave' to 'prototype'
addMember: 'ondragover' to 'prototype'
addMember: 'ondragstart' to 'prototype'
addMember: 'ondrop' to 'prototype'
addMember: 'ondurationchange' to 'prototype'
addMember: 'onemptied' to 'prototype'
addMember: 'onended' to 'prototype'
addMember: 'onerror' to 'prototype'
addMember: 'onfocus' to 'prototype'
addMember: 'oninput' to 'prototype'
addMember: 'oninvalid' to 'prototype'
addMember: 'onkeydown' to 'prototype'
addMember: 'onkeypress' to 'prototype'
addMember: 'onkeyup' to 'prototype'
addMember: 'onload' to 'prototype'
addMember: 'onloadeddata' to 'prototype'
addMember: 'onloadedmetadata' to 'prototype'
addMember: 'onloadstart' to 'prototype'
addMember: 'onmousedown' to 'prototype'
addMember: 'onmouseenter' to 'prototype'
addMember: 'onmouseleave' to 'prototype'
addMember: 'onmousemove' to 'prototype'
addMember: 'onmouseout' to 'prototype'
addMember: 'onmouseover' to 'prototype'
addMember: 'onmouseup' to 'prototype'
addMember: 'onmousewheel' to 'prototype'
addMember: 'onpaste' to 'prototype'
addMember: 'onpause' to 'prototype'
addMember: 'onplay' to 'prototype'
addMember: 'onplaying' to 'prototype'
addMember: 'onprogress' to 'prototype'
addMember: 'onratechange' to 'prototype'
addMember: 'onreset' to 'prototype'
addMember: 'onscroll' to 'prototype'
addMember: 'onsearch' to 'prototype'
addMember: 'onseeked' to 'prototype'
addMember: 'onseeking' to 'prototype'
addMember: 'onselect' to 'prototype'
addMember: 'onselectstart' to 'prototype'
addMember: 'onshow' to 'prototype'
addMember: 'onstalled' to 'prototype'
addMember: 'onsubmit' to 'prototype'
addMember: 'onsuspend' to 'prototype'
addMember: 'ontimeupdate' to 'prototype'
addMember: 'onvolumechange' to 'prototype'
addMember: 'onwaiting' to 'prototype'
addMember: 'onwebkitfullscreenchange' to 'prototype'
addMember: 'onwebkitfullscreenerror' to 'prototype'
addMember: 'onwheel' to 'prototype'
addMember: 'outerHTML' to 'prototype'
addMember: 'outerText' to 'prototype'
addMember: 'ownerDocument' to 'prototype'
addMember: 'parentElement' to 'prototype'
addMember: 'parentNode' to 'prototype'
addMember: 'prefix' to 'prototype'
addMember: 'previousElementSibling' to 'prototype'
addMember: 'previousSibling' to 'prototype'
addMember: 'scrollHeight' to 'prototype'
addMember: 'scrollLeft' to 'prototype'
addMember: 'scrollTop' to 'prototype'
addMember: 'scrollWidth' to 'prototype'
addMember: 'spellcheck' to 'prototype'
addMember: 'style' to 'prototype'
addMember: 'tabIndex' to 'prototype'
addMember: 'tagName' to 'prototype'
addMember: 'textContent' to 'prototype'
addMember: 'title' to 'prototype'
addMember: 'translate' to 'prototype'
addMember: 'value' to 'prototype'
addMember: 'webkitdropzone' to 'prototype'
addMember: 'webkitPseudo' to 'prototype'
addMember: 'webkitShadowRoot' to 'prototype'
addMember: 'blur' to 'prototype'
addMember: 'arguments' to 'blur Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'blur Scope'
addMember: 'focus' to 'prototype'
addMember: 'arguments' to 'focus Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'focus Scope'
addMember: 'getAttribute' to 'prototype'
addMember: 'arguments' to 'getAttribute Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAttribute Scope'
addMember: 'getAttributeNode' to 'prototype'
addMember: 'arguments' to 'getAttributeNode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAttributeNode Scope'
addMember: 'getAttributeNodeNS' to 'prototype'
addMember: 'arguments' to 'getAttributeNodeNS Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAttributeNodeNS Scope'
addMember: 'getAttributeNS' to 'prototype'
addMember: 'arguments' to 'getAttributeNS Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAttributeNS Scope'
addMember: 'getBoundingClientRect' to 'prototype'
addMember: 'arguments' to 'getBoundingClientRect Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getBoundingClientRect Scope'
addMember: 'getClientRects' to 'prototype'
addMember: 'arguments' to 'getClientRects Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getClientRects Scope'
addMember: 'getElementsByClassName' to 'prototype'
addMember: 'arguments' to 'getElementsByClassName Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getElementsByClassName Scope'
addMember: 'getElementsByTagName' to 'prototype'
addMember: 'arguments' to 'getElementsByTagName Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getElementsByTagName Scope'
addMember: 'getElementsByTagNameNS' to 'prototype'
addMember: 'arguments' to 'getElementsByTagNameNS Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getElementsByTagNameNS Scope'
addMember: 'hasAttribute' to 'prototype'
addMember: 'arguments' to 'hasAttribute Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hasAttribute Scope'
addMember: 'hasAttributeNS' to 'prototype'
addMember: 'arguments' to 'hasAttributeNS Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hasAttributeNS Scope'
addMember: 'hasAttributes' to 'prototype'
addMember: 'arguments' to 'hasAttributes Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hasAttributes Scope'
addMember: 'insertAdjacentHTML' to 'prototype'
addMember: 'arguments' to 'insertAdjacentHTML Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'insertAdjacentHTML Scope'
addMember: 'querySelector' to 'prototype'
addMember: 'arguments' to 'querySelector Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'querySelector Scope'
addMember: 'querySelectorAll' to 'prototype'
addMember: 'arguments' to 'querySelectorAll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'querySelectorAll Scope'
addMember: 'remove' to 'prototype'
addMember: 'arguments' to 'remove Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'remove Scope'
addMember: 'removeAttribute' to 'prototype'
addMember: 'arguments' to 'removeAttribute Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAttribute Scope'
addMember: 'removeAttributeNode' to 'prototype'
addMember: 'arguments' to 'removeAttributeNode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAttributeNode Scope'
addMember: 'removeAttributeNS' to 'prototype'
addMember: 'arguments' to 'removeAttributeNS Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAttributeNS Scope'
addMember: 'scrollByLines' to 'prototype'
addMember: 'arguments' to 'scrollByLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollByLines Scope'
addMember: 'scrollByPages' to 'prototype'
addMember: 'arguments' to 'scrollByPages Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollByPages Scope'
addMember: 'scrollIntoView' to 'prototype'
addMember: 'arguments' to 'scrollIntoView Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollIntoView Scope'
addMember: 'scrollIntoViewIfNeeded' to 'prototype'
addMember: 'arguments' to 'scrollIntoViewIfNeeded Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollIntoViewIfNeeded Scope'
addMember: 'setAttribute' to 'prototype'
addMember: 'arguments' to 'setAttribute Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setAttribute Scope'
addMember: 'setAttributeNode' to 'prototype'
addMember: 'arguments' to 'setAttributeNode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setAttributeNode Scope'
addMember: 'setAttributeNodeNS' to 'prototype'
addMember: 'arguments' to 'setAttributeNodeNS Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setAttributeNodeNS Scope'
addMember: 'setAttributeNS' to 'prototype'
addMember: 'arguments' to 'setAttributeNS Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setAttributeNS Scope'
addMember: 'webkitCreateShadowRoot' to 'prototype'
addMember: 'arguments' to 'webkitCreateShadowRoot Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'webkitCreateShadowRoot Scope'
addMember: 'webkitMatchesSelector' to 'prototype'
addMember: 'arguments' to 'webkitMatchesSelector Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'webkitMatchesSelector Scope'
addMember: 'webkitRequestFullScreen' to 'prototype'
addMember: 'arguments' to 'webkitRequestFullScreen Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'webkitRequestFullScreen Scope'
addMember: 'webkitRequestPointerLock' to 'prototype'
addMember: 'arguments' to 'webkitRequestPointerLock Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'webkitRequestPointerLock Scope'
addToScope: 'XMLHttpRequest' to '/home/ltato/LiteScript_online_playground/playground/js/Document.interface.md Scope'
addMember: 'XMLHttpRequest' to 'exports'
addMember: 'prototype' to 'XMLHttpRequest'
addMember: 'constructor' to 'prototype'
addMember: 'XMLHttpRequest' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addMember: 'onload' to 'prototype'
addMember: 'onerror' to 'prototype'
addMember: 'ontimeout' to 'prototype'
addMember: 'readyState' to 'prototype'
addMember: 'response' to 'prototype'
addMember: 'responseText' to 'prototype'
addMember: 'responseType' to 'prototype'
addMember: 'responseXML' to 'prototype'
addMember: 'status' to 'prototype'
addMember: 'statusText' to 'prototype'
addMember: 'timeout' to 'prototype'
addMember: 'upload' to 'prototype'
addMember: 'withCredentials' to 'prototype'
addMember: 'UNSENT' to 'prototype'
addMember: 'OPENED' to 'prototype'
addMember: 'HEADERS_RECEIVED' to 'prototype'
addMember: 'LOADING' to 'prototype'
addMember: 'DONE' to 'prototype'
addMember: 'abort' to 'prototype'
addMember: 'arguments' to 'abort Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'abort Scope'
addMember: 'getAllResponseHeaders' to 'prototype'
addMember: 'arguments' to 'getAllResponseHeaders Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAllResponseHeaders Scope'
addMember: 'getResponseHeader' to 'prototype'
addMember: 'arguments' to 'getResponseHeader Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getResponseHeader Scope'
addMember: 'open' to 'prototype'
addMember: 'arguments' to 'open Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'open Scope'
addMember: 'overrideMimeType' to 'prototype'
addMember: 'arguments' to 'overrideMimeType Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'overrideMimeType Scope'
addMember: 'send' to 'prototype'
addMember: 'arguments' to 'send Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'send Scope'
addMember: 'setRequestHeader' to 'prototype'
addMember: 'arguments' to 'setRequestHeader Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setRequestHeader Scope'
addToScope: 'Event' to '/home/ltato/LiteScript_online_playground/playground/js/Document.interface.md Scope'
addMember: 'Event' to 'exports'
addMember: 'prototype' to 'Event'
addMember: 'constructor' to 'prototype'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addMember: 'bubbles' to 'prototype'
addMember: 'cancelBubble' to 'prototype'
addMember: 'cancelable' to 'prototype'
addMember: 'currentTarget' to 'prototype'
addMember: 'defaultPrevented' to 'prototype'
addMember: 'eventPhase' to 'prototype'
addMember: 'explicitOriginalTarget' to 'prototype'
addMember: 'originalTarget' to 'prototype'
addMember: 'target' to 'prototype'
addMember: 'timeStamp' to 'prototype'
addMember: 'type' to 'prototype'
addMember: 'isTrusted' to 'prototype'
addMember: 'initEvent' to 'prototype'
addMember: 'arguments' to 'initEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'initEvent Scope'
addMember: 'preventDefault' to 'prototype'
addMember: 'arguments' to 'preventDefault Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'preventDefault Scope'
addMember: 'stopImmediatePropagation' to 'prototype'
addMember: 'arguments' to 'stopImmediatePropagation Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'stopImmediatePropagation Scope'
addMember: 'stopPropagation' to 'prototype'
addMember: 'arguments' to 'stopPropagation Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'stopPropagation Scope'
addToScope: 'CSSStyle' to '/home/ltato/LiteScript_online_playground/playground/js/Document.interface.md Scope'
addMember: 'CSSStyle' to 'exports'
addMember: 'prototype' to 'CSSStyle'
addMember: 'constructor' to 'prototype'
addMember: 'CSSStyle' to 'Name Affinity'
addMember: 'alignContent' to 'prototype'
addMember: 'alignItems' to 'prototype'
addMember: 'alignmentBaseline' to 'prototype'
addMember: 'alignSelf' to 'prototype'
addMember: 'background' to 'prototype'
addMember: 'backgroundAttachment' to 'prototype'
addMember: 'backgroundClip' to 'prototype'
addMember: 'backgroundColor' to 'prototype'
addMember: 'backgroundImage' to 'prototype'
addMember: 'backgroundOrigin' to 'prototype'
addMember: 'backgroundPosition' to 'prototype'
addMember: 'backgroundPositionX' to 'prototype'
addMember: 'backgroundPositionY' to 'prototype'
addMember: 'backgroundRepeat' to 'prototype'
addMember: 'backgroundRepeatX' to 'prototype'
addMember: 'backgroundRepeatY' to 'prototype'
addMember: 'backgroundSize' to 'prototype'
addMember: 'baselineShift' to 'prototype'
addMember: 'border' to 'prototype'
addMember: 'borderBottom' to 'prototype'
addMember: 'borderBottomColor' to 'prototype'
addMember: 'borderBottomLeftRadius' to 'prototype'
addMember: 'borderBottomRightRadius' to 'prototype'
addMember: 'borderBottomStyle' to 'prototype'
addMember: 'borderBottomWidth' to 'prototype'
addMember: 'borderCollapse' to 'prototype'
addMember: 'borderColor' to 'prototype'
addMember: 'borderImage' to 'prototype'
addMember: 'borderImageOutset' to 'prototype'
addMember: 'borderImageRepeat' to 'prototype'
addMember: 'borderImageSlice' to 'prototype'
addMember: 'borderImageSource' to 'prototype'
addMember: 'borderImageWidth' to 'prototype'
addMember: 'borderLeft' to 'prototype'
addMember: 'borderLeftColor' to 'prototype'
addMember: 'borderLeftStyle' to 'prototype'
addMember: 'borderLeftWidth' to 'prototype'
addMember: 'borderRadius' to 'prototype'
addMember: 'borderRight' to 'prototype'
addMember: 'borderRightColor' to 'prototype'
addMember: 'borderRightStyle' to 'prototype'
addMember: 'borderRightWidth' to 'prototype'
addMember: 'borderSpacing' to 'prototype'
addMember: 'borderStyle' to 'prototype'
addMember: 'borderTop' to 'prototype'
addMember: 'borderTopColor' to 'prototype'
addMember: 'borderTopLeftRadius' to 'prototype'
addMember: 'borderTopRightRadius' to 'prototype'
addMember: 'borderTopStyle' to 'prototype'
addMember: 'borderTopWidth' to 'prototype'
addMember: 'borderWidth' to 'prototype'
addMember: 'bottom' to 'prototype'
addMember: 'boxShadow' to 'prototype'
addMember: 'boxSizing' to 'prototype'
addMember: 'bufferedRendering' to 'prototype'
addMember: 'captionSide' to 'prototype'
addMember: 'clear' to 'prototype'
addMember: 'clip' to 'prototype'
addMember: 'clipPath' to 'prototype'
addMember: 'clipRule' to 'prototype'
addMember: 'color' to 'prototype'
addMember: 'colorInterpolation' to 'prototype'
addMember: 'colorInterpolationFilters' to 'prototype'
addMember: 'colorProfile' to 'prototype'
addMember: 'colorRendering' to 'prototype'
addMember: 'content' to 'prototype'
addMember: 'counterIncrement' to 'prototype'
addMember: 'counterReset' to 'prototype'
addMember: 'cssText' to 'prototype'
addMember: 'cursor' to 'prototype'
addMember: 'direction' to 'prototype'
addMember: 'display' to 'prototype'
addMember: 'dominantBaseline' to 'prototype'
addMember: 'emptyCells' to 'prototype'
addMember: 'enableBackground' to 'prototype'
addMember: 'fill' to 'prototype'
addMember: 'fillOpacity' to 'prototype'
addMember: 'fillRule' to 'prototype'
addMember: 'filter' to 'prototype'
addMember: 'flex' to 'prototype'
addMember: 'flexBasis' to 'prototype'
addMember: 'flexDirection' to 'prototype'
addMember: 'flexFlow' to 'prototype'
addMember: 'flexGrow' to 'prototype'
addMember: 'flexShrink' to 'prototype'
addMember: 'flexWrap' to 'prototype'
addMember: 'float' to 'prototype'
addMember: 'floodColor' to 'prototype'
addMember: 'floodOpacity' to 'prototype'
addMember: 'font' to 'prototype'
addMember: 'fontFamily' to 'prototype'
addMember: 'fontKerning' to 'prototype'
addMember: 'fontSize' to 'prototype'
addMember: 'fontStretch' to 'prototype'
addMember: 'fontStyle' to 'prototype'
addMember: 'fontVariant' to 'prototype'
addMember: 'fontWeight' to 'prototype'
addMember: 'glyphOrientationHorizontal' to 'prototype'
addMember: 'glyphOrientationVertical' to 'prototype'
addMember: 'height' to 'prototype'
addMember: 'imageRendering' to 'prototype'
addMember: 'justifyContent' to 'prototype'
addMember: 'kerning' to 'prototype'
addMember: 'left' to 'prototype'
addMember: 'length' to 'prototype'
addMember: 'letterSpacing' to 'prototype'
addMember: 'lightingColor' to 'prototype'
addMember: 'lineHeight' to 'prototype'
addMember: 'listStyle' to 'prototype'
addMember: 'listStyleImage' to 'prototype'
addMember: 'listStylePosition' to 'prototype'
addMember: 'listStyleType' to 'prototype'
addMember: 'margin' to 'prototype'
addMember: 'marginBottom' to 'prototype'
addMember: 'marginLeft' to 'prototype'
addMember: 'marginRight' to 'prototype'
addMember: 'marginTop' to 'prototype'
addMember: 'marker' to 'prototype'
addMember: 'markerEnd' to 'prototype'
addMember: 'markerMid' to 'prototype'
addMember: 'markerStart' to 'prototype'
addMember: 'mask' to 'prototype'
addMember: 'maskType' to 'prototype'
addMember: 'maxHeight' to 'prototype'
addMember: 'maxWidth' to 'prototype'
addMember: 'maxZoom' to 'prototype'
addMember: 'minHeight' to 'prototype'
addMember: 'minWidth' to 'prototype'
addMember: 'minZoom' to 'prototype'
addMember: 'objectFit' to 'prototype'
addMember: 'objectPosition' to 'prototype'
addMember: 'opacity' to 'prototype'
addMember: 'order' to 'prototype'
addMember: 'orientation' to 'prototype'
addMember: 'orphans' to 'prototype'
addMember: 'outline' to 'prototype'
addMember: 'outlineColor' to 'prototype'
addMember: 'outlineOffset' to 'prototype'
addMember: 'outlineStyle' to 'prototype'
addMember: 'outlineWidth' to 'prototype'
addMember: 'overflow' to 'prototype'
addMember: 'overflowWrap' to 'prototype'
addMember: 'overflowX' to 'prototype'
addMember: 'overflowY' to 'prototype'
addMember: 'padding' to 'prototype'
addMember: 'paddingBottom' to 'prototype'
addMember: 'paddingLeft' to 'prototype'
addMember: 'paddingRight' to 'prototype'
addMember: 'paddingTop' to 'prototype'
addMember: 'page' to 'prototype'
addMember: 'pageBreakAfter' to 'prototype'
addMember: 'pageBreakBefore' to 'prototype'
addMember: 'pageBreakInside' to 'prototype'
addMember: 'parentRule' to 'prototype'
addMember: 'pointerEvents' to 'prototype'
addMember: 'position' to 'prototype'
addMember: 'quotes' to 'prototype'
addMember: 'resize' to 'prototype'
addMember: 'right' to 'prototype'
addMember: 'shapeRendering' to 'prototype'
addMember: 'size' to 'prototype'
addMember: 'speak' to 'prototype'
addMember: 'src' to 'prototype'
addMember: 'stopColor' to 'prototype'
addMember: 'stopOpacity' to 'prototype'
addMember: 'stroke' to 'prototype'
addMember: 'strokeDasharray' to 'prototype'
addMember: 'strokeDashoffset' to 'prototype'
addMember: 'strokeLinecap' to 'prototype'
addMember: 'strokeLinejoin' to 'prototype'
addMember: 'strokeMiterlimit' to 'prototype'
addMember: 'strokeOpacity' to 'prototype'
addMember: 'strokeWidth' to 'prototype'
addMember: 'tableLayout' to 'prototype'
addMember: 'tabSize' to 'prototype'
addMember: 'textAlign' to 'prototype'
addMember: 'textAnchor' to 'prototype'
addMember: 'textDecoration' to 'prototype'
addMember: 'textIndent' to 'prototype'
addMember: 'textLineThroughColor' to 'prototype'
addMember: 'textLineThroughMode' to 'prototype'
addMember: 'textLineThroughStyle' to 'prototype'
addMember: 'textLineThroughWidth' to 'prototype'
addMember: 'textOverflow' to 'prototype'
addMember: 'textOverlineColor' to 'prototype'
addMember: 'textOverlineMode' to 'prototype'
addMember: 'textOverlineStyle' to 'prototype'
addMember: 'textOverlineWidth' to 'prototype'
addMember: 'textRendering' to 'prototype'
addMember: 'textShadow' to 'prototype'
addMember: 'textTransform' to 'prototype'
addMember: 'textUnderlineColor' to 'prototype'
addMember: 'textUnderlineMode' to 'prototype'
addMember: 'textUnderlineStyle' to 'prototype'
addMember: 'textUnderlineWidth' to 'prototype'
addMember: 'top' to 'prototype'
addMember: 'touchActionDelay' to 'prototype'
addMember: 'transition' to 'prototype'
addMember: 'transitionDelay' to 'prototype'
addMember: 'transitionDuration' to 'prototype'
addMember: 'transitionProperty' to 'prototype'
addMember: 'transitionTimingFunction' to 'prototype'
addMember: 'unicodeBidi' to 'prototype'
addMember: 'unicodeRange' to 'prototype'
addMember: 'userZoom' to 'prototype'
addMember: 'vectorEffect' to 'prototype'
addMember: 'verticalAlign' to 'prototype'
addMember: 'visibility' to 'prototype'
addMember: 'webkitAnimation' to 'prototype'
addMember: 'webkitAnimationDelay' to 'prototype'
addMember: 'webkitAnimationDirection' to 'prototype'
addMember: 'webkitAnimationDuration' to 'prototype'
addMember: 'webkitAnimationFillMode' to 'prototype'
addMember: 'webkitAnimationIterationCount' to 'prototype'
addMember: 'webkitAnimationName' to 'prototype'
addMember: 'webkitAnimationPlayState' to 'prototype'
addMember: 'webkitAnimationTimingFunction' to 'prototype'
addMember: 'webkitAppearance' to 'prototype'
addMember: 'webkitAppRegion' to 'prototype'
addMember: 'webkitAspectRatio' to 'prototype'
addMember: 'webkitBackfaceVisibility' to 'prototype'
addMember: 'webkitBackgroundClip' to 'prototype'
addMember: 'webkitBackgroundComposite' to 'prototype'
addMember: 'webkitBackgroundOrigin' to 'prototype'
addMember: 'webkitBackgroundSize' to 'prototype'
addMember: 'webkitBorderAfter' to 'prototype'
addMember: 'webkitBorderAfterColor' to 'prototype'
addMember: 'webkitBorderAfterStyle' to 'prototype'
addMember: 'webkitBorderAfterWidth' to 'prototype'
addMember: 'webkitBorderBefore' to 'prototype'
addMember: 'webkitBorderBeforeColor' to 'prototype'
addMember: 'webkitBorderBeforeStyle' to 'prototype'
addMember: 'webkitBorderBeforeWidth' to 'prototype'
addMember: 'webkitBorderEnd' to 'prototype'
addMember: 'webkitBorderEndColor' to 'prototype'
addMember: 'webkitBorderEndStyle' to 'prototype'
addMember: 'webkitBorderEndWidth' to 'prototype'
addMember: 'webkitBorderFit' to 'prototype'
addMember: 'webkitBorderHorizontalSpacing' to 'prototype'
addMember: 'webkitBorderImage' to 'prototype'
addMember: 'webkitBorderRadius' to 'prototype'
addMember: 'webkitBorderStart' to 'prototype'
addMember: 'webkitBorderStartColor' to 'prototype'
addMember: 'webkitBorderStartStyle' to 'prototype'
addMember: 'webkitBorderStartWidth' to 'prototype'
addMember: 'webkitBorderVerticalSpacing' to 'prototype'
addMember: 'webkitBoxAlign' to 'prototype'
addMember: 'webkitBoxDecorationBreak' to 'prototype'
addMember: 'webkitBoxDirection' to 'prototype'
addMember: 'webkitBoxFlex' to 'prototype'
addMember: 'webkitBoxFlexGroup' to 'prototype'
addMember: 'webkitBoxLines' to 'prototype'
addMember: 'webkitBoxOrdinalGroup' to 'prototype'
addMember: 'webkitBoxOrient' to 'prototype'
addMember: 'webkitBoxPack' to 'prototype'
addMember: 'webkitBoxReflect' to 'prototype'
addMember: 'webkitBoxShadow' to 'prototype'
addMember: 'webkitClipPath' to 'prototype'
addMember: 'webkitColumnAxis' to 'prototype'
addMember: 'webkitColumnBreakAfter' to 'prototype'
addMember: 'webkitColumnBreakBefore' to 'prototype'
addMember: 'webkitColumnBreakInside' to 'prototype'
addMember: 'webkitColumnCount' to 'prototype'
addMember: 'webkitColumnGap' to 'prototype'
addMember: 'webkitColumnProgression' to 'prototype'
addMember: 'webkitColumnRule' to 'prototype'
addMember: 'webkitColumnRuleColor' to 'prototype'
addMember: 'webkitColumnRuleStyle' to 'prototype'
addMember: 'webkitColumnRuleWidth' to 'prototype'
addMember: 'webkitColumns' to 'prototype'
addMember: 'webkitColumnSpan' to 'prototype'
addMember: 'webkitColumnWidth' to 'prototype'
addMember: 'webkitFilter' to 'prototype'
addMember: 'webkitFontFeatureSettings' to 'prototype'
addMember: 'webkitFontSizeDelta' to 'prototype'
addMember: 'webkitFontSmoothing' to 'prototype'
addMember: 'webkitFontVariantLigatures' to 'prototype'
addMember: 'webkitHighlight' to 'prototype'
addMember: 'webkitHyphenateCharacter' to 'prototype'
addMember: 'webkitLineAlign' to 'prototype'
addMember: 'webkitLineBoxContain' to 'prototype'
addMember: 'webkitLineBreak' to 'prototype'
addMember: 'webkitLineClamp' to 'prototype'
addMember: 'webkitLineGrid' to 'prototype'
addMember: 'webkitLineSnap' to 'prototype'
addMember: 'webkitLocale' to 'prototype'
addMember: 'webkitLogicalHeight' to 'prototype'
addMember: 'webkitLogicalWidth' to 'prototype'
addMember: 'webkitMarginAfter' to 'prototype'
addMember: 'webkitMarginAfterCollapse' to 'prototype'
addMember: 'webkitMarginBefore' to 'prototype'
addMember: 'webkitMarginBeforeCollapse' to 'prototype'
addMember: 'webkitMarginBottomCollapse' to 'prototype'
addMember: 'webkitMarginCollapse' to 'prototype'
addMember: 'webkitMarginEnd' to 'prototype'
addMember: 'webkitMarginStart' to 'prototype'
addMember: 'webkitMarginTopCollapse' to 'prototype'
addMember: 'webkitMask' to 'prototype'
addMember: 'webkitMaskBoxImage' to 'prototype'
addMember: 'webkitMaskBoxImageOutset' to 'prototype'
addMember: 'webkitMaskBoxImageRepeat' to 'prototype'
addMember: 'webkitMaskBoxImageSlice' to 'prototype'
addMember: 'webkitMaskBoxImageSource' to 'prototype'
addMember: 'webkitMaskBoxImageWidth' to 'prototype'
addMember: 'webkitMaskClip' to 'prototype'
addMember: 'webkitMaskComposite' to 'prototype'
addMember: 'webkitMaskImage' to 'prototype'
addMember: 'webkitMaskOrigin' to 'prototype'
addMember: 'webkitMaskPosition' to 'prototype'
addMember: 'webkitMaskPositionX' to 'prototype'
addMember: 'webkitMaskPositionY' to 'prototype'
addMember: 'webkitMaskRepeat' to 'prototype'
addMember: 'webkitMaskRepeatX' to 'prototype'
addMember: 'webkitMaskRepeatY' to 'prototype'
addMember: 'webkitMaskSize' to 'prototype'
addMember: 'webkitMaxLogicalHeight' to 'prototype'
addMember: 'webkitMaxLogicalWidth' to 'prototype'
addMember: 'webkitMinLogicalHeight' to 'prototype'
addMember: 'webkitMinLogicalWidth' to 'prototype'
addMember: 'webkitPaddingAfter' to 'prototype'
addMember: 'webkitPaddingBefore' to 'prototype'
addMember: 'webkitPaddingEnd' to 'prototype'
addMember: 'webkitPaddingStart' to 'prototype'
addMember: 'webkitPerspective' to 'prototype'
addMember: 'webkitPerspectiveOrigin' to 'prototype'
addMember: 'webkitPerspectiveOriginX' to 'prototype'
addMember: 'webkitPerspectiveOriginY' to 'prototype'
addMember: 'webkitPrintColorAdjust' to 'prototype'
addMember: 'webkitRtlOrdering' to 'prototype'
addMember: 'webkitRubyPosition' to 'prototype'
addMember: 'webkitTapHighlightColor' to 'prototype'
addMember: 'webkitTextCombine' to 'prototype'
addMember: 'webkitTextDecorationsInEffect' to 'prototype'
addMember: 'webkitTextEmphasis' to 'prototype'
addMember: 'webkitTextEmphasisColor' to 'prototype'
addMember: 'webkitTextEmphasisPosition' to 'prototype'
addMember: 'webkitTextEmphasisStyle' to 'prototype'
addMember: 'webkitTextFillColor' to 'prototype'
addMember: 'webkitTextOrientation' to 'prototype'
addMember: 'webkitTextSecurity' to 'prototype'
addMember: 'webkitTextStroke' to 'prototype'
addMember: 'webkitTextStrokeColor' to 'prototype'
addMember: 'webkitTextStrokeWidth' to 'prototype'
addMember: 'webkitTransform' to 'prototype'
addMember: 'webkitTransformOrigin' to 'prototype'
addMember: 'webkitTransformOriginX' to 'prototype'
addMember: 'webkitTransformOriginY' to 'prototype'
addMember: 'webkitTransformOriginZ' to 'prototype'
addMember: 'webkitTransformStyle' to 'prototype'
addMember: 'webkitTransition' to 'prototype'
addMember: 'webkitTransitionDelay' to 'prototype'
addMember: 'webkitTransitionDuration' to 'prototype'
addMember: 'webkitTransitionProperty' to 'prototype'
addMember: 'webkitTransitionTimingFunction' to 'prototype'
addMember: 'webkitUserDrag' to 'prototype'
addMember: 'webkitUserModify' to 'prototype'
addMember: 'webkitUserSelect' to 'prototype'
addMember: 'webkitWritingMode' to 'prototype'
addMember: 'whiteSpace' to 'prototype'
addMember: 'widows' to 'prototype'
addMember: 'width' to 'prototype'
addMember: 'wordBreak' to 'prototype'
addMember: 'wordSpacing' to 'prototype'
addMember: 'wordWrap' to 'prototype'
addMember: 'writingMode' to 'prototype'
addMember: 'zIndex' to 'prototype'
addMember: 'zoom' to 'prototype'
addToScope: 'ace' to '/home/ltato/LiteScript_online_playground/playground/js/ace.interface.md Scope'
addMember: 'ace' to 'exports'
addMember: 'config' to 'ace'
addMember: 'get' to 'config'
addMember: 'set' to 'config'
addMember: 'all' to 'config'
addMember: '_dispatchEvent' to 'config'
addMember: '_emit' to 'config'
addMember: '_signal' to 'config'
addMember: 'once' to 'config'
addMember: 'setDefaultHandler' to 'config'
addMember: 'removeDefaultHandler' to 'config'
addMember: 'addEventListener' to 'config'
addMember: 'on' to 'config'
addMember: 'removeEventListener' to 'config'
addMember: 'removeListener' to 'config'
addMember: 'off' to 'config'
addMember: 'removeAllListeners' to 'config'
addMember: 'moduleUrl' to 'config'
addMember: 'setModuleUrl' to 'config'
addMember: 'loadModule' to 'config'
addMember: 'init' to 'config'
addMember: 'defineOptions' to 'config'
addMember: 'resetOptions' to 'config'
addMember: 'setDefaultValue' to 'config'
addMember: 'setDefaultValues' to 'config'
addMember: '_eventRegistry' to 'config'
addMember: '_defaultHandlers' to 'config'
addMember: 'define' to 'ace'
addMember: 'arguments' to 'define Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'define Scope'
addToScope: 'amodule' to 'define Scope'
addToScope: 'deps' to 'define Scope'
addToScope: 'payload' to 'define Scope'
addMember: 'require' to 'ace'
addMember: 'arguments' to 'require Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'require Scope'
addToScope: 'amodule' to 'require Scope'
addToScope: 'callback' to 'require Scope'
addMember: 'edit' to 'ace'
addMember: 'arguments' to 'edit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'edit Scope'
addToScope: 'el' to 'edit Scope'
addMember: 'createEditSession' to 'ace'
addMember: 'arguments' to 'createEditSession Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createEditSession Scope'
addToScope: 'text' to 'createEditSession Scope'
addToScope: 'mode' to 'createEditSession Scope'
addToScope: 'Fold' to 'NamespaceDeclaration Scope'
addMember: 'Fold' to 'ace'
addMember: 'prototype' to 'Fold'
addMember: 'constructor' to 'prototype'
addMember: 'Fold' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'range' to 'ConstructorDeclaration Scope'
addToScope: 'placeholder' to 'ConstructorDeclaration Scope'
addMember: 'toString' to 'prototype'
addMember: 'arguments' to 'toString Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toString Scope'
addMember: 'setFoldLine' to 'prototype'
addMember: 'arguments' to 'setFoldLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setFoldLine Scope'
addToScope: 'foldLine' to 'setFoldLine Scope'
addMember: 'clone' to 'prototype'
addMember: 'arguments' to 'clone Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clone Scope'
addMember: 'addSubFold' to 'prototype'
addMember: 'arguments' to 'addSubFold Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addSubFold Scope'
addToScope: 'fold' to 'addSubFold Scope'
addMember: 'restoreRange' to 'prototype'
addMember: 'arguments' to 'restoreRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'restoreRange Scope'
addToScope: 'range' to 'restoreRange Scope'
addToScope: 'TokenIterator' to 'NamespaceDeclaration Scope'
addMember: 'TokenIterator' to 'ace'
addMember: 'prototype' to 'TokenIterator'
addMember: 'constructor' to 'prototype'
addMember: 'TokenIterator' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'session' to 'ConstructorDeclaration Scope'
addToScope: 'initialRow' to 'ConstructorDeclaration Scope'
addToScope: 'initialColumn' to 'ConstructorDeclaration Scope'
addMember: 'stepBackward' to 'prototype'
addMember: 'arguments' to 'stepBackward Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'stepBackward Scope'
addMember: 'stepForward' to 'prototype'
addMember: 'arguments' to 'stepForward Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'stepForward Scope'
addMember: 'getCurrentToken' to 'prototype'
addMember: 'arguments' to 'getCurrentToken Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getCurrentToken Scope'
addMember: 'getCurrentTokenRow' to 'prototype'
addMember: 'arguments' to 'getCurrentTokenRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getCurrentTokenRow Scope'
addMember: 'getCurrentTokenColumn' to 'prototype'
addMember: 'arguments' to 'getCurrentTokenColumn Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getCurrentTokenColumn Scope'
addToScope: 'EditSession' to 'NamespaceDeclaration Scope'
addMember: 'EditSession' to 'ace'
addMember: 'prototype' to 'EditSession'
addMember: 'constructor' to 'prototype'
addMember: 'EditSession' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'text' to 'ConstructorDeclaration Scope'
addToScope: 'mode' to 'ConstructorDeclaration Scope'
addMember: 'doc' to 'prototype'
addMember: '$mode' to 'prototype'
addMember: '$foldStyle' to 'prototype'
addMember: '$wrapLimitRange' to 'prototype'
addMember: '$useWorker' to 'prototype'
addMember: '$useSoftTabs' to 'prototype'
addMember: '$scrollTop' to 'prototype'
addMember: '$options' to 'prototype'
addMember: '$scrollLeft' to 'prototype'
addMember: '$defaultUndoManager' to 'prototype'
addMember: '$modeId' to 'prototype'
addMember: '$tabSize' to 'prototype'
addMember: '$firstLineNumber' to 'prototype'
addMember: '$wrapLimit' to 'prototype'
addMember: '$foldStyles' to 'prototype'
addMember: '$overwrite' to 'prototype'
addMember: '$useWrapMode' to 'prototype'
addMember: 'min' to '$wrapLimitRange'
addMember: 'max' to '$wrapLimitRange'
addMember: 'wrap' to '$options'
addMember: 'set' to 'wrap'
addMember: 'get' to 'wrap'
addMember: 'handlesSet' to 'wrap'
addMember: 'name' to 'wrap'
addMember: 'firstLineNumber' to '$options'
addMember: 'set' to 'firstLineNumber'
addMember: 'initialValue' to 'firstLineNumber'
addMember: 'name' to 'firstLineNumber'
addMember: 'useWorker' to '$options'
addMember: 'set' to 'useWorker'
addMember: 'initialValue' to 'useWorker'
addMember: 'name' to 'useWorker'
addMember: 'useSoftTabs' to '$options'
addMember: 'initialValue' to 'useSoftTabs'
addMember: 'name' to 'useSoftTabs'
addMember: 'tabSize' to '$options'
addMember: 'set' to 'tabSize'
addMember: 'initialValue' to 'tabSize'
addMember: 'handlesSet' to 'tabSize'
addMember: 'name' to 'tabSize'
addMember: 'overwrite' to '$options'
addMember: 'set' to 'overwrite'
addMember: 'initialValue' to 'overwrite'
addMember: 'name' to 'overwrite'
addMember: 'newLineMode' to '$options'
addMember: 'set' to 'newLineMode'
addMember: 'get' to 'newLineMode'
addMember: 'handlesSet' to 'newLineMode'
addMember: 'name' to 'newLineMode'
addMember: 'undo' to '$defaultUndoManager'
addMember: 'redo' to '$defaultUndoManager'
addMember: 'reset' to '$defaultUndoManager'
addMember: 'manual' to '$foldStyles'
addMember: 'markbegin' to '$foldStyles'
addMember: 'markbeginend' to '$foldStyles'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'getDocumentLastRowColumn' to 'prototype'
addMember: 'arguments' to 'getDocumentLastRowColumn Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getDocumentLastRowColumn Scope'
addToScope: 'docRow' to 'getDocumentLastRowColumn Scope'
addToScope: 'docColumn' to 'getDocumentLastRowColumn Scope'
addMember: 'clearAnnotations' to 'prototype'
addMember: 'arguments' to 'clearAnnotations Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clearAnnotations Scope'
addMember: 'setTabSize' to 'prototype'
addMember: 'arguments' to 'setTabSize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setTabSize Scope'
addToScope: 'tabSize' to 'setTabSize Scope'
addMember: '$findClosingBracket' to 'prototype'
addMember: 'arguments' to '$findClosingBracket Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$findClosingBracket Scope'
addToScope: 'bracket' to '$findClosingBracket Scope'
addToScope: 'position' to '$findClosingBracket Scope'
addToScope: 'typeRe' to '$findClosingBracket Scope'
addMember: 'getRowSplitData' to 'prototype'
addMember: 'arguments' to 'getRowSplitData Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getRowSplitData Scope'
addToScope: 'row' to 'getRowSplitData Scope'
addMember: 'getRowLength' to 'prototype'
addMember: 'arguments' to 'getRowLength Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getRowLength Scope'
addToScope: 'row' to 'getRowLength Scope'
addMember: 'foldAll' to 'prototype'
addMember: 'arguments' to 'foldAll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'foldAll Scope'
addToScope: 'startRow' to 'foldAll Scope'
addToScope: 'endRow' to 'foldAll Scope'
addToScope: 'depth' to 'foldAll Scope'
addMember: 'getScreenWidth' to 'prototype'
addMember: 'arguments' to 'getScreenWidth Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getScreenWidth Scope'
addMember: 'setWrapLimitRange' to 'prototype'
addMember: 'arguments' to 'setWrapLimitRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setWrapLimitRange Scope'
addToScope: 'min' to 'setWrapLimitRange Scope'
addToScope: 'max' to 'setWrapLimitRange Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: '$cloneFoldData' to 'prototype'
addMember: 'arguments' to '$cloneFoldData Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$cloneFoldData Scope'
addMember: 'getWordRange' to 'prototype'
addMember: 'arguments' to 'getWordRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getWordRange Scope'
addToScope: 'row' to 'getWordRange Scope'
addToScope: 'column' to 'getWordRange Scope'
addMember: '$getDisplayTokens' to 'prototype'
addMember: 'arguments' to '$getDisplayTokens Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$getDisplayTokens Scope'
addToScope: 'str' to '$getDisplayTokens Scope'
addToScope: 'offset' to '$getDisplayTokens Scope'
addMember: 'unfold' to 'prototype'
addMember: 'arguments' to 'unfold Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'unfold Scope'
addToScope: 'location' to 'unfold Scope'
addToScope: 'expandInner' to 'unfold Scope'
addMember: 'getTokenAt' to 'prototype'
addMember: 'arguments' to 'getTokenAt Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getTokenAt Scope'
addToScope: 'row' to 'getTokenAt Scope'
addToScope: 'column' to 'getTokenAt Scope'
addMember: '$getStringScreenWidth' to 'prototype'
addMember: 'arguments' to '$getStringScreenWidth Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$getStringScreenWidth Scope'
addToScope: 'str' to '$getStringScreenWidth Scope'
addToScope: 'maxScreenColumn' to '$getStringScreenWidth Scope'
addToScope: 'screenColumn' to '$getStringScreenWidth Scope'
addMember: 'getScrollTop' to 'prototype'
addMember: 'arguments' to 'getScrollTop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getScrollTop Scope'
addMember: 'getDocumentLastRowColumnPosition' to 'prototype'
addMember: 'arguments' to 'getDocumentLastRowColumnPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getDocumentLastRowColumnPosition Scope'
addToScope: 'docRow' to 'getDocumentLastRowColumnPosition Scope'
addToScope: 'docColumn' to 'getDocumentLastRowColumnPosition Scope'
addMember: '$constrainWrapLimit' to 'prototype'
addMember: 'arguments' to '$constrainWrapLimit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$constrainWrapLimit Scope'
addToScope: 'wrapLimit' to '$constrainWrapLimit Scope'
addToScope: 'min' to '$constrainWrapLimit Scope'
addToScope: 'max' to '$constrainWrapLimit Scope'
addMember: 'toggleOverwrite' to 'prototype'
addMember: 'arguments' to 'toggleOverwrite Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toggleOverwrite Scope'
addMember: 'getFoldsInRange' to 'prototype'
addMember: 'arguments' to 'getFoldsInRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFoldsInRange Scope'
addToScope: 'range' to 'getFoldsInRange Scope'
addMember: 'getTabString' to 'prototype'
addMember: 'arguments' to 'getTabString Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getTabString Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'adjustWrapLimit' to 'prototype'
addMember: 'arguments' to 'adjustWrapLimit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'adjustWrapLimit Scope'
addToScope: 'desiredLimit' to 'adjustWrapLimit Scope'
addToScope: '$printMargin' to 'adjustWrapLimit Scope'
addMember: 'setNewLineMode' to 'prototype'
addMember: 'arguments' to 'setNewLineMode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setNewLineMode Scope'
addToScope: 'newLineMode' to 'setNewLineMode Scope'
addMember: 'getUndoManager' to 'prototype'
addMember: 'arguments' to 'getUndoManager Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getUndoManager Scope'
addMember: 'moveLinesDown' to 'prototype'
addMember: 'arguments' to 'moveLinesDown Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveLinesDown Scope'
addToScope: 'firstRow' to 'moveLinesDown Scope'
addToScope: 'lastRow' to 'moveLinesDown Scope'
addMember: 'getTabSize' to 'prototype'
addMember: 'arguments' to 'getTabSize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getTabSize Scope'
addMember: '$computeWidth' to 'prototype'
addMember: 'arguments' to '$computeWidth Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$computeWidth Scope'
addToScope: 'force' to '$computeWidth Scope'
addMember: 'setOptions' to 'prototype'
addMember: 'arguments' to 'setOptions Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setOptions Scope'
addToScope: 'optList' to 'setOptions Scope'
addMember: 'setAnnotations' to 'prototype'
addMember: 'arguments' to 'setAnnotations Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setAnnotations Scope'
addToScope: 'annotations' to 'setAnnotations Scope'
addMember: '$updateRowLengthCache' to 'prototype'
addMember: 'arguments' to '$updateRowLengthCache Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$updateRowLengthCache Scope'
addToScope: 'firstRow' to '$updateRowLengthCache Scope'
addToScope: 'lastRow' to '$updateRowLengthCache Scope'
addToScope: 'b' to '$updateRowLengthCache Scope'
addMember: 'getAnnotations' to 'prototype'
addMember: 'arguments' to 'getAnnotations Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAnnotations Scope'
addMember: 'setValue' to 'prototype'
addMember: 'arguments' to 'setValue Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setValue Scope'
addToScope: 'text' to 'setValue Scope'
addMember: 'getDisplayLine' to 'prototype'
addMember: 'arguments' to 'getDisplayLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getDisplayLine Scope'
addToScope: 'row' to 'getDisplayLine Scope'
addToScope: 'endColumn' to 'getDisplayLine Scope'
addToScope: 'startRow' to 'getDisplayLine Scope'
addToScope: 'startColumn' to 'getDisplayLine Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'expandFolds' to 'prototype'
addMember: 'arguments' to 'expandFolds Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'expandFolds Scope'
addToScope: 'folds' to 'expandFolds Scope'
addMember: 'getLine' to 'prototype'
addMember: 'arguments' to 'getLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getLine Scope'
addToScope: 'row' to 'getLine Scope'
addMember: 'getSelection' to 'prototype'
addMember: 'arguments' to 'getSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getSelection Scope'
addMember: 'getRowFoldEnd' to 'prototype'
addMember: 'arguments' to 'getRowFoldEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getRowFoldEnd Scope'
addToScope: 'docRow' to 'getRowFoldEnd Scope'
addToScope: 'startFoldRow' to 'getRowFoldEnd Scope'
addMember: 'onReloadTokenizer' to 'prototype'
addMember: 'arguments' to 'onReloadTokenizer Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onReloadTokenizer Scope'
addToScope: 'e' to 'onReloadTokenizer Scope'
addMember: 'getOptions' to 'prototype'
addMember: 'arguments' to 'getOptions Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getOptions Scope'
addToScope: 'optionNames' to 'getOptions Scope'
addMember: 'setUseWrapMode' to 'prototype'
addMember: 'arguments' to 'setUseWrapMode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setUseWrapMode Scope'
addToScope: 'useWrapMode' to 'setUseWrapMode Scope'
addMember: 'getValue' to 'prototype'
addMember: 'arguments' to 'getValue Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getValue Scope'
addMember: 'addMarker' to 'prototype'
addMember: 'arguments' to 'addMarker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addMarker Scope'
addToScope: 'range' to 'addMarker Scope'
addToScope: 'clazz' to 'addMarker Scope'
addToScope: 'type' to 'addMarker Scope'
addToScope: 'inFront' to 'addMarker Scope'
addMember: '$moveLines' to 'prototype'
addMember: 'arguments' to '$moveLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$moveLines Scope'
addToScope: 'firstRow' to '$moveLines Scope'
addToScope: 'lastRow' to '$moveLines Scope'
addToScope: 'dir' to '$moveLines Scope'
addMember: '$findOpeningBracket' to 'prototype'
addMember: 'arguments' to '$findOpeningBracket Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$findOpeningBracket Scope'
addToScope: 'bracket' to '$findOpeningBracket Scope'
addToScope: 'position' to '$findOpeningBracket Scope'
addToScope: 'typeRe' to '$findOpeningBracket Scope'
addMember: '$clipRangeToDocument' to 'prototype'
addMember: 'arguments' to '$clipRangeToDocument Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$clipRangeToDocument Scope'
addToScope: 'range' to '$clipRangeToDocument Scope'
addMember: 'outdentRows' to 'prototype'
addMember: 'arguments' to 'outdentRows Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'outdentRows Scope'
addToScope: 'range' to 'outdentRows Scope'
addMember: 'getNewLineMode' to 'prototype'
addMember: 'arguments' to 'getNewLineMode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getNewLineMode Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'getParentFoldRangeData' to 'prototype'
addMember: 'arguments' to 'getParentFoldRangeData Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getParentFoldRangeData Scope'
addToScope: 'row' to 'getParentFoldRangeData Scope'
addToScope: 'ignoreCurrent' to 'getParentFoldRangeData Scope'
addMember: '$setFolding' to 'prototype'
addMember: 'arguments' to '$setFolding Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$setFolding Scope'
addToScope: 'foldMode' to '$setFolding Scope'
addMember: 'getNextFoldLine' to 'prototype'
addMember: 'arguments' to 'getNextFoldLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getNextFoldLine Scope'
addToScope: 'docRow' to 'getNextFoldLine Scope'
addToScope: 'startFoldLine' to 'getNextFoldLine Scope'
addMember: 'getFoldAt' to 'prototype'
addMember: 'arguments' to 'getFoldAt Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFoldAt Scope'
addToScope: 'row' to 'getFoldAt Scope'
addToScope: 'column' to 'getFoldAt Scope'
addToScope: 'side' to 'getFoldAt Scope'
addMember: '$clipColumnToRow' to 'prototype'
addMember: 'arguments' to '$clipColumnToRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$clipColumnToRow Scope'
addToScope: 'row' to '$clipColumnToRow Scope'
addToScope: 'column' to '$clipColumnToRow Scope'
addMember: 'undoChanges' to 'prototype'
addMember: 'arguments' to 'undoChanges Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'undoChanges Scope'
addToScope: 'deltas' to 'undoChanges Scope'
addToScope: 'dontSelect' to 'undoChanges Scope'
addMember: 'getState' to 'prototype'
addMember: 'arguments' to 'getState Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getState Scope'
addToScope: 'row' to 'getState Scope'
addMember: 'addFold' to 'prototype'
addMember: 'arguments' to 'addFold Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addFold Scope'
addToScope: 'placeholder' to 'addFold Scope'
addToScope: 'range' to 'addFold Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'onChangeFold' to 'prototype'
addMember: 'arguments' to 'onChangeFold Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onChangeFold Scope'
addToScope: 'e' to 'onChangeFold Scope'
addMember: '$detectNewLine' to 'prototype'
addMember: 'arguments' to '$detectNewLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$detectNewLine Scope'
addToScope: 'text' to '$detectNewLine Scope'
addMember: 'removeMarker' to 'prototype'
addMember: 'arguments' to 'removeMarker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeMarker Scope'
addToScope: 'markerId' to 'removeMarker Scope'
addMember: 'getCommentFoldRange' to 'prototype'
addMember: 'arguments' to 'getCommentFoldRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getCommentFoldRange Scope'
addToScope: 'row' to 'getCommentFoldRange Scope'
addToScope: 'column' to 'getCommentFoldRange Scope'
addToScope: 'dir' to 'getCommentFoldRange Scope'
addMember: 'getBreakpoints' to 'prototype'
addMember: 'arguments' to 'getBreakpoints Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getBreakpoints Scope'
addMember: 'expandFold' to 'prototype'
addMember: 'arguments' to 'expandFold Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'expandFold Scope'
addToScope: 'fold' to 'expandFold Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'moveText' to 'prototype'
addMember: 'arguments' to 'moveText Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveText Scope'
addToScope: 'fromRange' to 'moveText Scope'
addToScope: 'toPosition' to 'moveText Scope'
addToScope: 'copy' to 'moveText Scope'
addMember: 'markUndoGroup' to 'prototype'
addMember: 'arguments' to 'markUndoGroup Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'markUndoGroup Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'isTabStop' to 'prototype'
addMember: 'arguments' to 'isTabStop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isTabStop Scope'
addToScope: 'position' to 'isTabStop Scope'
addMember: 'getDocument' to 'prototype'
addMember: 'arguments' to 'getDocument Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getDocument Scope'
addMember: '$getUndoSelection' to 'prototype'
addMember: 'arguments' to '$getUndoSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$getUndoSelection Scope'
addToScope: 'deltas' to '$getUndoSelection Scope'
addToScope: 'isUndo' to '$getUndoSelection Scope'
addToScope: 'lastUndoRange' to '$getUndoSelection Scope'
addMember: '$clipPositionToDocument' to 'prototype'
addMember: 'arguments' to '$clipPositionToDocument Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$clipPositionToDocument Scope'
addToScope: 'row' to '$clipPositionToDocument Scope'
addToScope: 'column' to '$clipPositionToDocument Scope'
addMember: 'getAllFolds' to 'prototype'
addMember: 'arguments' to 'getAllFolds Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAllFolds Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: 'getAWordRange' to 'prototype'
addMember: 'arguments' to 'getAWordRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAWordRange Scope'
addToScope: 'row' to 'getAWordRange Scope'
addToScope: 'column' to 'getAWordRange Scope'
addMember: 'getWrapLimit' to 'prototype'
addMember: 'arguments' to 'getWrapLimit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getWrapLimit Scope'
addMember: 'toString' to 'prototype'
addMember: 'arguments' to 'toString Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toString Scope'
addMember: '$clipRowToDocument' to 'prototype'
addMember: 'arguments' to '$clipRowToDocument Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$clipRowToDocument Scope'
addToScope: 'row' to '$clipRowToDocument Scope'
addMember: 'screenToDocumentPosition' to 'prototype'
addMember: 'arguments' to 'screenToDocumentPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'screenToDocumentPosition Scope'
addToScope: 'screenRow' to 'screenToDocumentPosition Scope'
addToScope: 'screenColumn' to 'screenToDocumentPosition Scope'
addMember: 'setBreakpoint' to 'prototype'
addMember: 'arguments' to 'setBreakpoint Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setBreakpoint Scope'
addToScope: 'row' to 'setBreakpoint Scope'
addToScope: 'className' to 'setBreakpoint Scope'
addMember: 'getWrapLimitRange' to 'prototype'
addMember: 'arguments' to 'getWrapLimitRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getWrapLimitRange Scope'
addMember: 'resetCaches' to 'prototype'
addMember: 'arguments' to 'resetCaches Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'resetCaches Scope'
addMember: 'getOverwrite' to 'prototype'
addMember: 'arguments' to 'getOverwrite Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getOverwrite Scope'
addMember: 'indentRows' to 'prototype'
addMember: 'arguments' to 'indentRows Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'indentRows Scope'
addToScope: 'startRow' to 'indentRows Scope'
addToScope: 'endRow' to 'indentRows Scope'
addToScope: 'indentString' to 'indentRows Scope'
addMember: 'clearBreakpoints' to 'prototype'
addMember: 'arguments' to 'clearBreakpoints Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clearBreakpoints Scope'
addMember: 'addFolds' to 'prototype'
addMember: 'arguments' to 'addFolds Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addFolds Scope'
addToScope: 'folds' to 'addFolds Scope'
addMember: 'remove' to 'prototype'
addMember: 'arguments' to 'remove Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'remove Scope'
addToScope: 'range' to 'remove Scope'
addMember: 'documentToScreenColumn' to 'prototype'
addMember: 'arguments' to 'documentToScreenColumn Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'documentToScreenColumn Scope'
addToScope: 'row' to 'documentToScreenColumn Scope'
addToScope: 'docColumn' to 'documentToScreenColumn Scope'
addMember: 'getTextRange' to 'prototype'
addMember: 'arguments' to 'getTextRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getTextRange Scope'
addToScope: 'range' to 'getTextRange Scope'
addMember: '$onChangeMode' to 'prototype'
addMember: 'arguments' to '$onChangeMode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$onChangeMode Scope'
addToScope: 'mode' to '$onChangeMode Scope'
addToScope: '$isPlaceholder' to '$onChangeMode Scope'
addMember: 'screenToDocumentRow' to 'prototype'
addMember: 'arguments' to 'screenToDocumentRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'screenToDocumentRow Scope'
addToScope: 'screenRow' to 'screenToDocumentRow Scope'
addToScope: 'screenColumn' to 'screenToDocumentRow Scope'
addMember: 'documentToScreenRow' to 'prototype'
addMember: 'arguments' to 'documentToScreenRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'documentToScreenRow Scope'
addToScope: 'docRow' to 'documentToScreenRow Scope'
addToScope: 'docColumn' to 'documentToScreenRow Scope'
addMember: 'getScreenLastRowColumn' to 'prototype'
addMember: 'arguments' to 'getScreenLastRowColumn Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getScreenLastRowColumn Scope'
addToScope: 'screenRow' to 'getScreenLastRowColumn Scope'
addMember: '$addFoldLine' to 'prototype'
addMember: 'arguments' to '$addFoldLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$addFoldLine Scope'
addToScope: 'foldLine' to '$addFoldLine Scope'
addMember: 'setOverwrite' to 'prototype'
addMember: 'arguments' to 'setOverwrite Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setOverwrite Scope'
addToScope: 'overwrite' to 'setOverwrite Scope'
addMember: 'getMarkers' to 'prototype'
addMember: 'arguments' to 'getMarkers Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getMarkers Scope'
addToScope: 'inFront' to 'getMarkers Scope'
addMember: 'getLength' to 'prototype'
addMember: 'arguments' to 'getLength Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getLength Scope'
addMember: '$startWorker' to 'prototype'
addMember: 'arguments' to '$startWorker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$startWorker Scope'
addMember: '$updateWrapData' to 'prototype'
addMember: 'arguments' to '$updateWrapData Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$updateWrapData Scope'
addToScope: 'firstRow' to '$updateWrapData Scope'
addToScope: 'lastRow' to '$updateWrapData Scope'
addMember: 'getBracketRange' to 'prototype'
addMember: 'arguments' to 'getBracketRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getBracketRange Scope'
addToScope: 'pos' to 'getBracketRange Scope'
addMember: 'updateFoldWidgets' to 'prototype'
addMember: 'arguments' to 'updateFoldWidgets Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'updateFoldWidgets Scope'
addToScope: 'e' to 'updateFoldWidgets Scope'
addMember: 'getScreenTabSize' to 'prototype'
addMember: 'arguments' to 'getScreenTabSize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getScreenTabSize Scope'
addToScope: 'screenColumn' to 'getScreenTabSize Scope'
addMember: 'setBreakpoints' to 'prototype'
addMember: 'arguments' to 'setBreakpoints Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setBreakpoints Scope'
addToScope: 'rows' to 'setBreakpoints Scope'
addMember: 'clearBreakpoint' to 'prototype'
addMember: 'arguments' to 'clearBreakpoint Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clearBreakpoint Scope'
addToScope: 'row' to 'clearBreakpoint Scope'
addMember: '$computeWrapSplits' to 'prototype'
addMember: 'arguments' to '$computeWrapSplits Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$computeWrapSplits Scope'
addToScope: 'tokens' to '$computeWrapSplits Scope'
addToScope: 'wrapLimit' to '$computeWrapSplits Scope'
addMember: 'getFoldedRowCount' to 'prototype'
addMember: 'arguments' to 'getFoldedRowCount Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFoldedRowCount Scope'
addToScope: 'first' to 'getFoldedRowCount Scope'
addToScope: 'last' to 'getFoldedRowCount Scope'
addMember: 'getOption' to 'prototype'
addMember: 'arguments' to 'getOption Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getOption Scope'
addToScope: 'name' to 'getOption Scope'
addMember: 'removeGutterDecoration' to 'prototype'
addMember: 'arguments' to 'removeGutterDecoration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeGutterDecoration Scope'
addToScope: 'row' to 'removeGutterDecoration Scope'
addToScope: 'className' to 'removeGutterDecoration Scope'
addMember: 'getFoldDisplayLine' to 'prototype'
addMember: 'arguments' to 'getFoldDisplayLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFoldDisplayLine Scope'
addToScope: 'foldLine' to 'getFoldDisplayLine Scope'
addToScope: 'endRow' to 'getFoldDisplayLine Scope'
addToScope: 'endColumn' to 'getFoldDisplayLine Scope'
addToScope: 'startRow' to 'getFoldDisplayLine Scope'
addToScope: 'startColumn' to 'getFoldDisplayLine Scope'
addMember: 'getFoldStringAt' to 'prototype'
addMember: 'arguments' to 'getFoldStringAt Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFoldStringAt Scope'
addToScope: 'row' to 'getFoldStringAt Scope'
addToScope: 'column' to 'getFoldStringAt Scope'
addToScope: 'trim' to 'getFoldStringAt Scope'
addToScope: 'foldLine' to 'getFoldStringAt Scope'
addMember: 'getLines' to 'prototype'
addMember: 'arguments' to 'getLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getLines Scope'
addToScope: 'firstRow' to 'getLines Scope'
addToScope: 'lastRow' to 'getLines Scope'
addMember: 'addGutterDecoration' to 'prototype'
addMember: 'arguments' to 'addGutterDecoration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addGutterDecoration Scope'
addToScope: 'row' to 'addGutterDecoration Scope'
addToScope: 'className' to 'addGutterDecoration Scope'
addMember: '$updateInternalDataOnChange' to 'prototype'
addMember: 'arguments' to '$updateInternalDataOnChange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$updateInternalDataOnChange Scope'
addToScope: 'e' to '$updateInternalDataOnChange Scope'
addMember: 'getFoldLine' to 'prototype'
addMember: 'arguments' to 'getFoldLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFoldLine Scope'
addToScope: 'docRow' to 'getFoldLine Scope'
addToScope: 'startFoldLine' to 'getFoldLine Scope'
addMember: 'highlight' to 'prototype'
addMember: 'arguments' to 'highlight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'highlight Scope'
addToScope: 're' to 'highlight Scope'
addMember: 'setUndoManager' to 'prototype'
addMember: 'arguments' to 'setUndoManager Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setUndoManager Scope'
addToScope: 'undoManager' to 'setUndoManager Scope'
addMember: 'highlightLines' to 'prototype'
addMember: 'arguments' to 'highlightLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'highlightLines Scope'
addToScope: 'startRow' to 'highlightLines Scope'
addToScope: 'endRow' to 'highlightLines Scope'
addToScope: 'clazz' to 'highlightLines Scope'
addToScope: 'inFront' to 'highlightLines Scope'
addMember: 'getSelectionMarkers' to 'prototype'
addMember: 'arguments' to 'getSelectionMarkers Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getSelectionMarkers Scope'
addMember: 'redoChanges' to 'prototype'
addMember: 'arguments' to 'redoChanges Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'redoChanges Scope'
addToScope: 'deltas' to 'redoChanges Scope'
addToScope: 'dontSelect' to 'redoChanges Scope'
addMember: 'removeFold' to 'prototype'
addMember: 'arguments' to 'removeFold Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeFold Scope'
addToScope: 'fold' to 'removeFold Scope'
addMember: 'duplicateLines' to 'prototype'
addMember: 'arguments' to 'duplicateLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'duplicateLines Scope'
addToScope: 'firstRow' to 'duplicateLines Scope'
addToScope: 'lastRow' to 'duplicateLines Scope'
addMember: 'setDocument' to 'prototype'
addMember: 'arguments' to 'setDocument Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDocument Scope'
addToScope: 'doc' to 'setDocument Scope'
addMember: 'getTokens' to 'prototype'
addMember: 'arguments' to 'getTokens Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getTokens Scope'
addToScope: 'row' to 'getTokens Scope'
addMember: '$resetRowCache' to 'prototype'
addMember: 'arguments' to '$resetRowCache Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$resetRowCache Scope'
addToScope: 'docRow' to '$resetRowCache Scope'
addMember: 'setOption' to 'prototype'
addMember: 'arguments' to 'setOption Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setOption Scope'
addToScope: 'name' to 'setOption Scope'
addToScope: 'value' to 'setOption Scope'
addMember: 'onChange' to 'prototype'
addMember: 'arguments' to 'onChange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onChange Scope'
addToScope: 'e' to 'onChange Scope'
addMember: 'setUseWorker' to 'prototype'
addMember: 'arguments' to 'setUseWorker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setUseWorker Scope'
addToScope: 'useWorker' to 'setUseWorker Scope'
addMember: 'getUseSoftTabs' to 'prototype'
addMember: 'arguments' to 'getUseSoftTabs Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getUseSoftTabs Scope'
addMember: 'getUseWorker' to 'prototype'
addMember: 'arguments' to 'getUseWorker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getUseWorker Scope'
addMember: 'toggleFold' to 'prototype'
addMember: 'arguments' to 'toggleFold Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toggleFold Scope'
addToScope: 'tryToUnfold' to 'toggleFold Scope'
addMember: 'setScrollTop' to 'prototype'
addMember: 'arguments' to 'setScrollTop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setScrollTop Scope'
addToScope: 'scrollTop' to 'setScrollTop Scope'
addMember: 'moveLinesUp' to 'prototype'
addMember: 'arguments' to 'moveLinesUp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveLinesUp Scope'
addToScope: 'firstRow' to 'moveLinesUp Scope'
addToScope: 'lastRow' to 'moveLinesUp Scope'
addMember: 'isRowFolded' to 'prototype'
addMember: 'arguments' to 'isRowFolded Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isRowFolded Scope'
addToScope: 'docRow' to 'isRowFolded Scope'
addToScope: 'startFoldRow' to 'isRowFolded Scope'
addMember: 'setScrollLeft' to 'prototype'
addMember: 'arguments' to 'setScrollLeft Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setScrollLeft Scope'
addToScope: 'scrollLeft' to 'setScrollLeft Scope'
addMember: 'replace' to 'prototype'
addMember: 'arguments' to 'replace Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'replace Scope'
addToScope: 'range' to 'replace Scope'
addToScope: 'text' to 'replace Scope'
addMember: '$stopWorker' to 'prototype'
addMember: 'arguments' to '$stopWorker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$stopWorker Scope'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: 'onFoldWidgetClick' to 'prototype'
addMember: 'arguments' to 'onFoldWidgetClick Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onFoldWidgetClick Scope'
addToScope: 'row' to 'onFoldWidgetClick Scope'
addToScope: 'e' to 'onFoldWidgetClick Scope'
addMember: 'setWrapLimit' to 'prototype'
addMember: 'arguments' to 'setWrapLimit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setWrapLimit Scope'
addToScope: 'limit' to 'setWrapLimit Scope'
addMember: 'setUseSoftTabs' to 'prototype'
addMember: 'arguments' to 'setUseSoftTabs Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setUseSoftTabs Scope'
addToScope: 'val' to 'setUseSoftTabs Scope'
addMember: 'getMode' to 'prototype'
addMember: 'arguments' to 'getMode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getMode Scope'
addMember: 'setUndoSelect' to 'prototype'
addMember: 'arguments' to 'setUndoSelect Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setUndoSelect Scope'
addToScope: 'enable' to 'setUndoSelect Scope'
addMember: 'findMatchingBracket' to 'prototype'
addMember: 'arguments' to 'findMatchingBracket Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'findMatchingBracket Scope'
addToScope: 'position' to 'findMatchingBracket Scope'
addToScope: 'chr' to 'findMatchingBracket Scope'
addMember: 'setMode' to 'prototype'
addMember: 'arguments' to 'setMode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setMode Scope'
addToScope: 'mode' to 'setMode Scope'
addMember: 'getScrollLeft' to 'prototype'
addMember: 'arguments' to 'getScrollLeft Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getScrollLeft Scope'
addMember: 'addDynamicMarker' to 'prototype'
addMember: 'arguments' to 'addDynamicMarker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addDynamicMarker Scope'
addToScope: 'marker' to 'addDynamicMarker Scope'
addToScope: 'inFront' to 'addDynamicMarker Scope'
addMember: 'removeFolds' to 'prototype'
addMember: 'arguments' to 'removeFolds Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeFolds Scope'
addToScope: 'folds' to 'removeFolds Scope'
addMember: 'setFoldStyle' to 'prototype'
addMember: 'arguments' to 'setFoldStyle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setFoldStyle Scope'
addToScope: 'style' to 'setFoldStyle Scope'
addMember: 'documentToScreenPosition' to 'prototype'
addMember: 'arguments' to 'documentToScreenPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'documentToScreenPosition Scope'
addToScope: 'docRow' to 'documentToScreenPosition Scope'
addToScope: 'docColumn' to 'documentToScreenPosition Scope'
addMember: 'insert' to 'prototype'
addMember: 'arguments' to 'insert Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'insert Scope'
addToScope: 'position' to 'insert Scope'
addToScope: 'text' to 'insert Scope'
addMember: 'getScreenLength' to 'prototype'
addMember: 'arguments' to 'getScreenLength Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getScreenLength Scope'
addMember: 'screenToDocumentColumn' to 'prototype'
addMember: 'arguments' to 'screenToDocumentColumn Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'screenToDocumentColumn Scope'
addToScope: 'screenRow' to 'screenToDocumentColumn Scope'
addToScope: 'screenColumn' to 'screenToDocumentColumn Scope'
addMember: '$getRowCacheIndex' to 'prototype'
addMember: 'arguments' to '$getRowCacheIndex Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$getRowCacheIndex Scope'
addToScope: 'cacheArray' to '$getRowCacheIndex Scope'
addToScope: 'val' to '$getRowCacheIndex Scope'
addMember: 'getUseWrapMode' to 'prototype'
addMember: 'arguments' to 'getUseWrapMode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getUseWrapMode Scope'
addMember: 'getRowFoldStart' to 'prototype'
addMember: 'arguments' to 'getRowFoldStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getRowFoldStart Scope'
addToScope: 'docRow' to 'getRowFoldStart Scope'
addToScope: 'startFoldRow' to 'getRowFoldStart Scope'
addToScope: 'FoldLine' to 'NamespaceDeclaration Scope'
addMember: 'FoldLine' to 'ace'
addMember: 'prototype' to 'FoldLine'
addMember: 'constructor' to 'prototype'
addMember: 'FoldLine' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'foldData' to 'ConstructorDeclaration Scope'
addToScope: 'folds' to 'ConstructorDeclaration Scope'
addMember: 'shiftRow' to 'prototype'
addMember: 'arguments' to 'shiftRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'shiftRow Scope'
addToScope: 'shift' to 'shiftRow Scope'
addMember: 'addFold' to 'prototype'
addMember: 'arguments' to 'addFold Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addFold Scope'
addToScope: 'fold' to 'addFold Scope'
addMember: 'containsRow' to 'prototype'
addMember: 'arguments' to 'containsRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'containsRow Scope'
addToScope: 'row' to 'containsRow Scope'
addMember: 'walk' to 'prototype'
addMember: 'arguments' to 'walk Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'walk Scope'
addToScope: 'callback' to 'walk Scope'
addToScope: 'endRow' to 'walk Scope'
addToScope: 'endColumn' to 'walk Scope'
addMember: 'getNextFoldTo' to 'prototype'
addMember: 'arguments' to 'getNextFoldTo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getNextFoldTo Scope'
addToScope: 'row' to 'getNextFoldTo Scope'
addToScope: 'column' to 'getNextFoldTo Scope'
addMember: 'addRemoveChars' to 'prototype'
addMember: 'arguments' to 'addRemoveChars Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addRemoveChars Scope'
addToScope: 'row' to 'addRemoveChars Scope'
addToScope: 'column' to 'addRemoveChars Scope'
addToScope: 'len' to 'addRemoveChars Scope'
addMember: 'split' to 'prototype'
addMember: 'arguments' to 'split Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'split Scope'
addToScope: 'row' to 'split Scope'
addToScope: 'column' to 'split Scope'
addMember: 'merge' to 'prototype'
addMember: 'arguments' to 'merge Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'merge Scope'
addToScope: 'foldLineNext' to 'merge Scope'
addMember: 'toString' to 'prototype'
addMember: 'arguments' to 'toString Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toString Scope'
addMember: 'idxToPosition' to 'prototype'
addMember: 'arguments' to 'idxToPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'idxToPosition Scope'
addToScope: 'idx' to 'idxToPosition Scope'
addToScope: 'FoldMode' to 'NamespaceDeclaration Scope'
addMember: 'FoldMode' to 'ace'
addMember: 'prototype' to 'FoldMode'
addMember: 'constructor' to 'prototype'
addMember: 'FoldMode' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addMember: 'foldingStartMarker' to 'prototype'
addMember: 'foldingStopMarker' to 'prototype'
addMember: 'getFoldWidget' to 'prototype'
addMember: 'arguments' to 'getFoldWidget Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFoldWidget Scope'
addToScope: 'session' to 'getFoldWidget Scope'
addToScope: 'foldStyle' to 'getFoldWidget Scope'
addToScope: 'row' to 'getFoldWidget Scope'
addMember: 'getFoldWidgetRange' to 'prototype'
addMember: 'arguments' to 'getFoldWidgetRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFoldWidgetRange Scope'
addToScope: 'session' to 'getFoldWidgetRange Scope'
addToScope: 'foldStyle' to 'getFoldWidgetRange Scope'
addToScope: 'row' to 'getFoldWidgetRange Scope'
addMember: 'indentationBlock' to 'prototype'
addMember: 'arguments' to 'indentationBlock Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'indentationBlock Scope'
addToScope: 'session' to 'indentationBlock Scope'
addToScope: 'row' to 'indentationBlock Scope'
addToScope: 'column' to 'indentationBlock Scope'
addMember: 'openingBracketBlock' to 'prototype'
addMember: 'arguments' to 'openingBracketBlock Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'openingBracketBlock Scope'
addToScope: 'session' to 'openingBracketBlock Scope'
addToScope: 'bracket' to 'openingBracketBlock Scope'
addToScope: 'row' to 'openingBracketBlock Scope'
addToScope: 'column' to 'openingBracketBlock Scope'
addToScope: 'typeRe' to 'openingBracketBlock Scope'
addMember: 'closingBracketBlock' to 'prototype'
addMember: 'arguments' to 'closingBracketBlock Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'closingBracketBlock Scope'
addToScope: 'session' to 'closingBracketBlock Scope'
addToScope: 'bracket' to 'closingBracketBlock Scope'
addToScope: 'row' to 'closingBracketBlock Scope'
addToScope: 'column' to 'closingBracketBlock Scope'
addToScope: 'typeRe' to 'closingBracketBlock Scope'
addToScope: 'UndoManager' to 'NamespaceDeclaration Scope'
addMember: 'UndoManager' to 'ace'
addMember: 'prototype' to 'UndoManager'
addMember: 'constructor' to 'prototype'
addMember: 'UndoManager' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addMember: 'execute' to 'prototype'
addMember: 'arguments' to 'execute Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'execute Scope'
addToScope: 'options' to 'execute Scope'
addMember: 'undo' to 'prototype'
addMember: 'arguments' to 'undo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'undo Scope'
addToScope: 'dontSelect' to 'undo Scope'
addMember: 'redo' to 'prototype'
addMember: 'arguments' to 'redo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'redo Scope'
addToScope: 'dontSelect' to 'redo Scope'
addMember: 'reset' to 'prototype'
addMember: 'arguments' to 'reset Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'reset Scope'
addMember: 'hasUndo' to 'prototype'
addMember: 'arguments' to 'hasUndo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hasUndo Scope'
addMember: 'hasRedo' to 'prototype'
addMember: 'arguments' to 'hasRedo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hasRedo Scope'
addMember: 'markClean' to 'prototype'
addMember: 'arguments' to 'markClean Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'markClean Scope'
addMember: 'isClean' to 'prototype'
addMember: 'arguments' to 'isClean Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isClean Scope'
addToScope: 'UIWorkerClient' to 'NamespaceDeclaration Scope'
addMember: 'UIWorkerClient' to 'ace'
addMember: 'prototype' to 'UIWorkerClient'
addMember: 'constructor' to 'prototype'
addMember: 'UIWorkerClient' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'topLevelNamespaces' to 'ConstructorDeclaration Scope'
addToScope: 'mod' to 'ConstructorDeclaration Scope'
addToScope: 'classname' to 'ConstructorDeclaration Scope'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'onError' to 'prototype'
addMember: 'arguments' to 'onError Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onError Scope'
addToScope: 'e' to 'onError Scope'
addMember: 'onMessage' to 'prototype'
addMember: 'arguments' to 'onMessage Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onMessage Scope'
addToScope: 'e' to 'onMessage Scope'
addMember: '$normalizePath' to 'prototype'
addMember: 'arguments' to '$normalizePath Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$normalizePath Scope'
addToScope: 'path' to '$normalizePath Scope'
addMember: 'terminate' to 'prototype'
addMember: 'arguments' to 'terminate Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'terminate Scope'
addMember: 'send' to 'prototype'
addMember: 'arguments' to 'send Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'send Scope'
addToScope: 'cmd' to 'send Scope'
addToScope: 'args' to 'send Scope'
addMember: 'call' to 'prototype'
addMember: 'arguments' to 'call Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'call Scope'
addToScope: 'cmd' to 'call Scope'
addToScope: 'args' to 'call Scope'
addToScope: 'callback' to 'call Scope'
addMember: 'emit' to 'prototype'
addMember: 'arguments' to 'emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'emit Scope'
addToScope: 'event' to 'emit Scope'
addToScope: 'data' to 'emit Scope'
addMember: 'attachToDocument' to 'prototype'
addMember: 'arguments' to 'attachToDocument Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'attachToDocument Scope'
addToScope: 'doc' to 'attachToDocument Scope'
addMember: 'changeListener' to 'prototype'
addMember: 'arguments' to 'changeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'changeListener Scope'
addToScope: 'e' to 'changeListener Scope'
addMember: '$sendDeltaQueue' to 'prototype'
addMember: 'arguments' to '$sendDeltaQueue Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$sendDeltaQueue Scope'
addToScope: 'WorkerClient' to 'NamespaceDeclaration Scope'
addMember: 'WorkerClient' to 'ace'
addMember: 'prototype' to 'WorkerClient'
addMember: 'constructor' to 'prototype'
addMember: 'WorkerClient' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'topLevelNamespaces' to 'ConstructorDeclaration Scope'
addToScope: 'mod' to 'ConstructorDeclaration Scope'
addToScope: 'classname' to 'ConstructorDeclaration Scope'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'onError' to 'prototype'
addMember: 'arguments' to 'onError Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onError Scope'
addToScope: 'e' to 'onError Scope'
addMember: 'onMessage' to 'prototype'
addMember: 'arguments' to 'onMessage Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onMessage Scope'
addToScope: 'e' to 'onMessage Scope'
addMember: '$normalizePath' to 'prototype'
addMember: 'arguments' to '$normalizePath Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$normalizePath Scope'
addToScope: 'path' to '$normalizePath Scope'
addMember: 'terminate' to 'prototype'
addMember: 'arguments' to 'terminate Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'terminate Scope'
addMember: 'send' to 'prototype'
addMember: 'arguments' to 'send Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'send Scope'
addToScope: 'cmd' to 'send Scope'
addToScope: 'args' to 'send Scope'
addMember: 'call' to 'prototype'
addMember: 'arguments' to 'call Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'call Scope'
addToScope: 'cmd' to 'call Scope'
addToScope: 'args' to 'call Scope'
addToScope: 'callback' to 'call Scope'
addMember: 'emit' to 'prototype'
addMember: 'arguments' to 'emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'emit Scope'
addToScope: 'event' to 'emit Scope'
addToScope: 'data' to 'emit Scope'
addMember: 'attachToDocument' to 'prototype'
addMember: 'arguments' to 'attachToDocument Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'attachToDocument Scope'
addToScope: 'doc' to 'attachToDocument Scope'
addMember: 'changeListener' to 'prototype'
addMember: 'arguments' to 'changeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'changeListener Scope'
addToScope: 'e' to 'changeListener Scope'
addMember: '$sendDeltaQueue' to 'prototype'
addMember: 'arguments' to '$sendDeltaQueue Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$sendDeltaQueue Scope'
addToScope: 'HashHandler' to 'NamespaceDeclaration Scope'
addMember: 'HashHandler' to 'ace'
addMember: 'prototype' to 'HashHandler'
addMember: 'constructor' to 'prototype'
addMember: 'HashHandler' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'config' to 'ConstructorDeclaration Scope'
addToScope: 'platform' to 'ConstructorDeclaration Scope'
addMember: 'addCommand' to 'prototype'
addMember: 'arguments' to 'addCommand Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addCommand Scope'
addToScope: 'command' to 'addCommand Scope'
addMember: 'removeCommand' to 'prototype'
addMember: 'arguments' to 'removeCommand Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeCommand Scope'
addToScope: 'command' to 'removeCommand Scope'
addMember: 'bindKey' to 'prototype'
addMember: 'arguments' to 'bindKey Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'bindKey Scope'
addToScope: 'key' to 'bindKey Scope'
addToScope: 'command' to 'bindKey Scope'
addMember: 'addCommands' to 'prototype'
addMember: 'arguments' to 'addCommands Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addCommands Scope'
addToScope: 'commands' to 'addCommands Scope'
addMember: 'removeCommands' to 'prototype'
addMember: 'arguments' to 'removeCommands Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeCommands Scope'
addToScope: 'commands' to 'removeCommands Scope'
addMember: 'bindKeys' to 'prototype'
addMember: 'arguments' to 'bindKeys Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'bindKeys Scope'
addToScope: 'keyList' to 'bindKeys Scope'
addMember: '_buildKeyHash' to 'prototype'
addMember: 'arguments' to '_buildKeyHash Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_buildKeyHash Scope'
addToScope: 'command' to '_buildKeyHash Scope'
addMember: 'parseKeys' to 'prototype'
addMember: 'arguments' to 'parseKeys Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'parseKeys Scope'
addToScope: 'keys' to 'parseKeys Scope'
addMember: 'findKeyCommand' to 'prototype'
addMember: 'arguments' to 'findKeyCommand Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'findKeyCommand Scope'
addToScope: 'hashId' to 'findKeyCommand Scope'
addToScope: 'keyString' to 'findKeyCommand Scope'
addMember: 'handleKeyboard' to 'prototype'
addMember: 'arguments' to 'handleKeyboard Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'handleKeyboard Scope'
addToScope: 'data' to 'handleKeyboard Scope'
addToScope: 'hashId' to 'handleKeyboard Scope'
addToScope: 'keyString' to 'handleKeyboard Scope'
addToScope: 'keyCode' to 'handleKeyboard Scope'
addToScope: 'DefaultHandlers' to 'NamespaceDeclaration Scope'
addMember: 'DefaultHandlers' to 'ace'
addMember: 'prototype' to 'DefaultHandlers'
addMember: 'constructor' to 'prototype'
addMember: 'DefaultHandlers' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'mouseHandler' to 'ConstructorDeclaration Scope'
addMember: 'onMouseDown' to 'prototype'
addMember: 'arguments' to 'onMouseDown Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onMouseDown Scope'
addToScope: 'ev' to 'onMouseDown Scope'
addMember: 'startSelect' to 'prototype'
addMember: 'arguments' to 'startSelect Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'startSelect Scope'
addToScope: 'pos' to 'startSelect Scope'
addMember: 'select' to 'prototype'
addMember: 'arguments' to 'select Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'select Scope'
addMember: 'extendSelectionBy' to 'prototype'
addMember: 'arguments' to 'extendSelectionBy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'extendSelectionBy Scope'
addToScope: 'unitName' to 'extendSelectionBy Scope'
addMember: 'startDrag' to 'prototype'
addMember: 'arguments' to 'startDrag Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'startDrag Scope'
addMember: 'focusWait' to 'prototype'
addMember: 'arguments' to 'focusWait Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'focusWait Scope'
addMember: 'dragWait' to 'prototype'
addMember: 'arguments' to 'dragWait Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'dragWait Scope'
addToScope: 'e' to 'dragWait Scope'
addMember: 'dragWaitEnd' to 'prototype'
addMember: 'arguments' to 'dragWaitEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'dragWaitEnd Scope'
addToScope: 'e' to 'dragWaitEnd Scope'
addMember: 'drag' to 'prototype'
addMember: 'arguments' to 'drag Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'drag Scope'
addMember: 'dragEnd' to 'prototype'
addMember: 'arguments' to 'dragEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'dragEnd Scope'
addToScope: 'e' to 'dragEnd Scope'
addMember: 'onDoubleClick' to 'prototype'
addMember: 'arguments' to 'onDoubleClick Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onDoubleClick Scope'
addToScope: 'ev' to 'onDoubleClick Scope'
addMember: 'onTripleClick' to 'prototype'
addMember: 'arguments' to 'onTripleClick Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onTripleClick Scope'
addToScope: 'ev' to 'onTripleClick Scope'
addMember: 'onQuadClick' to 'prototype'
addMember: 'arguments' to 'onQuadClick Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onQuadClick Scope'
addToScope: 'ev' to 'onQuadClick Scope'
addMember: 'onMouseWheel' to 'prototype'
addMember: 'arguments' to 'onMouseWheel Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onMouseWheel Scope'
addToScope: 'ev' to 'onMouseWheel Scope'
addToScope: 'BackgroundTokenizer' to 'NamespaceDeclaration Scope'
addMember: 'BackgroundTokenizer' to 'ace'
addMember: 'prototype' to 'BackgroundTokenizer'
addMember: 'constructor' to 'prototype'
addMember: 'BackgroundTokenizer' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'tokenizer' to 'ConstructorDeclaration Scope'
addToScope: 'editor' to 'ConstructorDeclaration Scope'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'setTokenizer' to 'prototype'
addMember: 'arguments' to 'setTokenizer Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setTokenizer Scope'
addToScope: 'tokenizer' to 'setTokenizer Scope'
addMember: 'setDocument' to 'prototype'
addMember: 'arguments' to 'setDocument Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDocument Scope'
addToScope: 'doc' to 'setDocument Scope'
addMember: 'fireUpdateEvent' to 'prototype'
addMember: 'arguments' to 'fireUpdateEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'fireUpdateEvent Scope'
addToScope: 'firstRow' to 'fireUpdateEvent Scope'
addToScope: 'lastRow' to 'fireUpdateEvent Scope'
addMember: 'start' to 'prototype'
addMember: 'arguments' to 'start Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'start Scope'
addToScope: 'startRow' to 'start Scope'
addMember: '$updateOnChange' to 'prototype'
addMember: 'arguments' to '$updateOnChange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$updateOnChange Scope'
addToScope: 'delta' to '$updateOnChange Scope'
addMember: 'stop' to 'prototype'
addMember: 'arguments' to 'stop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'stop Scope'
addMember: 'getTokens' to 'prototype'
addMember: 'arguments' to 'getTokens Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getTokens Scope'
addToScope: 'row' to 'getTokens Scope'
addMember: 'getState' to 'prototype'
addMember: 'arguments' to 'getState Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getState Scope'
addToScope: 'row' to 'getState Scope'
addMember: '$tokenizeRow' to 'prototype'
addMember: 'arguments' to '$tokenizeRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$tokenizeRow Scope'
addToScope: 'row' to '$tokenizeRow Scope'
addToScope: 'Mode' to 'NamespaceDeclaration Scope'
addMember: 'Mode' to 'ace'
addMember: 'prototype' to 'Mode'
addMember: 'constructor' to 'prototype'
addMember: 'Mode' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addMember: 'lineCommentStart' to 'prototype'
addMember: 'blockComment' to 'prototype'
addMember: 'start' to 'blockComment'
addMember: 'end' to 'blockComment'
addMember: 'getNextLineIndent' to 'prototype'
addMember: 'arguments' to 'getNextLineIndent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getNextLineIndent Scope'
addToScope: 'state' to 'getNextLineIndent Scope'
addToScope: 'line' to 'getNextLineIndent Scope'
addToScope: 'tab' to 'getNextLineIndent Scope'
addMember: 'checkOutdent' to 'prototype'
addMember: 'arguments' to 'checkOutdent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'checkOutdent Scope'
addToScope: 'state' to 'checkOutdent Scope'
addToScope: 'line' to 'checkOutdent Scope'
addToScope: 'input' to 'checkOutdent Scope'
addMember: 'autoOutdent' to 'prototype'
addMember: 'arguments' to 'autoOutdent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'autoOutdent Scope'
addToScope: 'state' to 'autoOutdent Scope'
addToScope: 'doc' to 'autoOutdent Scope'
addToScope: 'row' to 'autoOutdent Scope'
addMember: 'createWorker' to 'prototype'
addMember: 'arguments' to 'createWorker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createWorker Scope'
addToScope: 'session' to 'createWorker Scope'
addToScope: 'KeyBinding' to 'NamespaceDeclaration Scope'
addMember: 'KeyBinding' to 'ace'
addMember: 'prototype' to 'KeyBinding'
addMember: 'constructor' to 'prototype'
addMember: 'KeyBinding' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'editor' to 'ConstructorDeclaration Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'kb' to 'setDefaultHandler Scope'
addMember: 'setKeyboardHandler' to 'prototype'
addMember: 'arguments' to 'setKeyboardHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setKeyboardHandler Scope'
addToScope: 'kb' to 'setKeyboardHandler Scope'
addMember: 'addKeyboardHandler' to 'prototype'
addMember: 'arguments' to 'addKeyboardHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addKeyboardHandler Scope'
addToScope: 'kb' to 'addKeyboardHandler Scope'
addToScope: 'pos' to 'addKeyboardHandler Scope'
addMember: 'removeKeyboardHandler' to 'prototype'
addMember: 'arguments' to 'removeKeyboardHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeKeyboardHandler Scope'
addToScope: 'kb' to 'removeKeyboardHandler Scope'
addMember: 'getKeyboardHandler' to 'prototype'
addMember: 'arguments' to 'getKeyboardHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getKeyboardHandler Scope'
addMember: '$callKeyboardHandlers' to 'prototype'
addMember: 'arguments' to '$callKeyboardHandlers Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$callKeyboardHandlers Scope'
addToScope: 'hashId' to '$callKeyboardHandlers Scope'
addToScope: 'keyString' to '$callKeyboardHandlers Scope'
addToScope: 'keyCode' to '$callKeyboardHandlers Scope'
addToScope: 'e' to '$callKeyboardHandlers Scope'
addMember: 'onCommandKey' to 'prototype'
addMember: 'arguments' to 'onCommandKey Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onCommandKey Scope'
addToScope: 'e' to 'onCommandKey Scope'
addToScope: 'hashId' to 'onCommandKey Scope'
addToScope: 'keyCode' to 'onCommandKey Scope'
addMember: 'onTextInput' to 'prototype'
addMember: 'arguments' to 'onTextInput Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onTextInput Scope'
addToScope: 'text' to 'onTextInput Scope'
addToScope: 'RangeList' to 'NamespaceDeclaration Scope'
addMember: 'RangeList' to 'ace'
addMember: 'prototype' to 'RangeList'
addMember: 'constructor' to 'prototype'
addMember: 'RangeList' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addMember: 'comparePoints' to 'prototype'
addMember: 'arguments' to 'comparePoints Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'comparePoints Scope'
addToScope: 'p1' to 'comparePoints Scope'
addToScope: 'p2' to 'comparePoints Scope'
addMember: 'pointIndex' to 'prototype'
addMember: 'arguments' to 'pointIndex Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'pointIndex Scope'
addToScope: 'pos' to 'pointIndex Scope'
addToScope: 'excludeEdges' to 'pointIndex Scope'
addToScope: 'startIndex' to 'pointIndex Scope'
addMember: 'add' to 'prototype'
addMember: 'arguments' to 'add Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'add Scope'
addToScope: 'range' to 'add Scope'
addMember: 'addList' to 'prototype'
addMember: 'arguments' to 'addList Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addList Scope'
addToScope: 'list' to 'addList Scope'
addMember: 'substractPoint' to 'prototype'
addMember: 'arguments' to 'substractPoint Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'substractPoint Scope'
addToScope: 'pos' to 'substractPoint Scope'
addMember: 'merge' to 'prototype'
addMember: 'arguments' to 'merge Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'merge Scope'
addMember: 'contains' to 'prototype'
addMember: 'arguments' to 'contains Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'contains Scope'
addToScope: 'row' to 'contains Scope'
addToScope: 'column' to 'contains Scope'
addMember: 'containsPoint' to 'prototype'
addMember: 'arguments' to 'containsPoint Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'containsPoint Scope'
addToScope: 'pos' to 'containsPoint Scope'
addMember: 'rangeAtPoint' to 'prototype'
addMember: 'arguments' to 'rangeAtPoint Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'rangeAtPoint Scope'
addToScope: 'pos' to 'rangeAtPoint Scope'
addMember: 'clipRows' to 'prototype'
addMember: 'arguments' to 'clipRows Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clipRows Scope'
addToScope: 'startRow' to 'clipRows Scope'
addToScope: 'endRow' to 'clipRows Scope'
addMember: 'removeAll' to 'prototype'
addMember: 'arguments' to 'removeAll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAll Scope'
addMember: 'attach' to 'prototype'
addMember: 'arguments' to 'attach Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'attach Scope'
addToScope: 'session' to 'attach Scope'
addMember: 'detach' to 'prototype'
addMember: 'arguments' to 'detach Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'detach Scope'
addMember: '$onChange' to 'prototype'
addMember: 'arguments' to '$onChange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$onChange Scope'
addToScope: 'e' to '$onChange Scope'
addToScope: 'TextHighlightRules' to 'NamespaceDeclaration Scope'
addMember: 'TextHighlightRules' to 'ace'
addMember: 'prototype' to 'TextHighlightRules'
addMember: 'constructor' to 'prototype'
addMember: 'TextHighlightRules' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addMember: 'addRules' to 'prototype'
addMember: 'arguments' to 'addRules Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addRules Scope'
addToScope: 'rules' to 'addRules Scope'
addToScope: 'prefix' to 'addRules Scope'
addMember: 'getRules' to 'prototype'
addMember: 'arguments' to 'getRules Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getRules Scope'
addMember: 'embedRules' to 'prototype'
addMember: 'arguments' to 'embedRules Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'embedRules Scope'
addToScope: 'HighlightRules' to 'embedRules Scope'
addToScope: 'prefix' to 'embedRules Scope'
addToScope: 'escapeRules' to 'embedRules Scope'
addToScope: 'states' to 'embedRules Scope'
addToScope: 'append' to 'embedRules Scope'
addMember: 'getEmbeds' to 'prototype'
addMember: 'arguments' to 'getEmbeds Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getEmbeds Scope'
addMember: 'normalizeRules' to 'prototype'
addMember: 'arguments' to 'normalizeRules Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'normalizeRules Scope'
addMember: 'createKeywordMapper' to 'prototype'
addMember: 'arguments' to 'createKeywordMapper Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createKeywordMapper Scope'
addToScope: 'map' to 'createKeywordMapper Scope'
addToScope: 'defaultToken' to 'createKeywordMapper Scope'
addToScope: 'ignoreCase' to 'createKeywordMapper Scope'
addToScope: 'splitChar' to 'createKeywordMapper Scope'
addMember: 'getKeywords' to 'prototype'
addMember: 'arguments' to 'getKeywords Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getKeywords Scope'
addToScope: 'Marker' to 'NamespaceDeclaration Scope'
addMember: 'Marker' to 'ace'
addMember: 'prototype' to 'Marker'
addMember: 'constructor' to 'prototype'
addMember: 'Marker' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'parentEl' to 'ConstructorDeclaration Scope'
addMember: '$padding' to 'prototype'
addMember: 'setPadding' to 'prototype'
addMember: 'arguments' to 'setPadding Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setPadding Scope'
addToScope: 'padding' to 'setPadding Scope'
addMember: 'setSession' to 'prototype'
addMember: 'arguments' to 'setSession Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setSession Scope'
addToScope: 'session' to 'setSession Scope'
addMember: 'setMarkers' to 'prototype'
addMember: 'arguments' to 'setMarkers Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setMarkers Scope'
addToScope: 'markers' to 'setMarkers Scope'
addMember: 'update' to 'prototype'
addMember: 'arguments' to 'update Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'update Scope'
addToScope: 'config' to 'update Scope'
addMember: '$getTop' to 'prototype'
addMember: 'arguments' to '$getTop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$getTop Scope'
addToScope: 'row' to '$getTop Scope'
addToScope: 'layerConfig' to '$getTop Scope'
addMember: 'drawTextMarker' to 'prototype'
addMember: 'arguments' to 'drawTextMarker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'drawTextMarker Scope'
addToScope: 'stringBuilder' to 'drawTextMarker Scope'
addToScope: 'range' to 'drawTextMarker Scope'
addToScope: 'clazz' to 'drawTextMarker Scope'
addToScope: 'layerConfig' to 'drawTextMarker Scope'
addToScope: 'extraStyle' to 'drawTextMarker Scope'
addMember: 'drawMultiLineMarker' to 'prototype'
addMember: 'arguments' to 'drawMultiLineMarker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'drawMultiLineMarker Scope'
addToScope: 'stringBuilder' to 'drawMultiLineMarker Scope'
addToScope: 'range' to 'drawMultiLineMarker Scope'
addToScope: 'clazz' to 'drawMultiLineMarker Scope'
addToScope: 'config' to 'drawMultiLineMarker Scope'
addToScope: 'extraStyle' to 'drawMultiLineMarker Scope'
addMember: 'drawSingleLineMarker' to 'prototype'
addMember: 'arguments' to 'drawSingleLineMarker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'drawSingleLineMarker Scope'
addToScope: 'stringBuilder' to 'drawSingleLineMarker Scope'
addToScope: 'range' to 'drawSingleLineMarker Scope'
addToScope: 'clazz' to 'drawSingleLineMarker Scope'
addToScope: 'config' to 'drawSingleLineMarker Scope'
addToScope: 'extraLength' to 'drawSingleLineMarker Scope'
addToScope: 'extraStyle' to 'drawSingleLineMarker Scope'
addMember: 'drawFullLineMarker' to 'prototype'
addMember: 'arguments' to 'drawFullLineMarker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'drawFullLineMarker Scope'
addToScope: 'stringBuilder' to 'drawFullLineMarker Scope'
addToScope: 'range' to 'drawFullLineMarker Scope'
addToScope: 'clazz' to 'drawFullLineMarker Scope'
addToScope: 'config' to 'drawFullLineMarker Scope'
addToScope: 'extraStyle' to 'drawFullLineMarker Scope'
addMember: 'drawScreenLineMarker' to 'prototype'
addMember: 'arguments' to 'drawScreenLineMarker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'drawScreenLineMarker Scope'
addToScope: 'stringBuilder' to 'drawScreenLineMarker Scope'
addToScope: 'range' to 'drawScreenLineMarker Scope'
addToScope: 'clazz' to 'drawScreenLineMarker Scope'
addToScope: 'config' to 'drawScreenLineMarker Scope'
addToScope: 'extraStyle' to 'drawScreenLineMarker Scope'
addToScope: 'Text' to 'NamespaceDeclaration Scope'
addMember: 'Text' to 'ace'
addMember: 'prototype' to 'Text'
addMember: 'constructor' to 'prototype'
addMember: 'Text' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'parentEl' to 'ConstructorDeclaration Scope'
addMember: 'EOF_CHAR' to 'prototype'
addMember: 'EOL_CHAR' to 'prototype'
addMember: 'TAB_CHAR' to 'prototype'
addMember: 'SPACE_CHAR' to 'prototype'
addMember: '$padding' to 'prototype'
addMember: '$fontStyles' to 'prototype'
addMember: 'showInvisibles' to 'prototype'
addMember: 'displayIndentGuides' to 'prototype'
addMember: '$tabStrings' to 'prototype'
addMember: '$textToken' to 'prototype'
addMember: 'fontFamily' to '$fontStyles'
addMember: 'fontSize' to '$fontStyles'
addMember: 'fontWeight' to '$fontStyles'
addMember: 'fontStyle' to '$fontStyles'
addMember: 'lineHeight' to '$fontStyles'
addMember: 'length' to '$tabStrings'
addMember: 'text' to '$textToken'
addMember: 'rparen' to '$textToken'
addMember: 'lparen' to '$textToken'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'setPadding' to 'prototype'
addMember: 'arguments' to 'setPadding Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setPadding Scope'
addToScope: 'padding' to 'setPadding Scope'
addMember: 'getLineHeight' to 'prototype'
addMember: 'arguments' to 'getLineHeight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getLineHeight Scope'
addMember: 'getCharacterWidth' to 'prototype'
addMember: 'arguments' to 'getCharacterWidth Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getCharacterWidth Scope'
addMember: 'checkForSizeChanges' to 'prototype'
addMember: 'arguments' to 'checkForSizeChanges Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'checkForSizeChanges Scope'
addMember: '$pollSizeChanges' to 'prototype'
addMember: 'arguments' to '$pollSizeChanges Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$pollSizeChanges Scope'
addMember: '$measureSizes' to 'prototype'
addMember: 'arguments' to '$measureSizes Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$measureSizes Scope'
addMember: 'setSession' to 'prototype'
addMember: 'arguments' to 'setSession Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setSession Scope'
addToScope: 'session' to 'setSession Scope'
addMember: 'setShowInvisibles' to 'prototype'
addMember: 'arguments' to 'setShowInvisibles Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setShowInvisibles Scope'
addToScope: 'showInvisibles' to 'setShowInvisibles Scope'
addMember: 'setDisplayIndentGuides' to 'prototype'
addMember: 'arguments' to 'setDisplayIndentGuides Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDisplayIndentGuides Scope'
addToScope: 'display' to 'setDisplayIndentGuides Scope'
addMember: '$computeTabString' to 'prototype'
addMember: 'arguments' to '$computeTabString Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$computeTabString Scope'
addMember: 'onChangeTabSize' to 'prototype'
addMember: 'arguments' to 'onChangeTabSize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onChangeTabSize Scope'
addMember: 'updateLines' to 'prototype'
addMember: 'arguments' to 'updateLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'updateLines Scope'
addToScope: 'config' to 'updateLines Scope'
addToScope: 'firstRow' to 'updateLines Scope'
addToScope: 'lastRow' to 'updateLines Scope'
addMember: 'scrollLines' to 'prototype'
addMember: 'arguments' to 'scrollLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollLines Scope'
addToScope: 'config' to 'scrollLines Scope'
addMember: '$renderLinesFragment' to 'prototype'
addMember: 'arguments' to '$renderLinesFragment Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$renderLinesFragment Scope'
addToScope: 'config' to '$renderLinesFragment Scope'
addToScope: 'firstRow' to '$renderLinesFragment Scope'
addToScope: 'lastRow' to '$renderLinesFragment Scope'
addMember: 'update' to 'prototype'
addMember: 'arguments' to 'update Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'update Scope'
addToScope: 'config' to 'update Scope'
addMember: '$renderToken' to 'prototype'
addMember: 'arguments' to '$renderToken Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$renderToken Scope'
addToScope: 'stringBuilder' to '$renderToken Scope'
addToScope: 'screenColumn' to '$renderToken Scope'
addToScope: 'token' to '$renderToken Scope'
addToScope: 'value' to '$renderToken Scope'
addMember: 'renderIndentGuide' to 'prototype'
addMember: 'arguments' to 'renderIndentGuide Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'renderIndentGuide Scope'
addToScope: 'stringBuilder' to 'renderIndentGuide Scope'
addToScope: 'value' to 'renderIndentGuide Scope'
addMember: '$renderWrappedLine' to 'prototype'
addMember: 'arguments' to '$renderWrappedLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$renderWrappedLine Scope'
addToScope: 'stringBuilder' to '$renderWrappedLine Scope'
addToScope: 'tokens' to '$renderWrappedLine Scope'
addToScope: 'splits' to '$renderWrappedLine Scope'
addToScope: 'onlyContents' to '$renderWrappedLine Scope'
addMember: '$renderSimpleLine' to 'prototype'
addMember: 'arguments' to '$renderSimpleLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$renderSimpleLine Scope'
addToScope: 'stringBuilder' to '$renderSimpleLine Scope'
addToScope: 'tokens' to '$renderSimpleLine Scope'
addMember: '$renderLine' to 'prototype'
addMember: 'arguments' to '$renderLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$renderLine Scope'
addToScope: 'stringBuilder' to '$renderLine Scope'
addToScope: 'row' to '$renderLine Scope'
addToScope: 'onlyContents' to '$renderLine Scope'
addToScope: 'foldLine' to '$renderLine Scope'
addMember: '$getFoldLineTokens' to 'prototype'
addMember: 'arguments' to '$getFoldLineTokens Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$getFoldLineTokens Scope'
addToScope: 'row' to '$getFoldLineTokens Scope'
addToScope: 'foldLine' to '$getFoldLineTokens Scope'
addMember: '$useLineGroups' to 'prototype'
addMember: 'arguments' to '$useLineGroups Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$useLineGroups Scope'
addMember: 'destroy' to 'prototype'
addMember: 'arguments' to 'destroy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'destroy Scope'
addToScope: 'Selection' to 'NamespaceDeclaration Scope'
addMember: 'Selection' to 'ace'
addMember: 'prototype' to 'Selection'
addMember: 'constructor' to 'prototype'
addMember: 'Selection' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'session' to 'ConstructorDeclaration Scope'
addMember: 'ranges' to 'prototype'
addMember: 'rangeList' to 'prototype'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'isEmpty' to 'prototype'
addMember: 'arguments' to 'isEmpty Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isEmpty Scope'
addMember: 'isMultiLine' to 'prototype'
addMember: 'arguments' to 'isMultiLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isMultiLine Scope'
addMember: 'getCursor' to 'prototype'
addMember: 'arguments' to 'getCursor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getCursor Scope'
addMember: 'setSelectionAnchor' to 'prototype'
addMember: 'arguments' to 'setSelectionAnchor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setSelectionAnchor Scope'
addToScope: 'row' to 'setSelectionAnchor Scope'
addToScope: 'column' to 'setSelectionAnchor Scope'
addMember: 'getSelectionAnchor' to 'prototype'
addMember: 'arguments' to 'getSelectionAnchor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getSelectionAnchor Scope'
addMember: 'getSelectionLead' to 'prototype'
addMember: 'arguments' to 'getSelectionLead Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getSelectionLead Scope'
addMember: 'shiftSelection' to 'prototype'
addMember: 'arguments' to 'shiftSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'shiftSelection Scope'
addToScope: 'columns' to 'shiftSelection Scope'
addMember: 'isBackwards' to 'prototype'
addMember: 'arguments' to 'isBackwards Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isBackwards Scope'
addMember: 'getRange' to 'prototype'
addMember: 'arguments' to 'getRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getRange Scope'
addMember: 'clearSelection' to 'prototype'
addMember: 'arguments' to 'clearSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clearSelection Scope'
addMember: 'selectAll' to 'prototype'
addMember: 'arguments' to 'selectAll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectAll Scope'
addMember: 'setSelectionRange' to 'prototype'
addMember: 'arguments' to 'setSelectionRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setSelectionRange Scope'
addToScope: 'range' to 'setSelectionRange Scope'
addToScope: 'reverse' to 'setSelectionRange Scope'
addMember: 'setRange' to 'prototype'
addMember: 'arguments' to 'setRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setRange Scope'
addToScope: 'range' to 'setRange Scope'
addToScope: 'reverse' to 'setRange Scope'
addMember: '$moveSelection' to 'prototype'
addMember: 'arguments' to '$moveSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$moveSelection Scope'
addToScope: 'mover' to '$moveSelection Scope'
addMember: 'selectTo' to 'prototype'
addMember: 'arguments' to 'selectTo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectTo Scope'
addToScope: 'row' to 'selectTo Scope'
addToScope: 'column' to 'selectTo Scope'
addMember: 'selectToPosition' to 'prototype'
addMember: 'arguments' to 'selectToPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectToPosition Scope'
addToScope: 'pos' to 'selectToPosition Scope'
addMember: 'selectUp' to 'prototype'
addMember: 'arguments' to 'selectUp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectUp Scope'
addMember: 'selectDown' to 'prototype'
addMember: 'arguments' to 'selectDown Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectDown Scope'
addMember: 'selectRight' to 'prototype'
addMember: 'arguments' to 'selectRight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectRight Scope'
addMember: 'selectLeft' to 'prototype'
addMember: 'arguments' to 'selectLeft Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectLeft Scope'
addMember: 'selectLineStart' to 'prototype'
addMember: 'arguments' to 'selectLineStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectLineStart Scope'
addMember: 'selectLineEnd' to 'prototype'
addMember: 'arguments' to 'selectLineEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectLineEnd Scope'
addMember: 'selectFileEnd' to 'prototype'
addMember: 'arguments' to 'selectFileEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectFileEnd Scope'
addMember: 'selectFileStart' to 'prototype'
addMember: 'arguments' to 'selectFileStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectFileStart Scope'
addMember: 'selectWordRight' to 'prototype'
addMember: 'arguments' to 'selectWordRight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectWordRight Scope'
addMember: 'selectWordLeft' to 'prototype'
addMember: 'arguments' to 'selectWordLeft Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectWordLeft Scope'
addMember: 'getWordRange' to 'prototype'
addMember: 'arguments' to 'getWordRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getWordRange Scope'
addToScope: 'row' to 'getWordRange Scope'
addToScope: 'column' to 'getWordRange Scope'
addMember: 'selectWord' to 'prototype'
addMember: 'arguments' to 'selectWord Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectWord Scope'
addMember: 'selectAWord' to 'prototype'
addMember: 'arguments' to 'selectAWord Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectAWord Scope'
addMember: 'getLineRange' to 'prototype'
addMember: 'arguments' to 'getLineRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getLineRange Scope'
addToScope: 'row' to 'getLineRange Scope'
addToScope: 'excludeLastChar' to 'getLineRange Scope'
addMember: 'selectLine' to 'prototype'
addMember: 'arguments' to 'selectLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectLine Scope'
addMember: 'moveCursorUp' to 'prototype'
addMember: 'arguments' to 'moveCursorUp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorUp Scope'
addMember: 'moveCursorDown' to 'prototype'
addMember: 'arguments' to 'moveCursorDown Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorDown Scope'
addMember: 'moveCursorLeft' to 'prototype'
addMember: 'arguments' to 'moveCursorLeft Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorLeft Scope'
addMember: 'moveCursorRight' to 'prototype'
addMember: 'arguments' to 'moveCursorRight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorRight Scope'
addMember: 'moveCursorLineStart' to 'prototype'
addMember: 'arguments' to 'moveCursorLineStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorLineStart Scope'
addMember: 'moveCursorLineEnd' to 'prototype'
addMember: 'arguments' to 'moveCursorLineEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorLineEnd Scope'
addMember: 'moveCursorFileEnd' to 'prototype'
addMember: 'arguments' to 'moveCursorFileEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorFileEnd Scope'
addMember: 'moveCursorFileStart' to 'prototype'
addMember: 'arguments' to 'moveCursorFileStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorFileStart Scope'
addMember: 'moveCursorLongWordRight' to 'prototype'
addMember: 'arguments' to 'moveCursorLongWordRight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorLongWordRight Scope'
addMember: 'moveCursorLongWordLeft' to 'prototype'
addMember: 'arguments' to 'moveCursorLongWordLeft Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorLongWordLeft Scope'
addMember: '$shortWordEndIndex' to 'prototype'
addMember: 'arguments' to '$shortWordEndIndex Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$shortWordEndIndex Scope'
addToScope: 'rightOfCursor' to '$shortWordEndIndex Scope'
addMember: 'moveCursorShortWordRight' to 'prototype'
addMember: 'arguments' to 'moveCursorShortWordRight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorShortWordRight Scope'
addMember: 'moveCursorShortWordLeft' to 'prototype'
addMember: 'arguments' to 'moveCursorShortWordLeft Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorShortWordLeft Scope'
addMember: 'moveCursorWordRight' to 'prototype'
addMember: 'arguments' to 'moveCursorWordRight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorWordRight Scope'
addMember: 'moveCursorWordLeft' to 'prototype'
addMember: 'arguments' to 'moveCursorWordLeft Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorWordLeft Scope'
addMember: 'moveCursorBy' to 'prototype'
addMember: 'arguments' to 'moveCursorBy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorBy Scope'
addToScope: 'rows' to 'moveCursorBy Scope'
addToScope: 'chars' to 'moveCursorBy Scope'
addMember: 'moveCursorToPosition' to 'prototype'
addMember: 'arguments' to 'moveCursorToPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorToPosition Scope'
addToScope: 'position' to 'moveCursorToPosition Scope'
addMember: 'moveCursorTo' to 'prototype'
addMember: 'arguments' to 'moveCursorTo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorTo Scope'
addToScope: 'row' to 'moveCursorTo Scope'
addToScope: 'column' to 'moveCursorTo Scope'
addToScope: 'keepDesiredColumn' to 'moveCursorTo Scope'
addMember: 'moveCursorToScreen' to 'prototype'
addMember: 'arguments' to 'moveCursorToScreen Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorToScreen Scope'
addToScope: 'row' to 'moveCursorToScreen Scope'
addToScope: 'column' to 'moveCursorToScreen Scope'
addToScope: 'keepDesiredColumn' to 'moveCursorToScreen Scope'
addMember: 'detach' to 'prototype'
addMember: 'arguments' to 'detach Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'detach Scope'
addMember: 'fromOrientedRange' to 'prototype'
addMember: 'arguments' to 'fromOrientedRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'fromOrientedRange Scope'
addToScope: 'range' to 'fromOrientedRange Scope'
addMember: 'toOrientedRange' to 'prototype'
addMember: 'arguments' to 'toOrientedRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toOrientedRange Scope'
addToScope: 'range' to 'toOrientedRange Scope'
addMember: 'addRange' to 'prototype'
addMember: 'arguments' to 'addRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addRange Scope'
addToScope: 'range' to 'addRange Scope'
addToScope: '$blockChangeEvents' to 'addRange Scope'
addMember: 'toSingleRange' to 'prototype'
addMember: 'arguments' to 'toSingleRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toSingleRange Scope'
addToScope: 'range' to 'toSingleRange Scope'
addMember: 'substractPoint' to 'prototype'
addMember: 'arguments' to 'substractPoint Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'substractPoint Scope'
addToScope: 'pos' to 'substractPoint Scope'
addMember: 'mergeOverlappingRanges' to 'prototype'
addMember: 'arguments' to 'mergeOverlappingRanges Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'mergeOverlappingRanges Scope'
addMember: '$onAddRange' to 'prototype'
addMember: 'arguments' to '$onAddRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$onAddRange Scope'
addToScope: 'range' to '$onAddRange Scope'
addMember: '$onRemoveRange' to 'prototype'
addMember: 'arguments' to '$onRemoveRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$onRemoveRange Scope'
addToScope: 'removed' to '$onRemoveRange Scope'
addMember: '$initRangeList' to 'prototype'
addMember: 'arguments' to '$initRangeList Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$initRangeList Scope'
addMember: 'getAllRanges' to 'prototype'
addMember: 'arguments' to 'getAllRanges Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAllRanges Scope'
addMember: 'splitIntoLines' to 'prototype'
addMember: 'arguments' to 'splitIntoLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'splitIntoLines Scope'
addMember: 'toggleBlockSelection' to 'prototype'
addMember: 'arguments' to 'toggleBlockSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toggleBlockSelection Scope'
addMember: 'rectangularRangeBlock' to 'prototype'
addMember: 'arguments' to 'rectangularRangeBlock Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'rectangularRangeBlock Scope'
addToScope: 'screenCursor' to 'rectangularRangeBlock Scope'
addToScope: 'screenAnchor' to 'rectangularRangeBlock Scope'
addToScope: 'includeEmptyLines' to 'rectangularRangeBlock Scope'
addToScope: 'Gutter' to 'NamespaceDeclaration Scope'
addMember: 'Gutter' to 'ace'
addMember: 'prototype' to 'Gutter'
addMember: 'constructor' to 'prototype'
addMember: 'Gutter' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'parentEl' to 'ConstructorDeclaration Scope'
addMember: '$showFoldWidgets' to 'prototype'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'setSession' to 'prototype'
addMember: 'arguments' to 'setSession Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setSession Scope'
addToScope: 'session' to 'setSession Scope'
addMember: 'addGutterDecoration' to 'prototype'
addMember: 'arguments' to 'addGutterDecoration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addGutterDecoration Scope'
addToScope: 'row' to 'addGutterDecoration Scope'
addToScope: 'className' to 'addGutterDecoration Scope'
addMember: 'removeGutterDecoration' to 'prototype'
addMember: 'arguments' to 'removeGutterDecoration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeGutterDecoration Scope'
addToScope: 'row' to 'removeGutterDecoration Scope'
addToScope: 'className' to 'removeGutterDecoration Scope'
addMember: 'setAnnotations' to 'prototype'
addMember: 'arguments' to 'setAnnotations Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setAnnotations Scope'
addToScope: 'annotations' to 'setAnnotations Scope'
addMember: '$updateAnnotations' to 'prototype'
addMember: 'arguments' to '$updateAnnotations Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$updateAnnotations Scope'
addToScope: 'e' to '$updateAnnotations Scope'
addMember: 'update' to 'prototype'
addMember: 'arguments' to 'update Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'update Scope'
addToScope: 'config' to 'update Scope'
addMember: 'setShowFoldWidgets' to 'prototype'
addMember: 'arguments' to 'setShowFoldWidgets Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setShowFoldWidgets Scope'
addToScope: 'show' to 'setShowFoldWidgets Scope'
addMember: 'getShowFoldWidgets' to 'prototype'
addMember: 'arguments' to 'getShowFoldWidgets Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getShowFoldWidgets Scope'
addMember: '$computePadding' to 'prototype'
addMember: 'arguments' to '$computePadding Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$computePadding Scope'
addMember: 'getRegion' to 'prototype'
addMember: 'arguments' to 'getRegion Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getRegion Scope'
addToScope: 'point' to 'getRegion Scope'
addToScope: 'Behaviour' to 'NamespaceDeclaration Scope'
addMember: 'Behaviour' to 'ace'
addMember: 'prototype' to 'Behaviour'
addMember: 'constructor' to 'prototype'
addMember: 'Behaviour' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addMember: 'add' to 'prototype'
addMember: 'arguments' to 'add Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'add Scope'
addToScope: 'name' to 'add Scope'
addToScope: 'action' to 'add Scope'
addToScope: 'callback' to 'add Scope'
addMember: 'addBehaviours' to 'prototype'
addMember: 'arguments' to 'addBehaviours Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addBehaviours Scope'
addToScope: 'behaviours' to 'addBehaviours Scope'
addMember: 'remove' to 'prototype'
addMember: 'arguments' to 'remove Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'remove Scope'
addToScope: 'name' to 'remove Scope'
addMember: 'inherit' to 'prototype'
addMember: 'arguments' to 'inherit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'inherit Scope'
addToScope: 'mode' to 'inherit Scope'
addToScope: 'filter' to 'inherit Scope'
addMember: 'getBehaviours' to 'prototype'
addMember: 'arguments' to 'getBehaviours Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getBehaviours Scope'
addToScope: 'filter' to 'getBehaviours Scope'
addToScope: 'VirtualRenderer' to 'NamespaceDeclaration Scope'
addMember: 'VirtualRenderer' to 'ace'
addMember: 'prototype' to 'VirtualRenderer'
addMember: 'constructor' to 'prototype'
addMember: 'VirtualRenderer' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'container' to 'ConstructorDeclaration Scope'
addToScope: 'theme' to 'ConstructorDeclaration Scope'
addMember: '$padding' to 'prototype'
addMember: 'STEPS' to 'prototype'
addMember: 'CHANGE_FULL' to 'prototype'
addMember: '$highlightGutterLine' to 'prototype'
addMember: 'CHANGE_MARKER' to 'prototype'
addMember: '$printMarginColumn' to 'prototype'
addMember: '$showInvisibles' to 'prototype'
addMember: '$fontSize' to 'prototype'
addMember: 'CHANGE_CURSOR' to 'prototype'
addMember: 'CHANGE_MARKER_BACK' to 'prototype'
addMember: 'CHANGE_H_SCROLL' to 'prototype'
addMember: '$showPrintMargin' to 'prototype'
addMember: 'CHANGE_LINES' to 'prototype'
addMember: '$showGutter' to 'prototype'
addMember: '$animatedScroll' to 'prototype'
addMember: 'CHANGE_SIZE' to 'prototype'
addMember: 'CHANGE_MARKER_FRONT' to 'prototype'
addMember: '$displayIndentGuides' to 'prototype'
addMember: 'CHANGE_TEXT' to 'prototype'
addMember: '$hScrollBarAlwaysVisible' to 'prototype'
addMember: 'CHANGE_SCROLL' to 'prototype'
addMember: '$showFoldWidgets' to 'prototype'
addMember: 'CHANGE_GUTTER' to 'prototype'
addMember: '$options' to 'prototype'
addMember: '$fadeFoldWidgets' to 'prototype'
addMember: 'animatedScroll' to '$options'
addMember: 'initialValue' to 'animatedScroll'
addMember: 'name' to 'animatedScroll'
addMember: 'showInvisibles' to '$options'
addMember: 'set' to 'showInvisibles'
addMember: 'initialValue' to 'showInvisibles'
addMember: 'name' to 'showInvisibles'
addMember: 'showPrintMargin' to '$options'
addMember: 'set' to 'showPrintMargin'
addMember: 'initialValue' to 'showPrintMargin'
addMember: 'name' to 'showPrintMargin'
addMember: 'printMarginColumn' to '$options'
addMember: 'set' to 'printMarginColumn'
addMember: 'initialValue' to 'printMarginColumn'
addMember: 'name' to 'printMarginColumn'
addMember: 'printMargin' to '$options'
addMember: 'set' to 'printMargin'
addMember: 'get' to 'printMargin'
addMember: 'name' to 'printMargin'
addMember: 'showGutter' to '$options'
addMember: 'set' to 'showGutter'
addMember: 'initialValue' to 'showGutter'
addMember: 'name' to 'showGutter'
addMember: 'fadeFoldWidgets' to '$options'
addMember: 'set' to 'fadeFoldWidgets'
addMember: 'initialValue' to 'fadeFoldWidgets'
addMember: 'name' to 'fadeFoldWidgets'
addMember: 'showFoldWidgets' to '$options'
addMember: 'set' to 'showFoldWidgets'
addMember: 'initialValue' to 'showFoldWidgets'
addMember: 'name' to 'showFoldWidgets'
addMember: 'displayIndentGuides' to '$options'
addMember: 'set' to 'displayIndentGuides'
addMember: 'initialValue' to 'displayIndentGuides'
addMember: 'name' to 'displayIndentGuides'
addMember: 'highlightGutterLine' to '$options'
addMember: 'set' to 'highlightGutterLine'
addMember: 'initialValue' to 'highlightGutterLine'
addMember: 'value' to 'highlightGutterLine'
addMember: 'name' to 'highlightGutterLine'
addMember: 'hScrollBarAlwaysVisible' to '$options'
addMember: 'set' to 'hScrollBarAlwaysVisible'
addMember: 'initialValue' to 'hScrollBarAlwaysVisible'
addMember: 'name' to 'hScrollBarAlwaysVisible'
addMember: 'fontSize' to '$options'
addMember: 'set' to 'fontSize'
addMember: 'initialValue' to 'fontSize'
addMember: 'name' to 'fontSize'
addMember: 'fontFamily' to '$options'
addMember: 'set' to 'fontFamily'
addMember: 'name' to 'fontFamily'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'updateCharacterSize' to 'prototype'
addMember: 'arguments' to 'updateCharacterSize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'updateCharacterSize Scope'
addMember: 'alignCursor' to 'prototype'
addMember: 'arguments' to 'alignCursor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'alignCursor Scope'
addToScope: 'cursor' to 'alignCursor Scope'
addToScope: 'alignment' to 'alignCursor Scope'
addMember: 'getShowGutter' to 'prototype'
addMember: 'arguments' to 'getShowGutter Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getShowGutter Scope'
addMember: 'isScrollableBy' to 'prototype'
addMember: 'arguments' to 'isScrollableBy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isScrollableBy Scope'
addToScope: 'deltaX' to 'isScrollableBy Scope'
addToScope: 'deltaY' to 'isScrollableBy Scope'
addMember: 'scrollBy' to 'prototype'
addMember: 'arguments' to 'scrollBy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollBy Scope'
addToScope: 'deltaX' to 'scrollBy Scope'
addToScope: 'deltaY' to 'scrollBy Scope'
addMember: 'getPrintMarginColumn' to 'prototype'
addMember: 'arguments' to 'getPrintMarginColumn Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getPrintMarginColumn Scope'
addMember: 'setAnimatedScroll' to 'prototype'
addMember: 'arguments' to 'setAnimatedScroll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setAnimatedScroll Scope'
addToScope: 'shouldAnimate' to 'setAnimatedScroll Scope'
addMember: 'getShowPrintMargin' to 'prototype'
addMember: 'arguments' to 'getShowPrintMargin Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getShowPrintMargin Scope'
addMember: '$updateGutterLineHighlight' to 'prototype'
addMember: 'arguments' to '$updateGutterLineHighlight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$updateGutterLineHighlight Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: 'setCompositionText' to 'prototype'
addMember: 'arguments' to 'setCompositionText Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setCompositionText Scope'
addToScope: 'text' to 'setCompositionText Scope'
addMember: 'getLastVisibleRow' to 'prototype'
addMember: 'arguments' to 'getLastVisibleRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getLastVisibleRow Scope'
addMember: 'getContainerElement' to 'prototype'
addMember: 'arguments' to 'getContainerElement Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getContainerElement Scope'
addMember: 'destroy' to 'prototype'
addMember: 'arguments' to 'destroy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'destroy Scope'
addMember: 'getHScrollBarAlwaysVisible' to 'prototype'
addMember: 'arguments' to 'getHScrollBarAlwaysVisible Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getHScrollBarAlwaysVisible Scope'
addMember: 'onChangeTabSize' to 'prototype'
addMember: 'arguments' to 'onChangeTabSize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onChangeTabSize Scope'
addMember: 'getFirstFullyVisibleRow' to 'prototype'
addMember: 'arguments' to 'getFirstFullyVisibleRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFirstFullyVisibleRow Scope'
addMember: 'getScrollBottomRow' to 'prototype'
addMember: 'arguments' to 'getScrollBottomRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getScrollBottomRow Scope'
addMember: 'getScrollTop' to 'prototype'
addMember: 'arguments' to 'getScrollTop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getScrollTop Scope'
addMember: 'onResize' to 'prototype'
addMember: 'arguments' to 'onResize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onResize Scope'
addToScope: 'force' to 'onResize Scope'
addToScope: 'gutterWidth' to 'onResize Scope'
addToScope: 'width' to 'onResize Scope'
addToScope: 'height' to 'onResize Scope'
addMember: 'screenToTextCoordinates' to 'prototype'
addMember: 'arguments' to 'screenToTextCoordinates Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'screenToTextCoordinates Scope'
addToScope: 'x' to 'screenToTextCoordinates Scope'
addToScope: 'y' to 'screenToTextCoordinates Scope'
addMember: 'updateText' to 'prototype'
addMember: 'arguments' to 'updateText Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'updateText Scope'
addMember: 'showComposition' to 'prototype'
addMember: 'arguments' to 'showComposition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'showComposition Scope'
addToScope: 'position' to 'showComposition Scope'
addMember: 'scrollCursorIntoView' to 'prototype'
addMember: 'arguments' to 'scrollCursorIntoView Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollCursorIntoView Scope'
addToScope: 'cursor' to 'scrollCursorIntoView Scope'
addToScope: 'offset' to 'scrollCursorIntoView Scope'
addMember: '$getLongestLine' to 'prototype'
addMember: 'arguments' to '$getLongestLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$getLongestLine Scope'
addMember: 'updateFull' to 'prototype'
addMember: 'arguments' to 'updateFull Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'updateFull Scope'
addToScope: 'force' to 'updateFull Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'scrollToY' to 'prototype'
addMember: 'arguments' to 'scrollToY Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollToY Scope'
addToScope: 'scrollTop' to 'scrollToY Scope'
addMember: 'removeGutterDecoration' to 'prototype'
addMember: 'arguments' to 'removeGutterDecoration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeGutterDecoration Scope'
addToScope: 'row' to 'removeGutterDecoration Scope'
addToScope: 'className' to 'removeGutterDecoration Scope'
addMember: 'adjustWrapLimit' to 'prototype'
addMember: 'arguments' to 'adjustWrapLimit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'adjustWrapLimit Scope'
addMember: 'getOption' to 'prototype'
addMember: 'arguments' to 'getOption Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getOption Scope'
addToScope: 'name' to 'getOption Scope'
addMember: '$calcSteps' to 'prototype'
addMember: 'arguments' to '$calcSteps Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$calcSteps Scope'
addToScope: 'fromValue' to '$calcSteps Scope'
addToScope: 'toValue' to '$calcSteps Scope'
addMember: 'addGutterDecoration' to 'prototype'
addMember: 'arguments' to 'addGutterDecoration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addGutterDecoration Scope'
addToScope: 'row' to 'addGutterDecoration Scope'
addToScope: 'className' to 'addGutterDecoration Scope'
addMember: 'getLastFullyVisibleRow' to 'prototype'
addMember: 'arguments' to 'getLastFullyVisibleRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getLastFullyVisibleRow Scope'
addMember: 'getTheme' to 'prototype'
addMember: 'arguments' to 'getTheme Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getTheme Scope'
addMember: 'setOptions' to 'prototype'
addMember: 'arguments' to 'setOptions Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setOptions Scope'
addToScope: 'optList' to 'setOptions Scope'
addMember: 'setAnnotations' to 'prototype'
addMember: 'arguments' to 'setAnnotations Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setAnnotations Scope'
addToScope: 'annotations' to 'setAnnotations Scope'
addMember: 'visualizeBlur' to 'prototype'
addMember: 'arguments' to 'visualizeBlur Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'visualizeBlur Scope'
addMember: 'hideComposition' to 'prototype'
addMember: 'arguments' to 'hideComposition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hideComposition Scope'
addMember: 'unsetStyle' to 'prototype'
addMember: 'arguments' to 'unsetStyle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'unsetStyle Scope'
addToScope: 'style' to 'unsetStyle Scope'
addMember: '$updatePrintMargin' to 'prototype'
addMember: 'arguments' to '$updatePrintMargin Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$updatePrintMargin Scope'
addMember: 'updateBackMarkers' to 'prototype'
addMember: 'arguments' to 'updateBackMarkers Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'updateBackMarkers Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'hideCursor' to 'prototype'
addMember: 'arguments' to 'hideCursor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hideCursor Scope'
addMember: 'setStyle' to 'prototype'
addMember: 'arguments' to 'setStyle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setStyle Scope'
addToScope: 'style' to 'setStyle Scope'
addToScope: 'include' to 'setStyle Scope'
addMember: 'getMouseEventTarget' to 'prototype'
addMember: 'arguments' to 'getMouseEventTarget Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getMouseEventTarget Scope'
addMember: '$updateLines' to 'prototype'
addMember: 'arguments' to '$updateLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$updateLines Scope'
addMember: 'getOptions' to 'prototype'
addMember: 'arguments' to 'getOptions Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getOptions Scope'
addToScope: 'optionNames' to 'getOptions Scope'
addMember: 'setOption' to 'prototype'
addMember: 'arguments' to 'setOption Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setOption Scope'
addToScope: 'name' to 'setOption Scope'
addToScope: 'value' to 'setOption Scope'
addMember: 'getShowInvisibles' to 'prototype'
addMember: 'arguments' to 'getShowInvisibles Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getShowInvisibles Scope'
addMember: 'setFadeFoldWidgets' to 'prototype'
addMember: 'arguments' to 'setFadeFoldWidgets Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setFadeFoldWidgets Scope'
addToScope: 'show' to 'setFadeFoldWidgets Scope'
addMember: 'scrollToLine' to 'prototype'
addMember: 'arguments' to 'scrollToLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollToLine Scope'
addToScope: 'line' to 'scrollToLine Scope'
addToScope: 'center' to 'scrollToLine Scope'
addToScope: 'animate' to 'scrollToLine Scope'
addToScope: 'callback' to 'scrollToLine Scope'
addMember: 'getFirstVisibleRow' to 'prototype'
addMember: 'arguments' to 'getFirstVisibleRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFirstVisibleRow Scope'
addMember: 'scrollToRow' to 'prototype'
addMember: 'arguments' to 'scrollToRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollToRow Scope'
addToScope: 'row' to 'scrollToRow Scope'
addMember: 'setShowInvisibles' to 'prototype'
addMember: 'arguments' to 'setShowInvisibles Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setShowInvisibles Scope'
addToScope: 'showInvisibles' to 'setShowInvisibles Scope'
addMember: 'setTheme' to 'prototype'
addMember: 'arguments' to 'setTheme Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setTheme Scope'
addToScope: 'theme' to 'setTheme Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'showCursor' to 'prototype'
addMember: 'arguments' to 'showCursor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'showCursor Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'setDisplayIndentGuides' to 'prototype'
addMember: 'arguments' to 'setDisplayIndentGuides Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDisplayIndentGuides Scope'
addToScope: 'display' to 'setDisplayIndentGuides Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'setHighlightGutterLine' to 'prototype'
addMember: 'arguments' to 'setHighlightGutterLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setHighlightGutterLine Scope'
addToScope: 'shouldHighlight' to 'setHighlightGutterLine Scope'
addMember: 'visualizeFocus' to 'prototype'
addMember: 'arguments' to 'visualizeFocus Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'visualizeFocus Scope'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: 'getFadeFoldWidgets' to 'prototype'
addMember: 'arguments' to 'getFadeFoldWidgets Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFadeFoldWidgets Scope'
addMember: 'updateFontSize' to 'prototype'
addMember: 'arguments' to 'updateFontSize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'updateFontSize Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'getAnimatedScroll' to 'prototype'
addMember: 'arguments' to 'getAnimatedScroll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAnimatedScroll Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'getTextAreaContainer' to 'prototype'
addMember: 'arguments' to 'getTextAreaContainer Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getTextAreaContainer Scope'
addMember: 'scrollToX' to 'prototype'
addMember: 'arguments' to 'scrollToX Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollToX Scope'
addToScope: 'scrollLeft' to 'scrollToX Scope'
addMember: '$renderChanges' to 'prototype'
addMember: 'arguments' to '$renderChanges Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$renderChanges Scope'
addToScope: 'changes' to '$renderChanges Scope'
addToScope: 'force' to '$renderChanges Scope'
addMember: 'getScrollTopRow' to 'prototype'
addMember: 'arguments' to 'getScrollTopRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getScrollTopRow Scope'
addMember: 'pixelToScreenCoordinates' to 'prototype'
addMember: 'arguments' to 'pixelToScreenCoordinates Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'pixelToScreenCoordinates Scope'
addToScope: 'x' to 'pixelToScreenCoordinates Scope'
addToScope: 'y' to 'pixelToScreenCoordinates Scope'
addMember: 'setSession' to 'prototype'
addMember: 'arguments' to 'setSession Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setSession Scope'
addToScope: 'session' to 'setSession Scope'
addMember: 'getDisplayIndentGuides' to 'prototype'
addMember: 'arguments' to 'getDisplayIndentGuides Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getDisplayIndentGuides Scope'
addMember: 'updateLines' to 'prototype'
addMember: 'arguments' to 'updateLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'updateLines Scope'
addToScope: 'firstRow' to 'updateLines Scope'
addToScope: 'lastRow' to 'updateLines Scope'
addMember: 'setShowGutter' to 'prototype'
addMember: 'arguments' to 'setShowGutter Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setShowGutter Scope'
addToScope: 'show' to 'setShowGutter Scope'
addMember: 'getScrollLeft' to 'prototype'
addMember: 'arguments' to 'getScrollLeft Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getScrollLeft Scope'
addMember: '$moveTextAreaToCursor' to 'prototype'
addMember: 'arguments' to '$moveTextAreaToCursor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$moveTextAreaToCursor Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: '$updateScrollBar' to 'prototype'
addMember: 'arguments' to '$updateScrollBar Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$updateScrollBar Scope'
addMember: 'updateCursor' to 'prototype'
addMember: 'arguments' to 'updateCursor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'updateCursor Scope'
addMember: 'updateBreakpoints' to 'prototype'
addMember: 'arguments' to 'updateBreakpoints Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'updateBreakpoints Scope'
addToScope: 'rows' to 'updateBreakpoints Scope'
addMember: 'setPadding' to 'prototype'
addMember: 'arguments' to 'setPadding Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setPadding Scope'
addToScope: 'padding' to 'setPadding Scope'
addMember: 'setShowPrintMargin' to 'prototype'
addMember: 'arguments' to 'setShowPrintMargin Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setShowPrintMargin Scope'
addToScope: 'showPrintMargin' to 'setShowPrintMargin Scope'
addMember: 'setHScrollBarAlwaysVisible' to 'prototype'
addMember: 'arguments' to 'setHScrollBarAlwaysVisible Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setHScrollBarAlwaysVisible Scope'
addToScope: 'alwaysVisible' to 'setHScrollBarAlwaysVisible Scope'
addMember: 'textToScreenCoordinates' to 'prototype'
addMember: 'arguments' to 'textToScreenCoordinates Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'textToScreenCoordinates Scope'
addToScope: 'row' to 'textToScreenCoordinates Scope'
addToScope: 'column' to 'textToScreenCoordinates Scope'
addMember: 'scrollSelectionIntoView' to 'prototype'
addMember: 'arguments' to 'scrollSelectionIntoView Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollSelectionIntoView Scope'
addToScope: 'anchor' to 'scrollSelectionIntoView Scope'
addToScope: 'lead' to 'scrollSelectionIntoView Scope'
addToScope: 'offset' to 'scrollSelectionIntoView Scope'
addMember: 'setPrintMarginColumn' to 'prototype'
addMember: 'arguments' to 'setPrintMarginColumn Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setPrintMarginColumn Scope'
addToScope: 'showPrintMargin' to 'setPrintMarginColumn Scope'
addMember: 'animateScrolling' to 'prototype'
addMember: 'arguments' to 'animateScrolling Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'animateScrolling Scope'
addToScope: 'fromValue' to 'animateScrolling Scope'
addToScope: 'callback' to 'animateScrolling Scope'
addMember: '$computeLayerConfig' to 'prototype'
addMember: 'arguments' to '$computeLayerConfig Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$computeLayerConfig Scope'
addMember: 'onGutterResize' to 'prototype'
addMember: 'arguments' to 'onGutterResize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onGutterResize Scope'
addMember: 'updateFrontMarkers' to 'prototype'
addMember: 'arguments' to 'updateFrontMarkers Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'updateFrontMarkers Scope'
addMember: 'getHighlightGutterLine' to 'prototype'
addMember: 'arguments' to 'getHighlightGutterLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getHighlightGutterLine Scope'
addToScope: 'MouseHandler' to 'NamespaceDeclaration Scope'
addMember: 'MouseHandler' to 'ace'
addMember: 'prototype' to 'MouseHandler'
addMember: 'constructor' to 'prototype'
addMember: 'MouseHandler' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'editor' to 'ConstructorDeclaration Scope'
addMember: '$options' to 'prototype'
addMember: '$scrollSpeed' to 'prototype'
addMember: '$dragDelay' to 'prototype'
addMember: '$focusTimout' to 'prototype'
addMember: 'scrollSpeed' to '$options'
addMember: 'initialValue' to 'scrollSpeed'
addMember: 'name' to 'scrollSpeed'
addMember: 'dragDelay' to '$options'
addMember: 'initialValue' to 'dragDelay'
addMember: 'name' to 'dragDelay'
addMember: 'focusTimout' to '$options'
addMember: 'initialValue' to 'focusTimout'
addMember: 'name' to 'focusTimout'
addMember: 'onMouseEvent' to 'prototype'
addMember: 'arguments' to 'onMouseEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onMouseEvent Scope'
addToScope: 'name' to 'onMouseEvent Scope'
addToScope: 'e' to 'onMouseEvent Scope'
addMember: 'onMouseMove' to 'prototype'
addMember: 'arguments' to 'onMouseMove Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onMouseMove Scope'
addToScope: 'name' to 'onMouseMove Scope'
addToScope: 'e' to 'onMouseMove Scope'
addMember: 'onMouseWheel' to 'prototype'
addMember: 'arguments' to 'onMouseWheel Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onMouseWheel Scope'
addToScope: 'name' to 'onMouseWheel Scope'
addToScope: 'e' to 'onMouseWheel Scope'
addMember: 'setState' to 'prototype'
addMember: 'arguments' to 'setState Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setState Scope'
addToScope: 'state' to 'setState Scope'
addMember: 'captureMouse' to 'prototype'
addMember: 'arguments' to 'captureMouse Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'captureMouse Scope'
addToScope: 'ev' to 'captureMouse Scope'
addToScope: 'state' to 'captureMouse Scope'
addMember: 'setOptions' to 'prototype'
addMember: 'arguments' to 'setOptions Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setOptions Scope'
addToScope: 'optList' to 'setOptions Scope'
addMember: 'getOptions' to 'prototype'
addMember: 'arguments' to 'getOptions Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getOptions Scope'
addToScope: 'optionNames' to 'getOptions Scope'
addMember: 'setOption' to 'prototype'
addMember: 'arguments' to 'setOption Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setOption Scope'
addToScope: 'name' to 'setOption Scope'
addToScope: 'value' to 'setOption Scope'
addMember: 'getOption' to 'prototype'
addMember: 'arguments' to 'getOption Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getOption Scope'
addToScope: 'name' to 'getOption Scope'
addToScope: 'PlaceHolder' to 'NamespaceDeclaration Scope'
addMember: 'PlaceHolder' to 'ace'
addMember: 'prototype' to 'PlaceHolder'
addMember: 'constructor' to 'prototype'
addMember: 'PlaceHolder' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'session' to 'ConstructorDeclaration Scope'
addToScope: 'length' to 'ConstructorDeclaration Scope'
addToScope: 'pos' to 'ConstructorDeclaration Scope'
addToScope: 'others' to 'ConstructorDeclaration Scope'
addToScope: 'mainClass' to 'ConstructorDeclaration Scope'
addToScope: 'othersClass' to 'ConstructorDeclaration Scope'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'setup' to 'prototype'
addMember: 'arguments' to 'setup Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setup Scope'
addMember: 'showOtherMarkers' to 'prototype'
addMember: 'arguments' to 'showOtherMarkers Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'showOtherMarkers Scope'
addMember: 'hideOtherMarkers' to 'prototype'
addMember: 'arguments' to 'hideOtherMarkers Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hideOtherMarkers Scope'
addMember: 'onUpdate' to 'prototype'
addMember: 'arguments' to 'onUpdate Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onUpdate Scope'
addToScope: 'event' to 'onUpdate Scope'
addMember: 'onCursorChange' to 'prototype'
addMember: 'arguments' to 'onCursorChange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onCursorChange Scope'
addToScope: 'event' to 'onCursorChange Scope'
addMember: 'detach' to 'prototype'
addMember: 'arguments' to 'detach Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'detach Scope'
addMember: 'cancel' to 'prototype'
addMember: 'arguments' to 'cancel Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'cancel Scope'
addToScope: 'Tokenizer' to 'NamespaceDeclaration Scope'
addMember: 'Tokenizer' to 'ace'
addMember: 'prototype' to 'Tokenizer'
addMember: 'constructor' to 'prototype'
addMember: 'Tokenizer' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'rules' to 'ConstructorDeclaration Scope'
addMember: '$applyToken' to 'prototype'
addMember: 'arguments' to '$applyToken Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$applyToken Scope'
addToScope: 'str' to '$applyToken Scope'
addMember: '$arrayTokens' to 'prototype'
addMember: 'arguments' to '$arrayTokens Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$arrayTokens Scope'
addToScope: 'str' to '$arrayTokens Scope'
addMember: 'removeCapturingGroups' to 'prototype'
addMember: 'arguments' to 'removeCapturingGroups Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeCapturingGroups Scope'
addToScope: 'src' to 'removeCapturingGroups Scope'
addMember: 'createSplitterRegexp' to 'prototype'
addMember: 'arguments' to 'createSplitterRegexp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createSplitterRegexp Scope'
addToScope: 'src' to 'createSplitterRegexp Scope'
addToScope: 'flag' to 'createSplitterRegexp Scope'
addMember: 'getLineTokens' to 'prototype'
addMember: 'arguments' to 'getLineTokens Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getLineTokens Scope'
addToScope: 'line' to 'getLineTokens Scope'
addToScope: 'startState' to 'getLineTokens Scope'
addToScope: 'Document' to 'NamespaceDeclaration Scope'
addMember: 'Document' to 'ace'
addMember: 'prototype' to 'Document'
addMember: 'constructor' to 'prototype'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'text' to 'ConstructorDeclaration Scope'
addMember: '$autoNewLine' to 'prototype'
addMember: '$newLineMode' to 'prototype'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'setValue' to 'prototype'
addMember: 'arguments' to 'setValue Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setValue Scope'
addToScope: 'text' to 'setValue Scope'
addMember: 'getValue' to 'prototype'
addMember: 'arguments' to 'getValue Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getValue Scope'
addMember: 'createAnchor' to 'prototype'
addMember: 'arguments' to 'createAnchor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'createAnchor Scope'
addToScope: 'row' to 'createAnchor Scope'
addToScope: 'column' to 'createAnchor Scope'
addMember: '$split' to 'prototype'
addMember: 'arguments' to '$split Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$split Scope'
addToScope: 'text' to '$split Scope'
addMember: '$detectNewLine' to 'prototype'
addMember: 'arguments' to '$detectNewLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$detectNewLine Scope'
addToScope: 'text' to '$detectNewLine Scope'
addMember: 'getNewLineCharacter' to 'prototype'
addMember: 'arguments' to 'getNewLineCharacter Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getNewLineCharacter Scope'
addMember: 'setNewLineMode' to 'prototype'
addMember: 'arguments' to 'setNewLineMode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setNewLineMode Scope'
addToScope: 'newLineMode' to 'setNewLineMode Scope'
addMember: 'getNewLineMode' to 'prototype'
addMember: 'arguments' to 'getNewLineMode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getNewLineMode Scope'
addMember: 'isNewLine' to 'prototype'
addMember: 'arguments' to 'isNewLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isNewLine Scope'
addToScope: 'text' to 'isNewLine Scope'
addMember: 'getLine' to 'prototype'
addMember: 'arguments' to 'getLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getLine Scope'
addToScope: 'row' to 'getLine Scope'
addMember: 'getLines' to 'prototype'
addMember: 'arguments' to 'getLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getLines Scope'
addToScope: 'firstRow' to 'getLines Scope'
addToScope: 'lastRow' to 'getLines Scope'
addMember: 'getAllLines' to 'prototype'
addMember: 'arguments' to 'getAllLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAllLines Scope'
addMember: 'getLength' to 'prototype'
addMember: 'arguments' to 'getLength Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getLength Scope'
addMember: 'getTextRange' to 'prototype'
addMember: 'arguments' to 'getTextRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getTextRange Scope'
addToScope: 'range' to 'getTextRange Scope'
addMember: '$clipPosition' to 'prototype'
addMember: 'arguments' to '$clipPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$clipPosition Scope'
addToScope: 'position' to '$clipPosition Scope'
addMember: 'insert' to 'prototype'
addMember: 'arguments' to 'insert Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'insert Scope'
addToScope: 'position' to 'insert Scope'
addToScope: 'text' to 'insert Scope'
addMember: 'insertLines' to 'prototype'
addMember: 'arguments' to 'insertLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'insertLines Scope'
addToScope: 'row' to 'insertLines Scope'
addToScope: 'lines' to 'insertLines Scope'
addMember: '_insertLines' to 'prototype'
addMember: 'arguments' to '_insertLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_insertLines Scope'
addToScope: 'row' to '_insertLines Scope'
addToScope: 'lines' to '_insertLines Scope'
addMember: 'insertNewLine' to 'prototype'
addMember: 'arguments' to 'insertNewLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'insertNewLine Scope'
addToScope: 'position' to 'insertNewLine Scope'
addMember: 'insertInLine' to 'prototype'
addMember: 'arguments' to 'insertInLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'insertInLine Scope'
addToScope: 'position' to 'insertInLine Scope'
addToScope: 'text' to 'insertInLine Scope'
addMember: 'remove' to 'prototype'
addMember: 'arguments' to 'remove Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'remove Scope'
addToScope: 'range' to 'remove Scope'
addMember: 'removeInLine' to 'prototype'
addMember: 'arguments' to 'removeInLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeInLine Scope'
addToScope: 'row' to 'removeInLine Scope'
addToScope: 'startColumn' to 'removeInLine Scope'
addToScope: 'endColumn' to 'removeInLine Scope'
addMember: 'removeLines' to 'prototype'
addMember: 'arguments' to 'removeLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeLines Scope'
addToScope: 'firstRow' to 'removeLines Scope'
addToScope: 'lastRow' to 'removeLines Scope'
addMember: '_removeLines' to 'prototype'
addMember: 'arguments' to '_removeLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_removeLines Scope'
addToScope: 'firstRow' to '_removeLines Scope'
addToScope: 'lastRow' to '_removeLines Scope'
addMember: 'removeNewLine' to 'prototype'
addMember: 'arguments' to 'removeNewLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeNewLine Scope'
addToScope: 'row' to 'removeNewLine Scope'
addMember: 'replace' to 'prototype'
addMember: 'arguments' to 'replace Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'replace Scope'
addToScope: 'range' to 'replace Scope'
addToScope: 'text' to 'replace Scope'
addMember: 'applyDeltas' to 'prototype'
addMember: 'arguments' to 'applyDeltas Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'applyDeltas Scope'
addToScope: 'deltas' to 'applyDeltas Scope'
addMember: 'revertDeltas' to 'prototype'
addMember: 'arguments' to 'revertDeltas Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'revertDeltas Scope'
addToScope: 'deltas' to 'revertDeltas Scope'
addMember: 'indexToPosition' to 'prototype'
addMember: 'arguments' to 'indexToPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'indexToPosition Scope'
addToScope: 'index' to 'indexToPosition Scope'
addToScope: 'startRow' to 'indexToPosition Scope'
addMember: 'positionToIndex' to 'prototype'
addMember: 'arguments' to 'positionToIndex Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'positionToIndex Scope'
addToScope: 'pos' to 'positionToIndex Scope'
addToScope: 'startRow' to 'positionToIndex Scope'
addToScope: 'Editor' to 'NamespaceDeclaration Scope'
addMember: 'Editor' to 'ace'
addMember: 'prototype' to 'Editor'
addMember: 'constructor' to 'prototype'
addMember: 'Editor' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'renderer' to 'ConstructorDeclaration Scope'
addToScope: 'session' to 'ConstructorDeclaration Scope'
addMember: 'session' to 'prototype'
addMember: '$options' to 'prototype'
addMember: '$selectionStyle' to 'prototype'
addMember: '$highlightActiveLine' to 'prototype'
addMember: '$highlightSelectedWord' to 'prototype'
addMember: '$readOnly' to 'prototype'
addMember: '$cursorStyle' to 'prototype'
addMember: '$behavioursEnabled' to 'prototype'
addMember: '$wrapBehavioursEnabled' to 'prototype'
addMember: 'useSoftTabs' to '$options'
addMember: 'forwardTo' to 'useSoftTabs'
addMember: 'name' to 'useSoftTabs'
addMember: 'fontFamily' to '$options'
addMember: 'forwardTo' to 'fontFamily'
addMember: 'name' to 'fontFamily'
addMember: 'foldStyle' to '$options'
addMember: 'forwardTo' to 'foldStyle'
addMember: 'name' to 'foldStyle'
addMember: 'fadeFoldWidgets' to '$options'
addMember: 'forwardTo' to 'fadeFoldWidgets'
addMember: 'name' to 'fadeFoldWidgets'
addMember: 'readOnly' to '$options'
addMember: 'set' to 'readOnly'
addMember: 'initialValue' to 'readOnly'
addMember: 'name' to 'readOnly'
addMember: 'highlightGutterLine' to '$options'
addMember: 'forwardTo' to 'highlightGutterLine'
addMember: 'name' to 'highlightGutterLine'
addMember: 'tabSize' to '$options'
addMember: 'forwardTo' to 'tabSize'
addMember: 'name' to 'tabSize'
addMember: 'displayIndentGuides' to '$options'
addMember: 'forwardTo' to 'displayIndentGuides'
addMember: 'name' to 'displayIndentGuides'
addMember: 'overwrite' to '$options'
addMember: 'forwardTo' to 'overwrite'
addMember: 'name' to 'overwrite'
addMember: 'scrollSpeed' to '$options'
addMember: 'forwardTo' to 'scrollSpeed'
addMember: 'name' to 'scrollSpeed'
addMember: 'showPrintMargin' to '$options'
addMember: 'forwardTo' to 'showPrintMargin'
addMember: 'name' to 'showPrintMargin'
addMember: 'behavioursEnabled' to '$options'
addMember: 'initialValue' to 'behavioursEnabled'
addMember: 'name' to 'behavioursEnabled'
addMember: 'hScrollBarAlwaysVisible' to '$options'
addMember: 'forwardTo' to 'hScrollBarAlwaysVisible'
addMember: 'name' to 'hScrollBarAlwaysVisible'
addMember: 'printMarginColumn' to '$options'
addMember: 'forwardTo' to 'printMarginColumn'
addMember: 'name' to 'printMarginColumn'
addMember: 'fontSize' to '$options'
addMember: 'forwardTo' to 'fontSize'
addMember: 'name' to 'fontSize'
addMember: 'newLineMode' to '$options'
addMember: 'forwardTo' to 'newLineMode'
addMember: 'name' to 'newLineMode'
addMember: 'wrap' to '$options'
addMember: 'forwardTo' to 'wrap'
addMember: 'name' to 'wrap'
addMember: 'animatedScroll' to '$options'
addMember: 'forwardTo' to 'animatedScroll'
addMember: 'name' to 'animatedScroll'
addMember: 'firstLineNumber' to '$options'
addMember: 'forwardTo' to 'firstLineNumber'
addMember: 'name' to 'firstLineNumber'
addMember: 'cursorStyle' to '$options'
addMember: 'set' to 'cursorStyle'
addMember: 'values' to 'cursorStyle'
addMember: 'length' to 'values'
addMember: 'initialValue' to 'cursorStyle'
addMember: 'name' to 'cursorStyle'
addMember: 'dragDelay' to '$options'
addMember: 'forwardTo' to 'dragDelay'
addMember: 'name' to 'dragDelay'
addMember: 'showInvisibles' to '$options'
addMember: 'forwardTo' to 'showInvisibles'
addMember: 'name' to 'showInvisibles'
addMember: 'useWorker' to '$options'
addMember: 'forwardTo' to 'useWorker'
addMember: 'name' to 'useWorker'
addMember: 'focusTimout' to '$options'
addMember: 'forwardTo' to 'focusTimout'
addMember: 'name' to 'focusTimout'
addMember: 'selectionStyle' to '$options'
addMember: 'set' to 'selectionStyle'
addMember: 'initialValue' to 'selectionStyle'
addMember: 'name' to 'selectionStyle'
addMember: 'wrapBehavioursEnabled' to '$options'
addMember: 'initialValue' to 'wrapBehavioursEnabled'
addMember: 'name' to 'wrapBehavioursEnabled'
addMember: 'highlightActiveLine' to '$options'
addMember: 'set' to 'highlightActiveLine'
addMember: 'initialValue' to 'highlightActiveLine'
addMember: 'name' to 'highlightActiveLine'
addMember: 'showFoldWidgets' to '$options'
addMember: 'forwardTo' to 'showFoldWidgets'
addMember: 'name' to 'showFoldWidgets'
addMember: 'highlightSelectedWord' to '$options'
addMember: 'set' to 'highlightSelectedWord'
addMember: 'initialValue' to 'highlightSelectedWord'
addMember: 'name' to 'highlightSelectedWord'
addMember: 'printMargin' to '$options'
addMember: 'forwardTo' to 'printMargin'
addMember: 'name' to 'printMargin'
addMember: 'showGutter' to '$options'
addMember: 'forwardTo' to 'showGutter'
addMember: 'name' to 'showGutter'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'setKeyboardHandler' to 'prototype'
addMember: 'arguments' to 'setKeyboardHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setKeyboardHandler Scope'
addToScope: 'keyboardHandler' to 'setKeyboardHandler Scope'
addMember: 'getKeyboardHandler' to 'prototype'
addMember: 'arguments' to 'getKeyboardHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getKeyboardHandler Scope'
addMember: 'setSession' to 'prototype'
addMember: 'arguments' to 'setSession Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setSession Scope'
addToScope: 'session' to 'setSession Scope'
addMember: 'getSession' to 'prototype'
addMember: 'arguments' to 'getSession Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getSession Scope'
addMember: 'setValue' to 'prototype'
addMember: 'arguments' to 'setValue Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setValue Scope'
addToScope: 'val' to 'setValue Scope'
addToScope: 'cursorPos' to 'setValue Scope'
addMember: 'getValue' to 'prototype'
addMember: 'arguments' to 'getValue Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getValue Scope'
addMember: 'getSelection' to 'prototype'
addMember: 'arguments' to 'getSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getSelection Scope'
addMember: 'resize' to 'prototype'
addMember: 'arguments' to 'resize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'resize Scope'
addToScope: 'force' to 'resize Scope'
addMember: 'setTheme' to 'prototype'
addMember: 'arguments' to 'setTheme Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setTheme Scope'
addToScope: 'theme' to 'setTheme Scope'
addMember: 'getTheme' to 'prototype'
addMember: 'arguments' to 'getTheme Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getTheme Scope'
addMember: 'setStyle' to 'prototype'
addMember: 'arguments' to 'setStyle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setStyle Scope'
addToScope: 'style' to 'setStyle Scope'
addMember: 'unsetStyle' to 'prototype'
addMember: 'arguments' to 'unsetStyle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'unsetStyle Scope'
addToScope: 'style' to 'unsetStyle Scope'
addMember: 'getFontSize' to 'prototype'
addMember: 'arguments' to 'getFontSize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFontSize Scope'
addMember: 'setFontSize' to 'prototype'
addMember: 'arguments' to 'setFontSize Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setFontSize Scope'
addToScope: 'size' to 'setFontSize Scope'
addMember: '$highlightBrackets' to 'prototype'
addMember: 'arguments' to '$highlightBrackets Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$highlightBrackets Scope'
addMember: 'focus' to 'prototype'
addMember: 'arguments' to 'focus Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'focus Scope'
addMember: 'isFocused' to 'prototype'
addMember: 'arguments' to 'isFocused Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isFocused Scope'
addMember: 'blur' to 'prototype'
addMember: 'arguments' to 'blur Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'blur Scope'
addMember: 'onFocus' to 'prototype'
addMember: 'arguments' to 'onFocus Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onFocus Scope'
addMember: 'onBlur' to 'prototype'
addMember: 'arguments' to 'onBlur Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onBlur Scope'
addMember: '$cursorChange' to 'prototype'
addMember: 'arguments' to '$cursorChange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$cursorChange Scope'
addMember: 'onDocumentChange' to 'prototype'
addMember: 'arguments' to 'onDocumentChange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onDocumentChange Scope'
addToScope: 'e' to 'onDocumentChange Scope'
addMember: 'onTokenizerUpdate' to 'prototype'
addMember: 'arguments' to 'onTokenizerUpdate Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onTokenizerUpdate Scope'
addToScope: 'e' to 'onTokenizerUpdate Scope'
addMember: 'onScrollTopChange' to 'prototype'
addMember: 'arguments' to 'onScrollTopChange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onScrollTopChange Scope'
addMember: 'onScrollLeftChange' to 'prototype'
addMember: 'arguments' to 'onScrollLeftChange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onScrollLeftChange Scope'
addMember: 'onCursorChange' to 'prototype'
addMember: 'arguments' to 'onCursorChange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onCursorChange Scope'
addMember: '$updateHighlightActiveLine' to 'prototype'
addMember: 'arguments' to '$updateHighlightActiveLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$updateHighlightActiveLine Scope'
addMember: 'onSelectionChange' to 'prototype'
addMember: 'arguments' to 'onSelectionChange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onSelectionChange Scope'
addToScope: 'e' to 'onSelectionChange Scope'
addMember: '$getSelectionHighLightRegexp' to 'prototype'
addMember: 'arguments' to '$getSelectionHighLightRegexp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$getSelectionHighLightRegexp Scope'
addMember: 'onChangeFrontMarker' to 'prototype'
addMember: 'arguments' to 'onChangeFrontMarker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onChangeFrontMarker Scope'
addMember: 'onChangeBackMarker' to 'prototype'
addMember: 'arguments' to 'onChangeBackMarker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onChangeBackMarker Scope'
addMember: 'onChangeBreakpoint' to 'prototype'
addMember: 'arguments' to 'onChangeBreakpoint Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onChangeBreakpoint Scope'
addMember: 'onChangeAnnotation' to 'prototype'
addMember: 'arguments' to 'onChangeAnnotation Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onChangeAnnotation Scope'
addMember: 'onChangeMode' to 'prototype'
addMember: 'arguments' to 'onChangeMode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onChangeMode Scope'
addToScope: 'e' to 'onChangeMode Scope'
addMember: 'onChangeWrapLimit' to 'prototype'
addMember: 'arguments' to 'onChangeWrapLimit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onChangeWrapLimit Scope'
addMember: 'onChangeWrapMode' to 'prototype'
addMember: 'arguments' to 'onChangeWrapMode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onChangeWrapMode Scope'
addMember: 'onChangeFold' to 'prototype'
addMember: 'arguments' to 'onChangeFold Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onChangeFold Scope'
addMember: 'getCopyText' to 'prototype'
addMember: 'arguments' to 'getCopyText Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getCopyText Scope'
addMember: 'onCopy' to 'prototype'
addMember: 'arguments' to 'onCopy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onCopy Scope'
addMember: 'onCut' to 'prototype'
addMember: 'arguments' to 'onCut Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onCut Scope'
addMember: 'onPaste' to 'prototype'
addMember: 'arguments' to 'onPaste Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onPaste Scope'
addToScope: 'text' to 'onPaste Scope'
addMember: 'execCommand' to 'prototype'
addMember: 'arguments' to 'execCommand Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'execCommand Scope'
addToScope: 'command' to 'execCommand Scope'
addToScope: 'args' to 'execCommand Scope'
addMember: 'insert' to 'prototype'
addMember: 'arguments' to 'insert Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'insert Scope'
addToScope: 'text' to 'insert Scope'
addMember: 'onTextInput' to 'prototype'
addMember: 'arguments' to 'onTextInput Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onTextInput Scope'
addToScope: 'text' to 'onTextInput Scope'
addMember: 'onCommandKey' to 'prototype'
addMember: 'arguments' to 'onCommandKey Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onCommandKey Scope'
addToScope: 'e' to 'onCommandKey Scope'
addToScope: 'hashId' to 'onCommandKey Scope'
addToScope: 'keyCode' to 'onCommandKey Scope'
addMember: 'setOverwrite' to 'prototype'
addMember: 'arguments' to 'setOverwrite Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setOverwrite Scope'
addToScope: 'overwrite' to 'setOverwrite Scope'
addMember: 'getOverwrite' to 'prototype'
addMember: 'arguments' to 'getOverwrite Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getOverwrite Scope'
addMember: 'toggleOverwrite' to 'prototype'
addMember: 'arguments' to 'toggleOverwrite Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toggleOverwrite Scope'
addMember: 'setScrollSpeed' to 'prototype'
addMember: 'arguments' to 'setScrollSpeed Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setScrollSpeed Scope'
addToScope: 'speed' to 'setScrollSpeed Scope'
addMember: 'getScrollSpeed' to 'prototype'
addMember: 'arguments' to 'getScrollSpeed Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getScrollSpeed Scope'
addMember: 'setDragDelay' to 'prototype'
addMember: 'arguments' to 'setDragDelay Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDragDelay Scope'
addToScope: 'dragDelay' to 'setDragDelay Scope'
addMember: 'getDragDelay' to 'prototype'
addMember: 'arguments' to 'getDragDelay Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getDragDelay Scope'
addMember: 'setSelectionStyle' to 'prototype'
addMember: 'arguments' to 'setSelectionStyle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setSelectionStyle Scope'
addToScope: 'val' to 'setSelectionStyle Scope'
addMember: 'getSelectionStyle' to 'prototype'
addMember: 'arguments' to 'getSelectionStyle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getSelectionStyle Scope'
addMember: 'setHighlightActiveLine' to 'prototype'
addMember: 'arguments' to 'setHighlightActiveLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setHighlightActiveLine Scope'
addToScope: 'shouldHighlight' to 'setHighlightActiveLine Scope'
addMember: 'getHighlightActiveLine' to 'prototype'
addMember: 'arguments' to 'getHighlightActiveLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getHighlightActiveLine Scope'
addMember: 'setHighlightGutterLine' to 'prototype'
addMember: 'arguments' to 'setHighlightGutterLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setHighlightGutterLine Scope'
addToScope: 'shouldHighlight' to 'setHighlightGutterLine Scope'
addMember: 'getHighlightGutterLine' to 'prototype'
addMember: 'arguments' to 'getHighlightGutterLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getHighlightGutterLine Scope'
addMember: 'setHighlightSelectedWord' to 'prototype'
addMember: 'arguments' to 'setHighlightSelectedWord Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setHighlightSelectedWord Scope'
addToScope: 'shouldHighlight' to 'setHighlightSelectedWord Scope'
addMember: 'getHighlightSelectedWord' to 'prototype'
addMember: 'arguments' to 'getHighlightSelectedWord Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getHighlightSelectedWord Scope'
addMember: 'setAnimatedScroll' to 'prototype'
addMember: 'arguments' to 'setAnimatedScroll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setAnimatedScroll Scope'
addToScope: 'shouldAnimate' to 'setAnimatedScroll Scope'
addMember: 'getAnimatedScroll' to 'prototype'
addMember: 'arguments' to 'getAnimatedScroll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAnimatedScroll Scope'
addMember: 'setShowInvisibles' to 'prototype'
addMember: 'arguments' to 'setShowInvisibles Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setShowInvisibles Scope'
addToScope: 'showInvisibles' to 'setShowInvisibles Scope'
addMember: 'getShowInvisibles' to 'prototype'
addMember: 'arguments' to 'getShowInvisibles Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getShowInvisibles Scope'
addMember: 'setDisplayIndentGuides' to 'prototype'
addMember: 'arguments' to 'setDisplayIndentGuides Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDisplayIndentGuides Scope'
addToScope: 'display' to 'setDisplayIndentGuides Scope'
addMember: 'getDisplayIndentGuides' to 'prototype'
addMember: 'arguments' to 'getDisplayIndentGuides Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getDisplayIndentGuides Scope'
addMember: 'setShowPrintMargin' to 'prototype'
addMember: 'arguments' to 'setShowPrintMargin Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setShowPrintMargin Scope'
addToScope: 'showPrintMargin' to 'setShowPrintMargin Scope'
addMember: 'getShowPrintMargin' to 'prototype'
addMember: 'arguments' to 'getShowPrintMargin Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getShowPrintMargin Scope'
addMember: 'setPrintMarginColumn' to 'prototype'
addMember: 'arguments' to 'setPrintMarginColumn Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setPrintMarginColumn Scope'
addToScope: 'showPrintMargin' to 'setPrintMarginColumn Scope'
addMember: 'getPrintMarginColumn' to 'prototype'
addMember: 'arguments' to 'getPrintMarginColumn Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getPrintMarginColumn Scope'
addMember: 'setReadOnly' to 'prototype'
addMember: 'arguments' to 'setReadOnly Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setReadOnly Scope'
addToScope: 'readOnly' to 'setReadOnly Scope'
addMember: 'getReadOnly' to 'prototype'
addMember: 'arguments' to 'getReadOnly Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getReadOnly Scope'
addMember: 'setBehavioursEnabled' to 'prototype'
addMember: 'arguments' to 'setBehavioursEnabled Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setBehavioursEnabled Scope'
addToScope: 'enabled' to 'setBehavioursEnabled Scope'
addMember: 'getBehavioursEnabled' to 'prototype'
addMember: 'arguments' to 'getBehavioursEnabled Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getBehavioursEnabled Scope'
addMember: 'setWrapBehavioursEnabled' to 'prototype'
addMember: 'arguments' to 'setWrapBehavioursEnabled Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setWrapBehavioursEnabled Scope'
addToScope: 'enabled' to 'setWrapBehavioursEnabled Scope'
addMember: 'getWrapBehavioursEnabled' to 'prototype'
addMember: 'arguments' to 'getWrapBehavioursEnabled Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getWrapBehavioursEnabled Scope'
addMember: 'setShowFoldWidgets' to 'prototype'
addMember: 'arguments' to 'setShowFoldWidgets Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setShowFoldWidgets Scope'
addToScope: 'show' to 'setShowFoldWidgets Scope'
addMember: 'getShowFoldWidgets' to 'prototype'
addMember: 'arguments' to 'getShowFoldWidgets Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getShowFoldWidgets Scope'
addMember: 'setFadeFoldWidgets' to 'prototype'
addMember: 'arguments' to 'setFadeFoldWidgets Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setFadeFoldWidgets Scope'
addToScope: 'fade' to 'setFadeFoldWidgets Scope'
addMember: 'getFadeFoldWidgets' to 'prototype'
addMember: 'arguments' to 'getFadeFoldWidgets Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFadeFoldWidgets Scope'
addMember: 'remove' to 'prototype'
addMember: 'arguments' to 'remove Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'remove Scope'
addToScope: 'dir' to 'remove Scope'
addMember: 'removeWordRight' to 'prototype'
addMember: 'arguments' to 'removeWordRight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeWordRight Scope'
addMember: 'removeWordLeft' to 'prototype'
addMember: 'arguments' to 'removeWordLeft Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeWordLeft Scope'
addMember: 'removeToLineStart' to 'prototype'
addMember: 'arguments' to 'removeToLineStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeToLineStart Scope'
addMember: 'removeToLineEnd' to 'prototype'
addMember: 'arguments' to 'removeToLineEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeToLineEnd Scope'
addMember: 'splitLine' to 'prototype'
addMember: 'arguments' to 'splitLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'splitLine Scope'
addMember: 'transposeLetters' to 'prototype'
addMember: 'arguments' to 'transposeLetters Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'transposeLetters Scope'
addMember: 'toLowerCase' to 'prototype'
addMember: 'arguments' to 'toLowerCase Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toLowerCase Scope'
addMember: 'toUpperCase' to 'prototype'
addMember: 'arguments' to 'toUpperCase Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toUpperCase Scope'
addMember: 'indent' to 'prototype'
addMember: 'arguments' to 'indent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'indent Scope'
addMember: 'blockIndent' to 'prototype'
addMember: 'arguments' to 'blockIndent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'blockIndent Scope'
addMember: 'blockOutdent' to 'prototype'
addMember: 'arguments' to 'blockOutdent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'blockOutdent Scope'
addMember: 'sortLines' to 'prototype'
addMember: 'arguments' to 'sortLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'sortLines Scope'
addMember: 'toggleCommentLines' to 'prototype'
addMember: 'arguments' to 'toggleCommentLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toggleCommentLines Scope'
addMember: 'toggleBlockComment' to 'prototype'
addMember: 'arguments' to 'toggleBlockComment Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toggleBlockComment Scope'
addMember: 'getNumberAt' to 'prototype'
addMember: 'arguments' to 'getNumberAt Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getNumberAt Scope'
addToScope: 'row' to 'getNumberAt Scope'
addToScope: 'column' to 'getNumberAt Scope'
addMember: 'modifyNumber' to 'prototype'
addMember: 'arguments' to 'modifyNumber Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'modifyNumber Scope'
addToScope: 'amount' to 'modifyNumber Scope'
addMember: 'removeLines' to 'prototype'
addMember: 'arguments' to 'removeLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeLines Scope'
addMember: 'duplicateSelection' to 'prototype'
addMember: 'arguments' to 'duplicateSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'duplicateSelection Scope'
addMember: 'moveLinesDown' to 'prototype'
addMember: 'arguments' to 'moveLinesDown Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveLinesDown Scope'
addMember: 'moveLinesUp' to 'prototype'
addMember: 'arguments' to 'moveLinesUp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveLinesUp Scope'
addMember: 'moveText' to 'prototype'
addMember: 'arguments' to 'moveText Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveText Scope'
addToScope: 'range' to 'moveText Scope'
addToScope: 'toPosition' to 'moveText Scope'
addMember: 'copyLinesUp' to 'prototype'
addMember: 'arguments' to 'copyLinesUp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'copyLinesUp Scope'
addMember: 'copyLinesDown' to 'prototype'
addMember: 'arguments' to 'copyLinesDown Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'copyLinesDown Scope'
addMember: '$moveLines' to 'prototype'
addMember: 'arguments' to '$moveLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$moveLines Scope'
addToScope: 'mover' to '$moveLines Scope'
addMember: '$getSelectedRows' to 'prototype'
addMember: 'arguments' to '$getSelectedRows Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$getSelectedRows Scope'
addMember: 'onCompositionStart' to 'prototype'
addMember: 'arguments' to 'onCompositionStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onCompositionStart Scope'
addToScope: 'text' to 'onCompositionStart Scope'
addMember: 'onCompositionUpdate' to 'prototype'
addMember: 'arguments' to 'onCompositionUpdate Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onCompositionUpdate Scope'
addToScope: 'text' to 'onCompositionUpdate Scope'
addMember: 'onCompositionEnd' to 'prototype'
addMember: 'arguments' to 'onCompositionEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onCompositionEnd Scope'
addMember: 'getFirstVisibleRow' to 'prototype'
addMember: 'arguments' to 'getFirstVisibleRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getFirstVisibleRow Scope'
addMember: 'getLastVisibleRow' to 'prototype'
addMember: 'arguments' to 'getLastVisibleRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getLastVisibleRow Scope'
addMember: 'isRowVisible' to 'prototype'
addMember: 'arguments' to 'isRowVisible Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isRowVisible Scope'
addToScope: 'row' to 'isRowVisible Scope'
addMember: 'isRowFullyVisible' to 'prototype'
addMember: 'arguments' to 'isRowFullyVisible Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isRowFullyVisible Scope'
addToScope: 'row' to 'isRowFullyVisible Scope'
addMember: '$getVisibleRowCount' to 'prototype'
addMember: 'arguments' to '$getVisibleRowCount Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$getVisibleRowCount Scope'
addMember: '$moveByPage' to 'prototype'
addMember: 'arguments' to '$moveByPage Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$moveByPage Scope'
addToScope: 'dir' to '$moveByPage Scope'
addToScope: 'select' to '$moveByPage Scope'
addMember: 'selectPageDown' to 'prototype'
addMember: 'arguments' to 'selectPageDown Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectPageDown Scope'
addMember: 'selectPageUp' to 'prototype'
addMember: 'arguments' to 'selectPageUp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectPageUp Scope'
addMember: 'gotoPageDown' to 'prototype'
addMember: 'arguments' to 'gotoPageDown Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'gotoPageDown Scope'
addMember: 'gotoPageUp' to 'prototype'
addMember: 'arguments' to 'gotoPageUp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'gotoPageUp Scope'
addMember: 'scrollPageDown' to 'prototype'
addMember: 'arguments' to 'scrollPageDown Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollPageDown Scope'
addMember: 'scrollPageUp' to 'prototype'
addMember: 'arguments' to 'scrollPageUp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollPageUp Scope'
addMember: 'scrollToRow' to 'prototype'
addMember: 'arguments' to 'scrollToRow Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollToRow Scope'
addToScope: 'row' to 'scrollToRow Scope'
addMember: 'scrollToLine' to 'prototype'
addMember: 'arguments' to 'scrollToLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'scrollToLine Scope'
addToScope: 'line' to 'scrollToLine Scope'
addToScope: 'center' to 'scrollToLine Scope'
addToScope: 'animate' to 'scrollToLine Scope'
addToScope: 'callback' to 'scrollToLine Scope'
addMember: 'centerSelection' to 'prototype'
addMember: 'arguments' to 'centerSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'centerSelection Scope'
addMember: 'getCursorPosition' to 'prototype'
addMember: 'arguments' to 'getCursorPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getCursorPosition Scope'
addMember: 'getCursorPositionScreen' to 'prototype'
addMember: 'arguments' to 'getCursorPositionScreen Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getCursorPositionScreen Scope'
addMember: 'getSelectionRange' to 'prototype'
addMember: 'arguments' to 'getSelectionRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getSelectionRange Scope'
addMember: 'selectAll' to 'prototype'
addMember: 'arguments' to 'selectAll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectAll Scope'
addMember: 'clearSelection' to 'prototype'
addMember: 'arguments' to 'clearSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clearSelection Scope'
addMember: 'moveCursorTo' to 'prototype'
addMember: 'arguments' to 'moveCursorTo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorTo Scope'
addToScope: 'row' to 'moveCursorTo Scope'
addToScope: 'column' to 'moveCursorTo Scope'
addMember: 'moveCursorToPosition' to 'prototype'
addMember: 'arguments' to 'moveCursorToPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveCursorToPosition Scope'
addToScope: 'pos' to 'moveCursorToPosition Scope'
addMember: 'jumpToMatching' to 'prototype'
addMember: 'arguments' to 'jumpToMatching Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'jumpToMatching Scope'
addToScope: 'select' to 'jumpToMatching Scope'
addMember: 'gotoLine' to 'prototype'
addMember: 'arguments' to 'gotoLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'gotoLine Scope'
addToScope: 'lineNumber' to 'gotoLine Scope'
addToScope: 'column' to 'gotoLine Scope'
addToScope: 'animate' to 'gotoLine Scope'
addMember: 'navigateTo' to 'prototype'
addMember: 'arguments' to 'navigateTo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'navigateTo Scope'
addToScope: 'row' to 'navigateTo Scope'
addToScope: 'column' to 'navigateTo Scope'
addMember: 'navigateUp' to 'prototype'
addMember: 'arguments' to 'navigateUp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'navigateUp Scope'
addToScope: 'times' to 'navigateUp Scope'
addMember: 'navigateDown' to 'prototype'
addMember: 'arguments' to 'navigateDown Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'navigateDown Scope'
addToScope: 'times' to 'navigateDown Scope'
addMember: 'navigateLeft' to 'prototype'
addMember: 'arguments' to 'navigateLeft Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'navigateLeft Scope'
addToScope: 'times' to 'navigateLeft Scope'
addMember: 'navigateRight' to 'prototype'
addMember: 'arguments' to 'navigateRight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'navigateRight Scope'
addToScope: 'times' to 'navigateRight Scope'
addMember: 'navigateLineStart' to 'prototype'
addMember: 'arguments' to 'navigateLineStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'navigateLineStart Scope'
addMember: 'navigateLineEnd' to 'prototype'
addMember: 'arguments' to 'navigateLineEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'navigateLineEnd Scope'
addMember: 'navigateFileEnd' to 'prototype'
addMember: 'arguments' to 'navigateFileEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'navigateFileEnd Scope'
addMember: 'navigateFileStart' to 'prototype'
addMember: 'arguments' to 'navigateFileStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'navigateFileStart Scope'
addMember: 'navigateWordRight' to 'prototype'
addMember: 'arguments' to 'navigateWordRight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'navigateWordRight Scope'
addMember: 'navigateWordLeft' to 'prototype'
addMember: 'arguments' to 'navigateWordLeft Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'navigateWordLeft Scope'
addMember: 'replace' to 'prototype'
addMember: 'arguments' to 'replace Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'replace Scope'
addToScope: 'replacement' to 'replace Scope'
addToScope: 'options' to 'replace Scope'
addMember: 'replaceAll' to 'prototype'
addMember: 'arguments' to 'replaceAll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'replaceAll Scope'
addToScope: 'replacement' to 'replaceAll Scope'
addToScope: 'options' to 'replaceAll Scope'
addMember: '$tryReplace' to 'prototype'
addMember: 'arguments' to '$tryReplace Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$tryReplace Scope'
addToScope: 'range' to '$tryReplace Scope'
addToScope: 'replacement' to '$tryReplace Scope'
addMember: 'getLastSearchOptions' to 'prototype'
addMember: 'arguments' to 'getLastSearchOptions Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getLastSearchOptions Scope'
addMember: 'find' to 'prototype'
addMember: 'arguments' to 'find Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'find Scope'
addToScope: 'needle' to 'find Scope'
addToScope: 'options' to 'find Scope'
addToScope: 'animate' to 'find Scope'
addMember: 'findNext' to 'prototype'
addMember: 'arguments' to 'findNext Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'findNext Scope'
addToScope: 'options' to 'findNext Scope'
addToScope: 'animate' to 'findNext Scope'
addMember: 'findPrevious' to 'prototype'
addMember: 'arguments' to 'findPrevious Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'findPrevious Scope'
addToScope: 'options' to 'findPrevious Scope'
addToScope: 'animate' to 'findPrevious Scope'
addMember: 'revealRange' to 'prototype'
addMember: 'arguments' to 'revealRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'revealRange Scope'
addToScope: 'range' to 'revealRange Scope'
addToScope: 'animate' to 'revealRange Scope'
addMember: 'undo' to 'prototype'
addMember: 'arguments' to 'undo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'undo Scope'
addMember: 'redo' to 'prototype'
addMember: 'arguments' to 'redo Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'redo Scope'
addMember: 'destroy' to 'prototype'
addMember: 'arguments' to 'destroy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'destroy Scope'
addMember: 'setAutoScrollEditorIntoView' to 'prototype'
addMember: 'arguments' to 'setAutoScrollEditorIntoView Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setAutoScrollEditorIntoView Scope'
addToScope: 'enable' to 'setAutoScrollEditorIntoView Scope'
addMember: '$resetCursorStyle' to 'prototype'
addMember: 'arguments' to '$resetCursorStyle Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$resetCursorStyle Scope'
addMember: 'setOptions' to 'prototype'
addMember: 'arguments' to 'setOptions Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setOptions Scope'
addToScope: 'optList' to 'setOptions Scope'
addMember: 'getOptions' to 'prototype'
addMember: 'arguments' to 'getOptions Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getOptions Scope'
addToScope: 'optionNames' to 'getOptions Scope'
addMember: 'setOption' to 'prototype'
addMember: 'arguments' to 'setOption Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setOption Scope'
addToScope: 'name' to 'setOption Scope'
addToScope: 'value' to 'setOption Scope'
addMember: 'getOption' to 'prototype'
addMember: 'arguments' to 'getOption Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getOption Scope'
addToScope: 'name' to 'getOption Scope'
addMember: 'updateSelectionMarkers' to 'prototype'
addMember: 'arguments' to 'updateSelectionMarkers Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'updateSelectionMarkers Scope'
addMember: 'addSelectionMarker' to 'prototype'
addMember: 'arguments' to 'addSelectionMarker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addSelectionMarker Scope'
addToScope: 'orientedRange' to 'addSelectionMarker Scope'
addMember: 'removeSelectionMarker' to 'prototype'
addMember: 'arguments' to 'removeSelectionMarker Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeSelectionMarker Scope'
addToScope: 'range' to 'removeSelectionMarker Scope'
addMember: 'removeSelectionMarkers' to 'prototype'
addMember: 'arguments' to 'removeSelectionMarkers Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeSelectionMarkers Scope'
addToScope: 'ranges' to 'removeSelectionMarkers Scope'
addMember: '$onAddRange' to 'prototype'
addMember: 'arguments' to '$onAddRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$onAddRange Scope'
addToScope: 'e' to '$onAddRange Scope'
addMember: '$onRemoveRange' to 'prototype'
addMember: 'arguments' to '$onRemoveRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$onRemoveRange Scope'
addToScope: 'e' to '$onRemoveRange Scope'
addMember: '$onMultiSelect' to 'prototype'
addMember: 'arguments' to '$onMultiSelect Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$onMultiSelect Scope'
addToScope: 'e' to '$onMultiSelect Scope'
addMember: '$onSingleSelect' to 'prototype'
addMember: 'arguments' to '$onSingleSelect Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$onSingleSelect Scope'
addToScope: 'e' to '$onSingleSelect Scope'
addMember: '$onMultiSelectExec' to 'prototype'
addMember: 'arguments' to '$onMultiSelectExec Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$onMultiSelectExec Scope'
addToScope: 'e' to '$onMultiSelectExec Scope'
addMember: 'forEachSelection' to 'prototype'
addMember: 'arguments' to 'forEachSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'forEachSelection Scope'
addToScope: 'cmd' to 'forEachSelection Scope'
addToScope: 'args' to 'forEachSelection Scope'
addToScope: '$byLines' to 'forEachSelection Scope'
addMember: 'exitMultiSelectMode' to 'prototype'
addMember: 'arguments' to 'exitMultiSelectMode Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'exitMultiSelectMode Scope'
addMember: 'findAll' to 'prototype'
addMember: 'arguments' to 'findAll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'findAll Scope'
addToScope: 'needle' to 'findAll Scope'
addToScope: 'options' to 'findAll Scope'
addToScope: 'additive' to 'findAll Scope'
addMember: 'selectMoreLines' to 'prototype'
addMember: 'arguments' to 'selectMoreLines Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectMoreLines Scope'
addToScope: 'dir' to 'selectMoreLines Scope'
addToScope: 'skip' to 'selectMoreLines Scope'
addMember: 'transposeSelections' to 'prototype'
addMember: 'arguments' to 'transposeSelections Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'transposeSelections Scope'
addToScope: 'dir' to 'transposeSelections Scope'
addMember: 'selectMore' to 'prototype'
addMember: 'arguments' to 'selectMore Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'selectMore Scope'
addToScope: 'dir' to 'selectMore Scope'
addToScope: 'skip' to 'selectMore Scope'
addMember: 'alignCursors' to 'prototype'
addMember: 'arguments' to 'alignCursors Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'alignCursors Scope'
addMember: '$reAlignText' to 'prototype'
addMember: 'arguments' to '$reAlignText Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$reAlignText Scope'
addToScope: 'lines' to '$reAlignText Scope'
addToScope: 'MouseEvent' to 'NamespaceDeclaration Scope'
addMember: 'MouseEvent' to 'ace'
addMember: 'prototype' to 'MouseEvent'
addMember: 'constructor' to 'prototype'
addMember: 'MouseEvent' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'domEvent' to 'ConstructorDeclaration Scope'
addToScope: 'editor' to 'ConstructorDeclaration Scope'
addMember: 'stopPropagation' to 'prototype'
addMember: 'arguments' to 'stopPropagation Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'stopPropagation Scope'
addMember: 'preventDefault' to 'prototype'
addMember: 'arguments' to 'preventDefault Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'preventDefault Scope'
addMember: 'stop' to 'prototype'
addMember: 'arguments' to 'stop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'stop Scope'
addMember: 'getDocumentPosition' to 'prototype'
addMember: 'arguments' to 'getDocumentPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getDocumentPosition Scope'
addMember: 'inSelection' to 'prototype'
addMember: 'arguments' to 'inSelection Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'inSelection Scope'
addMember: 'getButton' to 'prototype'
addMember: 'arguments' to 'getButton Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getButton Scope'
addMember: 'getShiftKey' to 'prototype'
addMember: 'arguments' to 'getShiftKey Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getShiftKey Scope'
addMember: 'getAccelKey' to 'prototype'
addMember: 'arguments' to 'getAccelKey Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getAccelKey Scope'
addToScope: 'Cursor' to 'NamespaceDeclaration Scope'
addMember: 'Cursor' to 'ace'
addMember: 'prototype' to 'Cursor'
addMember: 'constructor' to 'prototype'
addMember: 'Cursor' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'parentEl' to 'ConstructorDeclaration Scope'
addMember: '$padding' to 'prototype'
addMember: 'setPadding' to 'prototype'
addMember: 'arguments' to 'setPadding Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setPadding Scope'
addToScope: 'padding' to 'setPadding Scope'
addMember: 'setSession' to 'prototype'
addMember: 'arguments' to 'setSession Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setSession Scope'
addToScope: 'session' to 'setSession Scope'
addMember: 'setBlinking' to 'prototype'
addMember: 'arguments' to 'setBlinking Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setBlinking Scope'
addToScope: 'blinking' to 'setBlinking Scope'
addMember: 'setBlinkInterval' to 'prototype'
addMember: 'arguments' to 'setBlinkInterval Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setBlinkInterval Scope'
addToScope: 'blinkInterval' to 'setBlinkInterval Scope'
addMember: 'setSmoothBlinking' to 'prototype'
addMember: 'arguments' to 'setSmoothBlinking Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setSmoothBlinking Scope'
addToScope: 'smoothBlinking' to 'setSmoothBlinking Scope'
addMember: 'addCursor' to 'prototype'
addMember: 'arguments' to 'addCursor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addCursor Scope'
addMember: 'removeCursor' to 'prototype'
addMember: 'arguments' to 'removeCursor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeCursor Scope'
addMember: 'hideCursor' to 'prototype'
addMember: 'arguments' to 'hideCursor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'hideCursor Scope'
addMember: 'showCursor' to 'prototype'
addMember: 'arguments' to 'showCursor Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'showCursor Scope'
addMember: 'restartTimer' to 'prototype'
addMember: 'arguments' to 'restartTimer Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'restartTimer Scope'
addMember: 'getPixelPosition' to 'prototype'
addMember: 'arguments' to 'getPixelPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getPixelPosition Scope'
addToScope: 'position' to 'getPixelPosition Scope'
addToScope: 'onScreen' to 'getPixelPosition Scope'
addMember: 'update' to 'prototype'
addMember: 'arguments' to 'update Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'update Scope'
addToScope: 'config' to 'update Scope'
addMember: '$setOverwrite' to 'prototype'
addMember: 'arguments' to '$setOverwrite Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$setOverwrite Scope'
addToScope: 'overwrite' to '$setOverwrite Scope'
addMember: 'destroy' to 'prototype'
addMember: 'arguments' to 'destroy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'destroy Scope'
addToScope: 'Range' to 'NamespaceDeclaration Scope'
addMember: 'Range' to 'ace'
addMember: 'prototype' to 'Range'
addMember: 'constructor' to 'prototype'
addMember: 'Range' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'startRow' to 'ConstructorDeclaration Scope'
addToScope: 'startColumn' to 'ConstructorDeclaration Scope'
addToScope: 'endRow' to 'ConstructorDeclaration Scope'
addToScope: 'endColumn' to 'ConstructorDeclaration Scope'
addMember: 'isEqual' to 'prototype'
addMember: 'arguments' to 'isEqual Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isEqual Scope'
addToScope: 'range' to 'isEqual Scope'
addMember: 'toString' to 'prototype'
addMember: 'arguments' to 'toString Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toString Scope'
addMember: 'contains' to 'prototype'
addMember: 'arguments' to 'contains Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'contains Scope'
addToScope: 'row' to 'contains Scope'
addToScope: 'column' to 'contains Scope'
addMember: 'compareRange' to 'prototype'
addMember: 'arguments' to 'compareRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'compareRange Scope'
addToScope: 'range' to 'compareRange Scope'
addMember: 'comparePoint' to 'prototype'
addMember: 'arguments' to 'comparePoint Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'comparePoint Scope'
addToScope: 'p' to 'comparePoint Scope'
addMember: 'containsRange' to 'prototype'
addMember: 'arguments' to 'containsRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'containsRange Scope'
addToScope: 'range' to 'containsRange Scope'
addMember: 'intersects' to 'prototype'
addMember: 'arguments' to 'intersects Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'intersects Scope'
addToScope: 'range' to 'intersects Scope'
addMember: 'isEnd' to 'prototype'
addMember: 'arguments' to 'isEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isEnd Scope'
addToScope: 'row' to 'isEnd Scope'
addToScope: 'column' to 'isEnd Scope'
addMember: 'isStart' to 'prototype'
addMember: 'arguments' to 'isStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isStart Scope'
addToScope: 'row' to 'isStart Scope'
addToScope: 'column' to 'isStart Scope'
addMember: 'setStart' to 'prototype'
addMember: 'arguments' to 'setStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setStart Scope'
addToScope: 'row' to 'setStart Scope'
addToScope: 'column' to 'setStart Scope'
addMember: 'setEnd' to 'prototype'
addMember: 'arguments' to 'setEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setEnd Scope'
addToScope: 'row' to 'setEnd Scope'
addToScope: 'column' to 'setEnd Scope'
addMember: 'inside' to 'prototype'
addMember: 'arguments' to 'inside Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'inside Scope'
addToScope: 'row' to 'inside Scope'
addToScope: 'column' to 'inside Scope'
addMember: 'insideStart' to 'prototype'
addMember: 'arguments' to 'insideStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'insideStart Scope'
addToScope: 'row' to 'insideStart Scope'
addToScope: 'column' to 'insideStart Scope'
addMember: 'insideEnd' to 'prototype'
addMember: 'arguments' to 'insideEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'insideEnd Scope'
addToScope: 'row' to 'insideEnd Scope'
addToScope: 'column' to 'insideEnd Scope'
addMember: 'compare' to 'prototype'
addMember: 'arguments' to 'compare Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'compare Scope'
addToScope: 'row' to 'compare Scope'
addToScope: 'column' to 'compare Scope'
addMember: 'compareStart' to 'prototype'
addMember: 'arguments' to 'compareStart Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'compareStart Scope'
addToScope: 'row' to 'compareStart Scope'
addToScope: 'column' to 'compareStart Scope'
addMember: 'compareEnd' to 'prototype'
addMember: 'arguments' to 'compareEnd Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'compareEnd Scope'
addToScope: 'row' to 'compareEnd Scope'
addToScope: 'column' to 'compareEnd Scope'
addMember: 'compareInside' to 'prototype'
addMember: 'arguments' to 'compareInside Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'compareInside Scope'
addToScope: 'row' to 'compareInside Scope'
addToScope: 'column' to 'compareInside Scope'
addMember: 'clipRows' to 'prototype'
addMember: 'arguments' to 'clipRows Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clipRows Scope'
addToScope: 'firstRow' to 'clipRows Scope'
addToScope: 'lastRow' to 'clipRows Scope'
addMember: 'extend' to 'prototype'
addMember: 'arguments' to 'extend Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'extend Scope'
addToScope: 'row' to 'extend Scope'
addToScope: 'column' to 'extend Scope'
addMember: 'isEmpty' to 'prototype'
addMember: 'arguments' to 'isEmpty Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isEmpty Scope'
addMember: 'isMultiLine' to 'prototype'
addMember: 'arguments' to 'isMultiLine Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'isMultiLine Scope'
addMember: 'clone' to 'prototype'
addMember: 'arguments' to 'clone Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'clone Scope'
addMember: 'collapseRows' to 'prototype'
addMember: 'arguments' to 'collapseRows Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'collapseRows Scope'
addMember: 'toScreenRange' to 'prototype'
addMember: 'arguments' to 'toScreenRange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toScreenRange Scope'
addToScope: 'session' to 'toScreenRange Scope'
addMember: 'moveBy' to 'prototype'
addMember: 'arguments' to 'moveBy Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'moveBy Scope'
addToScope: 'row' to 'moveBy Scope'
addToScope: 'column' to 'moveBy Scope'
addMember: 'fromPoints' to 'Range'
addMember: 'arguments' to 'fromPoints Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'fromPoints Scope'
addToScope: 'start' to 'fromPoints Scope'
addToScope: 'end' to 'fromPoints Scope'
addMember: 'comparePoints' to 'Range'
addMember: 'arguments' to 'comparePoints Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'comparePoints Scope'
addToScope: 'p1' to 'comparePoints Scope'
addToScope: 'p2' to 'comparePoints Scope'
addToScope: 'Search' to 'NamespaceDeclaration Scope'
addMember: 'Search' to 'ace'
addMember: 'prototype' to 'Search'
addMember: 'constructor' to 'prototype'
addMember: 'Search' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addMember: 'set' to 'prototype'
addMember: 'arguments' to 'set Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'set Scope'
addToScope: 'options' to 'set Scope'
addMember: 'getOptions' to 'prototype'
addMember: 'arguments' to 'getOptions Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getOptions Scope'
addMember: 'setOptions' to 'prototype'
addMember: 'arguments' to 'setOptions Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setOptions Scope'
addToScope: 'options' to 'setOptions Scope'
addMember: 'find' to 'prototype'
addMember: 'arguments' to 'find Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'find Scope'
addToScope: 'session' to 'find Scope'
addMember: 'findAll' to 'prototype'
addMember: 'arguments' to 'findAll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'findAll Scope'
addToScope: 'session' to 'findAll Scope'
addMember: 'replace' to 'prototype'
addMember: 'arguments' to 'replace Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'replace Scope'
addToScope: 'input' to 'replace Scope'
addToScope: 'replacement' to 'replace Scope'
addMember: '$matchIterator' to 'prototype'
addMember: 'arguments' to '$matchIterator Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$matchIterator Scope'
addToScope: 'session' to '$matchIterator Scope'
addToScope: 'options' to '$matchIterator Scope'
addMember: '$assembleRegExp' to 'prototype'
addMember: 'arguments' to '$assembleRegExp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$assembleRegExp Scope'
addToScope: 'options' to '$assembleRegExp Scope'
addMember: '$assembleMultilineRegExp' to 'prototype'
addMember: 'arguments' to '$assembleMultilineRegExp Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$assembleMultilineRegExp Scope'
addToScope: 'needle' to '$assembleMultilineRegExp Scope'
addToScope: 'modifier' to '$assembleMultilineRegExp Scope'
addMember: '$lineIterator' to 'prototype'
addMember: 'arguments' to '$lineIterator Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$lineIterator Scope'
addToScope: 'session' to '$lineIterator Scope'
addToScope: 'options' to '$lineIterator Scope'
addToScope: 'CommandManager' to 'NamespaceDeclaration Scope'
addMember: 'CommandManager' to 'ace'
addMember: 'prototype' to 'CommandManager'
addMember: 'constructor' to 'prototype'
addMember: 'CommandManager' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'platform' to 'ConstructorDeclaration Scope'
addToScope: 'commands' to 'ConstructorDeclaration Scope'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'exec' to 'prototype'
addMember: 'arguments' to 'exec Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'exec Scope'
addToScope: 'command' to 'exec Scope'
addToScope: 'editor' to 'exec Scope'
addToScope: 'args' to 'exec Scope'
addMember: 'toggleRecording' to 'prototype'
addMember: 'arguments' to 'toggleRecording Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'toggleRecording Scope'
addToScope: 'editor' to 'toggleRecording Scope'
addMember: 'replay' to 'prototype'
addMember: 'arguments' to 'replay Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'replay Scope'
addToScope: 'editor' to 'replay Scope'
addMember: 'trimMacro' to 'prototype'
addMember: 'arguments' to 'trimMacro Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'trimMacro Scope'
addToScope: 'm' to 'trimMacro Scope'
addToScope: 'Anchor' to 'NamespaceDeclaration Scope'
addMember: 'Anchor' to 'ace'
addMember: 'prototype' to 'Anchor'
addMember: 'constructor' to 'prototype'
addMember: 'Anchor' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'doc' to 'ConstructorDeclaration Scope'
addToScope: 'row' to 'ConstructorDeclaration Scope'
addToScope: 'column' to 'ConstructorDeclaration Scope'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'getPosition' to 'prototype'
addMember: 'arguments' to 'getPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getPosition Scope'
addMember: 'getDocument' to 'prototype'
addMember: 'arguments' to 'getDocument Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getDocument Scope'
addMember: 'onChange' to 'prototype'
addMember: 'arguments' to 'onChange Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onChange Scope'
addToScope: 'e' to 'onChange Scope'
addMember: 'setPosition' to 'prototype'
addMember: 'arguments' to 'setPosition Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setPosition Scope'
addToScope: 'row' to 'setPosition Scope'
addToScope: 'column' to 'setPosition Scope'
addToScope: 'noClip' to 'setPosition Scope'
addMember: 'detach' to 'prototype'
addMember: 'arguments' to 'detach Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'detach Scope'
addMember: '$clipPositionToDocument' to 'prototype'
addMember: 'arguments' to '$clipPositionToDocument Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '$clipPositionToDocument Scope'
addToScope: 'row' to '$clipPositionToDocument Scope'
addToScope: 'column' to '$clipPositionToDocument Scope'
addToScope: 'ScrollBar' to 'NamespaceDeclaration Scope'
addMember: 'ScrollBar' to 'ace'
addMember: 'prototype' to 'ScrollBar'
addMember: 'constructor' to 'prototype'
addMember: 'ScrollBar' to 'Name Affinity'
addMember: 'arguments' to 'ConstructorDeclaration Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'ConstructorDeclaration Scope'
addToScope: 'parent' to 'ConstructorDeclaration Scope'
addMember: '_dispatchEvent' to 'prototype'
addMember: 'arguments' to '_dispatchEvent Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_dispatchEvent Scope'
addToScope: 'eventName' to '_dispatchEvent Scope'
addToScope: 'e' to '_dispatchEvent Scope'
addMember: '_emit' to 'prototype'
addMember: 'arguments' to '_emit Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_emit Scope'
addToScope: 'eventName' to '_emit Scope'
addToScope: 'e' to '_emit Scope'
addMember: '_signal' to 'prototype'
addMember: 'arguments' to '_signal Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to '_signal Scope'
addToScope: 'eventName' to '_signal Scope'
addToScope: 'e' to '_signal Scope'
addMember: 'once' to 'prototype'
addMember: 'arguments' to 'once Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'once Scope'
addToScope: 'eventName' to 'once Scope'
addToScope: 'callback' to 'once Scope'
addMember: 'setDefaultHandler' to 'prototype'
addMember: 'arguments' to 'setDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setDefaultHandler Scope'
addToScope: 'eventName' to 'setDefaultHandler Scope'
addToScope: 'callback' to 'setDefaultHandler Scope'
addMember: 'removeDefaultHandler' to 'prototype'
addMember: 'arguments' to 'removeDefaultHandler Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeDefaultHandler Scope'
addToScope: 'eventName' to 'removeDefaultHandler Scope'
addToScope: 'callback' to 'removeDefaultHandler Scope'
addMember: 'addEventListener' to 'prototype'
addMember: 'arguments' to 'addEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'addEventListener Scope'
addToScope: 'eventName' to 'addEventListener Scope'
addToScope: 'callback' to 'addEventListener Scope'
addToScope: 'capturing' to 'addEventListener Scope'
addMember: 'on' to 'prototype'
addMember: 'arguments' to 'on Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'on Scope'
addToScope: 'eventName' to 'on Scope'
addToScope: 'callback' to 'on Scope'
addToScope: 'capturing' to 'on Scope'
addMember: 'removeEventListener' to 'prototype'
addMember: 'arguments' to 'removeEventListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeEventListener Scope'
addToScope: 'eventName' to 'removeEventListener Scope'
addToScope: 'callback' to 'removeEventListener Scope'
addMember: 'removeListener' to 'prototype'
addMember: 'arguments' to 'removeListener Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeListener Scope'
addToScope: 'eventName' to 'removeListener Scope'
addToScope: 'callback' to 'removeListener Scope'
addMember: 'off' to 'prototype'
addMember: 'arguments' to 'off Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'off Scope'
addToScope: 'eventName' to 'off Scope'
addToScope: 'callback' to 'off Scope'
addMember: 'removeAllListeners' to 'prototype'
addMember: 'arguments' to 'removeAllListeners Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'removeAllListeners Scope'
addToScope: 'eventName' to 'removeAllListeners Scope'
addMember: 'onScroll' to 'prototype'
addMember: 'arguments' to 'onScroll Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'onScroll Scope'
addMember: 'getWidth' to 'prototype'
addMember: 'arguments' to 'getWidth Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'getWidth Scope'
addMember: 'setHeight' to 'prototype'
addMember: 'arguments' to 'setHeight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setHeight Scope'
addToScope: 'height' to 'setHeight Scope'
addMember: 'setInnerHeight' to 'prototype'
addMember: 'arguments' to 'setInnerHeight Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setInnerHeight Scope'
addToScope: 'height' to 'setInnerHeight Scope'
addMember: 'setScrollTop' to 'prototype'
addMember: 'arguments' to 'setScrollTop Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'setScrollTop Scope'
addToScope: 'scrollTop' to 'setScrollTop Scope'
addToScope: 'httpGet' to '/home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md Scope'
addMember: 'httpGet' to 'exports'
addMember: 'arguments' to 'httpGet Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'httpGet Scope'
addToScope: 'url' to 'httpGet Scope'
addToScope: 'callback' to 'httpGet Scope'
addToScope: 'xmlhttp' to 'httpGet Scope'
addToScope: 'Local_OnLoad' to '/home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md Scope'
addMember: 'arguments' to 'Local_OnLoad Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'Local_OnLoad Scope'
addToScope: 'errMsg' to 'Local_OnLoad Scope'
addToScope: 'stat' to 'Local_OnLoad Scope'
addToScope: 'Local_OnError' to '/home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md Scope'
addMember: 'arguments' to 'Local_OnError Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'Local_OnError Scope'
addToScope: 'e' to 'Local_OnError Scope'
addToScope: 'create_HttpRequest' to '/home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md Scope'
addMember: 'arguments' to 'create_HttpRequest Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'create_HttpRequest Scope'
addToScope: 'ref' to 'create_HttpRequest Scope'
addToScope: 'require' to '/home/ltato/LiteScript_online_playground/playground/js/require.lite.md Scope'
addMember: 'require' to 'exports'
addMember: 'arguments' to 'require Scope'
addMember: 'length' to 'arguments'
addMember: 'this' to 'require Scope'
addToScope: 'url' to 'require Scope'
addToScope: 'caller' to 'require Scope'
addToScope: 'cwd' to 'require Scope'
addToScope: 'cacheName' to 'require Scope'
addToScope: 'requiredModule' to 'require Scope'
addToScope: 'moduleExports' to 'require Scope'
addToScope: 'X' to 'require Scope'
addToScope: 'source' to 'require Scope'
addToScope: 'moduleStart' to 'require Scope'
addToScope: 'moduleEnd' to 'require Scope'
addToScope: 'CDTcomment' to 'require Scope'
addMember: 'id' to '_*ObjectLiteral*6'
addMember: 'uri' to '_*ObjectLiteral*6'
addMember: 'exports' to '_*ObjectLiteral*6'
addToScope: 'requireBinded' to 'require Scope'
addToScope: 'anonFn' to 'require Scope'
addToScope: 'err' to 'ExceptionBlock Scope'
addMember: 'cache' to 'require'
addMember: 'globalPath' to 'require'
- Declare By Assignment
- Connecting Imported
addToScope: '$' to 'Project Root Scope'
addToScope: 'jQuery' to 'Project Root Scope'
addToScope: 'window' to 'Project Root Scope'
addToScope: 'document' to 'Project Root Scope'
addToScope: 'Window' to 'Project Root Scope'
addToScope: 'Location' to 'Project Root Scope'
addToScope: 'Document' to 'Project Root Scope'
addToScope: 'NodeList' to 'Project Root Scope'
addToScope: 'Node' to 'Project Root Scope'
addToScope: 'Element' to 'Project Root Scope'
addToScope: 'XMLHttpRequest' to 'Project Root Scope'
addToScope: 'Event' to 'Project Root Scope'
addToScope: 'CSSStyle' to 'Project Root Scope'
addToScope: 'ace' to 'Project Root Scope'
addToScope: 'httpGet' to 'Project Root Scope'
addToScope: 'require' to 'Project Root Scope'
- Processing Append-To
addMember: 'process' to 'window'
- Converting Types
converted:763, totalConverted:763
- Evaluating Assignments
- Validating Property Access
addMember: '_stdout' to 'console'
addMember: '_connecting' to '_stdout'
addMember: '_hadError' to '_stdout'
addMember: '_handle' to '_stdout'
addMember: 'fd' to '_handle'
addMember: 'writeQueueSize' to '_handle'
addMember: 'owner' to '_handle'
addMember: '_connecting' to 'owner'
addMember: '_hadError' to 'owner'
addMember: '_handle' to 'owner'
addMember: '_host' to 'owner'
addMember: '_readableState' to 'owner'
addMember: 'highWaterMark' to '_readableState'
addMember: 'buffer' to '_readableState'
addMember: 'length' to 'buffer'
addMember: 'length' to '_readableState'
addMember: 'pipes' to '_readableState'
addMember: 'pipesCount' to '_readableState'
addMember: 'flowing' to '_readableState'
addMember: 'ended' to '_readableState'
addMember: 'endEmitted' to '_readableState'
addMember: 'reading' to '_readableState'
addMember: 'sync' to '_readableState'
addMember: 'needReadable' to '_readableState'
addMember: 'emittedReadable' to '_readableState'
addMember: 'readableListening' to '_readableState'
addMember: 'objectMode' to '_readableState'
addMember: 'defaultEncoding' to '_readableState'
addMember: 'ranOut' to '_readableState'
addMember: 'awaitDrain' to '_readableState'
addMember: 'readingMore' to '_readableState'
addMember: 'decoder' to '_readableState'
addMember: 'encoding' to '_readableState'
addMember: 'readable' to 'owner'
addMember: 'domain' to 'owner'
addMember: '_events' to 'owner'
addMember: 'end' to '_events'
addMember: 'length' to 'end'
addMember: 'name' to 'end'
addMember: 'arguments' to 'end'
addMember: 'caller' to 'end'
addMember: 'prototype' to 'end'
addMember: 'constructor' to 'prototype'
addMember: 'listener' to 'end'
addMember: 'length' to 'listener'
addMember: 'name' to 'listener'
addMember: 'arguments' to 'listener'
addMember: 'caller' to 'listener'
addMember: 'prototype' to 'listener'
addMember: 'constructor' to 'prototype'
addMember: 'finish' to '_events'
addMember: 'length' to 'finish'
addMember: 'name' to 'finish'
addMember: 'arguments' to 'finish'
addMember: 'caller' to 'finish'
addMember: 'prototype' to 'finish'
addMember: 'constructor' to 'prototype'
addMember: '_socketEnd' to '_events'
addMember: 'length' to '_socketEnd'
addMember: 'name' to '_socketEnd'
addMember: 'arguments' to '_socketEnd'
addMember: 'caller' to '_socketEnd'
addMember: 'prototype' to '_socketEnd'
addMember: 'constructor' to 'prototype'
addMember: '_maxListeners' to 'owner'
addMember: '_writableState' to 'owner'
addMember: 'highWaterMark' to '_writableState'
addMember: 'objectMode' to '_writableState'
addMember: 'needDrain' to '_writableState'
addMember: 'ending' to '_writableState'
addMember: 'ended' to '_writableState'
addMember: 'finished' to '_writableState'
addMember: 'decodeStrings' to '_writableState'
addMember: 'defaultEncoding' to '_writableState'
addMember: 'length' to '_writableState'
addMember: 'writing' to '_writableState'
addMember: 'corked' to '_writableState'
addMember: 'sync' to '_writableState'
addMember: 'bufferProcessing' to '_writableState'
addMember: 'onwrite' to '_writableState'
addMember: 'length' to 'onwrite'
addMember: 'name' to 'onwrite'
addMember: 'arguments' to 'onwrite'
addMember: 'caller' to 'onwrite'
addMember: 'prototype' to 'onwrite'
addMember: 'constructor' to 'prototype'
addMember: 'writecb' to '_writableState'
addMember: 'writelen' to '_writableState'
addMember: 'buffer' to '_writableState'
addMember: 'length' to 'buffer'
addMember: 'pendingcb' to '_writableState'
addMember: 'prefinished' to '_writableState'
addMember: 'writable' to 'owner'
addMember: 'allowHalfOpen' to 'owner'
addMember: 'destroyed' to 'owner'
addMember: 'errorEmitted' to 'owner'
addMember: 'bytesRead' to 'owner'
addMember: '_bytesDispatched' to 'owner'
addMember: '_writev' to 'owner'
addMember: '_pendingData' to 'owner'
addMember: '_pendingEncoding' to 'owner'
addMember: 'read' to 'owner'
addMember: '_type' to 'owner'
addMember: 'fd' to 'owner'
addMember: '_isStdio' to 'owner'
addMember: 'destroySoon' to 'owner'
addMember: 'length' to 'destroySoon'
addMember: 'name' to 'destroySoon'
addMember: 'arguments' to 'destroySoon'
addMember: 'caller' to 'destroySoon'
addMember: 'prototype' to 'destroySoon'
addMember: 'constructor' to 'prototype'
addMember: 'destroy' to 'owner'
addMember: 'length' to 'destroy'
addMember: 'name' to 'destroy'
addMember: 'arguments' to 'destroy'
addMember: 'caller' to 'destroy'
addMember: 'prototype' to 'destroy'
addMember: 'constructor' to 'prototype'
addMember: 'onread' to '_handle'
addMember: 'length' to 'onread'
addMember: 'name' to 'onread'
addMember: 'arguments' to 'onread'
addMember: 'caller' to 'onread'
addMember: 'prototype' to 'onread'
addMember: 'constructor' to 'prototype'
addMember: '_host' to '_stdout'
addMember: '_readableState' to '_stdout'
addMember: 'highWaterMark' to '_readableState'
addMember: 'buffer' to '_readableState'
addMember: 'length' to 'buffer'
addMember: 'length' to '_readableState'
addMember: 'pipes' to '_readableState'
addMember: 'pipesCount' to '_readableState'
addMember: 'flowing' to '_readableState'
addMember: 'ended' to '_readableState'
addMember: 'endEmitted' to '_readableState'
addMember: 'reading' to '_readableState'
addMember: 'sync' to '_readableState'
addMember: 'needReadable' to '_readableState'
addMember: 'emittedReadable' to '_readableState'
addMember: 'readableListening' to '_readableState'
addMember: 'objectMode' to '_readableState'
addMember: 'defaultEncoding' to '_readableState'
addMember: 'ranOut' to '_readableState'
addMember: 'awaitDrain' to '_readableState'
addMember: 'readingMore' to '_readableState'
addMember: 'decoder' to '_readableState'
addMember: 'encoding' to '_readableState'
addMember: 'readable' to '_stdout'
addMember: 'domain' to '_stdout'
addMember: '_events' to '_stdout'
addMember: 'end' to '_events'
addMember: 'length' to 'end'
addMember: 'name' to 'end'
addMember: 'arguments' to 'end'
addMember: 'caller' to 'end'
addMember: 'prototype' to 'end'
addMember: 'constructor' to 'prototype'
addMember: 'listener' to 'end'
addMember: 'length' to 'listener'
addMember: 'name' to 'listener'
addMember: 'arguments' to 'listener'
addMember: 'caller' to 'listener'
addMember: 'prototype' to 'listener'
addMember: 'constructor' to 'prototype'
addMember: 'finish' to '_events'
addMember: 'length' to 'finish'
addMember: 'name' to 'finish'
addMember: 'arguments' to 'finish'
addMember: 'caller' to 'finish'
addMember: 'prototype' to 'finish'
addMember: 'constructor' to 'prototype'
addMember: '_socketEnd' to '_events'
addMember: 'length' to '_socketEnd'
addMember: 'name' to '_socketEnd'
addMember: 'arguments' to '_socketEnd'
addMember: 'caller' to '_socketEnd'
addMember: 'prototype' to '_socketEnd'
addMember: 'constructor' to 'prototype'
addMember: '_maxListeners' to '_stdout'
addMember: '_writableState' to '_stdout'
addMember: 'highWaterMark' to '_writableState'
addMember: 'objectMode' to '_writableState'
addMember: 'needDrain' to '_writableState'
addMember: 'ending' to '_writableState'
addMember: 'ended' to '_writableState'
addMember: 'finished' to '_writableState'
addMember: 'decodeStrings' to '_writableState'
addMember: 'defaultEncoding' to '_writableState'
addMember: 'length' to '_writableState'
addMember: 'writing' to '_writableState'
addMember: 'corked' to '_writableState'
addMember: 'sync' to '_writableState'
addMember: 'bufferProcessing' to '_writableState'
addMember: 'onwrite' to '_writableState'
addMember: 'length' to 'onwrite'
addMember: 'name' to 'onwrite'
addMember: 'arguments' to 'onwrite'
addMember: 'caller' to 'onwrite'
addMember: 'prototype' to 'onwrite'
addMember: 'constructor' to 'prototype'
addMember: 'writecb' to '_writableState'
addMember: 'writelen' to '_writableState'
addMember: 'buffer' to '_writableState'
addMember: 'length' to 'buffer'
addMember: 'pendingcb' to '_writableState'
addMember: 'prefinished' to '_writableState'
addMember: 'writable' to '_stdout'
addMember: 'allowHalfOpen' to '_stdout'
addMember: 'destroyed' to '_stdout'
addMember: 'errorEmitted' to '_stdout'
addMember: 'bytesRead' to '_stdout'
addMember: '_bytesDispatched' to '_stdout'
addMember: '_writev' to '_stdout'
addMember: '_pendingData' to '_stdout'
addMember: '_pendingEncoding' to '_stdout'
addMember: 'read' to '_stdout'
addMember: '_type' to '_stdout'
addMember: 'fd' to '_stdout'
addMember: '_isStdio' to '_stdout'
addMember: 'destroySoon' to '_stdout'
addMember: 'length' to 'destroySoon'
addMember: 'name' to 'destroySoon'
addMember: 'arguments' to 'destroySoon'
addMember: 'caller' to 'destroySoon'
addMember: 'prototype' to 'destroySoon'
addMember: 'constructor' to 'prototype'
addMember: 'destroy' to '_stdout'
addMember: 'length' to 'destroy'
addMember: 'name' to 'destroy'
addMember: 'arguments' to 'destroy'
addMember: 'caller' to 'destroy'
addMember: 'prototype' to 'destroy'
addMember: 'constructor' to 'prototype'
addMember: '_stderr' to 'console'
addMember: '_connecting' to '_stderr'
addMember: '_hadError' to '_stderr'
addMember: '_handle' to '_stderr'
addMember: 'fd' to '_handle'
addMember: 'writeQueueSize' to '_handle'
addMember: 'owner' to '_handle'
addMember: '_connecting' to 'owner'
addMember: '_hadError' to 'owner'
addMember: '_handle' to 'owner'
addMember: '_host' to 'owner'
addMember: '_readableState' to 'owner'
addMember: 'highWaterMark' to '_readableState'
addMember: 'buffer' to '_readableState'
addMember: 'length' to 'buffer'
addMember: 'length' to '_readableState'
addMember: 'pipes' to '_readableState'
addMember: 'pipesCount' to '_readableState'
addMember: 'flowing' to '_readableState'
addMember: 'ended' to '_readableState'
addMember: 'endEmitted' to '_readableState'
addMember: 'reading' to '_readableState'
addMember: 'sync' to '_readableState'
addMember: 'needReadable' to '_readableState'
addMember: 'emittedReadable' to '_readableState'
addMember: 'readableListening' to '_readableState'
addMember: 'objectMode' to '_readableState'
addMember: 'defaultEncoding' to '_readableState'
addMember: 'ranOut' to '_readableState'
addMember: 'awaitDrain' to '_readableState'
addMember: 'readingMore' to '_readableState'
addMember: 'decoder' to '_readableState'
addMember: 'encoding' to '_readableState'
addMember: 'readable' to 'owner'
addMember: 'domain' to 'owner'
addMember: '_events' to 'owner'
addMember: 'end' to '_events'
addMember: 'length' to 'end'
addMember: 'name' to 'end'
addMember: 'arguments' to 'end'
addMember: 'caller' to 'end'
addMember: 'prototype' to 'end'
addMember: 'constructor' to 'prototype'
addMember: 'listener' to 'end'
addMember: 'length' to 'listener'
addMember: 'name' to 'listener'
addMember: 'arguments' to 'listener'
addMember: 'caller' to 'listener'
addMember: 'prototype' to 'listener'
addMember: 'constructor' to 'prototype'
addMember: 'finish' to '_events'
addMember: 'length' to 'finish'
addMember: 'name' to 'finish'
addMember: 'arguments' to 'finish'
addMember: 'caller' to 'finish'
addMember: 'prototype' to 'finish'
addMember: 'constructor' to 'prototype'
addMember: '_socketEnd' to '_events'
addMember: 'length' to '_socketEnd'
addMember: 'name' to '_socketEnd'
addMember: 'arguments' to '_socketEnd'
addMember: 'caller' to '_socketEnd'
addMember: 'prototype' to '_socketEnd'
addMember: 'constructor' to 'prototype'
addMember: '_maxListeners' to 'owner'
addMember: '_writableState' to 'owner'
addMember: 'highWaterMark' to '_writableState'
addMember: 'objectMode' to '_writableState'
addMember: 'needDrain' to '_writableState'
addMember: 'ending' to '_writableState'
addMember: 'ended' to '_writableState'
addMember: 'finished' to '_writableState'
addMember: 'decodeStrings' to '_writableState'
addMember: 'defaultEncoding' to '_writableState'
addMember: 'length' to '_writableState'
addMember: 'writing' to '_writableState'
addMember: 'corked' to '_writableState'
addMember: 'sync' to '_writableState'
addMember: 'bufferProcessing' to '_writableState'
addMember: 'onwrite' to '_writableState'
addMember: 'length' to 'onwrite'
addMember: 'name' to 'onwrite'
addMember: 'arguments' to 'onwrite'
addMember: 'caller' to 'onwrite'
addMember: 'prototype' to 'onwrite'
addMember: 'constructor' to 'prototype'
addMember: 'writecb' to '_writableState'
addMember: 'writelen' to '_writableState'
addMember: 'buffer' to '_writableState'
addMember: 'length' to 'buffer'
addMember: 'pendingcb' to '_writableState'
addMember: 'prefinished' to '_writableState'
addMember: 'writable' to 'owner'
addMember: 'allowHalfOpen' to 'owner'
addMember: 'destroyed' to 'owner'
addMember: 'errorEmitted' to 'owner'
addMember: 'bytesRead' to 'owner'
addMember: '_bytesDispatched' to 'owner'
addMember: '_writev' to 'owner'
addMember: '_pendingData' to 'owner'
addMember: '_pendingEncoding' to 'owner'
addMember: 'read' to 'owner'
addMember: '_type' to 'owner'
addMember: 'fd' to 'owner'
addMember: '_isStdio' to 'owner'
addMember: 'destroySoon' to 'owner'
addMember: 'length' to 'destroySoon'
addMember: 'name' to 'destroySoon'
addMember: 'arguments' to 'destroySoon'
addMember: 'caller' to 'destroySoon'
addMember: 'prototype' to 'destroySoon'
addMember: 'constructor' to 'prototype'
addMember: 'destroy' to 'owner'
addMember: 'length' to 'destroy'
addMember: 'name' to 'destroy'
addMember: 'arguments' to 'destroy'
addMember: 'caller' to 'destroy'
addMember: 'prototype' to 'destroy'
addMember: 'constructor' to 'prototype'
addMember: 'onread' to '_handle'
addMember: 'length' to 'onread'
addMember: 'name' to 'onread'
addMember: 'arguments' to 'onread'
addMember: 'caller' to 'onread'
addMember: 'prototype' to 'onread'
addMember: 'constructor' to 'prototype'
addMember: '_host' to '_stderr'
addMember: '_readableState' to '_stderr'
addMember: 'highWaterMark' to '_readableState'
addMember: 'buffer' to '_readableState'
addMember: 'length' to 'buffer'
addMember: 'length' to '_readableState'
addMember: 'pipes' to '_readableState'
addMember: 'pipesCount' to '_readableState'
addMember: 'flowing' to '_readableState'
addMember: 'ended' to '_readableState'
addMember: 'endEmitted' to '_readableState'
addMember: 'reading' to '_readableState'
addMember: 'sync' to '_readableState'
addMember: 'needReadable' to '_readableState'
addMember: 'emittedReadable' to '_readableState'
addMember: 'readableListening' to '_readableState'
addMember: 'objectMode' to '_readableState'
addMember: 'defaultEncoding' to '_readableState'
addMember: 'ranOut' to '_readableState'
addMember: 'awaitDrain' to '_readableState'
addMember: 'readingMore' to '_readableState'
addMember: 'decoder' to '_readableState'
addMember: 'encoding' to '_readableState'
addMember: 'readable' to '_stderr'
addMember: 'domain' to '_stderr'
addMember: '_events' to '_stderr'
addMember: 'end' to '_events'
addMember: 'length' to 'end'
addMember: 'name' to 'end'
addMember: 'arguments' to 'end'
addMember: 'caller' to 'end'
addMember: 'prototype' to 'end'
addMember: 'constructor' to 'prototype'
addMember: 'listener' to 'end'
addMember: 'length' to 'listener'
addMember: 'name' to 'listener'
addMember: 'arguments' to 'listener'
addMember: 'caller' to 'listener'
addMember: 'prototype' to 'listener'
addMember: 'constructor' to 'prototype'
addMember: 'finish' to '_events'
addMember: 'length' to 'finish'
addMember: 'name' to 'finish'
addMember: 'arguments' to 'finish'
addMember: 'caller' to 'finish'
addMember: 'prototype' to 'finish'
addMember: 'constructor' to 'prototype'
addMember: '_socketEnd' to '_events'
addMember: 'length' to '_socketEnd'
addMember: 'name' to '_socketEnd'
addMember: 'arguments' to '_socketEnd'
addMember: 'caller' to '_socketEnd'
addMember: 'prototype' to '_socketEnd'
addMember: 'constructor' to 'prototype'
addMember: '_maxListeners' to '_stderr'
addMember: '_writableState' to '_stderr'
addMember: 'highWaterMark' to '_writableState'
addMember: 'objectMode' to '_writableState'
addMember: 'needDrain' to '_writableState'
addMember: 'ending' to '_writableState'
addMember: 'ended' to '_writableState'
addMember: 'finished' to '_writableState'
addMember: 'decodeStrings' to '_writableState'
addMember: 'defaultEncoding' to '_writableState'
addMember: 'length' to '_writableState'
addMember: 'writing' to '_writableState'
addMember: 'corked' to '_writableState'
addMember: 'sync' to '_writableState'
addMember: 'bufferProcessing' to '_writableState'
addMember: 'onwrite' to '_writableState'
addMember: 'length' to 'onwrite'
addMember: 'name' to 'onwrite'
addMember: 'arguments' to 'onwrite'
addMember: 'caller' to 'onwrite'
addMember: 'prototype' to 'onwrite'
addMember: 'constructor' to 'prototype'
addMember: 'writecb' to '_writableState'
addMember: 'writelen' to '_writableState'
addMember: 'buffer' to '_writableState'
addMember: 'length' to 'buffer'
addMember: 'pendingcb' to '_writableState'
addMember: 'prefinished' to '_writableState'
addMember: 'writable' to '_stderr'
addMember: 'allowHalfOpen' to '_stderr'
addMember: 'destroyed' to '_stderr'
addMember: 'errorEmitted' to '_stderr'
addMember: 'bytesRead' to '_stderr'
addMember: '_bytesDispatched' to '_stderr'
addMember: '_writev' to '_stderr'
addMember: '_pendingData' to '_stderr'
addMember: '_pendingEncoding' to '_stderr'
addMember: 'read' to '_stderr'
addMember: '_type' to '_stderr'
addMember: 'fd' to '_stderr'
addMember: '_isStdio' to '_stderr'
addMember: 'destroySoon' to '_stderr'
addMember: 'length' to 'destroySoon'
addMember: 'name' to 'destroySoon'
addMember: 'arguments' to 'destroySoon'
addMember: 'caller' to 'destroySoon'
addMember: 'prototype' to 'destroySoon'
addMember: 'constructor' to 'prototype'
addMember: 'destroy' to '_stderr'
addMember: 'length' to 'destroy'
addMember: 'name' to 'destroy'
addMember: 'arguments' to 'destroy'
addMember: 'caller' to 'destroy'
addMember: 'prototype' to 'destroy'
addMember: 'constructor' to 'prototype'
addMember: '_times' to 'console'
addMember: 'log' to 'console'
addMember: 'info' to 'console'
addMember: 'warn' to 'console'
addMember: 'error' to 'console'
addMember: 'dir' to 'console'
addMember: 'time' to 'console'
addMember: 'timeEnd' to 'console'
addMember: 'trace' to 'console'
addMember: 'assert' to 'console'
addMember: 'Console' to 'console'
addMember: 'length' to 'Console'
addMember: 'name' to 'Console'
addMember: 'arguments' to 'Console'
addMember: 'caller' to 'Console'
addMember: 'prototype' to 'Console'
addMember: 'constructor' to 'prototype'
addMember: 'log' to 'prototype'
addMember: 'info' to 'prototype'
addMember: 'warn' to 'prototype'
addMember: 'error' to 'prototype'
addMember: 'dir' to 'prototype'
addMember: 'time' to 'prototype'
addMember: 'timeEnd' to 'prototype'
addMember: 'trace' to 'prototype'
addMember: 'assert' to 'prototype'
addMember: 'responseText' to 'jqxhr'
addMember: 'length' to 'parseInt'
addMember: 'name' to 'parseInt'
addMember: 'arguments' to 'parseInt'
addMember: 'caller' to 'parseInt'
addMember: 'data_callback' to 'xmlhttp'
addMember: 'data_callback' to 'this'
addMember: 'data_callback' to 'this'
addMember: 'XMLHttpRequest' to 'window'
addMember: 'ActiveXObject' to 'window'
addMember: 'uri' to 'this'

Producing js at /home/ltato/LiteScript_online_playground/playground/js

1 //Compiled by LiteScript compiler v0.6.3, source: /home/ltato/LiteScript_online_playground/playground/js/online.md
2 //Dependencies
3 //-------------
5 
6    //compiler import jQuery, Document
8 
9    //compiler import ace
11 
12    //compiler import httpGet, require
14 
15 //Setup Environment
16 //-----------------
18 
19 //emulate node's environment, global & 'process'
20 //for the LiteScript compiler
22 
23    var global = window;
25 
26    //append to object window
27         //properties
28             //process:
29            window.process={
30                exit: function (code){
31                    //throw new Error('exit code '+code)
32                    throw new Error('exit code ' + code);
33                }
34                };
35        
37 
38 //set compiler log messages to memory
40 
41    //import log from '../lib/log'
42    var log = require('./../lib/log');
43    log.options.storeMessages = true;
45 
46     //declare on Error
47         //controled, soft
49 
50 //import compiler
52 
53    //import LiteScript from '../lib/Compiler'
54    var LiteScript = require('./../lib/Compiler');
56 
58 
59 //Page Vars
60 //---------
62 
63    var 
64    CompareOrig_ed = undefined, 
65    CompareJs_ed = undefined, 
66    loadedFname = undefined, 
67    compileOptions = {extraComments: true}
68    ;
70 
71 //utility String protoype functions
72 //----------
74 
75    //append to class String
76        //shim method startsWith(s:string)
77        if (!String.prototype.startsWith)
78        String.prototype.startsWith = function(s){
79           return this.substr(0, s.length) === s;
80        };
82 
83        //shim method endsWith(s:string)
84        if (!String.prototype.endsWith)
85        String.prototype.endsWith = function(s){
86           return this.substr(-s.length) === s;
87        };
89 
90 //MAIN
91 //-----------
93 
94    //function OnLine_Main()
95    function OnLine_Main(){
97 
98        $("#version").text("v" + LiteScript.version);
100 
101        CompareOrig_ed = mkEditor("Compare-Lite");
102        CompareJs_ed = mkEditor("Compare-js");
104 
105        loadSample('Literate.lite.md');
106    };
108 
109    //end function
111 
113 
114    //function loadSample(fname,callback)
115    function loadSample(fname, callback){
117 
118        loadedFname = fname;
119        loadExample(fname, function (err, data){
120            //if err, return
121            if (err) {
122                return};
123            run();
124        });
125    };
127 
128    //function run
129    function run(){
131 
132        var liteSource = CompareOrig_ed.getValue();
134 
135         //clear
136         //syncEditors([CompareOrig_ed, CompareJs_ed], false); //un-sync
137         //CompareOrig_ed.setValue("");
138        CompareOrig_ed.resize(true);
139         //CompareJs_ed.setValue("");
140         //CompareJs_ed.resize(true);
142 
143        log.warning.count = 0; //clear
144        log.getMessages(); //clear
145         // compile LiteScript -> js
146        //try
147        try{
148            var compiled = LiteScript.compile(loadedFname, liteSource, compileOptions);
149        
150         }catch(e){
151            console.log(e.stack);
152            compiled = log.getMessages().join('\n');
153            compiled += '\n' + e.message;
154            //if not e.controled, compiled += '\n'+e.stack;
155            if (!(e.controled)) {
156                compiled += '\n' + e.stack};
157            log.messages = [];
158         };
160 
162 
163        //if log.warning.count
164        if (log.warning.count) {
165             //Show warnings
166            compiled = log.getMessages().join('\n') + compiled;
167        };
169 
171 
172        CompareJs_ed.setValue(compiled);
174 
175        var linesLite = CompareOrig_ed.getSession().getLength();
176        var linesJs = CompareJs_ed.getSession().getLength();
178 
179        //while (linesLite<linesJs)
180        while((linesLite < linesJs)){
181            addLines(' ', CompareOrig_ed);
182            linesLite++;
183        };//end loop
185 
186        //while (linesJs<linesLite)
187        while((linesJs < linesLite)){
188            addLines(' ', CompareJs_ed);
189            linesJs++;
190        };//end loop
192 
194 
195         //sync eds
196         //syncEditors([CompareOrig_ed, CompareJs_ed]);
198 
199        CompareOrig_ed.clearSelection();
200        CompareJs_ed.clearSelection();
202 
203        CompareOrig_ed.scrollToLine(0);
204        CompareJs_ed.scrollToLine(0);
205    };
207 
209 
210    //function loadExample(fileName:string, callback)
211    function loadExample(fileName, callback){
213 
214         //syncEditors([CompareOrig_ed, CompareJs_ed],false);
216 
217        CompareJs_ed.setValue("");
219 
220        CompareOrig_ed.setValue("Loading...");
221        CompareOrig_ed.resize(true);
223 
224        document.getElementById('status').textContent = fileName;
226 
227        $.ajax({url: 'examples/html/' + fileName.replace(/\.lite\.md$/, ".html"), success: function (data){
229 
230                    data = data.replace('\r', ''); // remove CR from windows-edited files
232 
233                    CompareOrig_ed.setValue(data);
235 
236                    CompareOrig_ed.clearSelection();
237                    CompareOrig_ed.scrollToLine(0);
239 
240                    //if callback, callback(null,data);
241                    if (callback) {
242                        callback(null, data)};
243            }, error: function (jqxhr, textStatus, errorThrown){
244                     //global declare alert
245                     //declare valid jqxhr.responseText
246                    alert(jqxhr.responseText);
248 
249                    //if callback, callback(jqxhr);
250                    if (callback) {
251                        callback(jqxhr)};
252            }});
253    };
256 //        httpGet fileName, function(err,data:string)
258 //                if err and no data, data=err.toString();
259 //                data = data.replace('\r',''); // remove CR from windows-edited files
261 //                CompareOrig_ed.setValue(data);
263 //                CompareOrig_ed.clearSelection();
264 //                CompareOrig_ed.scrollToLine(0);
266 //                if callback, callback(err,data);
268 
269    //function mkEditor(divName) returns ace.Editor
270    function mkEditor(divName){
272 
273        var editor = ace.edit(divName);
274        editor.setTheme("ace/theme/monokai");
275        editor.setShowPrintMargin(false);
276        editor.setFontSize(16);
278 
279        var session = editor.getSession();
280        session.setUseWorker(false);
281        session.setMode("ace/mode/javascript");
282        return editor;
283    };
285 
287 
288    //function addLines(lineArray, ed:ace.Editor)
289    function addLines(lineArray, ed){
291 
292            //if no lineArray, return;
293            if (!lineArray) {
294                return};
296 
297            //if  type of lineArray is 'string'
298            if (typeof lineArray === 'string') {
299                var a = [];
300                a[0] = lineArray;
301                lineArray = a;
302            };
304 
306 
307             //console.log(lineArray);
308            ed.session.doc.insertLines(ed.session.doc.getLength() - 1, lineArray);
309            ed.resize(true);
310    };
312 
314 
315    //function syncEditors(aceEditors: ace.Editor array, onOff)
316    function syncEditors(aceEditors, onOff){
318 
319 //Sync side-by-side ace editors scrolling
320 //from http://codepen.io/ByScripts/pen/fzucK
322 
323        //for n=0 while n<aceEditors.length
324        for( var n=0; n < aceEditors.length; n++) {
325            var session1 = aceEditors[n].session;
326            //if onOff is off //disconnect
327            if (onOff === false) { //disconnect
328                session1.removeAllListeners('changeScrollTop');
329                session1.removeAllListeners('changeScrollLeft');
330            }
331            
332            else {
334 
335                var session2 = aceEditors[n === aceEditors.length - 1 ? 0 : n + 1].session;
337 
338                session1.on('changeScrollTop', function (scroll){
339                    session2.setScrollTop(parseInt(scroll) || 0);
340                  });
342 
344 
345 //session1.on('changeScrollLeft',
346 //                  function(scroll) {
347 //                    session2.setScrollLeft(parseInt(scroll) || 0)
348 //                  }
349 //                );
350 //    
351                session2.on('changeScrollTop', function (scroll){
352                    session1.setScrollTop(parseInt(scroll) || 0);
353                  });
354            };
355        };//end for n
356        
357    };
359 
361 
362 //session2.on('changeScrollLeft',
363 //                  function(scroll) {
364 //                    session1.setScrollLeft(parseInt(scroll) || 0)
365 //                  }
366 //                );
367 //    
369 
371 
373 
375 //# sourceMappingURL=online.js.map
line: 5
column: 0 -> 3 4
line: 8
column: 0 -> 5 4
line: 11
column: 0 -> 7 4
line: 22
column: 0 -> 15 4
line: 26
column: 0 -> 17 4
column: 3 -> 18 8
line: 31
column: 0 -> 21 20
line: 32
column: 0 -> 21 0
line: 35
column: 0 -> 18 0
line: 41
column: 0 -> 25 4
line: 42
column: 0 -> 26 4
line: 45
column: 0 -> 28 4
line: 53
column: 0 -> 33 4
line: 62
column: 0 -> 39 4
line: 75
column: 0 -> 50 4
line: 76
column: 0 -> 51 8
line: 78
column: 0 -> 52 11
line: 79
column: 0 -> 52 0
line: 83
column: 0 -> 54 8
line: 85
column: 0 -> 55 11
line: 86
column: 0 -> 55 0
line: 87
column: 0 -> 51 0
line: 94
column: 0 -> 60 4
line: 97
column: 0 -> 62 8
line: 100
column: 0 -> 64 8
line: 101
column: 0 -> 65 8
line: 104
column: 0 -> 67 8
line: 105
column: 0 -> 62 0
line: 109
column: 0 -> 69 4
line: 114
column: 0 -> 72 4
line: 117
column: 0 -> 74 8
line: 118
column: 0 -> 75 8
line: 120
column: 0 -> 76 12
line: 122
column: 0 -> 77 12
line: 123
column: 0 -> 76 0
line: 124
column: 0 -> 74 0
line: 128
column: 0 -> 79 4
line: 131
column: 0 -> 81 8
line: 137
column: 0 -> 86 8
line: 142
column: 0 -> 90 8
line: 143
column: 0 -> 91 8
line: 146
column: 0 -> 93 8
line: 147
column: 0 -> 94 12
line: 148
column: 0 -> 94 0
line: 150
column: 0 -> 96 12
line: 151
column: 0 -> 97 12
line: 152
column: 0 -> 98 12
line: 154
column: 0 -> 99 12
line: 156
column: 0 -> 100 12
line: 157
column: 0 -> 96 0
line: 163
column: 0 -> 103 8
line: 165
column: 0 -> 105 12
line: 166
column: 0 -> 105 0
line: 171
column: 0 -> 108 8
line: 174
column: 0 -> 110 8
line: 175
column: 0 -> 111 8
line: 179
column: 0 -> 113 8
line: 180
column: 0 -> 114 12
line: 181
column: 0 -> 115 12
line: 182
column: 0 -> 114 0
line: 186
column: 0 -> 117 8
line: 187
column: 0 -> 118 12
line: 188
column: 0 -> 119 12
line: 189
column: 0 -> 118 0
line: 198
column: 0 -> 125 8
line: 199
column: 0 -> 126 8
line: 202
column: 0 -> 128 8
line: 203
column: 0 -> 129 8
line: 204
column: 0 -> 81 0
line: 210
column: 0 -> 132 4
line: 216
column: 0 -> 136 8
line: 219
column: 0 -> 138 8
line: 220
column: 0 -> 139 8
line: 223
column: 0 -> 141 8
line: 226
column: 0 -> 143 8
line: 229
column: 0 -> 149 20
line: 232
column: 0 -> 151 20
line: 235
column: 0 -> 153 20
line: 236
column: 0 -> 154 20
line: 240
column: 0 -> 156 20
line: 242
column: 0 -> 149 0
line: 243
column: 0 -> 159 20
line: 244
column: 0 -> 160 20
line: 245
column: 0 -> 161 20
line: 249
column: 0 -> 163 20
line: 251
column: 0 -> 159 0
line: 252
column: 0 -> 136 0
line: 269
column: 0 -> 180 4
line: 272
column: 0 -> 182 8
line: 273
column: 0 -> 183 8
line: 274
column: 0 -> 184 8
line: 275
column: 0 -> 185 8
line: 278
column: 0 -> 187 8
line: 279
column: 0 -> 188 8
line: 280
column: 0 -> 189 8
line: 281
column: 0 -> 190 8
line: 282
column: 0 -> 182 0
line: 288
column: 0 -> 193 4
line: 292
column: 0 -> 195 12
line: 297
column: 0 -> 197 12
line: 298
column: 0 -> 198 16
line: 299
column: 0 -> 199 16
line: 300
column: 0 -> 200 16
line: 301
column: 0 -> 198 0
line: 307
column: 0 -> 204 12
line: 308
column: 0 -> 205 12
line: 309
column: 0 -> 195 0
line: 315
column: 0 -> 208 8
line: 323
column: 0 -> 213 8
line: 324
column: 0 -> 214 12
line: 326
column: 0 -> 215 12
line: 327
column: 0 -> 216 16
line: 328
column: 0 -> 217 16
line: 329
column: 0 -> 216 0
line: 334
column: 0 -> 221 16
line: 337
column: 0 -> 223 16
line: 338
column: 0 -> 225 20
line: 339
column: 0 -> 225 0
line: 350
column: 0 -> 234 16
line: 351
column: 0 -> 236 20
line: 352
column: 0 -> 236 0
line: 353
column: 0 -> 221 0
line: 354
column: 0 -> 214 0
line: 356
column: 0 -> 213 0
[32m[OK] 292 lines -> online.js [39;49m
1 //Compiled by LiteScript compiler v0.6.3, source: /home/ltato/LiteScript_online_playground/playground/js/httpGet.lite.md
3 
4    //public function httpGet(url, callback)
5    function httpGet(url, callback){
7 
8        //if typeof callback isnt 'function'
9        if (typeof callback !== 'function') {
10            //fail with '2nd parameter should be callback fn(err,data)'
11            throw new Error('2nd parameter should be callback fn(err,data)');
12        };
14 
15         //ajax get file
16        var xmlhttp = create_HttpRequest();
17         //declare valid xmlhttp.data_callback
18        xmlhttp.data_callback = callback; //store callback here
19        xmlhttp.onload = Local_OnLoad; //default, next fn
20        xmlhttp.onerror = Local_OnError;
21         //xmlhttp.setRequestHeader('content-type', 'applicattion/json');
22        console.log('GET', url);
23        xmlhttp.open('GET', url, true);
24        xmlhttp.send();
25    };
27 
29 
30    //function Local_OnLoad()
31    function Local_OnLoad(){
32         //var stat=document.getElementById('status');
33         //if (stat) stat.textContent='ready:'+this.readyState;
34         //declare this:XMLHttpRequest
35         //declare valid this.data_callback
36        //if this.readyState is 4
37        if (this.readyState === 4) {
38             //if (stat) stat.textContent='status:'+this.status;
39            //if this.status isnt 200
40            if (this.status !== 200) {
41                var errMsg = 'Err ' + this.status + ': ' + this.statusText;
42                var stat = document.getElementById('status');
43                //if stat, stat.textContent=errMsg;
44                if (stat) {
45                    stat.textContent = errMsg};
46                this.data_callback(new Error(errMsg), this.responseText);
47            }
48            
49            else {
50                this.data_callback(null, this.responseText);
51            };
52        };
53    };
55 
56    //function Local_OnError(e)
57    function Local_OnError(e){
58         //declare valid this.data_callback
59        this.data_callback(new Error('Server not responding'));
60    };
62 
64 
65    //function create_HttpRequest() returns XMLHttpRequest
66    function create_HttpRequest(){
68 
69        var ref = null;
71 
72         //declare valid window.XMLHttpRequest
73         //declare valid window.ActiveXObject
75 
76        //if window.XMLHttpRequest
77        if (window.XMLHttpRequest) {
78            ref = new window.XMLHttpRequest();
79        }
80        
81        else if ((window.ActiveXObject)) { // Older IE.
82            ref = new window.ActiveXObject("MSXML2.XMLHTTP.3.0");
83        };
85 
86        //if no ref, fail with 'Failure to create XMLHttpRequest';
87        if (!ref) {
88            throw new Error('Failure to create XMLHttpRequest')};
89        return ref;
90    };
92 
94 
96 //# sourceMappingURL=httpGet.js.map
line: 4
column: 0 -> 1 4
line: 8
column: 0 -> 3 8
line: 10
column: 0 -> 4 12
line: 11
column: 0 -> 4 0
line: 15
column: 0 -> 7 8
line: 16
column: 0 -> 8 8
line: 17
column: 0 -> 9 8
line: 18
column: 0 -> 10 8
line: 19
column: 0 -> 11 8
line: 21
column: 0 -> 13 8
line: 22
column: 0 -> 14 8
line: 23
column: 0 -> 15 8
line: 24
column: 0 -> 3 0
line: 30
column: 0 -> 18 4
line: 33
column: 0 -> 21 8
line: 34
column: 0 -> 22 8
line: 36
column: 0 -> 23 8
line: 39
column: 0 -> 25 12
line: 40
column: 0 -> 26 16
line: 41
column: 0 -> 27 16
line: 43
column: 0 -> 28 16
line: 45
column: 0 -> 29 16
line: 46
column: 0 -> 26 0
line: 49
column: 0 -> 32 16
line: 50
column: 0 -> 32 0
line: 51
column: 0 -> 25 0
line: 52
column: 0 -> 21 0
line: 56
column: 0 -> 34 4
line: 57
column: 0 -> 35 8
line: 58
column: 0 -> 36 8
line: 59
column: 0 -> 35 0
line: 65
column: 0 -> 39 4
line: 68
column: 0 -> 41 8
line: 71
column: 0 -> 43 8
line: 72
column: 0 -> 44 8
line: 76
column: 0 -> 46 8
line: 77
column: 0 -> 47 12
line: 78
column: 0 -> 47 0
line: 81
column: 0 -> 49 12
line: 82
column: 0 -> 49 0
line: 86
column: 0 -> 51 8
line: 88
column: 0 -> 52 8
line: 89
column: 0 -> 41 0
[32m[OK] 81 lines -> httpGet.js [39;49m
1 //Compiled by LiteScript compiler v0.6.3, source: /home/ltato/LiteScript_online_playground/playground/js/require.lite.md
2 ///- simplified REQUIRE
3 // equivalent -for the borwser- to node's 'require'
4 //  http://github.com/luciotato
6 
7    //public function require(url)
8    function require(url){
10 
11         //declare valid this.uri
13 
14        //if no this.uri #called from online.js in main web page
15        if (!this.uri) {// #called from online.js in main web page
16             //# remove ../ from ../lib, since HTTP GET is relative from host root
17             //# not from online.js location (/js/online.js)
18            url = url.slice(3);
19        }
20        
21        else {
23 
24            //if url.slice(0,2) is './'
25            if (url.slice(0, 2) === './') {
26                var caller = this.uri;
27                var cwd = caller.slice(0, caller.lastIndexOf('/') + 1);
28                url = cwd + url.slice(2);
29            }
30            
31            else if ((url.slice(0, 2) === '/')) {
32                //do nothing
33                null;
34            }
35            
36            else {
37                url = require.globalPath + url;
38            };
39        };
41 
42 //add js suffix it it is not there
44 
45        //if url.toLowerCase().substr(-3) !== '.js', url+='.js';
46        if (url.toLowerCase().substr(-3) !== '.js') {
47            url += '.js'};
49 
50        //if no require.cache, require.cache={}; //init cache
51        if (!require.cache) {
52            require.cache = {}};
54 
55        var cacheName = 'module:' + url;
56        var requiredModule = require.cache[cacheName]; //get from cache
57        //if requiredModule
58        if (requiredModule) {
59            //do nothing //console.log('CACHED',url);
60            null; //console.log('CACHED',url);
61        }
62        
63        else {
64                console.log('REQUIRE', url);
65                //try
66                try{
67                    var moduleExports = {};
68                    var X = new XMLHttpRequest();
69                    X.open("GET", url, 0); // sync
70                    X.send();
71                    //if X.status and X.status isnt 200, fail with X.statusText
72                    if (X.status && X.status !== 200) {
73                        throw new Error(X.statusText)};
74                    var source = X.responseText;
76 
77 //fix (if saved form for Chrome Dev Tools)
79 
80                    //if source.substr(0,10) is "(function("
81                    if (source.substr(0, 10) === "(function(") {
82                        var moduleStart = source.indexOf('{');
83                        var moduleEnd = source.lastIndexOf('})');
84                        var CDTcomment = source.indexOf('//@ ');
85                        //if CDTcomment>-1 and CDTcomment<moduleStart+6, moduleStart = source.indexOf('\n',CDTcomment);
86                        if (CDTcomment > -1 && CDTcomment < moduleStart + 6) {
87                            moduleStart = source.indexOf('\n', CDTcomment)};
88                        source = source.slice(moduleStart + 1, moduleEnd - 1);
89                    };
91 
92 //fix, add comment to show source on Chrome Dev Tools
94 
95                    source = "//@ sourceURL=" + url + "\n" + source;
97 
98                     //------
99                    requiredModule = {id: url, uri: url, exports: moduleExports}; //according to the modules 1.1 standard
101 
102                     //early cache to avoid circular requires
103                    require.cache[cacheName] = requiredModule;
104                    var requireBinded = require.bind(requiredModule);
105                    var anonFn = new Function("require", "exports", "module", source); //create a Fn with module code, and 3 params: require, exports & module
106                    anonFn(requireBinded, moduleExports, requiredModule); // call the Fn, Execute the module
107                
108                }catch(err){
109                    //fail with "Error loading module #{url}: #{err}"
110                    throw new Error("Error loading module " + url + ": " + err);
111                };
112        };
114 
115         //declare valid requiredModule.exports
116        return requiredModule.exports; //require returns object exported by module
117    };
119 
121 
122 //When required module in node.js does not starts with ./ or .., node.js starts looking
123 //for the module in ./node_modules, then ../../node_modules... then NODES_PATH, etc.
124 //If you make a require() from the browser and required file does not starts with ./ or ..
125 //this require() will prepend *require.globalPath* to try to get the resource.
126 //Default is 'lib/'
128 
129    //append to namespace require
130         //properties
131             //cache
132             //globalPath = 'lib/' //default for node.js node_modules global search
133            require.globalPath='lib/';
134        
135 
137 
139 
140 ///- END REQUIRE FN
142 
144 
146 //# sourceMappingURL=require.js.map
line: 7
column: 0 -> 4 4
line: 10
column: 0 -> 6 8
line: 14
column: 0 -> 8 8
line: 17
column: 0 -> 11 12
line: 18
column: 0 -> 11 0
line: 24
column: 0 -> 15 12
line: 25
column: 0 -> 16 16
line: 26
column: 0 -> 17 16
line: 27
column: 0 -> 18 16
line: 28
column: 0 -> 16 0
line: 32
column: 0 -> 21 16
line: 33
column: 0 -> 21 0
line: 36
column: 0 -> 24 16
line: 37
column: 0 -> 24 0
line: 38
column: 0 -> 15 0
line: 45
column: 0 -> 28 8
line: 50
column: 0 -> 30 8
line: 54
column: 0 -> 32 8
line: 55
column: 0 -> 33 8
line: 57
column: 0 -> 34 8
line: 59
column: 0 -> 35 12
line: 60
column: 0 -> 35 0
line: 63
column: 0 -> 38 16
line: 65
column: 0 -> 39 16
line: 66
column: 0 -> 40 20
line: 67
column: 0 -> 41 20
line: 68
column: 0 -> 42 20
line: 69
column: 0 -> 43 20
line: 71
column: 0 -> 44 20
line: 73
column: 0 -> 45 20
line: 80
column: 0 -> 49 20
line: 81
column: 0 -> 50 24
line: 82
column: 0 -> 51 24
line: 83
column: 0 -> 52 24
line: 85
column: 0 -> 53 24
line: 87
column: 0 -> 54 24
line: 88
column: 0 -> 50 0
line: 94
column: 0 -> 58 20
line: 98
column: 0 -> 61 20
line: 102
column: 0 -> 64 20
line: 103
column: 0 -> 65 20
line: 104
column: 0 -> 66 20
line: 105
column: 0 -> 67 20
line: 106
column: 0 -> 40 0
line: 109
column: 0 -> 71 20
line: 110
column: 0 -> 71 0
line: 111
column: 0 -> 38 0
line: 114
column: 0 -> 73 8
line: 115
column: 0 -> 74 8
line: 116
column: 0 -> 6 0
line: 129
column: 0 -> 83 4
column: 3 -> 84 8
line: 134
column: 0 -> 84 0
[32m[OK] 123 lines -> require.js [39;49m
